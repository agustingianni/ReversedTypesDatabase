/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'kernel'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

/* 1 */
struct mach_header_64
{
  uint32_t magic;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
  uint32_t filetype;
  uint32_t ncmds;
  uint32_t sizeofcmds;
  uint32_t flags;
  uint32_t reserved;
};

/* 2 */
typedef unsigned int uint32_t;

/* 3 */
typedef integer_t cpu_type_t;

/* 4 */
typedef int integer_t;

/* 5 */
typedef integer_t cpu_subtype_t;

/* 6 */
struct in6_addr
{
  in6_addr::$330434928707C706902F20BE7BA89EB4 __u6_addr;
};

/* 7 */
union in6_addr::$330434928707C706902F20BE7BA89EB4
{
  __uint8_t __u6_addr8[16];
  __uint16_t __u6_addr16[8];
  __uint32_t __u6_addr32[4];
};

/* 8 */
typedef unsigned __int8 __uint8_t;

/* 9 */
typedef unsigned __int16 __uint16_t;

/* 10 */
typedef unsigned int __uint32_t;

/* 11 */
typedef $B8B9B85B971E3DBFC31707A9282CDA9E NDR_record_t;

/* 12 */
struct $B8B9B85B971E3DBFC31707A9282CDA9E
{
  unsigned __int8 mig_vers;
  unsigned __int8 if_vers;
  unsigned __int8 reserved1;
  unsigned __int8 mig_encoding;
  unsigned __int8 int_rep;
  unsigned __int8 char_rep;
  unsigned __int8 float_rep;
  unsigned __int8 reserved2;
};

/* 13 */
typedef $0BA82F063C392BF02AF0AA599B603A12 security_token_t;

/* 14 */
#pragma pack(push, 4)
struct $0BA82F063C392BF02AF0AA599B603A12
{
  unsigned int val[2];
};
#pragma pack(pop)

/* 15 */
struct loadavg
{
  fixpt_t ldavg[3];
  __int64 fscale;
};

/* 16 */
typedef u_int32_t fixpt_t;

/* 17 */
typedef unsigned int u_int32_t;

/* 18 */
typedef $0B20F48E2CD2D778BD1F216BA81B71CE audit_token_t;

/* 19 */
#pragma pack(push, 4)
struct $0B20F48E2CD2D778BD1F216BA81B71CE
{
  unsigned int val[8];
};
#pragma pack(pop)

/* 20 */
struct __attribute__((aligned(8))) segment_command_64
{
  uint32_t cmd;
  uint32_t cmdsize;
  char segname[16];
  uint64_t vmaddr;
  uint64_t vmsize;
  uint64_t fileoff;
  uint64_t filesize;
  vm_prot_t maxprot;
  vm_prot_t initprot;
  uint32_t nsects;
  uint32_t flags;
};

/* 21 */
typedef unsigned __int64 uint64_t;

/* 22 */
typedef int vm_prot_t;

/* 23 */
struct __attribute__((aligned(8))) section_64
{
  char sectname[16];
  char segname[16];
  uint64_t addr;
  uint64_t size;
  uint32_t offset;
  uint32_t align;
  uint32_t reloff;
  uint32_t nreloc;
  uint32_t flags;
  uint32_t reserved1;
  uint32_t reserved2;
  uint32_t reserved3;
};

/* 24 */
struct symtab_command
{
  uint32_t cmd;
  uint32_t cmdsize;
  uint32_t symoff;
  uint32_t nsyms;
  uint32_t stroff;
  uint32_t strsize;
};

/* 25 */
struct dysymtab_command
{
  uint32_t cmd;
  uint32_t cmdsize;
  uint32_t ilocalsym;
  uint32_t nlocalsym;
  uint32_t iextdefsym;
  uint32_t nextdefsym;
  uint32_t iundefsym;
  uint32_t nundefsym;
  uint32_t tocoff;
  uint32_t ntoc;
  uint32_t modtaboff;
  uint32_t nmodtab;
  uint32_t extrefsymoff;
  uint32_t nextrefsyms;
  uint32_t indirectsymoff;
  uint32_t nindirectsyms;
  uint32_t extreloff;
  uint32_t nextrel;
  uint32_t locreloff;
  uint32_t nlocrel;
};

/* 26 */
struct uuid_command
{
  uint32_t cmd;
  uint32_t cmdsize;
  uint8_t uuid[16];
};

/* 27 */
typedef unsigned __int8 uint8_t;

/* 28 */
struct source_version_command
{
  uint32_t cmd;
  uint32_t cmdsize;
  uint64_t version;
};

/* 29 */
struct linkedit_data_command
{
  uint32_t cmd;
  uint32_t cmdsize;
  uint32_t dataoff;
  uint32_t datasize;
};

/* 30 */
typedef uint64_t_0 pml4_entry_t;

/* 31 */
typedef u_int64_t uint64_t_0;

/* 32 */
typedef unsigned __int64 u_int64_t;

/* 33 */
typedef unsigned __int64 sizetype;

/* 34 */
typedef uint64_t_0 pdpt_entry_t;

/* 35 */
typedef uint64_t_0 pd_entry_t;

/* 36 */
typedef unsigned __int64 uintptr_t;

/* 37 */
typedef unsigned __int64 size_t;

/* 38 */
typedef u_int32_t uint32_t_0;

/* 39 */
typedef int64_t dtrace_optval_t;

/* 40 */
typedef __int64 int64_t;

/* 41 */
typedef __darwin_size_t size_t_0;

/* 42 */
typedef unsigned __int64 __darwin_size_t;

/* 43 */
typedef int64_t hrtime_t;

/* 44 */
struct sysctl_oid
{
  sysctl_oid_list *oid_parent;
  sysctl_oid::$12BE62502C2C38820B3EBE38403A9577 oid_link;
  int oid_number;
  int oid_kind;
  void *oid_arg1;
  int oid_arg2;
  const char *oid_name;
  int (*oid_handler)(sysctl_oid *, void *, int, sysctl_req *);
  const char *oid_fmt;
  const char *oid_descr;
  int oid_version;
  int oid_refcnt;
};

/* 45 */
struct sysctl_oid_list
{
  sysctl_oid *slh_first;
};

/* 46 */
struct sysctl_oid::$12BE62502C2C38820B3EBE38403A9577
{
  sysctl_oid *sle_next;
};

/* 47 */
struct sysctl_req
{
  proc *p;
  int lock;
  user_addr_t oldptr;
  size_t_0 oldlen;
  size_t_0 oldidx;
  int (*oldfunc)(sysctl_req *, const void *, size_t_0);
  user_addr_t newptr;
  size_t_0 newlen;
  size_t_0 newidx;
  int (*newfunc)(sysctl_req *, void *, size_t_0);
};

/* 48 */
struct proc
{
  proc::$E6D31D07B27AA184FF30538F34F0D91C p_list;
  void *task;
  proc *p_pptr;
  pid_t p_ppid;
  pid_t p_pgrpid;
  uid_t p_uid;
  gid_t p_gid;
  uid_t p_ruid;
  gid_t p_rgid;
  uid_t p_svuid;
  gid_t p_svgid;
  uint64_t_0 p_uniqueid;
  uint64_t_0 p_puniqueid;
  lck_mtx_t p_mlock;
  pid_t p_pid;
  char p_stat;
  char p_shutdownstate;
  char p_kdebug;
  char p_btrace;
  proc::$E6D31D07B27AA184FF30538F34F0D91C p_pglist;
  proc::$E6D31D07B27AA184FF30538F34F0D91C p_sibling;
  proc::$1883103594F6EC6683B4E2448DAE2E8F p_children;
  proc::$1D3E450C18944DBC95A59288B453C62E p_uthlist;
  proc::$E6D31D07B27AA184FF30538F34F0D91C p_hash;
  proc::$1D3E450C18944DBC95A59288B453C62E p_evlist;
  lck_mtx_t p_fdmlock;
  lck_mtx_t p_ucred_mlock;
  kauth_cred_t p_ucred;
  filedesc *p_fd;
  pstats *p_stats;
  plimit *p_limit;
  sigacts *p_sigacts;
  lck_spin_t p_slock;
  plimit *p_olimit;
  int p_siglist;
  unsigned int p_flag;
  unsigned int p_lflag;
  unsigned int p_listflag;
  unsigned int p_ladvflag;
  int p_refcount;
  int p_childrencnt;
  int p_parentref;
  pid_t p_oppid;
  u_int p_xstat;
  itimerval p_realtimer;
  timeval p_rtime;
  itimerval p_vtimer_user;
  itimerval p_vtimer_prof;
  timeval p_rlim_cpu;
  int p_debugger;
  boolean_t sigwait;
  void *sigwait_thread;
  void *exit_thread;
  void *p_vforkact;
  int p_vforkcnt;
  int p_fpdrainwait;
  pid_t si_pid;
  u_int si_status;
  u_int si_code;
  uid_t si_uid;
  void *vm_shm;
  user_addr_t p_dtrace_argv;
  user_addr_t p_dtrace_envp;
  lck_mtx_t p_dtrace_sprlock;
  uint8_t_0 p_dtrace_stop;
  int p_dtrace_probes;
  u_int p_dtrace_count;
  dtrace_ptss_page *p_dtrace_ptss_pages;
  dtrace_ptss_page_entry *p_dtrace_ptss_free_list;
  dtrace_helpers *p_dtrace_helpers;
  dof_ioctl_data *p_dtrace_lazy_dofs;
  u_int p_argslen;
  int p_argc;
  user_addr_t user_stack;
  vnode *p_textvp;
  off_t p_textoff;
  sigset_t p_sigmask;
  sigset_t p_sigignore;
  sigset_t p_sigcatch;
  u_char p_priority;
  u_char p_resv0;
  char p_nice;
  u_char p_resv1;
  command_t p_comm;
  proc_name_t p_name;
  uint8_t_0 p_xhighbits;
  pid_t p_contproc;
  pgrp *p_pgrp;
  uint32_t_0 p_csflags;
  uint32_t_0 p_pcaction;
  uint8_t_0 p_uuid[16];
  cpu_type_t p_cputype;
  cpu_subtype_t p_cpusubtype;
  int p_aio_total_count;
  int p_aio_active_count;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_activeq;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_doneq;
  klist p_klist;
  rusage_superset *p_ru;
  thread_t p_signalholder;
  thread_t p_transholder;
  int p_sigwaitcnt;
  u_short p_acflag;
  volatile u_short p_vfs_iopolicy;
  user_addr_t p_threadstart;
  user_addr_t p_wqthread;
  int p_pthsize;
  uint32_t_0 p_pth_tsd_offset;
  user_addr_t p_stack_addr_hint;
  workqueue *p_wqptr;
  timeval p_start;
  void *p_rcall;
  int p_ractive;
  int p_idversion;
  void *p_pthhash;
  volatile uint64_t_0 was_throttled;
  volatile uint64_t_0 did_throttle;
  uint64_t_0 p_dispatchqueue_offset;
  uint64_t_0 p_dispatchqueue_serialno_offset;
  uint64_t_0 p_return_to_kernel_offset;
  uint64_t_0 p_mach_thread_self_offset;
  timeval vm_pressure_last_notify_tstamp;
  proc::$82586C278305FE0F61B9447E14D7BB30 p_memstat_list;
  uint32_t_0 p_memstat_state;
  int32_t p_memstat_effectivepriority;
  int32_t p_memstat_requestedpriority;
  uint32_t_0 p_memstat_dirty;
  uint64_t_0 p_memstat_userdata;
  uint64_t_0 p_memstat_idledeadline;
  uint64_t_0 p_memstat_idle_start;
  uint64_t_0 p_memstat_idle_delta;
  int32_t p_memstat_memlimit;
  int32_t p_memstat_memlimit_active;
  int32_t p_memstat_memlimit_inactive;
  pid_t p_responsible_pid;
  uint32_t_0 p_user_faults;
  os_reason *p_exit_reason;
  uint64_t_0 p_user_data;
};

/* 49 */
struct proc::$E6D31D07B27AA184FF30538F34F0D91C
{
  proc *le_next;
  proc **le_prev;
};

/* 50 */
typedef __darwin_pid_t pid_t;

/* 51 */
typedef __int32_t __darwin_pid_t;

/* 52 */
typedef int __int32_t;

/* 53 */
typedef __darwin_uid_t uid_t;

/* 54 */
typedef __uint32_t __darwin_uid_t;

/* 55 */
typedef __darwin_gid_t gid_t;

/* 56 */
typedef __uint32_t __darwin_gid_t;

/* 57 */
struct lck_mtx_t
{
  unsigned __int64 opaque[2];
};

/* 58 */
struct proc::$1883103594F6EC6683B4E2448DAE2E8F
{
  proc *lh_first;
};

/* 59 */
struct uthread
{
  u_int64_t uu_arg[8];
  int uu_rval[2];
  char uu_cursig;
  unsigned int syscall_code;
  int uu_exception;
  mach_exception_code_t uu_code;
  mach_exception_subcode_t uu_subcode;
  uthread::$50367DB53BDFBC6199F4EECF93865EAB uu_save;
  _select uu_select;
  int (*uu_continuation)(int);
  int uu_pri;
  int uu_timo;
  caddr_t uu_wchan;
  const char *uu_wmesg;
  proc *uu_proc;
  thread_t uu_thread;
  void *uu_userstate;
  waitq_set *uu_wqset;
  size_t_0 uu_wqstate_sz;
  int uu_flag;
  sigset_t uu_siglist;
  sigset_t uu_sigwait;
  sigset_t uu_sigmask;
  sigset_t uu_oldmask;
  sigset_t uu_vforkmask;
  vfs_context uu_context;
  uthread::$24A5DE8343EC3B8BE21CE941EC8A3CBD uu_list;
  kaudit_record *uu_ar;
  task *uu_aio_task;
  lck_mtx_t *uu_mtx;
  lck_spin_t uu_rethrottle_lock;
  uthread::$24A5DE8343EC3B8BE21CE941EC8A3CBD uu_throttlelist;
  void *uu_throttle_info;
  int uu_on_throttlelist;
  int uu_lowpri_window;
  unsigned __int32 uu_was_rethrottled : 1;
  unsigned __int32 uu_is_throttled : 1;
  unsigned __int32 uu_throttle_bc : 1;
  unsigned __int32 uu_throttle_unused : 29;
  u_int32_t uu_network_marks;
  kern_sigaltstack uu_sigstk;
  vnode_t uu_vreclaims;
  vnode_t uu_cdir;
  int uu_dupfd;
  int uu_defer_reclaims;
  kqrequest *uu_kqr_bound;
  uthread::$24A5DE8343EC3B8BE21CE941EC8A3CBD uu_workq_entry;
  mach_vm_offset_t uu_workq_stackaddr;
  mach_port_name_t uu_workq_thport;
  uu_workq_policy uu_workq_pri;
  uint8_t_0 uu_workq_flags;
  kq_index_t uu_kqueue_override;
  int uu_proc_refcount;
  uint32_t_0 t_dtrace_errno;
  siginfo_t t_dtrace_siginfo;
  uint64_t_0 t_dtrace_resumepid;
  uint8_t_0 t_dtrace_stop;
  uint8_t_0 t_dtrace_sig;
  __tdu _tdu;
  user_addr_t t_dtrace_pc;
  user_addr_t t_dtrace_npc;
  user_addr_t t_dtrace_scrpc;
  user_addr_t t_dtrace_astpc;
  dtrace_ptss_page_entry *t_dtrace_scratch;
  uint64_t_0 t_dtrace_regv;
  void *t_dtrace_syscall_args;
  char *pth_name;
  doc_tombstone *t_tombstone;
  os_reason *uu_exit_reason;
};

/* 60 */
typedef mach_exception_data_type_t mach_exception_code_t;

/* 61 */
typedef int64_t mach_exception_data_type_t;

/* 62 */
typedef mach_exception_data_type_t mach_exception_subcode_t;

/* 63 */
union uthread::$50367DB53BDFBC6199F4EECF93865EAB
{
  _select_data uus_select_data;
  _kqueue_scan uus_kqueue_scan;
  _kevent uus_kevent;
  _kevent_register uus_kevent_register;
  _kauth uus_kauth;
  ksyn_waitq_element uus_kwe;
  _waitid_data uus_waitid_data;
  _wait4_data uus_wait4_data;
  _workq_park_data uus_workq_park_data;
  _ulock_wait_data uus_ulock_wait_data;
};

/* 64 */
struct _select_data
{
  u_int64_t abstime;
  uint64_t_0 *wqp;
  int count;
  select_nocancel_args *args;
  int32_t *retval;
};

/* 65 */
struct select_nocancel_args
{
  int nd;
  char nd_r_[4];
  user_addr_t in;
  user_addr_t ou;
  user_addr_t ex;
  user_addr_t tv;
  char tv_r_[];
};

/* 66 */
typedef int int32_t;

/* 67 */
struct _kqueue_scan
{
  kevent_callback_t call;
  kqueue_continue_t cont;
  filt_process_data_t process_data;
  uint64_t_0 deadline;
  void *data;
};

/* 68 */
typedef int (*kevent_callback_t)(kqueue *, kevent_internal_s *, void *);

/* 69 */
struct kqueue
{
  kqueue::$EC1B717F2A5BA0155CFC87E0E5F07FBD _anon_0;
  kqtailq kq_queue[];
};

/* 70 */
struct kqueue::$EC1B717F2A5BA0155CFC87E0E5F07FBD
{
  waitq_set kq_wqs;
  lck_spin_t kq_lock;
  uint16_t kq_state;
  uint16_t kq_level;
  uint32_t_0 kq_count;
  proc *kq_p;
  knote_locks kq_knlocks;
  lck_spin_t kq_reqlock;
};

/* 71 */
struct waitq_set
{
  char opaque[64];
};

/* 72 */
struct lck_spin_t
{
  unsigned __int64 opaque[10];
};

/* 73 */
typedef u_int16_t uint16_t;

/* 74 */
typedef unsigned __int16 u_int16_t;

/* 75 */
struct knote_locks
{
  knote_lock_ctx *lh_first;
};

/* 76 */
struct knote_lock_ctx
{
  knote *knlc_knote;
  thread_t knlc_thread;
  knote_lock_ctx::$028E5C7892392DDC933BF81CBDCE97FE knlc_head;
  knote_lock_ctx::$32B37877624816BBEAE1ABAF53ABC560 _anon_0;
};

/* 77 */
struct knote
{
  knote::$4ADF3476F71F326A89D31615591906C3 kn_tqe;
  knote::$054FF2E9748A2B84058489A3BA9DA24D kn_link;
  knote::$054FF2E9748A2B84058489A3BA9DA24D kn_selnext;
  unsigned __int64 kn_filtid : 8;
  unsigned __int64 kn_req_index : 4;
  unsigned __int64 kn_qos_index : 4;
  unsigned __int64 kn_qos_override : 4;
  unsigned __int64 kn_vnode_kqok : 1;
  unsigned __int64 kn_vnode_use_ofst : 1;
  __int64 kn_kq_packed : 42;
  knote::$7F98E693D3B5F8FC56325D82D0D1ACF9 _anon_0;
  int64_t kn_sdata;
  knote::$8CA5A7CC8BE865985E4E0F49D9C104DB kn_ptr;
  kevent_internal_s kn_kevent;
  int kn_sfflags;
  int kn_hookid;
  uint16_t kn_inuse;
  kn_status_t kn_status;
};

/* 78 */
struct knote::$4ADF3476F71F326A89D31615591906C3
{
  knote *tqe_next;
  knote **tqe_prev;
};

/* 79 */
struct knote::$054FF2E9748A2B84058489A3BA9DA24D
{
  knote *sle_next;
};

/* 80 */
typedef __darwin_intptr_t intptr_t;

/* 81 */
typedef __int64 __darwin_intptr_t;

/* 82 */
union knote::$7F98E693D3B5F8FC56325D82D0D1ACF9
{
  void *kn_hook;
  uint64_t_0 kn_hook_data;
};

/* 83 */
union knote::$8CA5A7CC8BE865985E4E0F49D9C104DB
{
  fileproc *p_fp;
  proc *p_proc;
  ipc_mqueue *p_mqueue;
};

/* 84 */
struct fileproc
{
  unsigned int f_flags;
  int32_t f_iocount;
  fileglob *f_fglob;
  void *f_wset;
};

/* 85 */
struct ipc_mqueue
{
  ipc_mqueue::$AAE6D173E1D76EEE3BF22FD88E526636 data;
  ipc_mqueue::$62A170AB8CB65F0DB2336A4DA1B5DC2B _anon_0;
};

/* 86 */
struct __attribute__((packed)) __attribute__((aligned(4))) kevent_internal_s
{
  uint64_t_0 ident;
  int16_t filter;
  uint16_t flags;
  int32_t qos;
  uint32_t_0 fflags;
  int64_t data;
  uint64_t_0 udata;
  uint64_t_0 ext[4];
};

/* 87 */
typedef __int16 int16_t;

/* 88 */
typedef uint16_t kn_status_t;

/* 89 */
typedef thread *thread_t;

/* 90 */
struct __attribute__((aligned(8))) thread
{
  thread::$B6C1294F04C8DCB82B0DA0B155802475 _anon_0;
  processor_t runq;
  event64_t wait_event;
  waitq_0 *waitq;
  turnstile_0 *turnstile;
  void *inheritor;
  priority_queue inheritor_queue;
  simple_lock_data_t sched_lock;
  simple_lock_data_t wake_lock;
  integer_t options;
  boolean_t wake_active;
  int at_safe_point;
  ast_t reason;
  uint32_t_0 quantum_remaining;
  wait_result_t wait_result;
  thread_continue_t continuation;
  void *parameter;
  vm_offset_t kernel_stack;
  vm_offset_t reserved_stack;
  int state;
  sched_mode_t sched_mode;
  sched_mode_t saved_mode;
  sched_bucket_t th_sched_bucket;
  sfi_class_id_t sfi_class;
  sfi_class_id_t sfi_wait_class;
  uint32_t_0 sched_flags;
  int16_t sched_pri;
  int16_t base_pri;
  int16_t max_priority;
  int16_t task_priority;
  int16_t promotion_priority;
  int16_t promotions;
  int iotier_override;
  uint32_t_0 ref_count;
  lck_mtx_t_0 *waiting_for_mutex;
  uint32_t_0 rwlock_count;
  integer_t importance;
  uint32_t_0 was_promoted_on_wakeup;
  integer_t depress_timer_active;
  timer_call_data_t depress_timer;
  thread::$FB926D6047F49D425A21571F99A7B9EA realtime;
  uint64_t_0 last_run_time;
  uint64_t_0 last_made_runnable_time;
  uint64_t_0 last_basepri_change_time;
  uint64_t_0 same_pri_latency;
  sched_group_t sched_group;
  timer_data_t system_timer;
  processor_t bound_processor;
  processor_t last_processor;
  processor_t chosen_processor;
  uint64_t_0 computation_metered;
  uint64_t_0 computation_epoch;
  uint64_t_0 safe_release;
  void (*sched_call)(int, thread_t);
  natural_t sched_stamp;
  natural_t sched_usage;
  natural_t pri_shift;
  natural_t cpu_usage;
  natural_t cpu_delta;
  uint32_t_0 c_switch;
  uint32_t_0 p_switch;
  uint32_t_0 ps_switch;
  integer_t mutex_count;
  int precise_user_kernel_time;
  timer_data_t user_timer;
  uint64_t_0 user_timer_save;
  uint64_t_0 system_timer_save;
  uint64_t_0 vtimer_user_save;
  uint64_t_0 vtimer_prof_save;
  uint64_t_0 vtimer_rlim_save;
  uint64_t_0 vtimer_qos_save;
  timer_data_t ptime;
  timer_data_t runnable_timer;
  uint64_t_0 wait_sfi_begin_time;
  timer_call_data_t wait_timer;
  integer_t wait_timer_active;
  boolean_t wait_timer_is_set;
  affinity_set_t affinity_set;
  queue_chain_t affinity_threads;
  thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA saved;
  thread::$7A962EB9AAE9F47CFC0FA45D16A478EF _anon_1;
  int16_t suspend_count;
  int16_t user_stop_count;
  natural_t ith_assertions;
  ipc_kmsg_queue ith_messages;
  mach_port_t ith_rpc_reply;
  vm_offset_t recover;
  queue_chain_t threads;
  queue_chain_t task_threads;
  task *task;
  vm_map_t map;
  lck_mtx_t_0 mutex;
  ast_t ast;
  unsigned __int32 active : 1;
  unsigned __int32 started : 1;
  unsigned __int32 static_param : 1;
  unsigned __int32 inspection : 1;
  unsigned __int32 policy_reset : 1;
  unsigned __int32 suspend_parked : 1;
  unsigned __int32 corpse_dup : 1;
  ipc_port *ith_self;
  ipc_port *ith_sself;
  ipc_port *ith_special_reply_port;
  exception_action *exc_actions;
  void *uthread;
  uint32_t_0 t_dtrace_flags;
  uint32_t_0 t_dtrace_predcache;
  int64_t t_dtrace_tracing;
  int64_t t_dtrace_vtime;
  clock_sec_t t_page_creation_time;
  uint32_t_0 t_page_creation_count;
  uint32_t_0 t_page_creation_throttled;
  uint32_t_0 kperf_flags;
  uint32_t_0 kperf_pet_gen;
  uint32_t_0 kperf_c_switch;
  uint32_t_0 kperf_pet_cnt;
  uint64_t_0 *kpc_buf;
  void *hv_thread_target;
  uint64_t_0 thread_id;
  uint32_t_0 syscalls_unix;
  uint32_t_0 syscalls_mach;
  ledger_t t_ledger;
  ledger_t t_threadledger;
  ledger_t t_bankledger;
  uint64_t_0 t_deduct_bank_ledger_time;
  uint64_t_0 t_deduct_bank_ledger_energy;
  mt_thread t_monotonic;
  machine_thread machine;
  thread_requested_policy requested_policy;
  thread_effective_policy effective_policy;
  thread_qos_override *overrides;
  uint32_t_0 ipc_overrides;
  uint32_t_0 kqwl_owning_count;
  uint32_t_0 sync_ipc_overrides;
  uint16_t user_promotion_basepri;
  uint16_t kevent_ast_bits;
  io_stat_info_t thread_io_stats;
  uint32_t_0 thread_callout_interrupt_wakeups;
  uint32_t_0 thread_callout_platform_idle_wakeups;
  uint32_t_0 thread_timer_wakeups_bin_1;
  uint32_t_0 thread_timer_wakeups_bin_2;
  uint16_t thread_tag;
  unsigned __int16 callout_woken_from_icontext : 1;
  unsigned __int16 callout_woken_from_platform_idle : 1;
  unsigned __int16 callout_woke_thread : 1;
  unsigned __int16 thread_bitfield_unused : 13;
  mach_port_name_t ith_voucher_name;
  ipc_voucher_t ith_voucher;
  void *decmp_upl;
  work_interval *th_work_interval;
  turnstile_update_flags_t inheritor_flags;
  block_hint_t pending_block_hint;
  block_hint_t block_hint;
};

/* 91 */
struct knote_lock_ctx::$028E5C7892392DDC933BF81CBDCE97FE
{
  knote_lock_ctx *tqh_first;
  knote_lock_ctx **tqh_last;
};

/* 92 */
union knote_lock_ctx::$32B37877624816BBEAE1ABAF53ABC560
{
  knote_lock_ctx::$32B37877624816BBEAE1ABAF53ABC560::$3E6CC0599BA26BC9CC5CEDD867E199D5 knlc_le;
  knote_lock_ctx::$32B37877624816BBEAE1ABAF53ABC560::$72B617A1A5C02C683B53E0F5804B8CE9 knlc_tqe;
};

/* 93 */
struct knote_lock_ctx::$32B37877624816BBEAE1ABAF53ABC560::$3E6CC0599BA26BC9CC5CEDD867E199D5
{
  knote_lock_ctx *le_next;
  knote_lock_ctx **le_prev;
};

/* 94 */
struct knote_lock_ctx::$32B37877624816BBEAE1ABAF53ABC560::$72B617A1A5C02C683B53E0F5804B8CE9
{
  knote_lock_ctx *tqe_next;
  knote_lock_ctx **tqe_prev;
};

/* 95 */
struct kqtailq
{
  knote *tqh_first;
  knote **tqh_last;
};

/* 96 */
typedef void (*kqueue_continue_t)(kqueue *, void *, int);

/* 97 */
typedef filt_process_s *filt_process_data_t;

/* 98 */
struct filt_process_s
{
  int fp_fd;
  unsigned int fp_flags;
  user_addr_t fp_data_out;
  user_size_t fp_data_size;
  user_size_t fp_data_resid;
};

/* 99 */
typedef u_int64_t user_addr_t;

/* 100 */
typedef u_int64_t user_size_t;

/* 101 */
struct _kevent
{
  _kqueue_scan scan;
  fileproc *fp;
  int fd;
  int eventcount;
  int eventout;
  filt_process_s process_data;
  int32_t *retval;
  user_addr_t eventlist;
  uint64_t_0 data_available;
};

/* 102 */
struct _kevent_register
{
  kevent_internal_s kev;
  knote *knote;
  fileproc *fp;
  thread_t handoff_thread;
  kqueue *kq;
  int fd;
  int eventcount;
  int eventout;
  unsigned int flags;
  int32_t *retval;
  user_addr_t ueventlist;
};

/* 103 */
struct _kauth
{
  user_addr_t message;
};

/* 104 */
struct ksyn_waitq_element
{
  char opaque[48];
};

/* 105 */
struct _waitid_data
{
  waitid_nocancel_args *args;
  int32_t *retval;
};

/* 106 */
struct waitid_nocancel_args
{
  idtype_t idtype;
  char idtype_r_[4];
  id_t id;
  char id_r_[4];
  user_addr_t infop;
  int options;
  char options_r_[4];
};

/* 107 */
struct _wait4_data
{
  wait4_nocancel_args *args;
  int32_t *retval;
};

/* 108 */
struct wait4_nocancel_args
{
  int pid;
  char pid_r_[4];
  user_addr_t status;
  int options;
  char options_r_[4];
  user_addr_t rusage;
  char rusage_r_[];
};

/* 109 */
struct __attribute__((aligned(4))) _workq_park_data
{
  uint64_t_0 idle_stamp;
  uint64_t_0 workloop_params;
  uint32_t_0 fulfilled_snapshot;
  uint32_t_0 yields;
  void *thread_request;
  uint32_t_0 upcall_flags;
  _Bool has_stack;
  thread_qos_t qos;
};

/* 110 */
typedef bool _Bool;

/* 111 */
typedef uint8_t_0 thread_qos_t;

/* 112 */
typedef u_int8_t uint8_t_0;

/* 113 */
typedef unsigned __int8 u_int8_t;

/* 114 */
struct __attribute__((aligned(8))) _ulock_wait_data
{
  thread_t owner_thread;
  thread_t old_owner;
  int32_t *retval;
  uint flags;
};

/* 115 */
typedef unsigned int uint;

/* 116 */
struct __attribute__((aligned(8))) _select
{
  u_int32_t *ibits;
  u_int32_t *obits;
  uint nbytes;
};

/* 117 */
typedef char *caddr_t;

/* 118 */
typedef __darwin_sigset_t sigset_t;

/* 119 */
typedef __uint32_t __darwin_sigset_t;

/* 120 */
struct vfs_context
{
  thread_t vc_thread;
  kauth_cred_t vc_ucred;
};

/* 121 */
typedef ucred *kauth_cred_t;

/* 122 */
struct ucred
{
  ucred::$8AC7305BA6ED6433DD3607E01B233CA9 cr_link;
  u_long cr_ref;
  posix_cred cr_posix;
  label *cr_label;
  au_session cr_audit;
};

/* 123 */
struct ucred::$8AC7305BA6ED6433DD3607E01B233CA9
{
  ucred *tqe_next;
  ucred **tqe_prev;
};

/* 124 */
typedef unsigned __int64 u_long;

/* 125 */
struct posix_cred
{
  uid_t cr_uid;
  uid_t cr_ruid;
  uid_t cr_svuid;
  __int16 cr_ngroups;
  gid_t cr_groups[16];
  gid_t cr_rgid;
  gid_t cr_svgid;
  uid_t cr_gmuid;
  int cr_flags;
};

/* 126 */
struct label
{
  int l_flags;
  label::$AEDA37D7AA48A02E42F65F84165F55FA l_perpolicy[7];
};

/* 127 */
struct au_session
{
  auditinfo_addr_t *as_aia_p;
  au_mask_t as_mask;
};

/* 128 */
typedef auditinfo_addr auditinfo_addr_t;

/* 129 */
struct auditinfo_addr
{
  au_id_t ai_auid;
  au_mask_t ai_mask;
  au_tid_addr_t ai_termid;
  au_asid_t ai_asid;
  au_asflgs_t ai_flags;
};

/* 130 */
typedef uid_t au_id_t;

/* 131 */
typedef au_mask au_mask_t;

/* 132 */
struct au_mask
{
  unsigned int am_success;
  unsigned int am_failure;
};

/* 133 */
typedef au_tid_addr au_tid_addr_t;

/* 134 */
struct au_tid_addr
{
  dev_t at_port;
  u_int32_t at_type;
  u_int32_t at_addr[4];
};

/* 135 */
typedef __darwin_dev_t dev_t;

/* 136 */
typedef __int32_t __darwin_dev_t;

/* 137 */
typedef pid_t au_asid_t;

/* 138 */
typedef u_int64_t au_asflgs_t;

/* 139 */
struct uthread::$24A5DE8343EC3B8BE21CE941EC8A3CBD
{
  uthread *tqe_next;
  uthread **tqe_prev;
};

/* 140 */
struct kaudit_record
{
  audit_record k_ar;
  u_int32_t k_ar_commit;
  void *k_udata;
  u_int k_ulen;
  uthread *k_uthread;
  kaudit_record::$FBBD764A9CB0DA5B637E57DAFB43AE64 k_q;
};

/* 141 */
struct task
{
  lck_mtx_t_0 lock;
  uint32_t_0 ref_count;
  boolean_t active;
  boolean_t halting;
  uint32_t_0 vtimers;
  vm_map_t map;
  queue_chain_t tasks;
  sched_group_t sched_group;
  queue_head_t threads;
  processor_set_t pset_hint;
  affinity_space *affinity_space;
  int thread_count;
  uint32_t_0 active_thread_count;
  int suspend_count;
  integer_t user_stop_count;
  integer_t legacy_stop_count;
  integer_t priority;
  integer_t max_priority;
  integer_t importance;
  security_token_t sec_token;
  audit_token_t audit_token;
  uint64_t_0 total_user_time;
  uint64_t_0 total_system_time;
  uint64_t_0 total_ptime;
  uint64_t_0 total_runnable_time;
  lck_mtx_t_0 itk_lock_data;
  ipc_port *itk_self;
  ipc_port *itk_nself;
  ipc_port *itk_sself;
  exception_action exc_actions[14];
  ipc_port *itk_host;
  ipc_port *itk_bootstrap;
  ipc_port *itk_seatbelt;
  ipc_port *itk_gssd;
  ipc_port *itk_debug_control;
  ipc_port *itk_task_access;
  ipc_port *itk_resume;
  ipc_port *itk_registered[3];
  ipc_space *itk_space;
  ledger_t ledger;
  queue_head_t semaphore_list;
  int semaphores_owned;
  unsigned int priv_flags;
  user_ldt *i386_ldt;
  void *task_debug;
  uint64_t_0 uexc_range_start;
  uint64_t_0 uexc_range_size;
  uint64_t_0 uexc_handler;
  xstate_t xstate;
  integer_t faults;
  integer_t pageins;
  integer_t cow_faults;
  integer_t messages_sent;
  integer_t messages_received;
  integer_t syscalls_mach;
  integer_t syscalls_unix;
  uint32_t_0 c_switch;
  uint32_t_0 p_switch;
  uint32_t_0 ps_switch;
  void *bsd_info;
  kcdata_descriptor_t corpse_info;
  uint64_t_0 crashed_thread_id;
  queue_chain_t corpse_tasks;
  label *crash_label;
  vm_shared_region *shared_region;
  volatile uint32_t_0 t_flags;
  uint32_t_0 t_procflags;
  mach_vm_address_t all_image_info_addr;
  mach_vm_size_t all_image_info_size;
  uint32_t_0 t_kpc;
  boolean_t pidsuspended;
  boolean_t frozen;
  boolean_t changing_freeze_state;
  unsigned __int16 policy_ru_cpu : 4;
  unsigned __int16 policy_ru_cpu_ext : 4;
  unsigned __int16 applied_ru_cpu : 4;
  unsigned __int16 applied_ru_cpu_ext : 4;
  uint8_t_0 rusage_cpu_flags;
  uint8_t_0 rusage_cpu_percentage;
  uint8_t_0 rusage_cpu_perthr_percentage;
  uint64_t_0 rusage_cpu_interval;
  uint64_t_0 rusage_cpu_perthr_interval;
  uint64_t_0 rusage_cpu_deadline;
  thread_call_t rusage_cpu_callt;
  atm_task_descriptor *atm_context;
  bank_task *bank_context;
  ipc_importance_task *task_imp_base;
  vm_extmod_statistics_data_t extmod_statistics;
  task_requested_policy requested_policy;
  task_effective_policy effective_policy;
  unsigned __int32 low_mem_notified_warn : 1;
  unsigned __int32 low_mem_notified_critical : 1;
  unsigned __int32 purged_memory_warn : 1;
  unsigned __int32 purged_memory_critical : 1;
  unsigned __int32 low_mem_privileged_listener : 1;
  unsigned __int32 mem_notify_reserved : 27;
  unsigned __int32 memlimit_is_active : 1;
  unsigned __int32 memlimit_is_fatal : 1;
  unsigned __int32 memlimit_active_exc_resource : 1;
  unsigned __int32 memlimit_inactive_exc_resource : 1;
  unsigned __int32 memlimit_attrs_reserved : 28;
  io_stat_info_t task_io_stats;
  uint64_t_0 task_immediate_writes;
  uint64_t_0 task_deferred_writes;
  uint64_t_0 task_invalidated_writes;
  uint64_t_0 task_metadata_writes;
  _cpu_time_qos_stats cpu_time_eqos_stats;
  _cpu_time_qos_stats cpu_time_rqos_stats;
  uint32_t_0 task_timer_wakeups_bin_1;
  uint32_t_0 task_timer_wakeups_bin_2;
  uint64_t_0 task_gpu_ns;
  uint64_t_0 task_energy;
  mt_task task_monotonic;
  int task_volatile_objects;
  int task_nonvolatile_objects;
  boolean_t task_purgeable_disowning;
  boolean_t task_purgeable_disowned;
  queue_head_t task_objq;
  lck_mtx_t_0 task_objq_lock;
  unsigned __int32 task_thread_limit : 16;
  unsigned __int32 task_region_footprint : 1;
  unsigned __int32 task_has_crossed_thread_limit : 1;
  uint32_t_0 exec_token;
  coalition_t coalition[2];
  queue_chain_t task_coalition[2];
  uint64_t_0 dispatchqueue_offset;
  void *hv_task_target;
  uint32_t_0 task_exc_guard;
  queue_head_t io_user_clients;
};

/* 142 */
struct __attribute__((aligned(8))) kern_sigaltstack
{
  user_addr_t ss_sp;
  user_size_t ss_size;
  int ss_flags;
};

/* 143 */
typedef vnode *vnode_t;

/* 144 */
struct vnode
{
  lck_mtx_t v_lock;
  vnode::$247FDC224E2A338331D45C6C2E53A974 v_freelist;
  vnode::$247FDC224E2A338331D45C6C2E53A974 v_mntvnodes;
  vnode::$174C9EE912997FA19B92470DBE7919E6 v_ncchildren;
  vnode::$40FB4DAF873A4E8D045823299B10568B v_nclinks;
  vnode_t v_defer_reclaimlist;
  uint32_t_0 v_listflag;
  uint32_t_0 v_flag;
  uint16_t v_lflag;
  uint8_t_0 v_iterblkflags;
  uint8_t_0 v_references;
  int32_t v_kusecount;
  int32_t v_usecount;
  int32_t v_iocount;
  void *v_owner;
  uint16_t v_type;
  uint16_t v_tag;
  uint32_t_0 v_id;
  vnode::$340B5204D89BD86505F81B6C292395C1 v_un;
  buflists v_cleanblkhd;
  buflists v_dirtyblkhd;
  klist v_knotes;
  kauth_cred_t v_cred;
  kauth_action_t v_authorized_actions;
  int v_cred_timestamp;
  int v_nc_generation;
  int32_t v_numoutput;
  int32_t v_writecount;
  const char *v_name;
  vnode_t v_parent;
  lockf *v_lockf;
  int (**v_op)(void *);
  mount_t v_mount;
  void *v_data;
  label *v_label;
  vnode_resolve_t v_resolve;
};

/* 145 */
struct __attribute__((aligned(2))) kqrequest
{
  workq_threadreq_s kqr_req;
  kqtailq kqr_suppressed;
  thread_t kqr_thread;
  uint8_t_0 kqr_state;
  uint8_t_0 kqr_wakeup_indexes;
  uint16_t kqr_dsync_waiters;
  kq_index_t kqr_stayactive_qos;
  kq_index_t kqr_override_index;
  kq_index_t kqr_qos_index;
};

/* 146 */
struct workq_threadreq_s
{
  workq_threadreq_s::$D82C72DCA7C9DEA609705BA8AF1DD18F _anon_0;
  uint32_t_0 tr_flags;
  uint8_t_0 tr_state;
  thread_qos_t tr_qos;
  uint16_t tr_count;
};

/* 147 */
union workq_threadreq_s::$D82C72DCA7C9DEA609705BA8AF1DD18F
{
  priority_queue_entry tr_entry;
  thread_t tr_binding_thread;
};

/* 148 */
struct priority_queue_entry
{
  priority_queue_entry *next;
  priority_queue_entry *prev;
  __int64 key : 8;
  __int64 child : 56;
};

/* 149 */
typedef uint8_t_0 kq_index_t;

/* 150 */
typedef uint64_t_0 mach_vm_offset_t;

/* 151 */
typedef natural_t mach_port_name_t;

/* 152 */
typedef __darwin_natural_t natural_t;

/* 153 */
typedef unsigned int __darwin_natural_t;

/* 154 */
struct uu_workq_policy
{
  unsigned __int16 qos_req : 4;
  unsigned __int16 qos_max : 4;
  unsigned __int16 qos_override : 4;
  unsigned __int16 qos_bucket : 4;
};

/* 155 */
typedef __siginfo siginfo_t;

/* 156 */
struct __siginfo
{
  int si_signo;
  int si_errno;
  int si_code;
  pid_t si_pid;
  uid_t si_uid;
  int si_status;
  void *si_addr;
  sigval si_value;
  __int64 si_band;
  unsigned __int64 __pad[7];
};

/* 157 */
union sigval
{
  int sival_int;
  void *sival_ptr;
};

/* 158 */
union __attribute__((aligned(4))) __tdu
{
  __tds _tds;
  u_int32_t _t_dtrace_ft;
};

/* 159 */
struct __tds
{
  uint8_t_0 _t_dtrace_on;
  uint8_t_0 _t_dtrace_step;
  uint8_t_0 _t_dtrace_ret;
  uint8_t_0 _t_dtrace_ast;
  uint8_t_0 _t_dtrace_reg;
};

/* 160 */
struct dtrace_ptss_page_entry
{
  dtrace_ptss_page_entry *next;
  user_addr_t addr;
  user_addr_t write_addr;
};

/* 161 */
struct doc_tombstone
{
  vnode *t_lastop_parent;
  vnode *t_lastop_item;
  uint32_t_0 t_lastop_parent_vid;
  uint32_t_0 t_lastop_item_vid;
  uint64_t_0 t_lastop_fileid;
  uint64_t_0 t_lastop_document_id;
  unsigned __int8 t_lastop_filename[256];
};

/* 162 */
struct os_reason
{
  lck_mtx_t_0 osr_lock;
  unsigned int osr_refcount;
  uint32_t_0 osr_namespace;
  uint64_t_0 osr_code;
  uint64_t_0 osr_flags;
  uint32_t_0 osr_bufsize;
  kcdata_descriptor osr_kcd_descriptor;
  char *osr_kcd_buf;
};

/* 163 */
struct proc::$1D3E450C18944DBC95A59288B453C62E
{
  eventqelt *tqh_first;
  eventqelt **tqh_last;
};

/* 164 */
struct eventqelt
{
  eventqelt::$E1FA208D562111C362654304BB6027AF ee_slist;
  eventqelt::$E1FA208D562111C362654304BB6027AF ee_plist;
  eventreq64 ee_req;
  proc_0 *ee_proc;
  u_int ee_flags;
  u_int ee_eventmask;
};

/* 165 */
struct filedesc
{
  fileproc **fd_ofiles;
  lck_mtx_t fd_kqhashlock;
  u_long fd_kqhashmask;
  kqlist *fd_kqhash;
  kqueue *fd_wqkqueue;
  char *fd_ofileflags;
  vnode *fd_cdir;
  vnode *fd_rdir;
  int fd_nfiles;
  int fd_lastfile;
  int fd_freefile;
  u_short fd_cmask;
  int fd_flags;
  int fd_knlistsize;
  klist *fd_knlist;
  u_long fd_knhashmask;
  klist *fd_knhash;
  lck_mtx_t fd_knhashlock;
};

/* 166 */
struct pstats
{
  rusage p_ru;
  rusage p_cru;
  uprof p_prof;
  uint64_t_0 ps_start;
  rusage_info_child ri_child;
  user_uprof user_p_prof;
};

/* 167 */
struct rusage
{
  timeval ru_utime;
  timeval ru_stime;
  __int64 ru_maxrss;
  __int64 ru_ixrss;
  __int64 ru_idrss;
  __int64 ru_isrss;
  __int64 ru_minflt;
  __int64 ru_majflt;
  __int64 ru_nswap;
  __int64 ru_inblock;
  __int64 ru_oublock;
  __int64 ru_msgsnd;
  __int64 ru_msgrcv;
  __int64 ru_nsignals;
  __int64 ru_nvcsw;
  __int64 ru_nivcsw;
};

/* 168 */
struct __attribute__((aligned(8))) timeval
{
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
};

/* 169 */
typedef __int64 __darwin_time_t;

/* 170 */
typedef __int32_t __darwin_suseconds_t;

/* 171 */
struct __attribute__((aligned(8))) uprof
{
  uprof *pr_next;
  caddr_t pr_base;
  u_int32_t pr_size;
  u_int32_t pr_off;
  u_int32_t pr_scale;
  u_int32_t pr_addr;
  u_int32_t pr_ticks;
};

/* 172 */
struct rusage_info_child
{
  uint64_t_0 ri_child_user_time;
  uint64_t_0 ri_child_system_time;
  uint64_t_0 ri_child_pkg_idle_wkups;
  uint64_t_0 ri_child_interrupt_wkups;
  uint64_t_0 ri_child_pageins;
  uint64_t_0 ri_child_elapsed_abstime;
};

/* 173 */
struct user_uprof
{
  user_uprof *pr_next;
  user_addr_t pr_base;
  user_size_t pr_size;
  user_ulong_t pr_off;
  user_ulong_t pr_scale;
  user_ulong_t pr_addr;
  user_ulong_t pr_ticks;
};

/* 174 */
typedef u_int64_t user_ulong_t;

/* 175 */
struct __attribute__((aligned(8))) plimit
{
  rlimit pl_rlimit[9];
  int pl_refcnt;
};

/* 176 */
struct rlimit
{
  rlim_t rlim_cur;
  rlim_t rlim_max;
};

/* 177 */
typedef __uint64_t rlim_t;

/* 178 */
typedef unsigned __int64 __uint64_t;

/* 179 */
struct __attribute__((aligned(8))) sigacts
{
  user_addr_t ps_sigact[32];
  user_addr_t ps_trampact[32];
  sigset_t ps_catchmask[32];
  sigset_t ps_sigonstack;
  sigset_t ps_sigintr;
  sigset_t ps_sigreset;
  sigset_t ps_signodefer;
  sigset_t ps_siginfo;
  sigset_t ps_oldmask;
  user_addr_t ps_sigreturn_token;
  uint32_t_0 ps_sigreturn_validation;
  int ps_flags;
  kern_sigaltstack ps_sigstk;
  int ps_sig;
  int ps_code;
  int ps_addr;
};

/* 180 */
typedef unsigned int u_int;

/* 181 */
struct itimerval
{
  timeval it_interval;
  timeval it_value;
};

/* 182 */
typedef int boolean_t;

/* 183 */
struct dtrace_ptss_page
{
  dtrace_ptss_page *next;
  dtrace_ptss_page_entry entries[64];
};

/* 184 */
struct dtrace_helpers
{
  dtrace_helper_action_t **dthps_actions;
  dtrace_vstate_t dthps_vstate;
  dtrace_helper_provider_t **dthps_provs;
  uint_t dthps_nprovs;
  uint_t dthps_maxprovs;
  int dthps_generation;
  pid_t dthps_pid;
  int dthps_deferred;
  dtrace_helpers *dthps_next;
  dtrace_helpers *dthps_prev;
};

/* 185 */
typedef dtrace_helper_action dtrace_helper_action_t;

/* 186 */
struct dtrace_helper_action
{
  int dtha_generation;
  int dtha_nactions;
  dtrace_difo_t *dtha_predicate;
  dtrace_difo_t **dtha_actions;
  dtrace_helper_action *dtha_next;
};

/* 187 */
typedef dtrace_difo dtrace_difo_t;

/* 188 */
struct dtrace_difo
{
  dif_instr_t *dtdo_buf;
  uint64_t_0 *dtdo_inttab;
  char *dtdo_strtab;
  dtrace_difv_t *dtdo_vartab;
  uint_t dtdo_len;
  uint_t dtdo_intlen;
  uint_t dtdo_strlen;
  uint_t dtdo_varlen;
  dtrace_diftype_t dtdo_rtype;
  uint_t dtdo_refcnt;
  uint_t dtdo_destructive;
};

/* 189 */
typedef uint32_t_0 dif_instr_t;

/* 190 */
typedef dtrace_difv dtrace_difv_t;

/* 191 */
struct dtrace_difv
{
  uint32_t_0 dtdv_name;
  uint32_t_0 dtdv_id;
  uint8_t_0 dtdv_kind;
  uint8_t_0 dtdv_scope;
  uint16_t dtdv_flags;
  dtrace_diftype_t dtdv_type;
};

/* 192 */
typedef dtrace_diftype dtrace_diftype_t;

/* 193 */
struct dtrace_diftype
{
  uint8_t_0 dtdt_kind;
  uint8_t_0 dtdt_ckind;
  uint8_t_0 dtdt_flags;
  uint8_t_0 dtdt_pad;
  uint32_t_0 dtdt_size;
};

/* 194 */
typedef uint32_t_0 uint_t;

/* 195 */
typedef dtrace_vstate dtrace_vstate_t;

/* 196 */
struct dtrace_vstate
{
  dtrace_state_t *dtvs_state;
  dtrace_statvar_t **dtvs_globals;
  int dtvs_nglobals;
  dtrace_difv_t *dtvs_tlocals;
  int dtvs_ntlocals;
  dtrace_statvar_t **dtvs_locals;
  int dtvs_nlocals;
  dtrace_dstate_t dtvs_dynvars;
};

/* 197 */
typedef dtrace_state dtrace_state_t;

/* 198 */
struct __attribute__((aligned(8))) dtrace_state
{
  dev_t dts_dev;
  int dts_necbs;
  dtrace_ecb_t **dts_ecbs;
  dtrace_epid_t dts_epid;
  size_t_0 dts_needed;
  dtrace_state *dts_anon;
  dtrace_activity_t dts_activity;
  dtrace_vstate_t dts_vstate;
  dtrace_buffer_t *dts_buffer;
  dtrace_buffer_t *dts_aggbuffer;
  dtrace_speculation_t *dts_speculations;
  int dts_nspeculations;
  int dts_naggregations;
  dtrace_aggregation_t **dts_aggregations;
  vmem_t *dts_aggid_arena;
  uint64_t_0 dts_errors;
  uint32_t_0 dts_speculations_busy;
  uint32_t_0 dts_speculations_unavail;
  uint32_t_0 dts_stkstroverflows;
  uint32_t_0 dts_dblerrors;
  uint32_t_0 dts_reserve;
  hrtime_t dts_laststatus;
  cyclic_id_t dts_cleaner;
  cyclic_id_t dts_deadman;
  hrtime_t dts_alive;
  char dts_speculates;
  char dts_destructive;
  int dts_nformats;
  char **dts_formats;
  dtrace_optval_t dts_options[33];
  dtrace_cred_t dts_cred;
  size_t_0 dts_nretained;
  uint64_t_0 dts_arg_error_illval;
  uint32_t_0 dts_buf_over_limit;
};

/* 199 */
typedef dtrace_ecb dtrace_ecb_t;

/* 200 */
struct dtrace_ecb
{
  dtrace_epid_t dte_epid;
  uint32_t_0 dte_alignment;
  size_t_0 dte_needed;
  size_t_0 dte_size;
  dtrace_predicate_t *dte_predicate;
  dtrace_action_t *dte_action;
  dtrace_ecb_t *dte_next;
  dtrace_state_t *dte_state;
  uint32_t_0 dte_cond;
  dtrace_probe_t *dte_probe;
  dtrace_action_t *dte_action_last;
  uint64_t_0 dte_uarg;
};

/* 201 */
typedef uint32_t_0 dtrace_epid_t;

/* 202 */
typedef dtrace_predicate dtrace_predicate_t;

/* 203 */
struct dtrace_predicate
{
  dtrace_difo_t *dtp_difo;
  dtrace_cacheid_t dtp_cacheid;
  int dtp_refcnt;
};

/* 204 */
typedef uint32_t_0 dtrace_cacheid_t;

/* 205 */
typedef dtrace_action dtrace_action_t;

/* 206 */
struct dtrace_action
{
  dtrace_actkind_t dta_kind;
  uint16_t dta_intuple;
  uint32_t_0 dta_refcnt;
  dtrace_difo_t *dta_difo;
  dtrace_recdesc_t dta_rec;
  dtrace_action_t *dta_prev;
  dtrace_action_t *dta_next;
};

/* 207 */
typedef uint16_t dtrace_actkind_t;

/* 208 */
typedef dtrace_recdesc dtrace_recdesc_t;

/* 209 */
struct dtrace_recdesc
{
  dtrace_actkind_t dtrd_action;
  uint32_t_0 dtrd_size;
  uint32_t_0 dtrd_offset;
  uint16_t dtrd_alignment;
  uint16_t dtrd_format;
  uint64_t_0 dtrd_arg;
  uint64_t_0 dtrd_uarg;
};

/* 210 */
typedef dtrace_probe dtrace_probe_t;

/* 211 */
struct dtrace_probe
{
  dtrace_id_t dtpr_id;
  dtrace_ecb_t *dtpr_ecb;
  dtrace_ecb_t *dtpr_ecb_last;
  void *dtpr_arg;
  dtrace_cacheid_t dtpr_predcache;
  int dtpr_aframes;
  dtrace_provider_t *dtpr_provider;
  char *dtpr_mod;
  char *dtpr_func;
  char *dtpr_name;
  dtrace_probe_t *dtpr_nextprov;
  dtrace_probe_t *dtpr_prevprov;
  dtrace_probe_t *dtpr_nextmod;
  dtrace_probe_t *dtpr_prevmod;
  dtrace_probe_t *dtpr_nextfunc;
  dtrace_probe_t *dtpr_prevfunc;
  dtrace_probe_t *dtpr_nextname;
  dtrace_probe_t *dtpr_prevname;
  dtrace_genid_t dtpr_gen;
};

/* 212 */
typedef uint32_t_0 dtrace_id_t;

/* 213 */
typedef dtrace_provider dtrace_provider_t;

/* 214 */
struct dtrace_provider
{
  dtrace_pattr_t dtpv_attr;
  dtrace_ppriv_t dtpv_priv;
  dtrace_pops_t dtpv_pops;
  char *dtpv_name;
  void *dtpv_arg;
  uint_t dtpv_defunct;
  dtrace_provider *dtpv_next;
  uint64_t_0 dtpv_probe_count;
  uint64_t_0 dtpv_ecb_count;
};

/* 215 */
typedef dtrace_pattr dtrace_pattr_t;

/* 216 */
struct dtrace_pattr
{
  dtrace_attribute_t dtpa_provider;
  dtrace_attribute_t dtpa_mod;
  dtrace_attribute_t dtpa_func;
  dtrace_attribute_t dtpa_name;
  dtrace_attribute_t dtpa_args;
};

/* 217 */
typedef dtrace_attribute dtrace_attribute_t;

/* 218 */
struct dtrace_attribute
{
  dtrace_stability_t dtat_name;
  dtrace_stability_t dtat_data;
  dtrace_class_t dtat_class;
};

/* 219 */
typedef uint8_t_0 dtrace_stability_t;

/* 220 */
typedef uint8_t_0 dtrace_class_t;

/* 221 */
typedef dtrace_ppriv dtrace_ppriv_t;

/* 222 */
struct dtrace_ppriv
{
  uint32_t_0 dtpp_flags;
  uid_t dtpp_uid;
  zoneid_t dtpp_zoneid;
};

/* 223 */
typedef uint32_t_0 zoneid_t;

/* 224 */
typedef dtrace_pops dtrace_pops_t;

/* 225 */
struct dtrace_pops
{
  void (*dtps_provide)(void *, const dtrace_probedesc_t *);
  void (*dtps_provide_module)(void *, modctl *);
  int (*dtps_enable)(void *, dtrace_id_t, void *);
  void (*dtps_disable)(void *, dtrace_id_t, void *);
  void (*dtps_suspend)(void *, dtrace_id_t, void *);
  void (*dtps_resume)(void *, dtrace_id_t, void *);
  void (*dtps_getargdesc)(void *, dtrace_id_t, void *, dtrace_argdesc_t *);
  uint64_t_0 (*dtps_getargval)(void *, dtrace_id_t, void *, int, int);
  int (*dtps_usermode)(void *, dtrace_id_t, void *);
  void (*dtps_destroy)(void *, dtrace_id_t, void *);
};

/* 226 */
typedef dtrace_probedesc dtrace_probedesc_t;

/* 227 */
struct dtrace_probedesc
{
  dtrace_id_t dtpd_id;
  char dtpd_provider[64];
  char dtpd_mod[64];
  char dtpd_func[128];
  char dtpd_name[64];
};

/* 228 */
struct modctl
{
  modctl *mod_next;
  modctl *mod_stale;
  uint32_t_0 mod_id;
  char mod_modname[64];
  int mod_loadcnt;
  char mod_loaded;
  uint16_t mod_flags;
  int mod_nenabled;
  vm_address_t mod_address;
  vm_size_t mod_size;
  UUID mod_uuid;
  dtrace_module_symbols *mod_user_symbols;
};

/* 229 */
typedef vm_offset_t vm_address_t;

/* 230 */
typedef uintptr_t vm_offset_t;

/* 231 */
typedef uintptr_t vm_size_t;

/* 232 */
typedef uint8_t_0 UUID[16];

/* 233 */
struct dtrace_module_symbols
{
  UUID dtmodsyms_uuid;
  uint64_t_0 dtmodsyms_count;
  dtrace_symbol_t dtmodsyms_symbols[1];
};

/* 234 */
typedef dtrace_symbol dtrace_symbol_t;

/* 235 */
struct dtrace_symbol
{
  uint64_t_0 dtsym_addr;
  uint64_t_0 dtsym_size;
  char dtsym_name[128];
};

/* 236 */
typedef dtrace_argdesc dtrace_argdesc_t;

/* 237 */
struct dtrace_argdesc
{
  dtrace_id_t dtargd_id;
  int dtargd_ndx;
  int dtargd_mapping;
  char dtargd_native[128];
  char dtargd_xlate[128];
};

/* 238 */
typedef uint64_t_0 dtrace_genid_t;

/* 239 */
typedef dtrace_activity dtrace_activity_t;

/* 240 */
enum dtrace_activity : __int32
{
  DTRACE_ACTIVITY_INACTIVE = 0x0,
  DTRACE_ACTIVITY_WARMUP = 0x1,
  DTRACE_ACTIVITY_ACTIVE = 0x2,
  DTRACE_ACTIVITY_DRAINING = 0x3,
  DTRACE_ACTIVITY_COOLDOWN = 0x4,
  DTRACE_ACTIVITY_STOPPED = 0x5,
  DTRACE_ACTIVITY_KILLED = 0x6,
};

/* 241 */
typedef dtrace_buffer dtrace_buffer_t;

/* 242 */
struct dtrace_buffer
{
  uint64_t_0 dtb_offset;
  uint64_t_0 dtb_cur_limit;
  uint64_t_0 dtb_limit;
  uint64_t_0 dtb_size;
  uint32_t_0 dtb_flags;
  uint32_t_0 dtb_drops;
  caddr_t dtb_tomax;
  caddr_t dtb_xamot;
  uint32_t_0 dtb_xamot_flags;
  uint32_t_0 dtb_xamot_drops;
  uint64_t_0 dtb_xamot_offset;
  uint32_t_0 dtb_errors;
  uint32_t_0 dtb_xamot_errors;
  uint64_t_0 dtb_switched;
  uint64_t_0 dtb_interval;
  uint64_t_0 dtb_pad2[4];
};

/* 243 */
typedef dtrace_speculation dtrace_speculation_t;

/* 244 */
struct dtrace_speculation
{
  dtrace_speculation_state_t dtsp_state;
  int dtsp_cleaning;
  dtrace_buffer_t *dtsp_buffer;
};

/* 245 */
typedef dtrace_speculation_state dtrace_speculation_state_t;

/* 246 */
enum dtrace_speculation_state : __int32
{
  DTRACESPEC_INACTIVE = 0x0,
  DTRACESPEC_ACTIVE = 0x1,
  DTRACESPEC_ACTIVEONE = 0x2,
  DTRACESPEC_ACTIVEMANY = 0x3,
  DTRACESPEC_COMMITTING = 0x4,
  DTRACESPEC_COMMITTINGMANY = 0x5,
  DTRACESPEC_DISCARDING = 0x6,
};

/* 247 */
typedef dtrace_aggregation dtrace_aggregation_t;

/* 248 */
struct dtrace_aggregation
{
  dtrace_action_t dtag_action;
  dtrace_aggid_t dtag_id;
  dtrace_ecb_t *dtag_ecb;
  dtrace_action_t *dtag_first;
  uint32_t_0 dtag_base;
  uint8_t_0 dtag_hasarg;
  uint64_t_0 dtag_initial;
  void (*dtag_aggregate)(uint64_t_0 *, uint64_t_0, uint64_t_0);
};

/* 249 */
typedef uint32_t_0 dtrace_aggid_t;

/* 250 */
typedef struct vmem vmem_t;

/* 251 */
struct vmem;

/* 252 */
typedef uintptr_t cyclic_id_t;

/* 253 */
typedef dtrace_cred dtrace_cred_t;

/* 254 */
struct __attribute__((aligned(8))) dtrace_cred
{
  cred_t *dcr_cred;
  uint8_t_0 dcr_destructive;
  uint8_t_0 dcr_visible;
  uint16_t dcr_action;
};

/* 255 */
typedef ucred cred_t;

/* 256 */
typedef dtrace_statvar dtrace_statvar_t;

/* 257 */
struct dtrace_statvar
{
  uint64_t_0 dtsv_data;
  size_t_0 dtsv_size;
  int dtsv_refcnt;
  dtrace_difv_t dtsv_var;
};

/* 258 */
typedef dtrace_dstate dtrace_dstate_t;

/* 259 */
struct dtrace_dstate
{
  void *dtds_base;
  size_t_0 dtds_size;
  size_t_0 dtds_hashsize;
  size_t_0 dtds_chunksize;
  dtrace_dynhash_t *dtds_hash;
  dtrace_dstate_state_t dtds_state;
  dtrace_dstate_percpu_t *dtds_percpu;
};

/* 260 */
typedef dtrace_dynhash dtrace_dynhash_t;

/* 261 */
struct dtrace_dynhash
{
  dtrace_dynvar_t *dtdh_chain;
  uintptr_t dtdh_lock;
  uintptr_t dtdh_pad[6];
};

/* 262 */
typedef dtrace_dynvar dtrace_dynvar_t;

/* 263 */
struct dtrace_dynvar
{
  uint64_t_0 dtdv_hashval;
  dtrace_dynvar *dtdv_next;
  void *dtdv_data;
  dtrace_tuple_t dtdv_tuple;
};

/* 264 */
typedef dtrace_tuple dtrace_tuple_t;

/* 265 */
struct dtrace_tuple
{
  uint32_t_0 dtt_nkeys;
  uint32_t_0 dtt_pad;
  dtrace_key_t dtt_key[1];
};

/* 266 */
typedef dtrace_key dtrace_key_t;

/* 267 */
struct dtrace_key
{
  uint64_t_0 dttk_value;
  uint64_t_0 dttk_size;
};

/* 268 */
typedef dtrace_dstate_state dtrace_dstate_state_t;

/* 269 */
enum dtrace_dstate_state : __int32
{
  DTRACE_DSTATE_CLEAN = 0x0,
  DTRACE_DSTATE_EMPTY = 0x1,
  DTRACE_DSTATE_DIRTY = 0x2,
  DTRACE_DSTATE_RINSING = 0x3,
};

/* 270 */
typedef dtrace_dstate_percpu dtrace_dstate_percpu_t;

/* 271 */
struct dtrace_dstate_percpu
{
  dtrace_dynvar_t *dtdsc_free;
  dtrace_dynvar_t *dtdsc_dirty;
  dtrace_dynvar_t *dtdsc_rinsing;
  dtrace_dynvar_t *dtdsc_clean;
  uint64_t_0 dtdsc_drops;
  uint64_t_0 dtdsc_dirty_drops;
  uint64_t_0 dtdsc_rinsing_drops;
  uint64_t_0 dtdsc_pad;
};

/* 272 */
typedef dtrace_helper_provider dtrace_helper_provider_t;

/* 273 */
struct dtrace_helper_provider
{
  int dthp_generation;
  uint32_t_0 dthp_ref;
  dof_helper_t dthp_prov;
};

/* 274 */
typedef dof_helper dof_helper_t;

/* 275 */
struct dof_helper
{
  char dofhp_mod[64];
  uint64_t_0 dofhp_addr;
  uint64_t_0 dofhp_dof;
};

/* 276 */
struct dof_ioctl_data
{
  uint64_t_0 dofiod_count;
  dof_helper_t dofiod_helpers[1];
};

/* 277 */
typedef __darwin_off_t off_t;

/* 278 */
typedef __int64_t __darwin_off_t;

/* 279 */
typedef __int64 __int64_t;

/* 280 */
typedef unsigned __int8 u_char;

/* 281 */
typedef char command_t[17];

/* 282 */
typedef char proc_name_t[33];

/* 283 */
struct pgrp
{
  pgrp::$6F7B106BE1A294EACE4B59C5896DD70B pg_hash;
  pgrp::$1883103594F6EC6683B4E2448DAE2E8F pg_members;
  session *pg_session;
  pid_t pg_id;
  int pg_jobc;
  int pg_membercnt;
  int pg_refcount;
  unsigned int pg_listflags;
  lck_mtx_t pg_mlock;
};

/* 284 */
struct pgrp::$6F7B106BE1A294EACE4B59C5896DD70B
{
  pgrp *le_next;
  pgrp **le_prev;
};

/* 285 */
struct pgrp::$1883103594F6EC6683B4E2448DAE2E8F
{
  proc *lh_first;
};

/* 286 */
struct __attribute__((aligned(8))) session
{
  int s_count;
  proc *s_leader;
  vnode *s_ttyvp;
  int s_ttyvid;
  tty *s_ttyp;
  pid_t s_ttypgrpid;
  pid_t s_sid;
  char s_login[255];
  int s_flags;
  session::$5E1136A0C826C1CD52C59D8DD9C7C74B s_hash;
  lck_mtx_t s_mlock;
  int s_listflags;
};

/* 287 */
struct __attribute__((aligned(8))) tty
{
  lck_mtx_t t_lock;
  clist t_rawq;
  __int64 t_rawcc;
  clist t_canq;
  __int64 t_cancc;
  clist t_outq;
  __int64 t_outcc;
  int t_line;
  dev_t t_dev;
  int t_state;
  int t_flags;
  int t_timeout;
  pgrp *t_pgrp;
  session *t_session;
  selinfo t_rsel;
  selinfo t_wsel;
  termios t_termios;
  winsize t_winsize;
  void (*t_oproc)(tty *);
  void (*t_stop)(tty *, int);
  int (*t_param)(tty *, termios *);
  void *t_sc;
  int t_column;
  int t_rocount;
  int t_rocol;
  int t_hiwat;
  int t_lowat;
  int t_gen;
  void *t_iokit;
  int t_refcnt;
};

/* 288 */
struct clist
{
  int c_cc;
  int c_cn;
  u_char *c_cf;
  u_char *c_cl;
  u_char *c_cs;
  u_char *c_ce;
  u_char *c_cq;
};

/* 289 */
struct __attribute__((aligned(8))) selinfo
{
  waitq si_waitq;
  klist si_note;
  u_int si_flags;
};

/* 290 */
struct waitq
{
  char opaque[48];
};

/* 291 */
struct klist
{
  knote *slh_first;
};

/* 292 */
struct termios
{
  tcflag_t c_iflag;
  tcflag_t c_oflag;
  tcflag_t c_cflag;
  tcflag_t c_lflag;
  cc_t c_cc[20];
  speed_t c_ispeed;
  speed_t c_ospeed;
};

/* 293 */
typedef unsigned __int64 tcflag_t;

/* 294 */
typedef unsigned __int8 cc_t;

/* 295 */
typedef unsigned __int64 speed_t;

/* 296 */
struct winsize
{
  unsigned __int16 ws_row;
  unsigned __int16 ws_col;
  unsigned __int16 ws_xpixel;
  unsigned __int16 ws_ypixel;
};

/* 297 */
struct session::$5E1136A0C826C1CD52C59D8DD9C7C74B
{
  session *le_next;
  session **le_prev;
};

/* 298 */
struct proc::$362CBD09F9E28B04D136306D2489B7C4
{
  aio_workq_entry *tqh_first;
  aio_workq_entry **tqh_last;
};

/* 299 */
struct aio_workq_entry
{
  aio_workq_entry::$A4C2CF190061FC624E73AE0F63EFF201 aio_workq_link;
  aio_workq_entry::$A4C2CF190061FC624E73AE0F63EFF201 aio_proc_link;
  void *group_tag;
  proc *procp;
  user_addr_t uaiocbp;
  user_aiocb aiocb;
  vm_map_t aio_map;
  thread_t thread;
  int aio_refcount;
  user_ssize_t returnval;
  int errorval;
  int flags;
};

/* 300 */
struct rusage_superset
{
  rusage ru;
  rusage_info_current ri;
};

/* 301 */
typedef rusage_info_v4 rusage_info_current;

/* 302 */
struct rusage_info_v4
{
  uint8_t_0 ri_uuid[16];
  uint64_t_0 ri_user_time;
  uint64_t_0 ri_system_time;
  uint64_t_0 ri_pkg_idle_wkups;
  uint64_t_0 ri_interrupt_wkups;
  uint64_t_0 ri_pageins;
  uint64_t_0 ri_wired_size;
  uint64_t_0 ri_resident_size;
  uint64_t_0 ri_phys_footprint;
  uint64_t_0 ri_proc_start_abstime;
  uint64_t_0 ri_proc_exit_abstime;
  uint64_t_0 ri_child_user_time;
  uint64_t_0 ri_child_system_time;
  uint64_t_0 ri_child_pkg_idle_wkups;
  uint64_t_0 ri_child_interrupt_wkups;
  uint64_t_0 ri_child_pageins;
  uint64_t_0 ri_child_elapsed_abstime;
  uint64_t_0 ri_diskio_bytesread;
  uint64_t_0 ri_diskio_byteswritten;
  uint64_t_0 ri_cpu_time_qos_default;
  uint64_t_0 ri_cpu_time_qos_maintenance;
  uint64_t_0 ri_cpu_time_qos_background;
  uint64_t_0 ri_cpu_time_qos_utility;
  uint64_t_0 ri_cpu_time_qos_legacy;
  uint64_t_0 ri_cpu_time_qos_user_initiated;
  uint64_t_0 ri_cpu_time_qos_user_interactive;
  uint64_t_0 ri_billed_system_time;
  uint64_t_0 ri_serviced_system_time;
  uint64_t_0 ri_logical_writes;
  uint64_t_0 ri_lifetime_max_phys_footprint;
  uint64_t_0 ri_instructions;
  uint64_t_0 ri_cycles;
  uint64_t_0 ri_billed_energy;
  uint64_t_0 ri_serviced_energy;
  uint64_t_0 ri_interval_max_phys_footprint;
  uint64_t_0 ri_unused[1];
};

/* 303 */
typedef unsigned __int16 u_short;

/* 304 */
struct __attribute__((aligned(16))) workqueue
{
  thread_call_t wq_delayed_call;
  thread_call_t wq_immediate_call;
  thread_call_t wq_death_call;
  turnstile *wq_turnstile;
  lck_spin_t wq_lock;
  uint64_t_0 wq_thread_call_last_run;
  os_refcnt wq_refcnt;
  workq_state_flags_t wq_flags;
  uint32_t_0 wq_fulfilled;
  uint32_t_0 wq_creations;
  uint32_t_0 wq_timer_interval;
  uint32_t_0 wq_event_manager_priority;
  uint32_t_0 wq_reqcount;
  uint16_t wq_thdying_count;
  uint16_t wq_threads_scheduled;
  uint16_t wq_constrained_threads_scheduled;
  uint16_t wq_nthreads;
  uint16_t wq_thidlecount;
  uint16_t wq_thscheduled_count[7];
  wq_thactive_t wq_thactive;
  uint64_t_0 wq_lastblocked_ts[6];
  proc *wq_proc;
  uthread *wq_creator;
  thread_t wq_turnstile_updater;
  workq_uthread_head wq_thrunlist;
  workq_uthread_head wq_thnewlist;
  workq_uthread_head wq_thidlelist;
  priority_queue wq_overcommit_queue;
  priority_queue wq_constrained_queue;
  priority_queue wq_special_queue;
  workq_threadreq_t wq_event_manager_threadreq;
};

/* 305 */
typedef thread_call *thread_call_t;

/* 306 */
struct __attribute__((aligned(8))) thread_call
{
  call_entry tc_call;
  uint64_t_0 tc_submit_count;
  uint64_t_0 tc_finish_count;
  uint64_t_0 tc_ttd;
  uint64_t_0 tc_soft_deadline;
  thread_call_index_t tc_index;
  uint32_t_0 tc_flags;
  int32_t tc_refs;
};

/* 307 */
struct __attribute__((aligned(4))) turnstile
{
  waitq ts_waitq;
  turnstile_inheritor_t ts_inheritor;
  turnstile::$1031C2ABB3A9203A7A6A55DA7F35E290 _anon_0;
  priority_queue ts_inheritor_queue;
  turnstile::$368470C5B395E7C4D4B893A3650B8D0B _anon_1;
  turnstile::$1CD53E9C4370754E2A40252BC9C6C3D4 ts_htable_link;
  uintptr_t ts_proprietor;
  os_refcnt_t ts_refcount;
  uint32_t_0 ts_type_gencount;
  uint32_t_0 ts_port_ref;
  turnstile_update_flags_t ts_inheritor_flags;
  uint8_t_0 ts_priority;
};

/* 308 */
typedef void *turnstile_inheritor_t;

/* 309 */
union turnstile::$1031C2ABB3A9203A7A6A55DA7F35E290
{
  turnstile_list ts_free_turnstiles;
  turnstile::$1031C2ABB3A9203A7A6A55DA7F35E290::$1CD53E9C4370754E2A40252BC9C6C3D4 ts_free_elm;
};

/* 310 */
struct turnstile_list
{
  turnstile *slh_first;
};

/* 311 */
struct turnstile::$1031C2ABB3A9203A7A6A55DA7F35E290::$1CD53E9C4370754E2A40252BC9C6C3D4
{
  turnstile *sle_next;
};

/* 312 */
struct priority_queue
{
  unsigned __int64 pq_root_packed;
};

/* 313 */
union turnstile::$368470C5B395E7C4D4B893A3650B8D0B
{
  priority_queue_entry ts_inheritor_links;
  queue_chain_t ts_deallocate_link;
};

/* 314 */
typedef queue_entry queue_chain_t;

/* 315 */
struct queue_entry
{
  queue_entry *next;
  queue_entry *prev;
};

/* 316 */
struct turnstile::$1CD53E9C4370754E2A40252BC9C6C3D4
{
  turnstile *sle_next;
};

/* 317 */
typedef os_refcnt os_refcnt_t;

/* 318 */
struct os_refcnt
{
  os_ref_count_t ref_count;
};

/* 319 */
typedef uint32_t_0 os_ref_count_t;

/* 320 */
typedef turnstile_update_flags turnstile_update_flags_t;

/* 321 */
enum turnstile_update_flags : __int8
{
  TURNSTILE_UPDATE_FLAGS_NONE = 0x0,
  TURNSTILE_IMMEDIATE_UPDATE = 0x1,
  TURNSTILE_DELAYED_UPDATE = 0x2,
  TURNSTILE_INHERITOR_THREAD = 0x4,
  TURNSTILE_INHERITOR_TURNSTILE = 0x8,
  TURNSTILE_INHERITOR_NEEDS_PRI_UPDATE = 0x10,
  TURNSTILE_NEEDS_PRI_UPDATE = 0x20,
  TURNSTILE_INHERITOR_WORKQ = 0x40,
  TURNSTILE_UPDATE_BOOST = 0x80,
};

/* 322 */
enum workq_state_flags_t : __int32
{
  WQ_EXITING = 0x1,
  WQ_PROC_SUSPENDED = 0x2,
  WQ_DEATH_CALL_SCHEDULED = 0x4,
  WQ_DELAYED_CALL_SCHEDULED = 0x10,
  WQ_DELAYED_CALL_PENDED = 0x20,
  WQ_IMMEDIATE_CALL_SCHEDULED = 0x40,
  WQ_IMMEDIATE_CALL_PENDED = 0x80,
};

/* 323 */
typedef unsigned___int128 wq_thactive_t;

/* 324 */
typedef unsigned __int128 unsigned___int128;

/* 325 */
struct workq_uthread_head
{
  uthread *tqh_first;
  uthread **tqh_last;
};

/* 326 */
typedef workq_threadreq_s *workq_threadreq_t;

/* 327 */
struct proc::$82586C278305FE0F61B9447E14D7BB30
{
  proc *tqe_next;
  proc **tqe_prev;
};

/* 328 */
struct linker_set_entry
{
  void *ptr;
};

/* 329 */
typedef vm_allocation_site vm_allocation_site_t;

/* 330 */
struct vm_allocation_site
{
  uint64_t_0 total;
  uint64_t_0 mapped;
  int16_t refcount;
  vm_tag_t tag;
  uint16_t flags;
  uint16_t subtotalscount;
  char name[];
};

/* 331 */
typedef uint16_t vm_tag_t;

/* 332 */
struct vm_allocation_total
{
  vm_tag_t tag;
  uint64_t_0 total;
};

/* 333 */
typedef dtrace_meta dtrace_meta_t;

/* 334 */
struct dtrace_meta
{
  dtrace_mops_t dtm_mops;
  char *dtm_name;
  void *dtm_arg;
  uint64_t_0 dtm_count;
};

/* 335 */
typedef dtrace_mops dtrace_mops_t;

/* 336 */
struct dtrace_mops
{
  void (*dtms_create_probe)(void *, void *, dtrace_helper_probedesc_t *);
  void *(*dtms_provide_proc)(void *, dtrace_helper_provdesc_t *, proc *);
  void (*dtms_remove_proc)(void *, dtrace_helper_provdesc_t *, proc *);
  char *(*dtms_provider_name)(void *);
};

/* 337 */
typedef dtrace_helper_probedesc dtrace_helper_probedesc_t;

/* 338 */
struct dtrace_helper_probedesc
{
  char *dthpb_mod;
  char *dthpb_func;
  char *dthpb_name;
  uint64_t_0 dthpb_base;
  int32_t *dthpb_offs;
  int32_t *dthpb_enoffs;
  uint32_t_0 dthpb_noffs;
  uint32_t_0 dthpb_nenoffs;
  uint8_t_0 *dthpb_args;
  uint8_t_0 dthpb_xargc;
  uint8_t_0 dthpb_nargc;
  char *dthpb_xtypes;
  char *dthpb_ntypes;
};

/* 339 */
typedef dtrace_helper_provdesc dtrace_helper_provdesc_t;

/* 340 */
struct __attribute__((aligned(2))) dtrace_helper_provdesc
{
  char *dthpv_provname;
  dtrace_pattr_t dthpv_pattr;
};

/* 341 */
typedef dtrace_hash dtrace_hash_t;

/* 342 */
struct dtrace_hash
{
  dtrace_hashbucket_t **dth_tab;
  int dth_size;
  int dth_mask;
  int dth_nbuckets;
  uintptr_t dth_nextoffs;
  uintptr_t dth_prevoffs;
  dtrace_strkey_f *dth_getstr;
  uintptr_t dth_stroffs;
};

/* 343 */
typedef dtrace_hashbucket dtrace_hashbucket_t;

/* 344 */
struct __attribute__((aligned(8))) dtrace_hashbucket
{
  dtrace_hashbucket *dthb_next;
  void *dthb_chain;
  int dthb_len;
};

/* 345 */
typedef const char *dtrace_strkey_f(void *, uintptr_t);

/* 346 */
typedef dtrace_toxrange dtrace_toxrange_t;

/* 347 */
struct dtrace_toxrange
{
  uintptr_t dtt_base;
  uintptr_t dtt_limit;
};

/* 348 */
typedef dtrace_anon dtrace_anon_t;

/* 349 */
struct __attribute__((aligned(8))) dtrace_anon
{
  dtrace_state_t *dta_state;
  dtrace_enabling_t *dta_enabling;
  processorid_t dta_beganon;
};

/* 350 */
typedef dtrace_enabling dtrace_enabling_t;

/* 351 */
struct dtrace_enabling
{
  dtrace_ecbdesc_t **dten_desc;
  int dten_ndesc;
  int dten_maxdesc;
  dtrace_vstate_t *dten_vstate;
  dtrace_genid_t dten_probegen;
  dtrace_ecbdesc_t *dten_current;
  int dten_error;
  int dten_primed;
  dtrace_enabling *dten_prev;
  dtrace_enabling *dten_next;
};

/* 352 */
typedef dtrace_ecbdesc dtrace_ecbdesc_t;

/* 353 */
struct dtrace_ecbdesc
{
  dtrace_actdesc_t *dted_action;
  dtrace_preddesc_t dted_pred;
  dtrace_probedesc_t dted_probe;
  uint64_t_0 dted_uarg;
  int dted_refcnt;
  uint64_t_0 dted_probegen;
};

/* 354 */
typedef dtrace_actdesc dtrace_actdesc_t;

/* 355 */
struct __attribute__((aligned(8))) dtrace_actdesc
{
  dtrace_difo_t *dtad_difo;
  dtrace_actdesc *dtad_next;
  dtrace_actkind_t dtad_kind;
  uint32_t_0 dtad_ntuple;
  uint64_t_0 dtad_arg;
  uint64_t_0 dtad_uarg;
  int dtad_refcnt;
};

/* 356 */
typedef dtrace_preddesc dtrace_preddesc_t;

/* 357 */
struct dtrace_preddesc
{
  dtrace_difo_t *dtpdd_difo;
  dtrace_predicate *dtpdd_predicate;
};

/* 358 */
typedef int processorid_t;

/* 359 */
typedef dtrace_helpers dtrace_helpers_t;

/* 360 */
struct zone
{
  zone_cache *zcache;
  zone_free_element *free_elements;
  zone::$E72408AD974A9D7F41A85C5F0B38E430 pages;
  int count;
  int countfree;
  int count_all_free_pages;
  lck_attr_t_0 lock_attr;
  lck_mtx_t_0 lock;
  lck_mtx_ext_t lock_ext;
  vm_size_t cur_size;
  vm_size_t max_size;
  vm_size_t elem_size;
  vm_size_t alloc_size;
  uint64_t_0 page_count;
  uint64_t_0 sum_count;
  unsigned __int32 exhaustible : 1;
  unsigned __int32 collectable : 1;
  unsigned __int32 expandable : 1;
  unsigned __int32 allows_foreign : 1;
  unsigned __int32 doing_alloc_without_vm_priv : 1;
  unsigned __int32 doing_alloc_with_vm_priv : 1;
  unsigned __int32 waiting : 1;
  unsigned __int32 async_pending : 1;
  unsigned __int32 zleak_on : 1;
  unsigned __int32 caller_acct : 1;
  unsigned __int32 noencrypt : 1;
  unsigned __int32 no_callout : 1;
  unsigned __int32 async_prio_refill : 1;
  unsigned __int32 gzalloc_exempt : 1;
  unsigned __int32 alignment_required : 1;
  unsigned __int32 zone_logging : 1;
  unsigned __int32 zone_replenishing : 1;
  unsigned __int32 kasan_quarantine : 1;
  unsigned __int32 tags : 1;
  unsigned __int32 tags_inline : 1;
  unsigned __int32 tag_zone_index : 6;
  unsigned __int32 zone_valid : 1;
  unsigned __int32 cpu_cache_enable_when_ready : 1;
  unsigned __int32 cpu_cache_enabled : 1;
  unsigned __int32 _reserved : 3;
  int index;
  const char *zone_name;
  uint32_t_0 zleak_capture;
  uint32_t_0 zp_count;
  vm_size_t prio_refill_watermark;
  thread_t zone_replenish_thread;
  gzalloc_data_t gz;
  btlog_t *zlog_btlog;
};

/* 361 */
struct lck_rw_t
{
  uint32_t_0 opaque[3];
  uint32_t_0 opaque4;
};

/* 362 */
typedef modctl modctl_t;

/* 363 */
typedef struct __lck_attr__ lck_attr_t;

/* 364 */
struct __lck_attr__;

/* 365 */
typedef struct __lck_grp_attr__ lck_grp_attr_t;

/* 366 */
struct __lck_grp_attr__;

/* 367 */
typedef struct __lck_grp__ lck_grp_t;

/* 368 */
struct __lck_grp__;

/* 369 */
typedef struct _kthread kthread_t;

/* 370 */
struct _kthread;

/* 371 */
struct dtrace_dof_difo::$D11890BAA7684F677153A503EEA9BDF2
{
  int section;
  int bufoffs;
  int lenoffs;
  int entsize;
  int align;
  const char *msg;
};

/* 372 */
typedef __dev_info *dev_info_t;

/* 373 */
struct __dev_info;

/* 374 */
typedef struct kmem_cache kmem_cache_t;

/* 375 */
struct kmem_cache;

/* 376 */
struct __attribute__((aligned(8))) cdevsw
{
  open_close_fcn_t *d_open;
  open_close_fcn_t *d_close;
  read_write_fcn_t *d_read;
  read_write_fcn_t *d_write;
  ioctl_fcn_t *d_ioctl;
  stop_fcn_t *d_stop;
  reset_fcn_t *d_reset;
  tty **d_ttys;
  select_fcn_t *d_select;
  mmap_fcn_t *d_mmap;
  strategy_fcn_t *d_strategy;
  void *d_reserved_1;
  void *d_reserved_2;
  int d_type;
};

/* 377 */
typedef int open_close_fcn_t(dev_t, int, int, proc *);

/* 378 */
typedef int read_write_fcn_t(dev_t, uio *, int);

/* 379 */
struct __attribute__((aligned(8))) uio
{
  iovecs uio_iovs;
  int uio_iovcnt;
  off_t uio_offset;
  uio_seg uio_segflg;
  uio_rw uio_rw;
  user_size_t uio_resid_64;
  int uio_size;
  int uio_max_iovs;
  u_int32_t uio_flags;
};

/* 380 */
union iovecs
{
  kern_iovec *kiovp;
  user_iovec *uiovp;
};

/* 381 */
struct kern_iovec
{
  u_int64_t iov_base;
  u_int64_t iov_len;
};

/* 382 */
struct user_iovec
{
  user_addr_t iov_base;
  user_size_t iov_len;
};

/* 383 */
enum uio_seg : __int32
{
  UIO_USERSPACE = 0x0,
  UIO_SYSSPACE = 0x2,
  UIO_USERSPACE32 = 0x5,
  UIO_USERSPACE64 = 0x8,
  UIO_SYSSPACE32 = 0xB,
};

/* 384 */
enum uio_rw : __int32
{
  UIO_READ = 0x0,
  UIO_WRITE = 0x1,
};

/* 385 */
typedef int ioctl_fcn_t(dev_t, u_long, caddr_t, int, proc *);

/* 386 */
typedef int stop_fcn_t(tty *, int);

/* 387 */
typedef int reset_fcn_t(int);

/* 388 */
typedef int select_fcn_t(dev_t, int, void *, proc *);

/* 389 */
typedef int mmap_fcn_t(void);

/* 390 */
typedef void strategy_fcn_t(buf *);

/* 391 */
struct buf
{
  buf::$847C27484AD3EA767C79E1C86C0041EE b_hash;
  buf::$847C27484AD3EA767C79E1C86C0041EE b_vnbufs;
  buf::$6B678162D55EC20D480A04FC8D26E8CA b_freelist;
  int b_timestamp;
  timeval b_timestamp_tv;
  int b_whichq;
  volatile uint32_t_0 b_flags;
  volatile uint32_t_0 b_lflags;
  int b_error;
  int b_bufsize;
  int b_bcount;
  int b_resid;
  dev_t b_dev;
  uintptr_t b_datap;
  daddr64_t b_lblkno;
  daddr64_t b_blkno;
  void (*b_iodone)(buf_t, void *);
  vnode_t b_vp;
  kauth_cred_t b_rcred;
  kauth_cred_t b_wcred;
  void *b_upl;
  buf_t b_real_bp;
  buf::$6B678162D55EC20D480A04FC8D26E8CA b_act;
  void *b_drvdata;
  void *b_fsprivate;
  void *b_transaction;
  int b_dirtyoff;
  int b_dirtyend;
  int b_validoff;
  int b_validend;
  uint32_t_0 b_redundancy_flags;
  proc_t b_proc;
  bufattr b_attr;
};

/* 392 */
enum cpu_setup_t : __int32
{
  CPU_INIT = 0x0,
  CPU_CONFIG = 0x1,
  CPU_UNCONFIG = 0x2,
  CPU_ON = 0x3,
  CPU_OFF = 0x4,
  CPU_CPUPART_IN = 0x5,
  CPU_CPUPART_OUT = 0x6,
};

/* 393 */
enum dtrace_dynvar_op : __int32
{
  DTRACE_DYNVAR_ALLOC = 0x0,
  DTRACE_DYNVAR_NOALLOC = 0x1,
  DTRACE_DYNVAR_DEALLOC = 0x2,
};

/* 394 */
typedef uintptr_t dtrace_provider_id_t;

/* 395 */
typedef uintptr_t dtrace_meta_provider_id_t;

/* 396 */
typedef dtrace_cpu dtrace_cpu_t;

/* 397 */
struct dtrace_cpu
{
  processorid_t cpu_id;
  dtrace_cpu *cpu_next;
  lck_rw_t cpu_ft_lock;
  uintptr_t cpu_dtrace_caller;
  hrtime_t cpu_dtrace_chillmark;
  hrtime_t cpu_dtrace_chilled;
  boolean_t cpu_dtrace_invop_underway;
  cyc_list_head cpu_cyc_list;
};

/* 398 */
struct cyc_list_head
{
  wrap_timer_call *lh_first;
};

/* 399 */
struct wrap_timer_call
{
  cyc_handler_t hdlr;
  cyc_time_t when;
  uint64_t_0 deadline;
  int cpuid;
  boolean_t suspended;
  timer_call_0 call;
  wrap_timer_call::$43957F64C386F855ED573ECA52AEADFB entries;
};

/* 400 */
typedef dtrace_rechdr dtrace_rechdr_t;

/* 401 */
struct dtrace_rechdr
{
  dtrace_epid_t dtrh_epid;
  uint32_t_0 dtrh_timestamp_hi;
  uint32_t_0 dtrh_timestamp_lo;
};

/* 402 */
typedef uintptr_t pc_t;

/* 403 */
typedef uthread *uthread_t;

/* 404 */
typedef dtrace_aggbuffer dtrace_aggbuffer_t;

/* 405 */
struct dtrace_aggbuffer
{
  uintptr_t dtagb_hashsize;
  uintptr_t dtagb_free;
  dtrace_aggkey_t **dtagb_hash;
};

/* 406 */
typedef dtrace_aggkey dtrace_aggkey_t;

/* 407 */
struct dtrace_aggkey
{
  uint32_t_0 dtak_hashval;
  unsigned __int32 dtak_action : 4;
  unsigned __int32 dtak_size : 28;
  caddr_t dtak_data;
  dtrace_aggkey *dtak_next;
};

/* 408 */
typedef dtrace_helptrace dtrace_helptrace_t;

/* 409 */
struct dtrace_helptrace
{
  dtrace_helper_action_t *dtht_helper;
  int dtht_where;
  int dtht_nlocals;
  int dtht_fault;
  int dtht_fltoffs;
  uint64_t_0 dtht_illval;
  uint64_t_0 dtht_locals[1];
};

/* 410 */
typedef uint32_t_0 dtrace_specid_t;

/* 411 */
typedef dof_hdr dof_hdr_t;

/* 412 */
struct dof_hdr
{
  uint8_t_0 dofh_ident[16];
  uint32_t_0 dofh_flags;
  uint32_t_0 dofh_hdrsize;
  uint32_t_0 dofh_secsize;
  uint32_t_0 dofh_secnum;
  uint64_t_0 dofh_secoff;
  uint64_t_0 dofh_loadsz;
  uint64_t_0 dofh_filesz;
  uint64_t_0 dofh_pad;
};

/* 413 */
typedef dof_sec dof_sec_t;

/* 414 */
struct dof_sec
{
  uint32_t_0 dofs_type;
  uint32_t_0 dofs_align;
  uint32_t_0 dofs_flags;
  uint32_t_0 dofs_entsize;
  uint64_t_0 dofs_offset;
  uint64_t_0 dofs_size;
};

/* 415 */
typedef dof_provider dof_provider_t;

/* 416 */
struct dof_provider
{
  dof_secidx_t dofpv_strtab;
  dof_secidx_t dofpv_probes;
  dof_secidx_t dofpv_prargs;
  dof_secidx_t dofpv_proffs;
  dof_stridx_t dofpv_name;
  dof_attr_t dofpv_provattr;
  dof_attr_t dofpv_modattr;
  dof_attr_t dofpv_funcattr;
  dof_attr_t dofpv_nameattr;
  dof_attr_t dofpv_argsattr;
  dof_secidx_t dofpv_prenoffs;
};

/* 417 */
typedef uint32_t_0 dof_secidx_t;

/* 418 */
typedef uint32_t_0 dof_stridx_t;

/* 419 */
typedef uint32_t_0 dof_attr_t;

/* 420 */
typedef dof_probe dof_probe_t;

/* 421 */
struct dof_probe
{
  uint64_t_0 dofpr_addr;
  dof_stridx_t dofpr_func;
  dof_stridx_t dofpr_name;
  dof_stridx_t dofpr_nargv;
  dof_stridx_t dofpr_xargv;
  uint32_t_0 dofpr_argidx;
  uint32_t_0 dofpr_offidx;
  uint8_t_0 dofpr_nargc;
  uint8_t_0 dofpr_xargc;
  uint16_t dofpr_noffs;
  uint32_t_0 dofpr_enoffidx;
  uint16_t dofpr_nenoffs;
  uint16_t dofpr_pad1;
  uint32_t_0 dofpr_pad2;
};

/* 422 */
typedef dof_ecbdesc dof_ecbdesc_t;

/* 423 */
struct dof_ecbdesc
{
  dof_secidx_t dofe_probes;
  dof_secidx_t dofe_pred;
  dof_secidx_t dofe_actions;
  uint32_t_0 dofe_pad;
  uint64_t_0 dofe_uarg;
};

/* 424 */
typedef dof_probedesc dof_probedesc_t;

/* 425 */
struct dof_probedesc
{
  dof_secidx_t dofp_strtab;
  dof_stridx_t dofp_provider;
  dof_stridx_t dofp_mod;
  dof_stridx_t dofp_func;
  dof_stridx_t dofp_name;
  uint32_t_0 dofp_id;
};

/* 426 */
typedef dof_difohdr dof_difohdr_t;

/* 427 */
struct dof_difohdr
{
  dtrace_diftype_t dofd_rtype;
  dof_secidx_t dofd_links[1];
};

/* 428 */
typedef dof_actdesc dof_actdesc_t;

/* 429 */
struct dof_actdesc
{
  dof_secidx_t dofa_difo;
  dof_secidx_t dofa_strtab;
  uint32_t_0 dofa_kind;
  uint32_t_0 dofa_ntuple;
  uint64_t_0 dofa_arg;
  uint64_t_0 dofa_uarg;
};

/* 430 */
typedef dof_optdesc dof_optdesc_t;

/* 431 */
struct dof_optdesc
{
  uint32_t_0 dofo_option;
  dof_secidx_t dofo_strtab;
  uint64_t_0 dofo_value;
};

/* 432 */
typedef void (*cyc_func_t)(void *);

/* 433 */
typedef int cpu_setup_func_t(cpu_setup_t, int, void *);

/* 434 */
typedef mach_header_64_0 kernel_mach_header_t;

/* 435 */
struct mach_header_64_0
{
  uint32_t_0 magic;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
  uint32_t_0 filetype;
  uint32_t_0 ncmds;
  uint32_t_0 sizeofcmds;
  uint32_t_0 flags;
  uint32_t_0 reserved;
};

/* 436 */
struct load_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
};

/* 437 */
struct uuid_command_0
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint8_t_0 uuid[16];
};

/* 438 */
typedef dtrace_mstate dtrace_mstate_t;

/* 439 */
struct dtrace_mstate
{
  uintptr_t dtms_scratch_base;
  uintptr_t dtms_scratch_ptr;
  size_t_0 dtms_scratch_size;
  uint32_t_0 dtms_present;
  uint64_t_0 dtms_arg[5];
  dtrace_epid_t dtms_epid;
  uint64_t_0 dtms_timestamp;
  hrtime_t dtms_walltimestamp;
  uint64_t_0 dtms_machtimestamp;
  int dtms_stackdepth;
  int dtms_ustackdepth;
  dtrace_probe *dtms_probe;
  uintptr_t dtms_caller;
  uint64_t_0 dtms_ucaller;
  int dtms_ipl;
  int dtms_fltoffs;
  uintptr_t dtms_strtok;
  uintptr_t dtms_strtok_limit;
  uint32_t_0 dtms_access;
  dtrace_difo_t *dtms_difo;
};

/* 440 */
typedef uint8_t_0 uchar_t;

/* 441 */
typedef dtrace_match_cond dtrace_match_cond_t;

/* 442 */
struct dtrace_match_cond
{
  int (*dmc_func)(dtrace_probedesc_t *, void *);
  void *dmc_data;
};

/* 443 */
typedef int dtrace_probekey_f(const char *, const char *, int);

/* 444 */
typedef dtrace_probekey dtrace_probekey_t;

/* 445 */
struct __attribute__((aligned(8))) dtrace_probekey
{
  const char *dtpk_prov;
  dtrace_probekey_f *dtpk_pmatch;
  const char *dtpk_mod;
  dtrace_probekey_f *dtpk_mmatch;
  const char *dtpk_func;
  dtrace_probekey_f *dtpk_fmatch;
  const char *dtpk_name;
  dtrace_probekey_f *dtpk_nmatch;
  dtrace_id_t dtpk_id;
};

/* 446 */
typedef dof_ioctl_data dof_ioctl_data_t;

/* 447 */
typedef uintptr_t dtrace_icookie_t;

/* 448 */
typedef uint_t minor_t;

/* 449 */
typedef dtrace_bufdesc dtrace_bufdesc_t;

/* 450 */
struct dtrace_bufdesc
{
  uint64_t_0 dtbd_size;
  uint32_t_0 dtbd_cpu;
  uint32_t_0 dtbd_errors;
  uint64_t_0 dtbd_drops;
  char *dtbd_data;
  uint64_t_0 dtbd_oldest;
  uint64_t_0 dtbd_timestamp;
};

/* 451 */
typedef dtrace_providerdesc dtrace_providerdesc_t;

/* 452 */
struct dtrace_providerdesc
{
  char dtvd_name[64];
  dtrace_pattr_t dtvd_attr;
  dtrace_ppriv_t dtvd_priv;
};

/* 453 */
typedef dtrace_eprobedesc dtrace_eprobedesc_t;

/* 454 */
struct dtrace_eprobedesc
{
  dtrace_epid_t dtepd_epid;
  dtrace_id_t dtepd_probeid;
  uint64_t_0 dtepd_uarg;
  uint32_t_0 dtepd_size;
  int dtepd_nrecs;
  dtrace_recdesc_t dtepd_rec[1];
};

/* 455 */
typedef dtrace_conf dtrace_conf_t;

/* 456 */
struct dtrace_conf
{
  uint_t dtc_difversion;
  uint_t dtc_difintregs;
  uint_t dtc_diftupregs;
  uint_t dtc_ctfmodel;
  uint_t dtc_pad[8];
};

/* 457 */
typedef dtrace_status dtrace_status_t;

/* 458 */
struct dtrace_status
{
  uint64_t_0 dtst_dyndrops;
  uint64_t_0 dtst_dyndrops_rinsing;
  uint64_t_0 dtst_dyndrops_dirty;
  uint64_t_0 dtst_specdrops;
  uint64_t_0 dtst_specdrops_busy;
  uint64_t_0 dtst_specdrops_unavail;
  uint64_t_0 dtst_errors;
  uint64_t_0 dtst_filled;
  uint64_t_0 dtst_stkstroverflows;
  uint64_t_0 dtst_dblerrors;
  char dtst_killed;
  char dtst_exiting;
  char dtst_pad[6];
};

/* 459 */
typedef dtrace_aggdesc dtrace_aggdesc_t;

/* 460 */
struct dtrace_aggdesc
{
  char *dtagd_name;
  dtrace_aggvarid_t dtagd_varid;
  int dtagd_flags;
  dtrace_aggid_t dtagd_id;
  dtrace_epid_t dtagd_epid;
  uint32_t_0 dtagd_size;
  int dtagd_nrecs;
  uint32_t_0 dtagd_pad;
  dtrace_recdesc_t dtagd_rec[1];
};

/* 461 */
typedef int64_t dtrace_aggvarid_t;

/* 462 */
typedef dtrace_fmtdesc dtrace_fmtdesc_t;

/* 463 */
struct __attribute__((aligned(4))) dtrace_fmtdesc
{
  char *dtfd_string;
  int dtfd_length;
  uint16_t dtfd_format;
};

/* 464 */
typedef dtrace_repldesc dtrace_repldesc_t;

/* 465 */
struct dtrace_repldesc
{
  dtrace_probedesc_t dtrpd_match;
  dtrace_probedesc_t dtrpd_create;
};

/* 466 */
typedef dtrace_module_uuids_list dtrace_module_uuids_list_t;

/* 467 */
struct dtrace_module_uuids_list
{
  uint64_t_0 dtmul_count;
  UUID dtmul_uuid[1];
};

/* 468 */
typedef dtrace_module_symbols dtrace_module_symbols_t;

/* 469 */
typedef dtrace_procdesc dtrace_procdesc_t;

/* 470 */
struct dtrace_procdesc
{
  char p_name[128];
  int p_name_length;
  pid_t p_pid;
};

/* 471 */
struct __attribute__((packed)) __attribute__((aligned(4))) kmod_info
{
  kmod_info *next;
  int32_t info_version;
  uint32_t_0 id;
  char name[64];
  char version[64];
  int32_t reference_count;
  kmod_reference_t *reference_list;
  vm_address_t address;
  vm_size_t size;
  vm_size_t hdr_size;
  kmod_start_func_t *start;
  kmod_stop_func_t *stop;
};

/* 472 */
typedef kmod_reference kmod_reference_t;

/* 473 */
struct kmod_reference
{
  kmod_reference *next;
  kmod_info *info;
};

/* 474 */
typedef kern_return_t kmod_start_func_t(kmod_info *, void *);

/* 475 */
typedef int kern_return_t;

/* 476 */
typedef kern_return_t kmod_stop_func_t(kmod_info *, void *);

/* 477 */
typedef uint32_t_0 dtrace_optid_t;

/* 478 */
typedef dtrace_string dtrace_string_t;

/* 479 */
struct __attribute__((aligned(8))) dtrace_string
{
  dtrace_string_t *dtst_next;
  dtrace_string_t *dtst_prev;
  uint32_t_0 dtst_refcount;
  char dtst_str[];
};

/* 480 */
typedef dtrace_dynvar_op dtrace_dynvar_op_t;

/* 481 */
typedef __builtin_va_list va_list;

/* 482 */
typedef __va_list_tag __builtin_va_list[1];

/* 483 */
struct __va_list_tag
{
  unsigned int gp_offset;
  unsigned int fp_offset;
  void *overflow_arg_area;
  void *reg_save_area;
};

/* 484 */
typedef uint_t major_t;

/* 485 */
typedef cyc_handler cyc_handler_t;

/* 486 */
struct __attribute__((aligned(8))) cyc_handler
{
  cyc_func_t cyh_func;
  void *cyh_arg;
  cyc_level_t cyh_level;
};

/* 487 */
typedef uint16_t cyc_level_t;

/* 488 */
typedef cyc_time cyc_time_t;

/* 489 */
struct cyc_time
{
  hrtime_t cyt_when;
  hrtime_t cyt_interval;
};

/* 490 */
typedef x86_saved_state64 x86_saved_state64_t;

/* 491 */
struct x86_saved_state64
{
  uint64_t_0 rdi;
  uint64_t_0 rsi;
  uint64_t_0 rdx;
  uint64_t_0 r10;
  uint64_t_0 r8;
  uint64_t_0 r9;
  uint64_t_0 cr2;
  uint64_t_0 r15;
  uint64_t_0 r14;
  uint64_t_0 r13;
  uint64_t_0 r12;
  uint64_t_0 r11;
  uint64_t_0 rbp;
  uint64_t_0 rbx;
  uint64_t_0 rcx;
  uint64_t_0 rax;
  uint32_t_0 gs;
  uint32_t_0 fs;
  uint64_t_0 _pad;
  x86_64_intr_stack_frame isf;
};

/* 492 */
struct x86_64_intr_stack_frame
{
  uint16_t trapno;
  uint16_t cpu;
  uint32_t_0 _pad;
  uint64_t_0 trapfn;
  uint64_t_0 err;
  uint64_t_0 rip;
  uint64_t_0 cs;
  uint64_t_0 rflags;
  uint64_t_0 rsp;
  uint64_t_0 ss;
};

/* 493 */
typedef uint8_t_0 machine_inst_t;

/* 494 */
typedef fbt_probe fbt_probe_t;

/* 495 */
struct fbt_probe
{
  fbt_probe *fbtp_hashnext;
  machine_inst_t *fbtp_patchpoint;
  int8_t fbtp_rval;
  machine_inst_t fbtp_patchval;
  machine_inst_t fbtp_savedval;
  machine_inst_t fbtp_currentval;
  uintptr_t fbtp_roffset;
  dtrace_id_t fbtp_id;
  char fbtp_name[16];
  modctl *fbtp_ctl;
  int fbtp_loadcnt;
  fbt_probe *fbtp_next;
};

/* 496 */
typedef char int8_t;

/* 497 */
struct x86_saved_state_t
{
  uint32_t_0 flavor;
  uint32_t_0 _pad_for_16byte_alignment[3];
  x86_saved_state_t::$E8496EBFAED43302E09BC6B33542517F uss;
};

/* 498 */
union x86_saved_state_t::$E8496EBFAED43302E09BC6B33542517F
{
  x86_saved_state32_t ss_32;
  x86_saved_state64_t ss_64;
};

/* 499 */
typedef x86_saved_state32 x86_saved_state32_t;

/* 500 */
struct x86_saved_state32
{
  uint32_t_0 gs;
  uint32_t_0 fs;
  uint32_t_0 es;
  uint32_t_0 ds;
  uint32_t_0 edi;
  uint32_t_0 esi;
  uint32_t_0 ebp;
  uint32_t_0 cr2;
  uint32_t_0 ebx;
  uint32_t_0 edx;
  uint32_t_0 ecx;
  uint32_t_0 eax;
  uint16_t trapno;
  uint16_t cpu;
  uint32_t_0 err;
  uint32_t_0 eip;
  uint32_t_0 cs;
  uint32_t_0 efl;
  uint32_t_0 uesp;
  uint32_t_0 ss;
};

/* 501 */
typedef IOHibernateImageHeader IOHibernateImageHeader_0;

/* 502 */
struct IOHibernateImageHeader
{
  uint64_t_0 imageSize;
  uint64_t_0 image1Size;
  uint32_t_0 restore1CodePhysPage;
  uint32_t_0 reserved1;
  uint64_t_0 restore1CodeVirt;
  uint32_t_0 restore1PageCount;
  uint32_t_0 restore1CodeOffset;
  uint32_t_0 restore1StackOffset;
  uint32_t_0 pageCount;
  uint32_t_0 bitmapSize;
  uint32_t_0 restore1Sum;
  uint32_t_0 image1Sum;
  uint32_t_0 image2Sum;
  uint32_t_0 actualRestore1Sum;
  uint32_t_0 actualImage1Sum;
  uint32_t_0 actualImage2Sum;
  uint32_t_0 actualUncompressedPages;
  uint32_t_0 conflictCount;
  uint32_t_0 nextFree;
  uint32_t_0 signature;
  uint32_t_0 processorFlags;
  uint32_t_0 runtimePages;
  uint32_t_0 runtimePageCount;
  uint64_t_0 runtimeVirtualPages;
  uint32_t_0 performanceDataStart;
  uint32_t_0 performanceDataSize;
  uint64_t_0 encryptStart;
  uint64_t_0 machineSignature;
  uint32_t_0 previewSize;
  uint32_t_0 previewPageListSize;
  uint32_t_0 diag[4];
  uint32_t_0 handoffPages;
  uint32_t_0 handoffPageCount;
  uint32_t_0 systemTableOffset;
  uint32_t_0 debugFlags;
  uint32_t_0 options;
  uint32_t_0 sleepTime;
  uint32_t_0 compression;
  uint8_t_0 bridgeBootSessionUUID[16];
  uint32_t_0 reserved[54];
  uint32_t_0 booterTime0;
  uint32_t_0 booterTime1;
  uint32_t_0 booterTime2;
  uint32_t_0 booterStart;
  uint32_t_0 smcStart;
  uint32_t_0 connectDisplayTime;
  uint32_t_0 splashTime;
  uint32_t_0 booterTime;
  uint32_t_0 trampolineTime;
  uint64_t_0 encryptEnd;
  uint64_t_0 deviceBase;
  uint32_t_0 deviceBlockSize;
  uint32_t_0 fileExtentMapSize;
  IOPolledFileExtent_0 fileExtentMap[2];
};

/* 503 */
typedef IOPolledFileExtent IOPolledFileExtent_0;

/* 504 */
struct IOPolledFileExtent
{
  uint64_t_0 start;
  uint64_t_0 length;
};

/* 505 */
typedef uint32_t_0 ppnum_t;

/* 506 */
typedef hibernate_bitmap_t hibernate_bitmap_t_0;

/* 507 */
struct hibernate_bitmap_t
{
  uint32_t_0 first_page;
  uint32_t_0 last_page;
  uint32_t_0 bitmapwords;
  uint32_t_0 bitmap[];
};

/* 508 */
typedef hibernate_page_list_t hibernate_page_list_t_0;

/* 509 */
struct hibernate_page_list_t
{
  uint32_t_0 list_size;
  uint32_t_0 page_count;
  uint32_t_0 bank_count;
  hibernate_bitmap_t_0 bank_bitmap[];
};

/* 510 */
typedef unsigned __int16 i386_ioport_t;

/* 511 */
typedef void (*hibernate_kernel_entrypoint::ResetProc)(void);

/* 512 */
struct KLDBootstrap
{
  __int8 gap0[1];
};

/* 513 */
typedef section_64_0 kernel_section_t;

/* 514 */
struct section_64_0
{
  char sectname[16];
  char segname[16];
  uint64_t_0 addr;
  uint64_t_0 size;
  uint32_t_0 offset;
  uint32_t_0 align;
  uint32_t_0 reloff;
  uint32_t_0 nreloc;
  uint32_t_0 flags;
  uint32_t_0 reserved1;
  uint32_t_0 reserved2;
  uint32_t_0 reserved3;
};

/* 515 */
typedef kern_return_t OSReturn;

/* 516 */
typedef uint32_t_0 OSKextLogSpec;

/* 517 */
struct __cppobj OSDictionary : OSCollection
{
  OSDictionary::dictEntry *dictionary;
  unsigned int count;
  unsigned int capacity;
  unsigned int capacityIncrement;
  OSDictionary::ExpansionData *reserved;
};

/* 518 */
struct __cppobj __attribute__((aligned(8))) OSCollection : OSObject:96
{
  unsigned int updateStamp;
  unsigned int fOptions;
};

/* 519 */
struct __cppobj __attribute__((aligned(8))) OSObject : OSMetaClassBase
{
  int retainCount;
};

/* 520 */
struct OSMetaClassBase
{
  int (**_vptr$OSMetaClassBase)(void);
};

/* 521 */
struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) OSObject:96 : OSMetaClassBase
{
  int retainCount;
};

/* 522 */
struct OSDictionary::dictEntry
{
  const OSSymbol *key;
  const OSMetaClassBase *value;
};

/* 523 */
struct __cppobj OSSymbol : OSString
{
};

/* 524 */
struct __cppobj OSString : OSObject
{
  char *string;
  unsigned int flags;
  unsigned int length;
};

/* 525 */
struct OSDictionary::ExpansionData
{
  __int8 gap0[1];
};

/* 526 */
struct __cppobj OSDictionary::MetaClass : OSMetaClass
{
};

/* 527 */
struct __cppobj OSMetaClass : OSMetaClassBase
{
  ExpansionData *reserved;
  const OSMetaClass *superClassLink;
  const OSSymbol *className;
  unsigned int classSize;
  unsigned int instanceCount;
};

/* 528 */
struct __attribute__((aligned(8))) ExpansionData
{
  OSOrderedSet *instances;
  OSKext *kext;
  uint32_t_0 retain;
};

/* 529 */
struct __cppobj OSCollection::MetaClass : OSMetaClass
{
};

/* 530 */
struct __cppobj OSObject::MetaClass : OSMetaClass
{
};

/* 531 */
typedef void (*OSMetaClassBase::_ptf_t)(void);

/* 532 */
struct __cppobj OSSerialize : OSObject
{
  char *data;
  unsigned int length;
  unsigned int capacity;
  unsigned int capacityIncrement;
  OSArray *tags;
  bool binary;
  bool endCollection;
  OSSerialize::Editor editor;
  void *editRef;
};

/* 533 */
struct __cppobj OSArray : OSCollection
{
  const OSMetaClassBase **array;
  unsigned int count;
  unsigned int capacity;
  unsigned int capacityIncrement;
  OSArray::ExpansionData *reserved;
};

/* 534 */
struct OSArray::ExpansionData
{
  __int8 gap0[1];
};

/* 535 */
typedef const OSMetaClassBase *(*OSSerialize::Editor)(void *, OSSerialize *, OSCollection *, const OSSymbol *, const OSMetaClassBase *);

/* 536 */
struct __cppobj OSSerialize::MetaClass : OSMetaClass
{
};

/* 537 */
struct __cppobj OSSymbol::MetaClass : OSMetaClass
{
};

/* 538 */
struct __cppobj OSString::MetaClass : OSMetaClass
{
};

/* 539 */
struct __cppobj OSData : OSObject
{
  void *data;
  unsigned int length;
  unsigned int capacity;
  unsigned int capacityIncrement;
  OSData::ExpansionData *reserved;
};

/* 540 */
struct __attribute__((aligned(8))) OSData::ExpansionData
{
  OSData::DeallocFunction deallocFunction;
  bool disableSerialization;
};

/* 541 */
typedef void (*OSData::DeallocFunction)(void *, unsigned int);

/* 542 */
struct __cppobj OSData::MetaClass : OSMetaClass
{
};

/* 543 */
typedef bool (*OSMetaClassInstanceApplierFunction)(const OSObject *, void *);

/* 544 */
struct __cppobj OSOrderedSet : OSCollection
{
  _Element *array;
  OSOrderedSet::OSOrderFunction ordering;
  void *orderingRef;
  unsigned int count;
  unsigned int capacity;
  unsigned int capacityIncrement;
  OSOrderedSet::ExpansionData *reserved;
};

/* 545 */
struct _Element
{
  const OSMetaClassBase *obj;
};

/* 546 */
typedef SInt32 (*OSOrderedSet::OSOrderFunction)(const OSMetaClassBase *, const OSMetaClassBase *, void *);

/* 547 */
typedef int SInt32;

/* 548 */
struct OSOrderedSet::ExpansionData
{
  __int8 gap0[1];
};

/* 549 */
struct __cppobj OSOrderedSet::MetaClass : OSMetaClass
{
};

/* 550 */
struct __cppobj OSArray::MetaClass : OSMetaClass
{
};

/* 551 */
struct __block_descriptor
{
  unsigned __int64 reserved;
  unsigned __int64 Size;
};

/* 552 */
typedef kaslrPackedOffsets kaslrPackedOffsets_0;

/* 553 */
struct kaslrPackedOffsets
{
  uint32_t_0 count;
  uint32_t_0 offsetsArray[];
};

/* 554 */
typedef _DeviceTreeBuffer _DeviceTreeBuffer_0;

/* 555 */
struct _DeviceTreeBuffer
{
  uint32_t_0 paddr;
  uint32_t_0 length;
};

/* 556 */
struct __cppobj __attribute__((aligned(8))) OSKext : OSObject
{
  OSDictionary *infoDict;
  const OSSymbol *bundleID;
  OSString *path;
  OSString *executableRelPath;
  OSKextVersion version;
  OSKextVersion compatibleVersion;
  OSKextLoadTag loadTag;
  kmod_info_t *kmod_info;
  OSArray *dependencies;
  OSData *linkedExecutable;
  OSSet *metaClasses;
  OSData *interfaceUUID;
  OSKext::$B88F2B81D51662003B893FDBADB3D260 flags;
  list_head pendingPgoHead;
  uuid_t instance_uuid;
  OSKextAccount *account;
  uint32_t_0 builtinKmodIdx;
};

/* 557 */
typedef int64_t OSKextVersion;

/* 558 */
typedef uint32_t_0 OSKextLoadTag;

/* 559 */
typedef kmod_info kmod_info_t;

/* 560 */
struct __cppobj OSSet : OSCollection
{
  OSArray *members;
  OSSet::ExpansionData *reserved;
};

/* 561 */
struct OSSet::ExpansionData
{
  __int8 gap0[1];
};

/* 562 */
struct OSKext::$B88F2B81D51662003B893FDBADB3D260
{
  unsigned __int32 loggingEnabled : 1;
  unsigned __int32 hasAllDependencies : 1;
  unsigned __int32 hasBleedthrough : 1;
  unsigned __int32 interface : 1;
  unsigned __int32 kernelComponent : 1;
  unsigned __int32 prelinked : 1;
  unsigned __int32 builtin : 1;
  unsigned __int32 loaded : 1;
  unsigned __int32 dtraceInitialized : 1;
  unsigned __int32 starting : 1;
  unsigned __int32 started : 1;
  unsigned __int32 stopping : 1;
  unsigned __int32 unloading : 1;
  unsigned __int32 autounloadEnabled : 1;
  unsigned __int32 delayAutounload : 1;
  unsigned __int32 CPPInitialized : 1;
  unsigned __int32 jettisonLinkeditSeg : 1;
};

/* 563 */
struct list_head
{
  list_head *prev;
  list_head *next;
};

/* 564 */
typedef __darwin_uuid_t uuid_t;

/* 565 */
typedef unsigned __int8 __darwin_uuid_t[16];

/* 566 */
struct OSKextAccount
{
  vm_allocation_site_t site;
  uint32_t_0 loadTag;
  OSKext *kext;
};

/* 567 */
struct __cppobj OSKext::MetaClass : OSMetaClass
{
};

/* 568 */
struct __cppobj OSSet::MetaClass : OSMetaClass
{
};

/* 569 */
struct __cppobj OSNumber : OSObject
{
  unsigned __int64 value;
  unsigned int size;
  OSNumber::ExpansionData *reserved;
};

/* 570 */
struct OSNumber::ExpansionData
{
  __int8 gap0[1];
};

/* 571 */
struct __cppobj OSNumber::MetaClass : OSMetaClass
{
};

/* 572 */
typedef unsigned __int8 UInt8;

/* 573 */
typedef host *host_priv_t;

/* 574 */
struct host
{
  lck_mtx_t_0 lock;
  ipc_port_t special[30];
  exception_action exc_actions[14];
};

/* 575 */
typedef uint8_t_0 OSKextExcludeLevel;

/* 576 */
typedef segment_command_64_0 kernel_segment_command_t;

/* 577 */
struct segment_command_64_0
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  char segname[16];
  uint64_t_0 vmaddr;
  uint64_t_0 vmsize;
  uint64_t_0 fileoff;
  uint64_t_0 filesize;
  vm_prot_t maxprot;
  vm_prot_t initprot;
  uint32_t_0 nsects;
  uint32_t_0 flags;
};

/* 578 */
typedef uint32_t_0 OSKextRequestTag;

/* 579 */
typedef _loaded_kext_summary OSKextLoadedKextSummary;

/* 580 */
struct _loaded_kext_summary
{
  char name[64];
  uuid_t uuid;
  uint64_t_0 address;
  uint64_t_0 size;
  uint64_t_0 version;
  uint32_t_0 loadTag;
  uint32_t_0 flags;
  uint64_t_0 reference_list;
};

/* 581 */
typedef OSKextActiveAccount OSKextActiveAccount_0;

/* 582 */
struct OSKextActiveAccount
{
  uintptr_t address;
  uintptr_t address_end;
  OSKextAccount *account;
};

/* 583 */
typedef bool Boolean;

/* 584 */
typedef void (*OSKextRequestResourceCallback)(OSKextRequestTag, OSReturn, const void *, uint32_t_0, void *);

/* 585 */
struct __cppobj __attribute__((aligned(4))) OSCollectionIterator : OSIterator
{
  const OSCollection *collection;
  void *collIterator;
  unsigned int initialUpdateStamp;
  bool valid;
};

/* 586 */
struct __cppobj __attribute__((aligned(8))) OSIterator : OSObject
{
};

/* 587 */
struct __cppobj OSCollectionIterator::MetaClass : OSMetaClass
{
};

/* 588 */
struct __cppobj OSIterator::MetaClass : OSMetaClass
{
};

/* 589 */
struct __cppobj __attribute__((aligned(4))) OSBoolean : OSObject:96
{
  bool value;
};

/* 590 */
struct __cppobj OSBoolean::MetaClass : OSMetaClass
{
};

/* 591 */
struct __cppobj IORegistryEntry : OSObject
{
  IORegistryEntry::ExpansionData *reserved;
  OSDictionary *fRegistryTable;
  OSDictionary *fPropertyTable;
};

/* 592 */
struct IORegistryEntry::ExpansionData
{
  IORecursiveLock *fLock;
  uint64_t_0 fRegistryEntryID;
  SInt32 fRegistryEntryGenerationCount;
  OSObject **fIndexedProperties;
};

/* 593 */
struct __cppobj IORegistryEntry::MetaClass : OSMetaClass
{
};

/* 594 */
typedef IOReturn (*IORegistryEntry::Action)(OSObject *, void *, void *, void *, void *);

/* 595 */
typedef kern_return_t IOReturn;

/* 596 */
struct __cppobj IORegistryPlane : OSObject
{
  const OSSymbol *nameKey;
  const OSSymbol *keys[2];
  const OSSymbol *pathNameKey;
  const OSSymbol *pathLocationKey;
  int reserved[2];
};

/* 597 */
typedef UInt32 IOOptionBits;

/* 598 */
typedef unsigned int UInt32;

/* 599 */
typedef void (*IORegistryEntryApplierFunction)(IORegistryEntry *, void *);

/* 600 */
typedef firehose_buffer_u *firehose_buffer_t;

/* 601 */
union firehose_buffer_u
{
  firehose_buffer_header_s fb_header;
  firehose_chunk_s fb_chunks[64];
};

/* 602 */
struct __attribute__((aligned(4096))) firehose_buffer_header_s
{
  volatile uint16_t fbh_mem_ring[64];
  volatile uint16_t fbh_io_ring[64];
  volatile firehose_ring_tail_u fbh_ring_tail;
  uint32_t_0 fbh_spi_version;
  __attribute__((aligned(64))) volatile uint16_t fbh_ring_mem_head;
  __attribute__((aligned(64))) volatile uint16_t fbh_ring_io_head;
  firehose_buffer_bank_s fbh_bank;
  firehose_buffer_stream_s fbh_stream[7];
  uint64_t_0 fbh_uniquepid;
  pid_t fbh_pid;
  mach_port_t fbh_logd_port;
  volatile mach_port_t fbh_sendp[2];
  mach_port_t fbh_recvp;
  uint64_t_0 fbh_unused[];
};

/* 603 */
union firehose_ring_tail_u
{
  uint64_t_0 frp_atomic_tail;
  firehose_ring_tail_u::$F6571BDB056DC40600E46F6E0E875058 _anon_0;
};

/* 604 */
struct firehose_ring_tail_u::$F6571BDB056DC40600E46F6E0E875058
{
  uint16_t frp_mem_tail;
  uint16_t frp_mem_flushed;
  uint16_t frp_io_tail;
  uint16_t frp_io_flushed;
};

/* 605 */
struct __attribute__((aligned(64))) firehose_buffer_bank_s
{
  volatile firehose_bank_state_u fbb_state;
  volatile uint64_t_0 fbb_metadata_bitmap;
  volatile uint64_t_0 fbb_mem_flushed;
  volatile uint64_t_0 fbb_mem_notifs;
  volatile uint64_t_0 fbb_mem_sync_pushes;
  volatile uint64_t_0 fbb_io_flushed;
  volatile uint64_t_0 fbb_io_notifs;
  volatile uint64_t_0 fbb_io_sync_pushes;
  volatile unsigned __int64 fbb_flags;
  uint64_t_0 fbb_bitmap;
  firehose_bank_state_u fbb_limits;
  uint32_t_0 _fbb_unused;
};

/* 606 */
union firehose_bank_state_u
{
  uint64_t_0 fbs_atomic_state;
  firehose_bank_state_u::$BD110184FB928C646BE0D47E3ED8FAFC _anon_0;
};

/* 607 */
struct firehose_bank_state_u::$BD110184FB928C646BE0D47E3ED8FAFC
{
  firehose_bank_state_u::$BD110184FB928C646BE0D47E3ED8FAFC::$006D8856725CF876918F05D0CE97E48A _anon_0;
  firehose_chunk_ref_t fbs_max_ref;
  uint8_t_0 fbs_unused1;
  uint16_t fbs_unused2;
};

/* 608 */
union firehose_bank_state_u::$BD110184FB928C646BE0D47E3ED8FAFC::$006D8856725CF876918F05D0CE97E48A
{
  firehose_bank_state_u::$BD110184FB928C646BE0D47E3ED8FAFC::$006D8856725CF876918F05D0CE97E48A::$8F687027F4368BA812189D6E13A016F6 _anon_0;
  uint16_t fbs_banks[2];
};

/* 609 */
struct firehose_bank_state_u::$BD110184FB928C646BE0D47E3ED8FAFC::$006D8856725CF876918F05D0CE97E48A::$8F687027F4368BA812189D6E13A016F6
{
  uint16_t fbs_mem_bank;
  uint16_t fbs_io_bank;
};

/* 610 */
typedef uint8_t_0 firehose_chunk_ref_t;

/* 611 */
struct __attribute__((aligned(128))) firehose_buffer_stream_s
{
  firehose_stream_state_u fbs_state;
  uint64_t_0 fbs_loss_start;
};

/* 612 */
union firehose_stream_state_u
{
  uint64_t_0 fss_atomic_state;
  dispatch_gate_s_0 fss_gate;
  firehose_stream_state_u::$A7E8C7F903B397792D4DF1F746BE360B _anon_0;
};

/* 613 */
typedef dispatch_gate_s dispatch_gate_s_0;

/* 614 */
struct dispatch_gate_s
{
  dispatch_lock dgl_lock;
};

/* 615 */
typedef uint32_t_0 dispatch_lock;

/* 616 */
struct firehose_stream_state_u::$A7E8C7F903B397792D4DF1F746BE360B
{
  uint32_t_0 fss_allocator;
  firehose_chunk_ref_t fss_current;
  unsigned __int8 fss_loss : 6;
  unsigned __int8 fss_timestamped : 1;
  unsigned __int8 fss_waiting_for_logd : 1;
  uint16_t fss_generation;
};

/* 617 */
typedef ipc_port_t mach_port_t;

/* 618 */
typedef ipc_port *ipc_port_t;

/* 619 */
struct ipc_port
{
  ipc_object ip_object;
  ipc_mqueue ip_messages;
  ipc_port::$872F585CF5093F516D6749C31A93A0BB data;
  ipc_port::$C29017036FD1D93BDF61AD86650A1567 kdata;
  ipc_port *ip_nsrequest;
  ipc_port *ip_pdrequest;
  ipc_port_request *ip_requests;
  ipc_port::$9FABAF942DAC3BE5CFE61CE1FD3E85E2 kdata2;
  mach_vm_address_t ip_context;
  unsigned __int32 ip_sprequests : 1;
  unsigned __int32 ip_spimportant : 1;
  unsigned __int32 ip_impdonation : 1;
  unsigned __int32 ip_tempowner : 1;
  unsigned __int32 ip_guarded : 1;
  unsigned __int32 ip_strict_guard : 1;
  unsigned __int32 ip_specialreply : 1;
  unsigned __int32 ip_sync_link_state : 3;
  unsigned __int32 ip_impcount : 22;
  mach_port_mscount_t ip_mscount;
  mach_port_rights_t ip_srights;
  mach_port_rights_t ip_sorights;
};

/* 620 */
struct firehose_chunk_s
{
  firehose_chunk_pos_u fc_pos;
  uint64_t_0 fc_timestamp;
  uint8_t_0 fc_data[4080];
};

/* 621 */
union firehose_chunk_pos_u
{
  uint64_t_0 fcp_atomic_pos;
  uint64_t_0 fcp_pos;
  firehose_chunk_pos_u::$B9A2F0638A9E00CD0A989071EAAFE113 _anon_0;
};

/* 622 */
struct firehose_chunk_pos_u::$B9A2F0638A9E00CD0A989071EAAFE113
{
  uint16_t fcp_next_entry_offs;
  uint16_t fcp_private_offs;
  uint8_t_0 fcp_refcnt;
  uint8_t_0 fcp_qos;
  uint8_t_0 fcp_stream;
  unsigned __int8 fcp_flag_full : 1;
  unsigned __int8 fcp_flag_io : 1;
  unsigned __int8 fcp_quarantined : 1;
  unsigned __int8 _fcp_flag_unused : 5;
};

/* 623 */
typedef uint64_t_0 firehose_tracepoint_id_t;

/* 624 */
typedef firehose_tracepoint_s *firehose_tracepoint_t;

/* 625 */
struct firehose_tracepoint_s
{
  firehose_tracepoint_id_u ft_id;
  uint64_t_0 ft_thread;
  firehose_tracepoint_s::$58411EE2B86962CE8E48946783B5E02B _anon_0;
  uint8_t_0 ft_data[];
};

/* 626 */
union firehose_tracepoint_id_u
{
  firehose_tracepoint_id_u::$EFD147142526C5D8BACA275E20C7AF4D ftid;
  firehose_tracepoint_id_t ftid_value;
  firehose_tracepoint_id_t ftid_atomic_value;
};

/* 627 */
struct firehose_tracepoint_id_u::$EFD147142526C5D8BACA275E20C7AF4D
{
  firehose_tracepoint_namespace_t _namespace;
  firehose_tracepoint_type_t _type;
  firehose_tracepoint_flags_t _flags;
  uint32_t_0 _code;
};

/* 628 */
typedef uint8_t_0 firehose_tracepoint_namespace_t;

/* 629 */
typedef uint8_t_0 firehose_tracepoint_type_t;

/* 630 */
typedef uint16_t firehose_tracepoint_flags_t;

/* 631 */
union firehose_tracepoint_s::$58411EE2B86962CE8E48946783B5E02B
{
  firehose_tracepoint_s::$58411EE2B86962CE8E48946783B5E02B::$AD635CCA0AD448913568864D305301B0 _anon_0;
  uint64_t_0 ft_stamp_and_length;
  uint64_t_0 ft_atomic_stamp_and_length;
};

/* 632 */
struct firehose_tracepoint_s::$58411EE2B86962CE8E48946783B5E02B::$AD635CCA0AD448913568864D305301B0
{
  unsigned __int64 ft_timestamp_delta : 48;
  unsigned __int64 ft_length : 16;
};

/* 633 */
typedef firehose_chunk_s *firehose_chunk_t;

/* 634 */
typedef firehose_buffer_bank_s *firehose_buffer_bank_t;

/* 635 */
typedef firehose_tracepoint_query_s *firehose_tracepoint_query_t;

/* 636 */
struct __attribute__((aligned(2))) firehose_tracepoint_query_s
{
  uint64_t_0 stamp;
  uint16_t pubsize;
  uint16_t privsize;
  firehose_stream_t stream;
  _Bool is_bank_ok;
  __int8 for_io : 1;
  __int8 quarantined : 1;
  __int8 reliable : 1;
};

/* 637 */
typedef uint8_t_0 firehose_stream_t;

/* 638 */
typedef firehose_buffer_stream_s *firehose_buffer_stream_t;

/* 639 */
typedef firehose_push_reply_s firehose_push_reply_t;

/* 640 */
struct firehose_push_reply_s
{
  uint64_t_0 fpr_mem_flushed_pos;
  uint64_t_0 fpr_io_flushed_pos;
};

/* 641 */
typedef firehose_buffer_header_s *firehose_buffer_header_t;

/* 642 */
typedef dispatch_gate_s *dispatch_gate_t;

/* 643 */
struct __attribute__((aligned(8))) firehose_loss_payload_s
{
  uint64_t_0 start_stamp;
  uint64_t_0 end_stamp;
  uint32_t_0 count;
};

/* 644 */
enum gssd_mechtype : __int32
{
  GSSD_NO_MECH = 0xFFFFFFFF,
  GSSD_KRB5_MECH = 0x0,
  GSSD_SPNEGO_MECH = 0x1,
  GSSD_NTLM_MECH = 0x2,
  GSSD_IAKERB_MECH = 0x3,
};

/* 645 */
enum gssd_nametype : __int32
{
  GSSD_STRING_NAME = 0x0,
  GSSD_EXPORT = 0x1,
  GSSD_ANONYMOUS = 0x2,
  GSSD_HOSTBASED = 0x3,
  GSSD_USER = 0x4,
  GSSD_MACHINE_UID = 0x5,
  GSSD_STRING_UID = 0x6,
  GSSD_KRB5_PRINCIPAL = 0x7,
  GSSD_KRB5_REFERRAL = 0x8,
  GSSD_NTLM_PRINCIPAL = 0x9,
  GSSD_NTLM_BLOB = 0xA,
  GSSD_UUID = 0xB,
};

/* 646 */
union mach_gss_init_sec_context::mach_gss_init_sec_contextMessU
{
  mach_gss_init_sec_context::Request In;
  mach_gss_init_sec_context::Reply Out;
};

/* 647 */
struct mach_gss_init_sec_context::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t intoken;
  NDR_record_t NDR;
  gssd_mechtype_0 mech;
  mach_msg_type_number_t intokenCnt;
  uint32_t_0 uid;
  mach_msg_type_number_t princ_namestrOffset;
  mach_msg_type_number_t princ_namestrCnt;
  char princ_namestr[1024];
  mach_msg_type_number_t svc_namestrOffset;
  mach_msg_type_number_t svc_namestrCnt;
  char svc_namestr[1024];
  uint32_t_0 flags;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
};

/* 648 */
struct mach_msg_header_t
{
  mach_msg_bits_t msgh_bits;
  mach_msg_size_t msgh_size;
  mach_port_t msgh_remote_port;
  mach_port_t msgh_local_port;
  mach_port_name_t msgh_voucher_port;
  mach_msg_id_t msgh_id;
};

/* 649 */
typedef unsigned int mach_msg_bits_t;

/* 650 */
typedef natural_t mach_msg_size_t;

/* 651 */
typedef integer_t mach_msg_id_t;

/* 652 */
struct mach_msg_body_t
{
  mach_msg_size_t msgh_descriptor_count;
};

/* 653 */
struct mach_msg_ool_descriptor_t
{
  void *address;
  __int32 deallocate : 8;
  unsigned __int32 copy : 8;
  unsigned __int32 pad1 : 8;
  unsigned __int32 type : 8;
  mach_msg_size_t size;
};

/* 654 */
typedef unsigned int mach_msg_copy_options_t;

/* 655 */
typedef unsigned int mach_msg_descriptor_type_t;

/* 656 */
typedef gssd_mechtype gssd_mechtype_0;

/* 657 */
typedef natural_t mach_msg_type_number_t;

/* 658 */
typedef uint64_t_0 gssd_ctx;

/* 659 */
typedef uint64_t_0 gssd_cred;

/* 660 */
struct mach_gss_init_sec_context::Reply
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t key;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) gssd_ctx context;
  __attribute__((packed)) __attribute__((aligned(1))) gssd_cred cred_handle;
  uint32_t_0 ret_flags;
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
  mach_msg_trailer_t trailer;
};

/* 661 */
struct mach_msg_trailer_t
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
};

/* 662 */
typedef unsigned int mach_msg_trailer_type_t;

/* 663 */
typedef unsigned int mach_msg_trailer_size_t;

/* 664 */
typedef vm_offset_t pointer_t;

/* 665 */
struct __Reply__mach_gss_init_sec_context_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t key;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) gssd_ctx context;
  __attribute__((packed)) __attribute__((aligned(1))) gssd_cred cred_handle;
  uint32_t_0 ret_flags;
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
};

/* 666 */
typedef uint8_t_0 *gssd_byte_buffer;

/* 667 */
union __attribute__((packed)) __attribute__((aligned(4))) mach_gss_accept_sec_context::mach_gss_accept_sec_contextMessU
{
  mach_gss_accept_sec_context::Request In;
  mach_gss_accept_sec_context::Reply Out;
};

/* 668 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_accept_sec_context::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t intoken;
  NDR_record_t NDR;
  mach_msg_type_number_t intokenCnt;
  mach_msg_type_number_t svc_namestrOffset;
  mach_msg_type_number_t svc_namestrCnt;
  char svc_namestr[1024];
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
};

/* 669 */
struct mach_gss_accept_sec_context::Reply
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t key;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) gssd_ctx context;
  __attribute__((packed)) __attribute__((aligned(1))) gssd_cred cred_handle;
  uint32_t_0 flags;
  uint32_t_0 uid;
  mach_msg_type_number_t gidsCnt;
  uint32_t_0 gids[16];
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
  mach_msg_trailer_t trailer;
};

/* 670 */
struct __Reply__mach_gss_accept_sec_context_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t key;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) gssd_ctx context;
  __attribute__((packed)) __attribute__((aligned(1))) gssd_cred cred_handle;
  uint32_t_0 flags;
  uint32_t_0 uid;
  mach_msg_type_number_t gidsCnt;
  uint32_t_0 gids[16];
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
};

/* 671 */
union mach_gss_log_error::mach_gss_log_errorMessU
{
  mach_gss_log_error::Request In;
};

/* 672 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_log_error::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t mntOffset;
  mach_msg_type_number_t mntCnt;
  char mnt[1024];
  uint32_t_0 uid;
  mach_msg_type_number_t sourceOffset;
  mach_msg_type_number_t sourceCnt;
  char source[1024];
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
};

/* 673 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_gss_init_sec_context_v2_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t key;
  mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
  uint32_t_0 ret_flags;
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  mach_msg_type_number_t displaynameOffset;
  mach_msg_type_number_t displaynameCnt;
  char displayname[128];
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
};

/* 674 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_gss_accept_sec_context_v2_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t key;
  mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
  uint32_t_0 flags;
  uint32_t_0 uid;
  mach_msg_type_number_t gidsCnt;
  uint32_t_0 gids[16];
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
};

/* 675 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_init_sec_context_v3::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t intoken;
  mach_msg_ool_descriptor_t clnt_princ;
  mach_msg_ool_descriptor_t svc_princ;
  NDR_record_t NDR;
  gssd_mechtype_0 mech;
  mach_msg_type_number_t intokenCnt;
  uint32_t_0 uid;
  gssd_nametype_0 clnt_nt;
  mach_msg_type_number_t clnt_princCnt;
  gssd_nametype_0 svc_nt;
  mach_msg_type_number_t svc_princCnt;
  uint32_t_0 flags;
  mach_msg_type_number_t etypesCnt;
  int32_t etypes[64];
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
};

/* 676 */
typedef gssd_nametype gssd_nametype_0;

/* 677 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_init_sec_context_v3::Reply
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t key;
  mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
  uint32_t_0 ret_flags;
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  mach_msg_type_number_t displaynameOffset;
  mach_msg_type_number_t displaynameCnt;
  char displayname[128];
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
  mach_msg_trailer_t trailer;
};

/* 678 */
union mach_gss_init_sec_context_v3::$A9044632D7336EB3A3810A3008F0302E
{
  mach_gss_init_sec_context_v3::Request In;
  mach_gss_init_sec_context_v3::Reply Out;
};

/* 679 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_gss_init_sec_context_v3_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t key;
  mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
  uint32_t_0 ret_flags;
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  mach_msg_type_number_t displaynameOffset;
  mach_msg_type_number_t displaynameCnt;
  char displayname[128];
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
};

/* 680 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_gss_hold_cred_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
};

/* 681 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_gss_unhold_cred_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
};

/* 682 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_gss_lookup_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t gssd_session_port;
};

/* 683 */
struct mach_msg_port_descriptor_t
{
  mach_port_t name;
  unsigned __int32 pad2 : 16;
  unsigned __int32 disposition : 8;
  unsigned __int32 type : 8;
  uint32_t_0 pad_end;
};

/* 684 */
typedef unsigned int mach_msg_type_name_t;

/* 685 */
typedef __Reply__mach_gss_accept_sec_context_t $<143684,1>::__Reply;

/* 686 */
typedef __Reply__mach_gss_init_sec_context_v2_t $<143704,1>::__Reply;

/* 687 */
typedef __Reply__mach_gss_accept_sec_context_v2_t $<143724,1>::__Reply;

/* 688 */
typedef __Reply__mach_gss_init_sec_context_v3_t $<143744,1>::__Reply;

/* 689 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_init_sec_context_v2::Reply
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t key;
  mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
  uint32_t_0 ret_flags;
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  mach_msg_type_number_t displaynameOffset;
  mach_msg_type_number_t displaynameCnt;
  char displayname[128];
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
  mach_msg_trailer_t trailer;
};

/* 690 */
struct mach_gss_init_sec_context_v2::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t intoken;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t clnt_princ;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t svc_princ;
  NDR_record_t NDR;
  gssd_mechtype_0 mech;
  mach_msg_type_number_t intokenCnt;
  uint32_t_0 uid;
  gssd_nametype_0 clnt_nt;
  mach_msg_type_number_t clnt_princCnt;
  gssd_nametype_0 svc_nt;
  mach_msg_type_number_t svc_princCnt;
  uint32_t_0 flags;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
};

/* 691 */
union __attribute__((packed)) __attribute__((aligned(4))) mach_gss_init_sec_context_v2::$E8A629C803FC708A88534919EB5BCAA4
{
  mach_gss_init_sec_context_v2::Request In;
  mach_gss_init_sec_context_v2::Reply Out;
};

/* 692 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_accept_sec_context_v2::Reply
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t key;
  mach_msg_ool_descriptor_t outtoken;
  NDR_record_t NDR;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
  uint32_t_0 flags;
  uint32_t_0 uid;
  mach_msg_type_number_t gidsCnt;
  uint32_t_0 gids[16];
  mach_msg_type_number_t keyCnt;
  mach_msg_type_number_t outtokenCnt;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
  mach_msg_trailer_t trailer;
};

/* 693 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_accept_sec_context_v2::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t intoken;
  mach_msg_ool_descriptor_t svc_princ;
  NDR_record_t NDR;
  mach_msg_type_number_t intokenCnt;
  gssd_nametype_0 svc_nt;
  mach_msg_type_number_t svc_princCnt;
  uint32_t_0 gssd_flags;
  gssd_ctx context;
  gssd_cred cred_handle;
};

/* 694 */
union mach_gss_accept_sec_context_v2::$40D2381CA36BCA97A7906AA5ACA95EEC
{
  mach_gss_accept_sec_context_v2::Request In;
  mach_gss_accept_sec_context_v2::Reply Out;
};

/* 695 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_hold_cred::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
  mach_msg_trailer_t trailer;
};

/* 696 */
struct mach_gss_hold_cred::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t princ;
  NDR_record_t NDR;
  gssd_mechtype_0 mech;
  gssd_nametype_0 nt;
  mach_msg_type_number_t princCnt;
};

/* 697 */
union mach_gss_hold_cred::$D6F5EF839D6579D81F5D432C2E9437B1
{
  mach_gss_hold_cred::Request In;
  mach_gss_hold_cred::Reply Out;
};

/* 698 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_unhold_cred::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 major_stat;
  uint32_t_0 minor_stat;
  mach_msg_trailer_t trailer;
};

/* 699 */
struct mach_gss_unhold_cred::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t princ;
  NDR_record_t NDR;
  gssd_mechtype_0 mech;
  gssd_nametype_0 nt;
  mach_msg_type_number_t princCnt;
};

/* 700 */
union mach_gss_unhold_cred::$75A92DE7E400A39F4D847045371AE5C7
{
  mach_gss_unhold_cred::Request In;
  mach_gss_unhold_cred::Reply Out;
};

/* 701 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_gss_lookup::Reply
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t gssd_session_port;
  mach_msg_trailer_t trailer;
};

/* 702 */
struct mach_gss_lookup::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 uid;
  int32_t asid;
};

/* 703 */
union __attribute__((packed)) __attribute__((aligned(4))) mach_gss_lookup::$0E90FF4934767426DF9A747FCBB25EED
{
  mach_gss_lookup::Request In;
  mach_gss_lookup::Reply Out;
};

/* 704 */
typedef char *gssd_string;

/* 705 */
typedef uint32_t_0 *gssd_gid_list;

/* 706 */
typedef char *gssd_dstring;

/* 707 */
typedef int32_t *gssd_etype_list;

/* 708 */
typedef lockd_request::$54B9F1283055254A595E4CE6C2C293C2 *lockd_request::sp;

/* 709 */
struct lockd_request::$54B9F1283055254A595E4CE6C2C293C2
{
  char data[128];
};

/* 710 */
typedef lockd_request::$7E2335EB9F5F8DE6402C2DFA81942224 *lockd_request::sp_0;

/* 711 */
struct lockd_request::$7E2335EB9F5F8DE6402C2DFA81942224
{
  char data[76];
};

/* 712 */
typedef lockd_request::$97B48EC85E6FD8DE70DF41B22CE25A9C *lockd_request::sp_1;

/* 713 */
struct lockd_request::$97B48EC85E6FD8DE70DF41B22CE25A9C
{
  char data[64];
};

/* 714 */
struct __attribute__((packed)) __attribute__((aligned(4))) lockd_request::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 vers;
  uint32_t_0 flags;
  uint64_t_0 xid;
  int64_t flk_start;
  int64_t flk_len;
  int32_t flk_pid;
  int32_t flk_type;
  int32_t flk_whence;
  sock_storage sock_address;
  xcred cred;
  uint32_t_0 fh_len;
  nfs_handle fh;
};

/* 715 */
typedef uint32_t_0 sock_storage[32];

/* 716 */
typedef uint32_t_0 xcred[19];

/* 717 */
typedef uint8_t_0 nfs_handle[64];

/* 718 */
union lockd_request::$33E34B7AAF5CE098E3ED2717D0C0ED41
{
  lockd_request::Request In;
};

/* 719 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lockd_ping_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 720 */
struct lockd_ping::Request
{
  mach_msg_header_t Head;
};

/* 721 */
union __attribute__((packed)) __attribute__((aligned(4))) lockd_ping::$F93A02D622E24ED369D3A4DB056FAD82
{
  lockd_ping::Request In;
  lockd_ping::Reply Out;
};

/* 722 */
struct __attribute__((packed)) __attribute__((aligned(4))) lockd_ping::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_trailer_t trailer;
};

/* 723 */
struct lockd_shutdown::Request
{
  mach_msg_header_t Head;
};

/* 724 */
union lockd_shutdown::$52F9C295F56024CC2E18C3F8FBAEE7B6
{
  lockd_shutdown::Request In;
};

/* 725 */
struct kextd_ping::Request
{
  mach_msg_header_t Head;
};

/* 726 */
union kextd_ping::$DE9413D11C25B5D8B2CBDFB0D5E89068
{
  kextd_ping::Request In;
};

/* 727 */
union UNDExecute_rpc::UNDExecute_rpcMessU
{
  UNDExecute_rpc::Request In;
};

/* 728 */
struct UNDExecute_rpc::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t executionPathOffset;
  mach_msg_type_number_t executionPathCnt;
  char executionPath[1024];
  int uid;
  int gid;
};

/* 729 */
union UNDDisplayNoticeFromBundle_rpc::UNDDisplayNoticeFromBundle_rpcMessU
{
  UNDDisplayNoticeFromBundle_rpc::Request In;
};

/* 730 */
struct __attribute__((packed)) __attribute__((aligned(4))) UNDDisplayNoticeFromBundle_rpc::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t reply;
  NDR_record_t NDR;
  mach_msg_type_number_t bundlePathOffset;
  mach_msg_type_number_t bundlePathCnt;
  char bundlePath[1024];
  mach_msg_type_number_t fileNameOffset;
  mach_msg_type_number_t fileNameCnt;
  char fileName[1024];
  mach_msg_type_number_t fileExtensionOffset;
  mach_msg_type_number_t fileExtensionCnt;
  char fileExtension[1024];
  mach_msg_type_number_t messageKeyOffset;
  mach_msg_type_number_t messageKeyCnt;
  char messageKey[128];
};

/* 731 */
union UNDDisplayAlertFromBundle_rpc::UNDDisplayAlertFromBundle_rpcMessU
{
  UNDDisplayAlertFromBundle_rpc::Request In;
};

/* 732 */
struct __attribute__((packed)) __attribute__((aligned(4))) UNDDisplayAlertFromBundle_rpc::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t reply;
  NDR_record_t NDR;
  mach_msg_type_number_t bundlePathOffset;
  mach_msg_type_number_t bundlePathCnt;
  char bundlePath[1024];
  mach_msg_type_number_t fileNameOffset;
  mach_msg_type_number_t fileNameCnt;
  char fileName[128];
  mach_msg_type_number_t fileExtensionOffset;
  mach_msg_type_number_t fileExtensionCnt;
  char fileExtension[128];
  mach_msg_type_number_t messageKeyOffset;
  mach_msg_type_number_t messageKeyCnt;
  char messageKey[128];
};

/* 733 */
union UNDDisplayCustomFromBundle_rpc::UNDDisplayCustomFromBundle_rpcMessU
{
  UNDDisplayCustomFromBundle_rpc::Request In;
};

/* 734 */
struct __attribute__((packed)) __attribute__((aligned(4))) UNDDisplayCustomFromBundle_rpc::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t reply;
  NDR_record_t NDR;
  mach_msg_type_number_t bundlePathOffset;
  mach_msg_type_number_t bundlePathCnt;
  char bundlePath[1024];
  mach_msg_type_number_t fileNameOffset;
  mach_msg_type_number_t fileNameCnt;
  char fileName[128];
  mach_msg_type_number_t fileExtensionOffset;
  mach_msg_type_number_t fileExtensionCnt;
  char fileExtension[128];
  mach_msg_type_number_t messageKeyOffset;
  mach_msg_type_number_t messageKeyCnt;
  char messageKey[128];
  mach_msg_type_number_t tokenKeyOffset;
  mach_msg_type_number_t tokenKeyCnt;
  char tokenKey[1024];
};

/* 735 */
union UNDDisplayNoticeSimple_rpc::UNDDisplayNoticeSimple_rpcMessU
{
  UNDDisplayNoticeSimple_rpc::Request In;
};

/* 736 */
struct UNDDisplayNoticeSimple_rpc::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int rpctimeout;
  unsigned int flags;
  mach_msg_type_number_t iconPathOffset;
  mach_msg_type_number_t iconPathCnt;
  char iconPath[128];
  mach_msg_type_number_t soundPathOffset;
  mach_msg_type_number_t soundPathCnt;
  char soundPath[128];
  mach_msg_type_number_t localizationPathOffset;
  mach_msg_type_number_t localizationPathCnt;
  char localizationPath[128];
  mach_msg_type_number_t headerOffset;
  mach_msg_type_number_t headerCnt;
  char header[128];
  mach_msg_type_number_t messageOffset;
  mach_msg_type_number_t messageCnt;
  char message[1024];
  mach_msg_type_number_t defaultButtonTitleOffset;
  mach_msg_type_number_t defaultButtonTitleCnt;
  char defaultButtonTitle[128];
};

/* 737 */
union UNDDisplayAlertSimple_rpc::UNDDisplayAlertSimple_rpcMessU
{
  UNDDisplayAlertSimple_rpc::Request In;
  UNDDisplayAlertSimple_rpc::Reply Out;
};

/* 738 */
struct UNDDisplayAlertSimple_rpc::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int rpctimeout;
  unsigned int flags;
  mach_msg_type_number_t iconPathOffset;
  mach_msg_type_number_t iconPathCnt;
  char iconPath[128];
  mach_msg_type_number_t soundPathOffset;
  mach_msg_type_number_t soundPathCnt;
  char soundPath[128];
  mach_msg_type_number_t localizationPathOffset;
  mach_msg_type_number_t localizationPathCnt;
  char localizationPath[128];
  mach_msg_type_number_t headerOffset;
  mach_msg_type_number_t headerCnt;
  char header[128];
  mach_msg_type_number_t messageOffset;
  mach_msg_type_number_t messageCnt;
  char message[1024];
  mach_msg_type_number_t defaultButtonTitleOffset;
  mach_msg_type_number_t defaultButtonTitleCnt;
  char defaultButtonTitle[128];
  mach_msg_type_number_t alternateButtonTitleOffset;
  mach_msg_type_number_t alternateButtonTitleCnt;
  char alternateButtonTitle[128];
  mach_msg_type_number_t otherButtonTitleOffset;
  mach_msg_type_number_t otherButtonTitleCnt;
  char otherButtonTitle[128];
};

/* 739 */
struct UNDDisplayAlertSimple_rpc::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned int response;
  mach_msg_trailer_t trailer;
};

/* 740 */
struct __Reply__UNDDisplayAlertSimple_rpc_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned int response;
};

/* 741 */
struct __attribute__((packed)) __attribute__((aligned(4))) UNDCancelNotification_rpc::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int userLandNotificationKey;
};

/* 742 */
union UNDCancelNotification_rpc::$538C44B3FF2A4ABC8213DA9F6D10C306
{
  UNDCancelNotification_rpc::Request In;
};

/* 743 */
typedef mach_port_t UNDServerRef;

/* 744 */
typedef char *UNDPath;

/* 745 */
typedef char *UNDKey;

/* 746 */
typedef char *UNDLabel;

/* 747 */
typedef char *UNDMessage;

/* 748 */
struct UNDReply_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[2];
};

/* 749 */
typedef mig_routine_t (*mig_server_routine_t)(mach_msg_header_t *);

/* 750 */
typedef mig_stub_routine_t mig_routine_t;

/* 751 */
typedef void (*mig_stub_routine_t)(mach_msg_header_t *, mach_msg_header_t *);

/* 752 */
struct __attribute__((aligned(8))) routine_descriptor
{
  mig_impl_routine_t impl_routine;
  mig_stub_routine_t stub_routine;
  unsigned int argc;
  unsigned int descr_count;
  routine_arg_descriptor_t arg_descr;
  unsigned int max_reply_msg;
};

/* 753 */
typedef kern_return_t (*mig_impl_routine_t)(void);

/* 754 */
typedef mach_msg_type_descriptor_t *routine_arg_descriptor_t;

/* 755 */
struct mach_msg_type_descriptor_t
{
  natural_t pad1;
  mach_msg_size_t pad2;
  unsigned __int32 pad3 : 24;
  unsigned __int32 type : 8;
};

/* 756 */
struct __attribute__((packed)) __attribute__((aligned(4))) _XUNDAlertCompletedWithResult_rpc::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  int result;
  mach_msg_type_number_t dataCnt;
  mach_msg_trailer_t trailer;
};

/* 757 */
typedef __Reply__UNDAlertCompletedWithResult_rpc_t _XUNDAlertCompletedWithResult_rpc::Reply;

/* 758 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__UNDAlertCompletedWithResult_rpc_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 759 */
typedef __Request__UNDAlertCompletedWithResult_rpc_t _XUNDAlertCompletedWithResult_rpc::__Request;

/* 760 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__UNDAlertCompletedWithResult_rpc_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  int result;
  mach_msg_type_number_t dataCnt;
};

/* 761 */
typedef const char *xmlData_t;

/* 762 */
struct __attribute__((packed)) __attribute__((aligned(4))) _XUNDNotificationCreated_rpc::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int userLandNotificationKey;
  mach_msg_trailer_t trailer;
};

/* 763 */
typedef __Reply__UNDNotificationCreated_rpc_t _XUNDNotificationCreated_rpc::Reply;

/* 764 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__UNDNotificationCreated_rpc_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 765 */
typedef __Request__UNDNotificationCreated_rpc_t _XUNDNotificationCreated_rpc::__Request;

/* 766 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__UNDNotificationCreated_rpc_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int userLandNotificationKey;
};

/* 767 */
enum pset_cluster_type_t : __int32
{
  PSET_SMP = 0x0,
};

/* 768 */
enum xstate_t : __int32
{
  UNDEFINED = 0x0,
  FP = 0x1,
  AVX = 0x2,
  AVX512 = 0x3,
};

/* 769 */
enum thread_call_index_t : __int32
{
  THREAD_CALL_INDEX_HIGH = 0x0,
  THREAD_CALL_INDEX_KERNEL = 0x1,
  THREAD_CALL_INDEX_USER = 0x2,
  THREAD_CALL_INDEX_LOW = 0x3,
  THREAD_CALL_INDEX_KERNEL_HIGH = 0x4,
  THREAD_CALL_INDEX_QOS_UI = 0x5,
  THREAD_CALL_INDEX_QOS_IN = 0x6,
  THREAD_CALL_INDEX_QOS_UT = 0x7,
  THREAD_CALL_INDEX_MAX = 0x8,
};

/* 770 */
typedef vm_offset_t ipc_kobject_t;

/* 771 */
struct ipc_object
{
  ipc_object_bits_t io_bits;
  ipc_object_refs_t io_references;
  lck_spin_t_0 io_lock_data;
};

/* 772 */
typedef natural_t ipc_object_bits_t;

/* 773 */
typedef natural_t ipc_object_refs_t;

/* 774 */
struct lck_spin_t_0
{
  volatile uintptr_t interlock;
};

/* 775 */
union ipc_mqueue::$AAE6D173E1D76EEE3BF22FD88E526636
{
  ipc_mqueue::$AAE6D173E1D76EEE3BF22FD88E526636::$1BAD6DC8F52E3FB09875FA96EAB973FB port;
  ipc_mqueue::$AAE6D173E1D76EEE3BF22FD88E526636::$DD52F5FD1E81EAF5BFE5F0609A57103A pset;
};

/* 776 */
struct __attribute__((aligned(8))) ipc_mqueue::$AAE6D173E1D76EEE3BF22FD88E526636::$1BAD6DC8F52E3FB09875FA96EAB973FB
{
  waitq_0 waitq;
  ipc_kmsg_queue messages;
  mach_port_seqno_t seqno;
  mach_port_name_t receiver_name;
  uint16_t msgcount;
  uint16_t qlimit;
};

/* 777 */
struct waitq_0
{
  unsigned __int32 waitq_type : 2;
  unsigned __int32 waitq_fifo : 1;
  unsigned __int32 waitq_prepost : 1;
  unsigned __int32 waitq_irq : 1;
  unsigned __int32 waitq_isvalid : 1;
  unsigned __int32 waitq_turnstile_or_port : 1;
  unsigned __int32 waitq_eventmask : 25;
  hw_lock_data_t waitq_interlock;
  uint64_t_0 waitq_set_id;
  uint64_t_0 waitq_prepost_id;
  waitq::$E1FEC7806CC73308968B37C5149F73C9 _anon_0;
};

/* 778 */
typedef hslock hw_lock_data_t;

/* 779 */
struct hslock
{
  uintptr_t lock_data;
};

/* 780 */
union waitq::$E1FEC7806CC73308968B37C5149F73C9
{
  queue_head_t waitq_queue;
  priority_queue waitq_prio_queue;
};

/* 781 */
typedef queue_entry queue_head_t;

/* 782 */
struct ipc_kmsg_queue
{
  ipc_kmsg *ikmq_base;
};

/* 783 */
struct ipc_kmsg
{
  mach_msg_size_t ikm_size;
  ipc_kmsg *ikm_next;
  ipc_kmsg *ikm_prev;
  mach_msg_header_t *ikm_header;
  ipc_port_t ikm_prealloc;
  ipc_port_t ikm_voucher;
  mach_msg_priority_t ikm_qos;
  mach_msg_priority_t ikm_qos_override;
  ipc_importance_elem *ikm_importance;
  queue_chain_t ikm_inheritance;
  turnstile_0 *ikm_turnstile;
};

/* 784 */
typedef unsigned int mach_msg_priority_t;

/* 785 */
struct ipc_importance_elem
{
  uint32_t_0 iie_bits;
  mach_voucher_attr_value_reference_t iie_made;
  queue_head_t iie_kmsgs;
  uint32_t_0 iie_externcnt;
  uint32_t_0 iie_externdrop;
};

/* 786 */
struct __attribute__((aligned(4))) turnstile_0
{
  waitq_0 ts_waitq;
  turnstile_inheritor_t ts_inheritor;
  turnstile_0::$490E499329165F13EADEDBF3B25A8079 _anon_0;
  priority_queue ts_inheritor_queue;
  turnstile::$368470C5B395E7C4D4B893A3650B8D0B _anon_1;
  turnstile_0::$C12D27174F6110F66632A1643BC980E7 ts_htable_link;
  uintptr_t ts_proprietor;
  os_refcnt_t ts_refcount;
  uint32_t_0 ts_type_gencount;
  uint32_t_0 ts_port_ref;
  turnstile_update_flags_t ts_inheritor_flags;
  uint8_t_0 ts_priority;
};

/* 787 */
union turnstile_0::$490E499329165F13EADEDBF3B25A8079
{
  turnstile_list ts_free_turnstiles;
  turnstile_0::$490E499329165F13EADEDBF3B25A8079::$C12D27174F6110F66632A1643BC980E7 ts_free_elm;
};

/* 788 */
struct turnstile_0::$490E499329165F13EADEDBF3B25A8079::$C12D27174F6110F66632A1643BC980E7
{
  turnstile_0 *sle_next;
};

/* 789 */
struct turnstile_0::$C12D27174F6110F66632A1643BC980E7
{
  turnstile_0 *sle_next;
};

/* 790 */
typedef natural_t mach_port_seqno_t;

/* 791 */
struct ipc_mqueue::$AAE6D173E1D76EEE3BF22FD88E526636::$DD52F5FD1E81EAF5BFE5F0609A57103A
{
  waitq_set_0 setq;
};

/* 792 */
struct waitq_set_0
{
  waitq_0 wqset_q;
  uint64_t_0 wqset_id;
  waitq_set::$EF674B34F6C2A450326EB1F1DA224602 _anon_0;
};

/* 793 */
union waitq_set::$EF674B34F6C2A450326EB1F1DA224602
{
  uint64_t_0 wqset_prepost_id;
  void *wqset_prepost_hook;
};

/* 794 */
union ipc_mqueue::$62A170AB8CB65F0DB2336A4DA1B5DC2B
{
  klist imq_klist;
  uintptr_t imq_inheritor;
};

/* 795 */
union ipc_port::$872F585CF5093F516D6749C31A93A0BB
{
  ipc_space *receiver;
  ipc_port *destination;
  ipc_port_timestamp_t timestamp;
};

/* 796 */
struct ipc_space
{
  lck_spin_t_0 is_lock_data;
  ipc_space_refs_t is_bits;
  ipc_entry_num_t is_table_size;
  ipc_entry_num_t is_table_free;
  ipc_entry_t is_table;
  task_t is_task;
  ipc_table_size *is_table_next;
  ipc_entry_num_t is_low_mod;
  ipc_entry_num_t is_high_mod;
  bool_gen bool_gen;
  unsigned int is_entropy[1];
  int is_node_id;
};

/* 797 */
typedef natural_t ipc_space_refs_t;

/* 798 */
typedef ipc_table_elems_t ipc_entry_num_t;

/* 799 */
typedef natural_t ipc_table_elems_t;

/* 800 */
typedef ipc_entry *ipc_entry_t;

/* 801 */
struct __attribute__((aligned(8))) ipc_entry
{
  ipc_object *ie_object;
  ipc_entry_bits_t ie_bits;
  mach_port_index_t ie_index;
  ipc_entry::$795EE691F169A2997B9CFFF567361B27 index;
};

/* 802 */
typedef natural_t ipc_entry_bits_t;

/* 803 */
typedef mach_port_name_t mach_port_index_t;

/* 804 */
union ipc_entry::$795EE691F169A2997B9CFFF567361B27
{
  mach_port_index_t next;
  ipc_table_index_t request;
};

/* 805 */
typedef natural_t ipc_table_index_t;

/* 806 */
typedef task *task_t;

/* 807 */
typedef _lck_mtx_ lck_mtx_t_0;

/* 808 */
struct _lck_mtx_
{
  _lck_mtx_::$602FFE6E5E913F929A79432890173CFA _anon_0;
};

/* 809 */
union _lck_mtx_::$602FFE6E5E913F929A79432890173CFA
{
  _lck_mtx_::$602FFE6E5E913F929A79432890173CFA::$B0D49F5543562C4A6B570696DBFF818F _anon_0;
  _lck_mtx_::$602FFE6E5E913F929A79432890173CFA::$BFDE8893734809FCB3FDBF3A03F8D23D _anon_1;
};

/* 810 */
struct _lck_mtx_::$602FFE6E5E913F929A79432890173CFA::$B0D49F5543562C4A6B570696DBFF818F
{
  volatile uintptr_t lck_mtx_owner;
  _lck_mtx_::$602FFE6E5E913F929A79432890173CFA::$B0D49F5543562C4A6B570696DBFF818F::$145FD5AD59621E35EBC05AA9B20F219D _anon_0;
  uint32_t_0 lck_mtx_pad32;
};

/* 811 */
union _lck_mtx_::$602FFE6E5E913F929A79432890173CFA::$B0D49F5543562C4A6B570696DBFF818F::$145FD5AD59621E35EBC05AA9B20F219D
{
  _lck_mtx_::$602FFE6E5E913F929A79432890173CFA::$B0D49F5543562C4A6B570696DBFF818F::$145FD5AD59621E35EBC05AA9B20F219D::$425388B3E12046246F57C82A36E51109 _anon_0;
  uint32_t_0 lck_mtx_state;
};

/* 812 */
struct _lck_mtx_::$602FFE6E5E913F929A79432890173CFA::$B0D49F5543562C4A6B570696DBFF818F::$145FD5AD59621E35EBC05AA9B20F219D::$425388B3E12046246F57C82A36E51109
{
  unsigned __int32 lck_mtx_waiters : 16;
  unsigned __int32 lck_mtx_pri : 8;
  unsigned __int32 lck_mtx_ilocked : 1;
  unsigned __int32 lck_mtx_mlocked : 1;
  unsigned __int32 lck_mtx_promoted : 1;
  unsigned __int32 lck_mtx_spin : 1;
  unsigned __int32 lck_mtx_is_ext : 1;
  unsigned __int32 lck_mtx_pad3 : 3;
};

/* 813 */
struct _lck_mtx_::$602FFE6E5E913F929A79432890173CFA::$BFDE8893734809FCB3FDBF3A03F8D23D
{
  _lck_mtx_ext_ *lck_mtx_ptr;
  uint32_t_0 lck_mtx_tag;
  uint32_t_0 lck_mtx_pad32_2;
};

/* 814 */
struct _lck_mtx_ext_
{
  lck_mtx_t_0 lck_mtx;
  _lck_grp_ *lck_mtx_grp;
  unsigned int lck_mtx_attr;
  unsigned int lck_mtx_pad1;
  lck_mtx_deb_t lck_mtx_deb;
  uint64_t_0 lck_mtx_stat;
  unsigned int lck_mtx_pad2[2];
};

/* 815 */
struct _lck_grp_
{
  queue_chain_t lck_grp_link;
  uint32_t_0 lck_grp_refcnt;
  uint32_t_0 lck_grp_spincnt;
  uint32_t_0 lck_grp_mtxcnt;
  uint32_t_0 lck_grp_rwcnt;
  uint32_t_0 lck_grp_attr;
  char lck_grp_name[64];
  lck_grp_stat_t lck_grp_stat;
};

/* 816 */
typedef _lck_grp_stat_ lck_grp_stat_t;

/* 817 */
struct _lck_grp_stat_
{
  lck_grp_spin_stat_t lck_grp_spin_stat;
  lck_grp_mtx_stat_t lck_grp_mtx_stat;
  lck_grp_rw_stat_t lck_grp_rw_stat;
};

/* 818 */
struct lck_grp_spin_stat_t
{
  uint64_t_0 lck_grp_spin_util_cnt;
  uint64_t_0 lck_grp_spin_held_cnt;
  uint64_t_0 lck_grp_spin_miss_cnt;
  uint64_t_0 lck_grp_spin_held_max;
  uint64_t_0 lck_grp_spin_held_cum;
};

/* 819 */
struct lck_grp_mtx_stat_t
{
  uint64_t_0 lck_grp_mtx_util_cnt;
  uint64_t_0 lck_grp_mtx_held_cnt;
  uint64_t_0 lck_grp_mtx_miss_cnt;
  uint64_t_0 lck_grp_mtx_wait_cnt;
  uint64_t_0 lck_grp_mtx_held_max;
  uint64_t_0 lck_grp_mtx_held_cum;
  uint64_t_0 lck_grp_mtx_wait_max;
  uint64_t_0 lck_grp_mtx_wait_cum;
};

/* 820 */
struct lck_grp_rw_stat_t
{
  uint64_t_0 lck_grp_rw_util_cnt;
  uint64_t_0 lck_grp_rw_held_cnt;
  uint64_t_0 lck_grp_rw_miss_cnt;
  uint64_t_0 lck_grp_rw_wait_cnt;
  uint64_t_0 lck_grp_rw_held_max;
  uint64_t_0 lck_grp_rw_held_cum;
  uint64_t_0 lck_grp_rw_wait_max;
  uint64_t_0 lck_grp_rw_wait_cum;
};

/* 821 */
struct lck_mtx_deb_t
{
  unsigned int type;
  unsigned int pad4;
  vm_offset_t pc;
  vm_offset_t thread;
};

/* 822 */
typedef _vm_map *vm_map_t;

/* 823 */
struct __attribute__((aligned(8))) _vm_map
{
  lck_rw_t_0 lock;
  vm_map_header hdr;
  pmap_t pmap;
  vm_map_size_t size;
  vm_map_size_t user_wire_limit;
  vm_map_size_t user_wire_size;
  vm_map_offset_t vmmap_high_start;
  _vm_map::$D3EDB8117D47154820E78FA04BEC5F8E vmu1;
  lck_mtx_t_0 s_lock;
  lck_mtx_ext_t s_lock_ext;
  vm_map_entry_t hint;
  _vm_map::$DA9F4DA4994BE749EA76B18AC4FD3067 vmmap_u_1;
  _vm_map::$D6836804FAF1C876C43ECA59B6DD34A2 f_s;
  int map_refcnt;
  unsigned __int32 wait_for_space : 1;
  unsigned __int32 wiring_required : 1;
  unsigned __int32 no_zero_fill : 1;
  unsigned __int32 mapped_in_other_pmaps : 1;
  unsigned __int32 switch_protect : 1;
  unsigned __int32 disable_vmentry_reuse : 1;
  unsigned __int32 map_disallow_data_exec : 1;
  unsigned __int32 holelistenabled : 1;
  unsigned __int32 is_nested_map : 1;
  unsigned __int32 map_disallow_new_exec : 1;
  unsigned __int32 jit_entry_exists : 1;
  unsigned __int32 has_corpse_footprint : 1;
  unsigned __int32 warned_delete_gap : 1;
  unsigned __int32 pad : 19;
  unsigned int timestamp;
};

/* 824 */
typedef sched_group *sched_group_t;

/* 825 */
struct sched_group
{
  sched_entry entries[128];
  run_queue runq;
  queue_chain_t sched_groups;
};

/* 826 */
typedef processor_set *processor_set_t;

/* 827 */
struct processor_set
{
  int online_processor_count;
  int load_average;
  int cpu_set_low;
  int cpu_set_hi;
  int cpu_set_count;
  int last_chosen;
  cpumap_t cpu_bitmask;
  cpumap_t recommended_bitmask;
  cpumap_t cpu_state_map[7];
  cpumap_t primary_map;
  simple_lock_data_t sched_lock;
  run_queue pset_runq;
  rt_queue rt_runq;
  int pset_runq_bound_count;
  cpumap_t pending_AST_cpu_mask;
  cpumap_t pending_spill_cpu_mask;
  ipc_port *pset_self;
  ipc_port *pset_name_self;
  processor_set_t pset_list;
  pset_node_t node;
  uint32_t_0 pset_cluster_id;
  pset_cluster_type_t pset_cluster_type;
};

/* 828 */
typedef bitmap_t cpumap_t;

/* 829 */
typedef uint64_t_0 bitmap_t;

/* 830 */
typedef usimple_lock_data_t simple_lock_data_t;

/* 831 */
typedef slock usimple_lock_data_t;

/* 832 */
struct slock
{
  hw_lock_data_t interlock;
};

/* 833 */
struct run_queue
{
  int highq;
  bitmap_t bitmap[2];
  int count;
  int urgency;
  queue_head_t queues[128];
  runq_stats runq_stats;
};

/* 834 */
struct runq_stats
{
  uint64_t_0 count_sum;
  uint64_t_0 last_change_timestamp;
};

/* 835 */
struct rt_queue
{
  int count;
  queue_head_t queue;
  simple_lock_data_t rt_lock;
  runq_stats runq_stats;
};

/* 836 */
typedef pset_node *pset_node_t;

/* 837 */
struct pset_node
{
  processor_set_t psets;
  pset_node_t nodes;
  pset_node_t node_list;
  pset_node_t parent;
};

/* 838 */
struct affinity_space
{
  lck_mtx_t_0 aspc_lock;
  uint32_t_0 aspc_task_count;
  queue_head_t aspc_affinities;
};

/* 839 */
struct exception_action
{
  ipc_port *port;
  thread_state_flavor_t flavor;
  exception_behavior_t behavior;
  boolean_t privileged;
  label *label;
};

/* 840 */
typedef int thread_state_flavor_t;

/* 841 */
typedef int exception_behavior_t;

/* 842 */
union label::$AEDA37D7AA48A02E42F65F84165F55FA
{
  void *l_ptr;
  __int64 l_long;
};

/* 843 */
typedef ledger *ledger_t;

/* 844 */
struct ledger
{
  uint64_t_0 l_id;
  int32_t l_refs;
  int32_t l_size;
  ledger_template *l_template;
  ledger_entry l_entries[];
};

/* 845 */
struct user_ldt
{
  unsigned int start;
  unsigned int count;
  real_descriptor ldt[];
};

/* 846 */
struct real_descriptor
{
  unsigned __int32 limit_low : 16;
  unsigned __int32 base_low : 16;
  unsigned __int32 base_med : 8;
  unsigned __int32 access : 8;
  unsigned __int32 limit_high : 4;
  unsigned __int32 granularity : 4;
  unsigned __int32 base_high : 8;
};

/* 847 */
typedef kcdata_descriptor *kcdata_descriptor_t;

/* 848 */
struct kcdata_descriptor
{
  uint32_t_0 kcd_length;
  uint16_t kcd_flags;
  uint16_t kcd_user_flags;
  mach_vm_address_t kcd_addr_begin;
  mach_vm_address_t kcd_addr_end;
};

/* 849 */
typedef uint64_t_0 mach_vm_address_t;

/* 850 */
struct vm_shared_region
{
  uint32_t_0 sr_ref_count;
  queue_chain_t sr_q;
  void *sr_root_dir;
  cpu_type_t sr_cpu_type;
  cpu_subtype_t sr_cpu_subtype;
  boolean_t sr_64bit;
  boolean_t sr_mapping_in_progress;
  boolean_t sr_slide_in_progress;
  boolean_t sr_persists;
  boolean_t sr_slid;
  ipc_port_t sr_mem_entry;
  mach_vm_offset_t sr_first_mapping;
  mach_vm_offset_t sr_base_address;
  mach_vm_size_t sr_size;
  mach_vm_offset_t sr_pmap_nesting_start;
  mach_vm_size_t sr_pmap_nesting_size;
  thread_call_t sr_timer_call;
  vm_shared_region_slide_info sr_slide_info;
  uuid_t sr_uuid;
  boolean_t sr_uuid_copied;
  uint32_t_0 sr_images_count;
  dyld_uuid_info_64 *sr_images;
};

/* 851 */
typedef uint64_t_0 mach_vm_size_t;

/* 852 */
struct call_entry
{
  queue_chain_t q_link;
  queue_head_t *queue;
  call_entry_func_t func;
  call_entry_param_t param0;
  call_entry_param_t param1;
  uint64_t_0 deadline;
  uint64_t_0 entry_time;
};

/* 853 */
typedef void (*call_entry_func_t)(call_entry_param_t, call_entry_param_t);

/* 854 */
typedef void *call_entry_param_t;

/* 855 */
struct __attribute__((aligned(4))) atm_task_descriptor
{
  lck_mtx_t_0 lock;
  mach_port_t trace_buffer;
  uint64_t_0 trace_buffer_size;
  uint32_t_0 reference_count;
  uint8_t_0 flags;
};

/* 856 */
struct __attribute__((aligned(8))) bank_task
{
  bank_element bt_elem;
  proc_persona_info bt_proc_persona;
  ledger_t bt_ledger;
  queue_head_t bt_accounts_to_pay;
  queue_head_t bt_accounts_to_charge;
  lck_mtx_t_0 bt_acc_to_pay_lock;
  lck_mtx_t_0 bt_acc_to_charge_lock;
  uint8_t_0 bt_hasentitlement;
};

/* 857 */
struct bank_element
{
  unsigned __int32 be_type : 31;
  unsigned __int32 be_voucher_ref : 1;
  int be_refs;
  unsigned int be_made;
};

/* 858 */
struct proc_persona_info
{
  uint64_t_0 unique_pid;
  int32_t pid;
  uint32_t_0 flags;
  uint32_t_0 pidversion;
  uint32_t_0 persona_id;
  uint32_t_0 uid;
  uint32_t_0 gid;
  uint8_t_0 macho_uuid[16];
};

/* 859 */
struct ipc_importance_task
{
  ipc_importance_elem iit_elem;
  task_t iit_task;
  queue_head_t iit_inherits;
  queue_t iit_updateq;
  queue_chain_t iit_updates;
  queue_chain_t iit_props;
  uint64_t_0 iit_updatetime;
  uint64_t_0 iit_transitions;
  uint32_t_0 iit_assertcnt;
  uint32_t_0 iit_legacy_externcnt;
  uint32_t_0 iit_legacy_externdrop;
  unsigned __int32 iit_receiver : 1;
  unsigned __int32 iit_denap : 1;
  unsigned __int32 iit_donor : 1;
  unsigned __int32 iit_live_donor : 1;
  unsigned __int32 iit_updatepolicy : 1;
  unsigned __int32 iit_reserved : 3;
  unsigned __int32 iit_filelocks : 24;
};

/* 860 */
typedef vm_extmod_statistics vm_extmod_statistics_data_t;

/* 861 */
struct vm_extmod_statistics
{
  int64_t task_for_pid_count;
  int64_t task_for_pid_caller_count;
  int64_t thread_creation_count;
  int64_t thread_creation_caller_count;
  int64_t thread_set_state_count;
  int64_t thread_set_state_caller_count;
};

/* 862 */
struct task_requested_policy
{
  unsigned __int64 trp_int_darwinbg : 1;
  unsigned __int64 trp_ext_darwinbg : 1;
  unsigned __int64 trp_int_iotier : 2;
  unsigned __int64 trp_ext_iotier : 2;
  unsigned __int64 trp_int_iopassive : 1;
  unsigned __int64 trp_ext_iopassive : 1;
  unsigned __int64 trp_bg_iotier : 2;
  unsigned __int64 trp_terminated : 1;
  unsigned __int64 trp_base_latency_qos : 3;
  unsigned __int64 trp_base_through_qos : 3;
  unsigned __int64 trp_apptype : 3;
  unsigned __int64 trp_boosted : 1;
  unsigned __int64 trp_role : 4;
  unsigned __int64 trp_tal_enabled : 1;
  unsigned __int64 trp_over_latency_qos : 3;
  unsigned __int64 trp_over_through_qos : 3;
  unsigned __int64 trp_sfi_managed : 1;
  unsigned __int64 trp_qos_clamp : 3;
  unsigned __int64 trp_sup_active : 1;
  unsigned __int64 trp_sup_lowpri_cpu : 1;
  unsigned __int64 trp_sup_timer : 3;
  unsigned __int64 trp_sup_disk : 1;
  unsigned __int64 trp_sup_throughput : 3;
  unsigned __int64 trp_sup_cpu : 1;
  unsigned __int64 trp_sup_bg_sockets : 1;
  unsigned __int64 trp_reserved : 17;
};

/* 863 */
struct task_effective_policy
{
  unsigned __int64 tep_darwinbg : 1;
  unsigned __int64 tep_lowpri_cpu : 1;
  unsigned __int64 tep_io_tier : 2;
  unsigned __int64 tep_io_passive : 1;
  unsigned __int64 tep_all_sockets_bg : 1;
  unsigned __int64 tep_new_sockets_bg : 1;
  unsigned __int64 tep_bg_iotier : 2;
  unsigned __int64 tep_terminated : 1;
  unsigned __int64 tep_qos_ui_is_urgent : 1;
  unsigned __int64 tep_latency_qos : 3;
  unsigned __int64 tep_through_qos : 3;
  unsigned __int64 tep_tal_engaged : 1;
  unsigned __int64 tep_watchers_bg : 1;
  unsigned __int64 tep_sup_active : 1;
  unsigned __int64 tep_role : 4;
  unsigned __int64 tep_suppressed_cpu : 1;
  unsigned __int64 tep_sfi_managed : 1;
  unsigned __int64 tep_live_donor : 1;
  unsigned __int64 tep_qos_clamp : 3;
  unsigned __int64 tep_qos_ceiling : 3;
  unsigned __int64 tep_reserved : 31;
};

/* 864 */
typedef io_stat_info *io_stat_info_t;

/* 865 */
struct io_stat_info
{
  io_stat_entry disk_reads;
  io_stat_entry io_priority[4];
  io_stat_entry paging;
  io_stat_entry metadata;
  io_stat_entry total_io;
};

/* 866 */
struct io_stat_entry
{
  uint64_t_0 count;
  uint64_t_0 size;
};

/* 867 */
struct _cpu_time_qos_stats
{
  uint64_t_0 cpu_time_qos_default;
  uint64_t_0 cpu_time_qos_maintenance;
  uint64_t_0 cpu_time_qos_background;
  uint64_t_0 cpu_time_qos_utility;
  uint64_t_0 cpu_time_qos_legacy;
  uint64_t_0 cpu_time_qos_user_initiated;
  uint64_t_0 cpu_time_qos_user_interactive;
};

/* 868 */
struct mt_task
{
  uint64_t_0 mtk_counts[3];
};

/* 869 */
typedef coalition *coalition_t;

/* 870 */
struct coalition
{
  uint64_t_0 id;
  uint32_t_0 type;
  uint32_t_0 role;
  uint32_t_0 ref_count;
  uint32_t_0 active_count;
  uint32_t_0 focal_task_count;
  uint32_t_0 nonfocal_task_count;
  unsigned __int32 privileged : 1;
  unsigned __int32 termrequested : 1;
  unsigned __int32 terminated : 1;
  unsigned __int32 reaped : 1;
  unsigned __int32 notified : 1;
  unsigned __int32 efficient : 1;
  queue_chain_t coalitions;
  lck_mtx_t_0 lock;
  coalition::$63A32F67D9ED628BA50318E352FD6B89 _anon_0;
};

/* 871 */
struct ipc_table_size
{
  ipc_table_elems_t its_size;
};

/* 872 */
struct bool_gen
{
  unsigned int seed[4];
  unsigned int state;
  simple_lock_data_t lock;
};

/* 873 */
typedef unsigned int ipc_port_timestamp_t;

/* 874 */
union ipc_port::$C29017036FD1D93BDF61AD86650A1567
{
  ipc_kobject_t kobject;
  ipc_importance_task_t imp_task;
  ipc_port_t sync_inheritor_port;
  knote *sync_inheritor_knote;
  turnstile_0 *sync_inheritor_ts;
};

/* 875 */
typedef ipc_importance_task *ipc_importance_task_t;

/* 876 */
struct ipc_port_request
{
  ipc_port_request::$0456BAD67225463EA95D41945154271D notify;
  ipc_port_request::$B0C5F15932ED195E8B521B0CD16BBDE6 name;
};

/* 877 */
union ipc_port_request::$0456BAD67225463EA95D41945154271D
{
  ipc_port *port;
  ipc_port_request_index_t index;
};

/* 878 */
typedef ipc_table_index_t ipc_port_request_index_t;

/* 879 */
union ipc_port_request::$B0C5F15932ED195E8B521B0CD16BBDE6
{
  mach_port_name_t name;
  ipc_table_size *size;
};

/* 880 */
union ipc_port::$9FABAF942DAC3BE5CFE61CE1FD3E85E2
{
  ipc_kmsg *premsg;
  turnstile_0 *send_turnstile;
  ipc_port::$9FABAF942DAC3BE5CFE61CE1FD3E85E2::$39D9AA30BCAF7F86BB0A5FAE5BE94AA3 dealloc_elm;
};

/* 881 */
struct ipc_port::$9FABAF942DAC3BE5CFE61CE1FD3E85E2::$39D9AA30BCAF7F86BB0A5FAE5BE94AA3
{
  ipc_port *sle_next;
};

/* 882 */
typedef natural_t mach_port_mscount_t;

/* 883 */
typedef natural_t mach_port_rights_t;

/* 884 */
typedef UNDReply *UNDReplyRef;

/* 885 */
struct UNDReply
{
  lck_mtx_t_0 lock;
  int userLandNotificationKey;
  KUNCUserNotificationCallBack callback;
  boolean_t inprogress;
  ipc_port_t self_port;
};

/* 886 */
typedef void (*KUNCUserNotificationCallBack)(int, int, const void *);

/* 887 */
typedef uintptr_t KUNCUserNotificationID;

/* 888 */
struct kdp_glob_t
{
  void *saved_state;
  thread_t kdp_thread;
  int kdp_cpu;
  uint32_t_0 session_key;
  unsigned int conn_seq;
  unsigned __int16 reply_port;
  unsigned __int16 exception_port;
  boolean_t is_conn;
  boolean_t is_halted;
  unsigned __int8 exception_seq;
  boolean_t exception_ack_needed;
};

/* 889 */
union thread::$B6C1294F04C8DCB82B0DA0B155802475
{
  queue_chain_t runq_links;
  queue_chain_t wait_links;
  priority_queue_entry wait_prioq_links;
};

/* 890 */
typedef processor *processor_t;

/* 891 */
struct processor
{
  int state;
  _Bool is_SMT;
  _Bool is_recommended;
  thread *active_thread;
  thread *next_thread;
  thread *idle_thread;
  processor_set_t processor_set;
  int current_pri;
  sfi_class_id_t current_sfi_class;
  perfcontrol_class_t current_perfctl_class;
  int starting_pri;
  pset_cluster_type_t current_recommended_pset_type;
  int cpu_id;
  cpu_quiescent_state_t cpu_quiesce_state;
  uint64_t_0 cpu_quiesce_last_checkin;
  timer_call_data_t quantum_timer;
  uint64_t_0 quantum_end;
  uint64_t_0 last_dispatch;
  uint64_t_0 kperf_last_sample_time;
  uint64_t_0 deadline;
  _Bool first_timeslice;
  run_queue runq;
  int runq_bound_count;
  processor_t processor_primary;
  processor_t processor_secondary;
  ipc_port *processor_self;
  processor_t processor_list;
  processor_data_t processor_data;
};

/* 892 */
union waitq_set_0::$EF674B34F6C2A450326EB1F1DA224602
{
  uint64_t_0 wqset_prepost_id;
  void *wqset_prepost_hook;
};

/* 893 */
typedef _lck_rw_t_internal_ lck_rw_t_0;

/* 894 */
union _lck_rw_t_internal_
{
  _lck_rw_t_internal_::$8B950F92E4BF3EB5D2A8CFCD25ECE672 _anon_0;
  _lck_rw_t_internal_::$8E6B35AF8F26A56CF1B9ADBB49C44309 _anon_1;
};

/* 895 */
struct _lck_rw_t_internal_::$8B950F92E4BF3EB5D2A8CFCD25ECE672
{
  volatile uint16_t lck_rw_shared_count;
  volatile uint8_t_0 lck_rw_interlock;
  unsigned __int8 lck_rw_priv_excl : 1;
  unsigned __int8 lck_rw_want_upgrade : 1;
  unsigned __int8 lck_rw_want_write : 1;
  unsigned __int8 lck_r_waiting : 1;
  unsigned __int8 lck_w_waiting : 1;
  unsigned __int8 lck_rw_can_sleep : 1;
  unsigned __int8 lck_rw_padb6 : 2;
  uint32_t_0 lck_rw_tag;
  thread_t lck_rw_owner;
};

/* 896 */
struct _lck_rw_t_internal_::$8E6B35AF8F26A56CF1B9ADBB49C44309
{
  uint32_t_0 data;
  uint32_t_0 lck_rw_pad4;
  uint32_t_0 lck_rw_pad8;
  uint32_t_0 lck_rw_pad12;
};

/* 897 */
struct __attribute__((aligned(8))) vm_map_header
{
  vm_map_links links;
  int nentries;
  boolean_t entries_pageable;
  rb_head rb_head_store;
  int page_shift;
};

/* 898 */
struct vm_map_links
{
  vm_map_entry *prev;
  vm_map_entry *next;
  vm_map_offset_t start;
  vm_map_offset_t end;
};

/* 899 */
struct vm_map_entry
{
  vm_map_links links;
  vm_map_store store;
  vm_map_object vme_object;
  vm_object_offset_t vme_offset;
  unsigned __int32 is_shared : 1;
  unsigned __int32 is_sub_map : 1;
  unsigned __int32 in_transition : 1;
  unsigned __int32 needs_wakeup : 1;
  unsigned __int32 behavior : 2;
  unsigned __int32 needs_copy : 1;
  unsigned __int32 protection : 3;
  unsigned __int32 max_protection : 3;
  unsigned __int32 inheritance : 2;
  unsigned __int32 use_pmap : 1;
  unsigned __int32 no_cache : 1;
  unsigned __int32 permanent : 1;
  unsigned __int32 superpage_size : 1;
  unsigned __int32 map_aligned : 1;
  unsigned __int32 zero_wired_pages : 1;
  unsigned __int32 used_for_jit : 1;
  unsigned __int32 pmap_cs_associated : 1;
  unsigned __int32 from_reserved_zone : 1;
  unsigned __int32 iokit_acct : 1;
  unsigned __int32 vme_resilient_codesign : 1;
  unsigned __int32 vme_resilient_media : 1;
  unsigned __int32 vme_atomic : 1;
  unsigned __int16 wired_count;
  unsigned __int16 user_wired_count;
};

/* 900 */
struct vm_map_store
{
  vm_map_store::$3F7E96A7F633A6098B2EA324DCAE32E7 entry;
};

/* 901 */
struct vm_map_store::$3F7E96A7F633A6098B2EA324DCAE32E7
{
  vm_map_store *rbe_left;
  vm_map_store *rbe_right;
  vm_map_store *rbe_parent;
};

/* 902 */
union vm_map_object
{
  vm_object_t vmo_object;
  vm_map_t vmo_submap;
};

/* 903 */
typedef vm_object *vm_object_t;

/* 904 */
struct vm_object
{
  vm_page_queue_head_t memq;
  lck_rw_t_0 Lock;
  vm_object::$C8B24B0FB453FD0E6A2D14600DE1C895 vo_un1;
  vm_page *memq_hint;
  int ref_count;
  unsigned int resident_page_count;
  unsigned int wired_page_count;
  unsigned int reusable_page_count;
  vm_object *copy;
  vm_object *shadow;
  vm_object::$AA63CD2CEF88474DC0D7BB5FAB477A14 vo_un2;
  memory_object_t pager;
  vm_object_offset_t paging_offset;
  memory_object_control_t pager_control;
  memory_object_copy_strategy_t copy_strategy;
  unsigned __int32 paging_in_progress : 16;
  unsigned __int32 __object1_unused_bits : 16;
  unsigned int activity_in_progress;
  unsigned __int32 all_wanted : 11;
  unsigned __int32 pager_created : 1;
  unsigned __int32 pager_initialized : 1;
  unsigned __int32 pager_ready : 1;
  unsigned __int32 pager_trusted : 1;
  unsigned __int32 can_persist : 1;
  unsigned __int32 internal : 1;
  unsigned __int32 private : 1;
  unsigned __int32 pageout : 1;
  unsigned __int32 alive : 1;
  unsigned __int32 purgable : 2;
  unsigned __int32 purgeable_only_by_kernel : 1;
  unsigned __int32 purgeable_when_ripe : 1;
  unsigned __int32 shadowed : 1;
  unsigned __int32 true_share : 1;
  unsigned __int32 terminating : 1;
  unsigned __int32 named : 1;
  unsigned __int32 shadow_severed : 1;
  unsigned __int32 phys_contiguous : 1;
  unsigned __int32 nophyscache : 1;
  unsigned __int32 _object5_unused_bits : 1;
  queue_chain_t cached_list;
  vm_object_offset_t last_alloc;
  int sequential;
  uint32_t_0 pages_created;
  uint32_t_0 pages_used;
  vm_offset_t cow_hint;
  unsigned __int32 wimg_bits : 8;
  unsigned __int32 code_signed : 1;
  unsigned __int32 transposed : 1;
  unsigned __int32 mapping_in_progress : 1;
  unsigned __int32 phantom_isssd : 1;
  unsigned __int32 volatile_empty : 1;
  unsigned __int32 volatile_fault : 1;
  unsigned __int32 all_reusable : 1;
  unsigned __int32 blocked_access : 1;
  unsigned __int32 set_cache_attr : 1;
  unsigned __int32 object_is_shared_cache : 1;
  unsigned __int32 purgeable_queue_type : 2;
  unsigned __int32 purgeable_queue_group : 3;
  unsigned __int32 io_tracking : 1;
  unsigned __int32 no_tag_update : 1;
  unsigned __int32 __object3_unused_bits : 2;
  unsigned __int32 __unused_access_tracking : 1;
  unsigned __int32 vo_ledger_tag : 2;
  unsigned __int32 __object2_unused_bits : 2;
  uint8_t_0 scan_collisions;
  vm_tag_t wire_tag;
  uint8_t_0 __object4_unused_bits[2];
  uint32_t_0 phantom_object_id;
  queue_head_t uplq;
  queue_chain_t objq;
  queue_chain_t task_objq;
};

/* 905 */
typedef vm_page_packed_queue_entry vm_page_queue_head_t;

/* 906 */
struct vm_page_packed_queue_entry
{
  vm_page_packed_t next;
  vm_page_packed_t prev;
};

/* 907 */
typedef uint32_t_0 vm_page_packed_t;

/* 908 */
union vm_object::$C8B24B0FB453FD0E6A2D14600DE1C895
{
  vm_object_size_t vou_size;
  int vou_cache_pages_to_scan;
};

/* 909 */
typedef uint64_t_0 vm_object_size_t;

/* 910 */
struct __attribute__((aligned(8))) vm_page
{
  vm_page::$42EBF5877FBE23AC91323D812100D529 pageq_un;
  vm_page_queue_chain_t listq;
  vm_page_queue_chain_t vm_page_backgroundq;
  vm_object_offset_t offset;
  vm_page_object_t vm_page_object;
  unsigned __int32 wire_count : 16;
  unsigned __int32 vm_page_q_state : 4;
  unsigned __int32 vm_page_in_background : 1;
  unsigned __int32 vm_page_on_backgroundq : 1;
  unsigned __int32 gobbled : 1;
  unsigned __int32 laundry : 1;
  unsigned __int32 no_cache : 1;
  unsigned __int32 private : 1;
  unsigned __int32 reference : 1;
  unsigned __int32 __unused_pageq_bits : 5;
  vm_page_packed_t next_m;
  unsigned __int32 busy : 1;
  unsigned __int32 wanted : 1;
  unsigned __int32 tabled : 1;
  unsigned __int32 hashed : 1;
  unsigned __int32 fictitious : 1;
  unsigned __int32 clustered : 1;
  unsigned __int32 pmapped : 1;
  unsigned __int32 xpmapped : 1;
  unsigned __int32 wpmapped : 1;
  unsigned __int32 free_when_done : 1;
  unsigned __int32 absent : 1;
  unsigned __int32 error : 1;
  unsigned __int32 dirty : 1;
  unsigned __int32 cleaning : 1;
  unsigned __int32 precious : 1;
  unsigned __int32 overwriting : 1;
  unsigned __int32 restart : 1;
  unsigned __int32 unusual : 1;
  unsigned __int32 cs_validated : 1;
  unsigned __int32 cs_tainted : 1;
  unsigned __int32 cs_nx : 1;
  unsigned __int32 reusable : 1;
  unsigned __int32 lopage : 1;
  unsigned __int32 written_by_kernel : 1;
  unsigned __int32 __unused_object_bits : 8;
  ppnum_t phys_page;
};

/* 911 */
union vm_page::$42EBF5877FBE23AC91323D812100D529
{
  vm_page_queue_chain_t vm_page_pageq;
  vm_page *vm_page_snext;
};

/* 912 */
typedef vm_page_packed_queue_entry vm_page_queue_chain_t;

/* 913 */
typedef uint64_t_0 vm_object_offset_t;

/* 914 */
typedef vm_page_packed_t vm_page_object_t;

/* 915 */
union vm_object::$AA63CD2CEF88474DC0D7BB5FAB477A14
{
  vm_object_offset_t vou_shadow_offset;
  clock_sec_t vou_cache_ts;
  task_t vou_owner;
};

/* 916 */
typedef unsigned __int64 clock_sec_t;

/* 917 */
typedef memory_object *memory_object_t;

/* 918 */
struct memory_object
{
  mo_ipc_object_bits_t mo_ikot;
  const memory_object_pager_ops *mo_pager_ops;
  memory_object_control *mo_control;
};

/* 919 */
typedef natural_t mo_ipc_object_bits_t;

/* 920 */
struct memory_object_pager_ops
{
  void (*memory_object_reference)(memory_object_t);
  void (*memory_object_deallocate)(memory_object_t);
  kern_return_t (*memory_object_init)(memory_object_t, memory_object_control_t, memory_object_cluster_size_t);
  kern_return_t (*memory_object_terminate)(memory_object_t);
  kern_return_t (*memory_object_data_request)(memory_object_t, memory_object_offset_t, memory_object_cluster_size_t, vm_prot_t, memory_object_fault_info_t);
  kern_return_t (*memory_object_data_return)(memory_object_t, memory_object_offset_t, memory_object_cluster_size_t, memory_object_offset_t *, int *, boolean_t, boolean_t, int);
  kern_return_t (*memory_object_data_initialize)(memory_object_t, memory_object_offset_t, memory_object_cluster_size_t);
  kern_return_t (*memory_object_data_unlock)(memory_object_t, memory_object_offset_t, memory_object_size_t, vm_prot_t);
  kern_return_t (*memory_object_synchronize)(memory_object_t, memory_object_offset_t, memory_object_size_t, vm_sync_t);
  kern_return_t (*memory_object_map)(memory_object_t, vm_prot_t);
  kern_return_t (*memory_object_last_unmap)(memory_object_t);
  kern_return_t (*memory_object_data_reclaim)(memory_object_t, boolean_t);
  const char *memory_object_pager_name;
};

/* 921 */
typedef memory_object_control *memory_object_control_t;

/* 922 */
struct memory_object_control
{
  mo_ipc_object_bits_t moc_ikot;
  vm_object *moc_object;
};

/* 923 */
typedef natural_t memory_object_cluster_size_t;

/* 924 */
typedef unsigned __int64 memory_object_offset_t;

/* 925 */
typedef natural_t *memory_object_fault_info_t;

/* 926 */
typedef unsigned __int64 memory_object_size_t;

/* 927 */
typedef unsigned int vm_sync_t;

/* 928 */
typedef int memory_object_copy_strategy_t;

/* 929 */
typedef uint64_t_0 vm_map_offset_t;

/* 930 */
struct rb_head
{
  vm_map_store *rbh_root;
};

/* 931 */
typedef pmap *pmap_t;

/* 932 */
struct pmap
{
  simple_lock_data_t lock;
  pmap_paddr_t pm_cr3;
  pmap_paddr_t pm_ucr3;
  task_map_t pm_task_map;
  boolean_t pm_shared;
  boolean_t pagezero_accessible;
  pcid_t pmap_pcid_cpus[64];
  volatile uint8_t_0 pmap_pcid_coherency_vector[64];
  pmap_statistics stats;
  int ref_count;
  int nx_enabled;
  pml4_entry_t *pm_pml4;
  pml4_entry_t *pm_upml4;
  vm_object_t pm_obj;
  vm_object_t pm_obj_pdpt;
  vm_object_t pm_obj_pml4;
  pmap_paddr_t pm_eptp;
  ledger_t ledger;
};

/* 933 */
typedef uint64_t_0 pmap_paddr_t;

/* 934 */
enum task_map_t : __int32
{
  TASK_MAP_32BIT = 0x0,
  TASK_MAP_64BIT = 0x1,
};

/* 935 */
typedef uint16_t pcid_t;

/* 936 */
struct pmap_statistics
{
  integer_t resident_count;
  integer_t resident_max;
  integer_t wired_count;
  integer_t device;
  integer_t device_peak;
  integer_t internal;
  integer_t internal_peak;
  integer_t external;
  integer_t external_peak;
  integer_t reusable;
  integer_t reusable_peak;
  uint64_t_0 compressed;
  uint64_t_0 compressed_peak;
  uint64_t_0 compressed_lifetime;
};

/* 937 */
typedef uint64_t_0 vm_map_size_t;

/* 938 */
union _vm_map::$D3EDB8117D47154820E78FA04BEC5F8E
{
  vm_map_offset_t vmu1_highest_entry_end;
  vm_map_offset_t vmu1_lowest_unnestable_start;
};

/* 939 */
typedef _lck_mtx_ext_ lck_mtx_ext_t;

/* 940 */
typedef vm_map_entry *vm_map_entry_t;

/* 941 */
union _vm_map::$DA9F4DA4994BE749EA76B18AC4FD3067
{
  vm_map_links *vmmap_hole_hint;
  vm_map_corpse_footprint_header *vmmap_corpse_footprint;
};

/* 942 */
struct vm_map_corpse_footprint_header
{
  vm_size_t cf_size;
  uint32_t_0 cf_last_region;
  vm_map_corpse_footprint_header::$11C77D4AF61E93A25A91B53FB0854D00 cfu;
};

/* 943 */
union vm_map_corpse_footprint_header::$11C77D4AF61E93A25A91B53FB0854D00
{
  uint32_t_0 cfu_last_zeroes;
  uint32_t_0 cfu_hint_region;
};

/* 944 */
union _vm_map::$D6836804FAF1C876C43ECA59B6DD34A2
{
  vm_map_entry_t _first_free;
  vm_map_links *_holes;
};

/* 945 */
struct vm_shared_region_slide_info
{
  mach_vm_address_t slid_address;
  mach_vm_offset_t start;
  mach_vm_offset_t end;
  uint32_t_0 slide;
  vm_object_t slide_object;
  mach_vm_size_t slide_info_size;
  vm_shared_region_slide_info_entry_t slide_info_entry;
};

/* 946 */
typedef vm_shared_region_slide_info_entry *vm_shared_region_slide_info_entry_t;

/* 947 */
union vm_shared_region_slide_info_entry
{
  uint32_t_0 version;
  vm_shared_region_slide_info_entry_v1 v1;
  vm_shared_region_slide_info_entry_v2 v2;
  vm_shared_region_slide_info_entry_v3 v3;
  vm_shared_region_slide_info_entry_v4 v4;
};

/* 948 */
struct vm_shared_region_slide_info_entry_v1
{
  uint32_t_0 version;
  uint32_t_0 toc_offset;
  uint32_t_0 toc_count;
  uint32_t_0 entry_offset;
  uint32_t_0 entry_count;
};

/* 949 */
struct vm_shared_region_slide_info_entry_v2
{
  uint32_t_0 version;
  uint32_t_0 page_size;
  uint32_t_0 page_starts_offset;
  uint32_t_0 page_starts_count;
  uint32_t_0 page_extras_offset;
  uint32_t_0 page_extras_count;
  uint64_t_0 delta_mask;
  uint64_t_0 value_add;
};

/* 950 */
struct vm_shared_region_slide_info_entry_v3
{
  uint32_t_0 version;
  uint32_t_0 page_size;
  uint32_t_0 page_starts_count;
  uint64_t_0 value_add;
  uint16_t page_starts[];
};

/* 951 */
struct vm_shared_region_slide_info_entry_v4
{
  uint32_t_0 version;
  uint32_t_0 page_size;
  uint32_t_0 page_starts_offset;
  uint32_t_0 page_starts_count;
  uint32_t_0 page_extras_offset;
  uint32_t_0 page_extras_count;
  uint64_t_0 delta_mask;
  uint64_t_0 value_add;
};

/* 952 */
struct dyld_uuid_info_64
{
  uint64_t_0 imageLoadAddress;
  uuid_t imageUUID;
};

/* 953 */
typedef uint32_t_0 sfi_class_id_t;

/* 954 */
typedef perfcontrol_class perfcontrol_class_t;

/* 955 */
enum perfcontrol_class : __int32
{
  PERFCONTROL_CLASS_IDLE = 0x1,
  PERFCONTROL_CLASS_KERNEL = 0x2,
  PERFCONTROL_CLASS_REALTIME = 0x3,
  PERFCONTROL_CLASS_BACKGROUND = 0x4,
  PERFCONTROL_CLASS_UTILITY = 0x5,
  PERFCONTROL_CLASS_NONUI = 0x6,
  PERFCONTROL_CLASS_UI = 0x7,
  PERFCONTROL_CLASS_ABOVEUI = 0x8,
};

/* 956 */
enum cpu_quiescent_state_t : __int32
{
  CPU_QUIESCE_COUNTER_NONE = 0x0,
  CPU_QUIESCE_COUNTER_PENDING_JOIN = 0x1,
  CPU_QUIESCE_COUNTER_JOINED = 0x2,
  CPU_QUIESCE_COUNTER_LEFT = 0x3,
};

/* 957 */
typedef timer_call timer_call_data_t;

/* 958 */
struct timer_call
{
  call_entry call_entry;
  simple_lock_data_t lock;
  uint64_t_0 soft_deadline;
  uint32_t_0 flags;
  boolean_t async_dequeue;
  uint64_t_0 ttd;
};

/* 959 */
typedef processor_data processor_data_t;

/* 960 */
struct processor_data
{
  timer_data_t idle_state;
  timer_data_t system_state;
  timer_data_t user_state;
  timer_t current_state;
  timer_t thread_timer;
  timer_t kernel_timer;
  stack_cache stack_cache;
  vm_statistics64_data_t vm_stat;
  wqp_cache wqp_cache;
  int start_color;
  unsigned __int64 page_grab_count;
  void *free_pages;
  processor_sched_statistics sched_stats;
  uint64_t_0 timer_call_ttd;
  uint64_t_0 wakeups_issued_total;
  debugger_state debugger_state;
};

/* 961 */
typedef timer timer_data_t;

/* 962 */
struct timer
{
  uint64_t_0 tstamp;
  uint64_t_0 all_bits;
};

/* 963 */
typedef timer *timer_t;

/* 964 */
struct __attribute__((aligned(8))) stack_cache
{
  vm_offset_t free;
  unsigned int count;
};

/* 965 */
typedef vm_statistics64 vm_statistics64_data_t;

/* 966 */
struct vm_statistics64
{
  natural_t free_count;
  natural_t active_count;
  natural_t inactive_count;
  natural_t wire_count;
  uint64_t_0 zero_fill_count;
  uint64_t_0 reactivations;
  uint64_t_0 pageins;
  uint64_t_0 pageouts;
  uint64_t_0 faults;
  uint64_t_0 cow_faults;
  uint64_t_0 lookups;
  uint64_t_0 hits;
  uint64_t_0 purges;
  natural_t purgeable_count;
  natural_t speculative_count;
  uint64_t_0 decompressions;
  uint64_t_0 compressions;
  uint64_t_0 swapins;
  uint64_t_0 swapouts;
  natural_t compressor_page_count;
  natural_t throttled_count;
  natural_t external_page_count;
  natural_t internal_page_count;
  uint64_t_0 total_uncompressed_pages_in_compressor;
};

/* 967 */
struct __attribute__((aligned(8))) wqp_cache
{
  uint64_t_0 head;
  unsigned int avail;
};

/* 968 */
struct processor_sched_statistics
{
  uint32_t_0 csw_count;
  uint32_t_0 preempt_count;
  uint32_t_0 preempted_rt_count;
  uint32_t_0 preempted_by_rt_count;
  uint32_t_0 rt_sched_count;
  uint32_t_0 interrupt_count;
  uint32_t_0 ipi_count;
  uint32_t_0 timer_pop_count;
  uint32_t_0 idle_transitions;
  uint32_t_0 quantum_timer_expirations;
};

/* 969 */
struct debugger_state
{
  debugger_op db_current_op;
  const char *db_message;
  const char *db_panic_str;
  va_list_0 *db_panic_args;
  uint64_t_0 db_panic_options;
  void *db_panic_data_ptr;
  boolean_t db_proceed_on_sync_failure;
  uint32_t_0 db_entry_count;
  kern_return_t db_op_return;
  unsigned __int64 db_panic_caller;
};

/* 970 */
enum debugger_op : __int32
{
  DBOP_NONE = 0x0,
  DBOP_STACKSHOT = 0x1,
  DBOP_RESET_PGO_COUNTERS = 0x2,
  DBOP_PANIC = 0x3,
  DBOP_DEBUGGER = 0x4,
  DBOP_BREAKPOINT = 0x5,
};

/* 971 */
typedef __builtin_va_list va_list_0;

/* 972 */
typedef uint64_t_0 event64_t;

/* 973 */
typedef uint32_t_0 ast_t;

/* 974 */
typedef int wait_result_t;

/* 975 */
typedef void (*thread_continue_t)(void *, wait_result_t);

/* 976 */
enum sched_mode_t : __int32
{
  TH_MODE_NONE = 0x0,
  TH_MODE_REALTIME = 0x1,
  TH_MODE_FIXED = 0x2,
  TH_MODE_TIMESHARE = 0x3,
};

/* 977 */
enum sched_bucket_t : __int32
{
  TH_BUCKET_RUN = 0x0,
  TH_BUCKET_FIXPRI = 0x1,
  TH_BUCKET_SHARE_FG = 0x2,
  TH_BUCKET_SHARE_DF = 0x3,
  TH_BUCKET_SHARE_UT = 0x4,
  TH_BUCKET_SHARE_BG = 0x5,
  TH_BUCKET_MAX = 0x6,
};

/* 978 */
struct thread::$FB926D6047F49D425A21571F99A7B9EA
{
  uint32_t_0 period;
  uint32_t_0 computation;
  uint32_t_0 constraint;
  boolean_t preemptible;
  uint64_t_0 deadline;
};

/* 979 */
typedef affinity_set *affinity_set_t;

/* 980 */
struct affinity_set
{
  affinity_space *aset_space;
  queue_chain_t aset_affinities;
  queue_head_t aset_threads;
  uint32_t_0 aset_thread_count;
  uint32_t_0 aset_tag;
  uint32_t_0 aset_num;
  processor_set_t aset_pset;
};

/* 981 */
union thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA
{
  thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA::$C67D809D335EACF635CE51393EDF449D receive;
  thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA::$C9DF6274931C3F95A183B6822BFDAFEA sema;
};

/* 982 */
struct thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA::$C67D809D335EACF635CE51393EDF449D
{
  mach_msg_return_t state;
  mach_port_seqno_t seqno;
  ipc_object_t object;
  mach_vm_address_t msg_addr;
  mach_msg_size_t rsize;
  mach_msg_size_t msize;
  mach_msg_option_t option;
  mach_port_name_t receiver_name;
  knote *knote;
  thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA::$C67D809D335EACF635CE51393EDF449D::$33C86F1D66506138DD15E79342D9DD7D _anon_0;
  mach_msg_continue_t continuation;
};

/* 983 */
typedef kern_return_t mach_msg_return_t;

/* 984 */
typedef ipc_object *ipc_object_t;

/* 985 */
typedef integer_t mach_msg_option_t;

/* 986 */
union thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA::$C67D809D335EACF635CE51393EDF449D::$33C86F1D66506138DD15E79342D9DD7D
{
  ipc_kmsg *kmsg;
  ipc_mqueue *peekq;
  thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA::$C67D809D335EACF635CE51393EDF449D::$33C86F1D66506138DD15E79342D9DD7D::$6090F619671D6229A400DE2583F34F9D received_qos;
};

/* 987 */
struct thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA::$C67D809D335EACF635CE51393EDF449D::$33C86F1D66506138DD15E79342D9DD7D::$6090F619671D6229A400DE2583F34F9D
{
  mach_msg_priority_t qos;
  mach_msg_priority_t oqos;
};

/* 988 */
typedef void (*mach_msg_continue_t)(mach_msg_return_t);

/* 989 */
struct thread::$BF9A01185E1BA7C63DFE2CA7A4958BAA::$C9DF6274931C3F95A183B6822BFDAFEA
{
  semaphore *waitsemaphore;
  semaphore *signalsemaphore;
  int options;
  kern_return_t result;
  mach_msg_continue_t continuation;
};

/* 990 */
struct __attribute__((aligned(8))) semaphore
{
  queue_chain_t task_link;
  waitq_0 waitq;
  task_t owner;
  ipc_port_t port;
  os_refcnt_t ref_count;
  int count;
  boolean_t active;
};

/* 991 */
union thread::$7A962EB9AAE9F47CFC0FA45D16A478EF
{
  thread::$7A962EB9AAE9F47CFC0FA45D16A478EF::$203912D40A11A61C812849129F1FE4C1 thc_state;
  thread::$7A962EB9AAE9F47CFC0FA45D16A478EF::$84049F021DC9AB2C045C4F15C1E87198 guard_exc_info;
};

/* 992 */
struct thread::$7A962EB9AAE9F47CFC0FA45D16A478EF::$203912D40A11A61C812849129F1FE4C1
{
  thread_call_group *thc_group;
  thread_call *thc_call;
};

/* 993 */
struct __attribute__((aligned(8))) thread_call_group
{
  const char *tcg_name;
  queue_head_t pending_queue;
  uint32_t_0 pending_count;
  queue_head_t delayed_queues[2];
  timer_call_data_t delayed_timers[2];
  timer_call_data_t dealloc_timer;
  waitq_0 idle_waitq;
  uint32_t_0 idle_count;
  uint32_t_0 active_count;
  uint32_t_0 blocked_count;
  uint32_t_0 tcg_thread_pri;
  uint32_t_0 target_thread_count;
  uint64_t_0 idle_timestamp;
  thread_call_group_flags_t flags;
};

/* 994 */
struct thread::$7A962EB9AAE9F47CFC0FA45D16A478EF::$84049F021DC9AB2C045C4F15C1E87198
{
  mach_exception_code_t code;
  mach_exception_subcode_t subcode;
};

/* 995 */
struct mt_thread
{
  uint64_t_0 mth_gen;
  uint64_t_0 mth_counts[3];
};

/* 996 */
struct machine_thread
{
  x86_saved_state_t *iss;
  void *ifps;
  void *ids;
  simple_lock_data_t lock;
  xstate_t xstate;
  uint64_t_0 cthread_self;
  real_descriptor cthread_desc;
  unsigned __int64 uldt_selector;
  real_descriptor uldt_desc;
  uint32_t_0 specFlags;
  uint64_t_0 thread_gpu_ns;
};

/* 997 */
struct pal_pcb
{
  __int8 gap0[1];
};

/* 998 */
struct thread_requested_policy
{
  unsigned __int64 thrp_int_darwinbg : 1;
  unsigned __int64 thrp_ext_darwinbg : 1;
  unsigned __int64 thrp_int_iotier : 2;
  unsigned __int64 thrp_ext_iotier : 2;
  unsigned __int64 thrp_int_iopassive : 1;
  unsigned __int64 thrp_ext_iopassive : 1;
  unsigned __int64 thrp_latency_qos : 3;
  unsigned __int64 thrp_through_qos : 3;
  unsigned __int64 thrp_pidbind_bg : 1;
  unsigned __int64 thrp_qos : 3;
  unsigned __int64 thrp_qos_relprio : 4;
  unsigned __int64 thrp_qos_override : 3;
  unsigned __int64 thrp_qos_promote : 3;
  unsigned __int64 thrp_qos_ipc_override : 3;
  unsigned __int64 thrp_terminated : 1;
  unsigned __int64 thrp_qos_sync_ipc_override : 3;
  unsigned __int64 thrp_qos_workq_override : 3;
  unsigned __int64 thrp_reserved : 26;
};

/* 999 */
struct thread_effective_policy
{
  unsigned __int64 thep_darwinbg : 1;
  unsigned __int64 thep_io_tier : 2;
  unsigned __int64 thep_io_passive : 1;
  unsigned __int64 thep_all_sockets_bg : 1;
  unsigned __int64 thep_new_sockets_bg : 1;
  unsigned __int64 thep_terminated : 1;
  unsigned __int64 thep_qos_ui_is_urgent : 1;
  unsigned __int64 thep_latency_qos : 3;
  unsigned __int64 thep_through_qos : 3;
  unsigned __int64 thep_qos : 3;
  unsigned __int64 thep_qos_relprio : 4;
  unsigned __int64 thep_qos_promote : 3;
  unsigned __int64 thep_reserved : 40;
};

/* 1000 */
struct thread_qos_override
{
  thread_qos_override *override_next;
  uint32_t_0 override_contended_resource_count;
  int16_t override_qos;
  int16_t override_resource_type;
  user_addr_t override_resource;
};

/* 1001 */
typedef ipc_voucher *ipc_voucher_t;

/* 1002 */
struct ipc_voucher
{
  iv_index_t iv_hash;
  iv_index_t iv_sum;
  os_refcnt_t iv_refs;
  iv_index_t iv_table_size;
  iv_index_t iv_inline_table[8];
  iv_entry_t iv_table;
  ipc_port_t iv_port;
  queue_chain_t iv_hash_link;
};

/* 1003 */
typedef natural_t iv_index_t;

/* 1004 */
typedef iv_index_t *iv_entry_t;

/* 1005 */
struct work_interval
{
  uint64_t_0 wi_id;
  uint32_t_0 wi_ref_count;
  uint32_t_0 wi_create_flags;
  ipc_port_t wi_port;
  uint64_t_0 wi_creator_uniqueid;
  uint32_t_0 wi_creator_pid;
  int wi_creator_pidversion;
};

/* 1006 */
typedef thread_snapshot_wait_flags block_hint_t;

/* 1007 */
enum thread_snapshot_wait_flags : __int8
{
  kThreadWaitNone = 0x0,
  kThreadWaitKernelMutex = 0x1,
  kThreadWaitPortReceive = 0x2,
  kThreadWaitPortSetReceive = 0x3,
  kThreadWaitPortSend = 0x4,
  kThreadWaitPortSendInTransit = 0x5,
  kThreadWaitSemaphore = 0x6,
  kThreadWaitKernelRWLockRead = 0x7,
  kThreadWaitKernelRWLockWrite = 0x8,
  kThreadWaitKernelRWLockUpgrade = 0x9,
  kThreadWaitUserLock = 0xA,
  kThreadWaitPThreadMutex = 0xB,
  kThreadWaitPThreadRWLockRead = 0xC,
  kThreadWaitPThreadRWLockWrite = 0xD,
  kThreadWaitPThreadCondVar = 0xE,
  kThreadWaitParkedWorkQueue = 0xF,
  kThreadWaitWorkloopSyncWait = 0x10,
  kThreadWaitOnProcess = 0x11,
};

/* 1008 */
struct kdp_breakpoint_record_t
{
  mach_vm_address_t address;
  uint32_t_0 bytesused;
  uint8_t_0 oldbytes[4];
};

/* 1009 */
typedef boolean_t (*kdp_dispatch_t)(kdp_pkt_t *, int *, unsigned __int16 *);

/* 1010 */
union __attribute__((packed)) __attribute__((aligned(2))) kdp_pkt_t
{
  kdp_hdr_t hdr;
  kdp_connect_req_t connect_req;
  kdp_connect_reply_t connect_reply;
  kdp_disconnect_req_t disconnect_req;
  kdp_disconnect_reply_t disconnect_reply;
  kdp_hostinfo_req_t hostinfo_req;
  kdp_hostinfo_reply_t hostinfo_reply;
  kdp_version_req_t version_req;
  kdp_version_reply_t version_reply;
  kdp_maxbytes_req_t maxbytes_req;
  kdp_maxbytes_reply_t maxbytes_reply;
  kdp_readmem_req_t readmem_req;
  kdp_readmem_reply_t readmem_reply;
  kdp_readmem64_req_t readmem64_req;
  kdp_readmem64_reply_t readmem64_reply;
  kdp_readphysmem64_req_t readphysmem64_req;
  kdp_readphysmem64_reply_t readphysmem64_reply;
  kdp_writemem_req_t writemem_req;
  kdp_writemem_reply_t writemem_reply;
  kdp_writemem64_req_t writemem64_req;
  kdp_writemem64_reply_t writemem64_reply;
  kdp_writephysmem64_req_t writephysmem64_req;
  kdp_writephysmem64_reply_t writephysmem64_reply;
  kdp_readregs_req_t readregs_req;
  kdp_readregs_reply_t readregs_reply;
  kdp_writeregs_req_t writeregs_req;
  kdp_writeregs_reply_t writeregs_reply;
  kdp_load_req_t load_req;
  kdp_load_reply_t load_reply;
  kdp_imagepath_req_t imagepath_req;
  kdp_imagepath_reply_t imagepath_reply;
  kdp_suspend_req_t suspend_req;
  kdp_suspend_reply_t suspend_reply;
  kdp_resumecpus_req_t resumecpus_req;
  kdp_resumecpus_reply_t resumecpus_reply;
  kdp_exception_t exception;
  kdp_exception_ack_t exception_ack;
  kdp_termination_t termination;
  kdp_termination_ack_t termination_ack;
  kdp_breakpoint_req_t breakpoint_req;
  kdp_breakpoint_reply_t breakpoint_reply;
  kdp_breakpoint64_req_t breakpoint64_req;
  kdp_breakpoint64_reply_t breakpoint64_reply;
  kdp_reattach_req_t reattach_req;
  kdp_regions_req_t regions_req;
  kdp_regions_reply_t regions_reply;
  kdp_kernelversion_req_t kernelversion_req;
  kdp_kernelversion_reply_t kernelversion_reply;
  kdp_readioport_req_t readioport_req;
  kdp_readioport_reply_t readioport_reply;
  kdp_writeioport_req_t writeioport_req;
  kdp_writeioport_reply_t writeioport_reply;
  kdp_readmsr64_req_t readmsr64_req;
  kdp_readmsr64_reply_t readmsr64_reply;
  kdp_writemsr64_req_t writemsr64_req;
  kdp_writemsr64_reply_t writemsr64_reply;
  kdp_dumpinfo_req_t dumpinfo_req;
  kdp_dumpinfo_reply_t dumpinfo_reply;
};

/* 1011 */
struct kdp_hdr_t
{
  __int32 request : 7;
  unsigned __int32 is_reply : 1;
  unsigned __int32 seq : 8;
  unsigned __int32 len : 16;
  unsigned int key;
};

/* 1012 */
enum kdp_req_t : __int32
{
  KDP_CONNECT = 0x0,
  KDP_DISCONNECT = 0x1,
  KDP_HOSTINFO = 0x2,
  KDP_VERSION = 0x3,
  KDP_MAXBYTES = 0x4,
  KDP_READMEM = 0x5,
  KDP_WRITEMEM = 0x6,
  KDP_READREGS = 0x7,
  KDP_WRITEREGS = 0x8,
  KDP_LOAD = 0x9,
  KDP_IMAGEPATH = 0xA,
  KDP_SUSPEND = 0xB,
  KDP_RESUMECPUS = 0xC,
  KDP_EXCEPTION = 0xD,
  KDP_TERMINATION = 0xE,
  KDP_BREAKPOINT_SET = 0xF,
  KDP_BREAKPOINT_REMOVE = 0x10,
  KDP_REGIONS = 0x11,
  KDP_REATTACH = 0x12,
  KDP_HOSTREBOOT = 0x13,
  KDP_READMEM64 = 0x14,
  KDP_WRITEMEM64 = 0x15,
  KDP_BREAKPOINT64_SET = 0x16,
  KDP_BREAKPOINT64_REMOVE = 0x17,
  KDP_KERNELVERSION = 0x18,
  KDP_READPHYSMEM64 = 0x19,
  KDP_WRITEPHYSMEM64 = 0x1A,
  KDP_READIOPORT = 0x1B,
  KDP_WRITEIOPORT = 0x1C,
  KDP_READMSR64 = 0x1D,
  KDP_WRITEMSR64 = 0x1E,
  KDP_DUMPINFO = 0x1F,
  KDP_INVALID_REQUEST = 0x20,
};

/* 1013 */
struct kdp_connect_req_t
{
  kdp_hdr_t hdr;
  uint16_t req_reply_port;
  uint16_t exc_note_port;
  char greeting[];
};

/* 1014 */
struct kdp_connect_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1015 */
enum kdp_error_t : __int32
{
  KDPERR_NO_ERROR = 0x0,
  KDPERR_ALREADY_CONNECTED = 0x1,
  KDPERR_BAD_NBYTES = 0x2,
  KDPERR_BADFLAVOR = 0x3,
  KDPERR_BAD_ACCESS = 0x4,
  KDPERR_MAX_BREAKPOINTS = 0x64,
  KDPERR_BREAKPOINT_NOT_FOUND = 0x65,
  KDPERR_BREAKPOINT_ALREADY_SET = 0x66,
};

/* 1016 */
struct kdp_disconnect_req_t
{
  kdp_hdr_t hdr;
};

/* 1017 */
struct kdp_disconnect_reply_t
{
  kdp_hdr_t hdr;
};

/* 1018 */
struct kdp_hostinfo_req_t
{
  kdp_hdr_t hdr;
};

/* 1019 */
struct kdp_hostinfo_reply_t
{
  kdp_hdr_t hdr;
  kdp_hostinfo_t hostinfo;
};

/* 1020 */
struct kdp_hostinfo_t
{
  uint32_t_0 cpus_mask;
  uint32_t_0 cpu_type;
  uint32_t_0 cpu_subtype;
};

/* 1021 */
struct kdp_version_req_t
{
  kdp_hdr_t hdr;
};

/* 1022 */
struct kdp_version_reply_t
{
  kdp_hdr_t hdr;
  uint32_t_0 version;
  uint32_t_0 feature;
  uint32_t_0 pad0;
  uint32_t_0 pad1;
};

/* 1023 */
struct kdp_maxbytes_req_t
{
  kdp_hdr_t hdr;
};

/* 1024 */
struct kdp_maxbytes_reply_t
{
  kdp_hdr_t hdr;
  uint32_t_0 max_bytes;
};

/* 1025 */
struct kdp_readmem_req_t
{
  kdp_hdr_t hdr;
  uint32_t_0 address;
  uint32_t_0 nbytes;
};

/* 1026 */
struct kdp_readmem_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
  char data[];
};

/* 1027 */
struct __attribute__((packed)) __attribute__((aligned(4))) kdp_readmem64_req_t
{
  kdp_hdr_t hdr;
  uint64_t_0 address;
  uint32_t_0 nbytes;
};

/* 1028 */
struct kdp_readmem64_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
  char data[];
};

/* 1029 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_readphysmem64_req_t
{
  kdp_hdr_t hdr;
  uint64_t_0 address;
  uint32_t_0 nbytes;
  uint16_t lcpu;
};

/* 1030 */
struct kdp_readphysmem64_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
  char data[];
};

/* 1031 */
struct kdp_writemem_req_t
{
  kdp_hdr_t hdr;
  uint32_t_0 address;
  uint32_t_0 nbytes;
  char data[];
};

/* 1032 */
struct kdp_writemem_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1033 */
struct __attribute__((packed)) __attribute__((aligned(4))) kdp_writemem64_req_t
{
  kdp_hdr_t hdr;
  uint64_t_0 address;
  uint32_t_0 nbytes;
  char data[];
};

/* 1034 */
struct kdp_writemem64_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1035 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_writephysmem64_req_t
{
  kdp_hdr_t hdr;
  uint64_t_0 address;
  uint32_t_0 nbytes;
  uint16_t lcpu;
  char data[];
};

/* 1036 */
struct kdp_writephysmem64_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1037 */
struct kdp_readregs_req_t
{
  kdp_hdr_t hdr;
  uint32_t_0 cpu;
  uint32_t_0 flavor;
};

/* 1038 */
struct kdp_readregs_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
  char data[];
};

/* 1039 */
struct kdp_writeregs_req_t
{
  kdp_hdr_t hdr;
  uint32_t_0 cpu;
  uint32_t_0 flavor;
  char data[];
};

/* 1040 */
struct kdp_writeregs_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1041 */
struct kdp_load_req_t
{
  kdp_hdr_t hdr;
  char file_args[];
};

/* 1042 */
struct kdp_load_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1043 */
struct kdp_imagepath_req_t
{
  kdp_hdr_t hdr;
};

/* 1044 */
struct kdp_imagepath_reply_t
{
  kdp_hdr_t hdr;
  char path[];
};

/* 1045 */
struct kdp_suspend_req_t
{
  kdp_hdr_t hdr;
};

/* 1046 */
struct kdp_suspend_reply_t
{
  kdp_hdr_t hdr;
};

/* 1047 */
struct kdp_resumecpus_req_t
{
  kdp_hdr_t hdr;
  uint32_t_0 cpu_mask;
};

/* 1048 */
struct kdp_resumecpus_reply_t
{
  kdp_hdr_t hdr;
};

/* 1049 */
struct kdp_exception_t
{
  kdp_hdr_t hdr;
  uint32_t_0 n_exc_info;
  kdp_exc_info_t exc_info[];
};

/* 1050 */
struct kdp_exc_info_t
{
  uint32_t_0 cpu;
  uint32_t_0 exception;
  uint32_t_0 code;
  uint32_t_0 subcode;
};

/* 1051 */
struct kdp_exception_ack_t
{
  kdp_hdr_t hdr;
};

/* 1052 */
struct kdp_termination_t
{
  kdp_hdr_t hdr;
  uint32_t_0 term_code;
  uint32_t_0 exit_code;
};

/* 1053 */
struct kdp_termination_ack_t
{
  kdp_hdr_t hdr;
};

/* 1054 */
struct kdp_breakpoint_req_t
{
  kdp_hdr_t hdr;
  uint32_t_0 address;
};

/* 1055 */
struct kdp_breakpoint_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1056 */
struct kdp_breakpoint64_req_t
{
  kdp_hdr_t hdr;
  uint64_t_0 address;
};

/* 1057 */
struct kdp_breakpoint64_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1058 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_reattach_req_t
{
  kdp_hdr_t hdr;
  uint16_t req_reply_port;
};

/* 1059 */
struct kdp_regions_req_t
{
  kdp_hdr_t hdr;
};

/* 1060 */
struct kdp_regions_reply_t
{
  kdp_hdr_t hdr;
  uint32_t_0 nregions;
  kdp_region_t regions[];
};

/* 1061 */
struct kdp_region_t
{
  uint32_t_0 address;
  uint32_t_0 nbytes;
  uint32_t_0 protection;
};

/* 1062 */
struct kdp_kernelversion_req_t
{
  kdp_hdr_t hdr;
};

/* 1063 */
struct kdp_kernelversion_reply_t
{
  kdp_hdr_t hdr;
  char version[];
};

/* 1064 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_readioport_req_t
{
  kdp_hdr_t hdr;
  uint16_t lcpu;
  uint16_t address;
  uint16_t nbytes;
};

/* 1065 */
struct kdp_readioport_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
  char data[];
};

/* 1066 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_writeioport_req_t
{
  kdp_hdr_t hdr;
  uint16_t lcpu;
  uint16_t address;
  uint16_t nbytes;
  char data[];
};

/* 1067 */
struct kdp_writeioport_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1068 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_readmsr64_req_t
{
  kdp_hdr_t hdr;
  uint32_t_0 address;
  uint16_t lcpu;
};

/* 1069 */
struct kdp_readmsr64_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
  char data[];
};

/* 1070 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_writemsr64_req_t
{
  kdp_hdr_t hdr;
  uint32_t_0 address;
  uint16_t lcpu;
  char data[];
};

/* 1071 */
struct kdp_writemsr64_reply_t
{
  kdp_hdr_t hdr;
  kdp_error_t error;
};

/* 1072 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_dumpinfo_req_t
{
  kdp_hdr_t hdr;
  char name[50];
  char destip[16];
  char routerip[16];
  uint32_t_0 port;
  kdp_dumpinfo_t type;
};

/* 1073 */
enum kdp_dumpinfo_t : __int32
{
  KDP_DUMPINFO_GETINFO = 0x0,
  KDP_DUMPINFO_SETINFO = 0x1,
  KDP_DUMPINFO_CORE = 0x102,
  KDP_DUMPINFO_PANICLOG = 0x103,
  KDP_DUMPINFO_SYSTEMLOG = 0x104,
  KDP_DUMPINFO_DISABLE = 0x105,
  KDP_DUMPINFO_MASK = 0xFFF,
  KDP_DUMPINFO_DUMP = 0x100,
  KDP_DUMPINFO_REBOOT = 0x10000000,
  KDP_DUMPINFO_NORESUME = 0x20000000,
  KDP_DUMPINFO_RESUME = 0x0,
  KDP_DUMPINFO_NOINTR = 0x40000000,
  KDP_DUMPINFO_INTR = 0x0,
};

/* 1074 */
struct __attribute__((packed)) __attribute__((aligned(2))) kdp_dumpinfo_reply_t
{
  kdp_hdr_t hdr;
  char name[50];
  char destip[16];
  char routerip[16];
  uint32_t_0 port;
  kdp_dumpinfo_t type;
};

/* 1075 */
struct __attribute__((packed)) __attribute__((aligned(1))) stackshot_fault_stats
{
  uint32_t_0 sfs_pages_faulted_in;
  uint64_t_0 sfs_time_spent_faulting;
  uint64_t_0 sfs_system_max_fault_time;
  uint8_t_0 sfs_stopped_faulting;
};

/* 1076 */
typedef uint64_t_0 unaligned_u64;

/* 1077 */
typedef _lck_grp_ lck_grp_t_0;

/* 1078 */
typedef _lck_grp_attr_ lck_grp_attr_t_0;

/* 1079 */
struct _lck_grp_attr_
{
  uint32_t_0 grp_attr_val;
};

/* 1080 */
typedef _lck_attr_ lck_attr_t_0;

/* 1081 */
struct _lck_attr_
{
  unsigned int lck_attr_val;
};

/* 1082 */
enum lcpu_state : __int32
{
  LCPU_OFF = 0x0,
  LCPU_HALT = 0x1,
  LCPU_NONSCHED = 0x2,
  LCPU_PAUSE = 0x3,
  LCPU_IDLE = 0x4,
  LCPU_RUN = 0x5,
};

/* 1083 */
enum thread_classification : __int32
{
  tc_full_snapshot = 0x0,
  tc_delta_snapshot = 0x1,
};

/* 1084 */
typedef stackshot_config stackshot_config_t;

/* 1085 */
struct stackshot_config
{
  int sc_pid;
  uint32_t_0 sc_flags;
  uint64_t_0 sc_delta_timestamp;
  uint64_t_0 sc_buffer;
  uint32_t_0 sc_size;
  uint64_t_0 sc_out_buffer_addr;
  uint64_t_0 sc_out_size_addr;
};

/* 1086 */
typedef unsigned int clock_usec_t;

/* 1087 */
typedef uint32_t_0 mach_voucher_attr_value_reference_t;

/* 1088 */
struct ledger_template
{
  const char *lt_name;
  int lt_refs;
  int lt_cnt;
  int lt_table_size;
  volatile uint32_t_0 lt_inuse;
  lck_mtx_t_0 lt_lock;
  zone_t lt_zone;
  _Bool lt_initialized;
  entry_template *lt_entries;
};

/* 1089 */
struct ledger_entry
{
  volatile uint32_t_0 le_flags;
  ledger_amount_t le_limit;
  ledger_amount_t le_warn_level;
  volatile ledger_amount_t le_credit;
  volatile ledger_amount_t le_debit;
  ledger_entry::$34251FDA57C5E8F362E419DDB4E48973 _le;
};

/* 1090 */
typedef int64_t ledger_amount_t;

/* 1091 */
union ledger_entry::$34251FDA57C5E8F362E419DDB4E48973
{
  ledger_entry::$34251FDA57C5E8F362E419DDB4E48973::$CC6228A0540C2DA744F571AF563AF05C le_refill;
  ledger_entry::$34251FDA57C5E8F362E419DDB4E48973::$9CD8152E4903954936DEBD0538C3BA07 _le_max;
};

/* 1092 */
struct ledger_entry::$34251FDA57C5E8F362E419DDB4E48973::$CC6228A0540C2DA744F571AF563AF05C
{
  uint64_t_0 le_refill_period;
  uint64_t_0 le_last_refill;
};

/* 1093 */
struct ledger_entry::$34251FDA57C5E8F362E419DDB4E48973::$9CD8152E4903954936DEBD0538C3BA07
{
  ledger_amount_t le_lifetime_max;
};

/* 1094 */
typedef queue_entry *queue_t;

/* 1095 */
typedef __builtin_va_list va_list_1;

/* 1096 */
typedef unsigned int vm_inherit_t;

/* 1097 */
typedef cpu_data cpu_data_t;

/* 1098 */
struct __attribute__((aligned(64))) cpu_data
{
  cpu_data *cpu_this;
  thread_t cpu_active_thread;
  thread_t cpu_nthread;
  volatile int cpu_preemption_level;
  int cpu_number;
  void *cpu_int_state;
  vm_offset_t cpu_active_stack;
  vm_offset_t cpu_kernel_stack;
  vm_offset_t cpu_int_stack_top;
  int cpu_interrupt_level;
  volatile int cpu_signals;
  volatile int cpu_prior_signals;
  ast_t cpu_pending_ast;
  volatile int cpu_running;
  rtclock_timer_t rtclock_timer;
  uint64_t_0 quantum_timer_deadline;
  __attribute__((aligned(32))) volatile addr64_t cpu_active_cr3;
  cpu_data::$430AF1668F56E351DBE82A64309349F4 _anon_0;
  volatile task_map_t cpu_task_map;
  volatile addr64_t cpu_task_cr3;
  addr64_t cpu_kernel_cr3;
  volatile addr64_t cpu_ucr3;
  boolean_t cpu_pagezero_mapped;
  cpu_uber_t cpu_uber;
  uintptr_t cd_estack;
  int cpu_xstate;
  void *cd_shadow;
  processor *cpu_processor;
  real_descriptor *cpu_ldtp;
  cpu_desc_table *cpu_desc_tablep;
  cpu_desc_index_t cpu_desc_index;
  int cpu_ldt;
  uint32_t_0 cpu_hwIntCnt[256];
  uint64_t_0 cpu_hwIntpexits[256];
  uint64_t_0 cpu_dr7;
  uint64_t_0 cpu_int_event_time;
  pal_rtc_nanotime_t *cpu_nanotime;
  uint64_t_0 *cpu_kpc_buf[2];
  uint64_t_0 *cpu_kpc_shadow;
  uint64_t_0 *cpu_kpc_reload;
  mt_cpu cpu_monotonic;
  uint32_t_0 cpu_pmap_pcid_enabled;
  pcid_t cpu_active_pcid;
  pcid_t cpu_last_pcid;
  pcid_t cpu_kernel_pcid;
  volatile pcid_ref_t *cpu_pmap_pcid_coherentp;
  volatile pcid_ref_t *cpu_pmap_pcid_coherentp_kernel;
  pcid_cdata_t *cpu_pcid_data;
  uint64_t_0 cpu_aperf;
  uint64_t_0 cpu_mperf;
  uint64_t_0 cpu_c3res;
  uint64_t_0 cpu_c6res;
  uint64_t_0 cpu_c7res;
  uint64_t_0 cpu_itime_total;
  uint64_t_0 cpu_rtime_total;
  uint64_t_0 cpu_ixtime;
  uint64_t_0 cpu_idle_exits;
  uint64_t_0 cpu_rtimes[12];
  uint64_t_0 cpu_itimes[12];
  uint64_t_0 cpu_gpmcs[4];
  uint64_t_0 cpu_max_observed_int_latency;
  int cpu_max_observed_int_latency_vector;
  volatile boolean_t cpu_NMI_acknowledged;
  uint64_t_0 debugger_entry_time;
  uint64_t_0 debugger_ipi_time;
  uint32_t_0 cpu_nested_istack;
  uint32_t_0 cpu_nested_istack_events;
  x86_saved_state64_t *cpu_fatal_trap_state;
  x86_saved_state64_t *cpu_post_fatal_trap_state;
  vmx_cpu_t cpu_vmx;
  mca_state *cpu_mca_state;
  int cpu_type;
  int cpu_subtype;
  int cpu_threadtype;
  boolean_t cpu_iflag;
  boolean_t cpu_boot_complete;
  int cpu_hibernate;
  void *cpu_console_buf;
  x86_lcpu lcpu;
  int cpu_phys_number;
  cpu_id_t cpu_id;
};

/* 1099 */
struct pal_cpu_data
{
  __int8 gap0[1];
};

/* 1100 */
typedef rtclock_timer rtclock_timer_t;

/* 1101 */
struct __attribute__((aligned(8))) rtclock_timer
{
  mpqueue_head_t queue;
  uint64_t_0 deadline;
  uint64_t_0 when_set;
  boolean_t has_expired;
};

/* 1102 */
typedef mpqueue_head mpqueue_head_t;

/* 1103 */
struct mpqueue_head
{
  queue_entry head;
  uint64_t_0 earliest_soft_deadline;
  uint64_t_0 count;
  lck_mtx_t_0 lock_data;
  lck_mtx_ext_t lock_data_ext;
};

/* 1104 */
typedef uint64_t_0 addr64_t;

/* 1105 */
union cpu_data::$430AF1668F56E351DBE82A64309349F4
{
  volatile uint32_t_0 cpu_tlb_invalid;
  cpu_data::$430AF1668F56E351DBE82A64309349F4::$9C40F316D17C989474161B08DBA7B625 _anon_0;
};

/* 1106 */
struct cpu_data::$430AF1668F56E351DBE82A64309349F4::$9C40F316D17C989474161B08DBA7B625
{
  volatile uint16_t cpu_tlb_invalid_local;
  volatile uint16_t cpu_tlb_invalid_global;
};

/* 1107 */
struct cpu_uber_t
{
  addr64_t cu_isf;
  uint64_t_0 cu_tmp;
  addr64_t cu_user_gs_base;
};

/* 1108 */
struct cpu_desc_table;

/* 1109 */
struct cpu_desc_index_t
{
  x86_64_tss *cdi_ktssu;
  x86_64_tss *cdi_ktssb;
  x86_64_desc_register_t cdi_gdtu;
  x86_64_desc_register_t cdi_gdtb;
  x86_64_desc_register_t cdi_idtu;
  x86_64_desc_register_t cdi_idtb;
  fake_descriptor *cdi_ldtu;
  fake_descriptor *cdi_ldtb;
  vm_offset_t cdi_sstku;
  vm_offset_t cdi_sstkb;
};

/* 1110 */
struct x86_64_tss
{
  uint32_t_0 reserved1;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 rsp0;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 rsp1;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 rsp2;
  uint32_t_0 reserved2;
  uint32_t_0 reserved3;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 ist1;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 ist2;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 ist3;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 ist4;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 ist5;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 ist6;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 ist7;
  uint32_t_0 reserved4;
  uint32_t_0 reserved5;
  uint16_t reserved6;
  uint16_t io_bit_map_offset;
};

/* 1111 */
struct __attribute__((packed)) __attribute__((aligned(2))) x86_64_desc_register_t
{
  uint16_t size;
  void *ptr;
};

/* 1112 */
struct fake_descriptor
{
  uint32_t_0 offset;
  unsigned __int32 lim_or_seg : 20;
  unsigned __int32 size_or_wdct : 4;
  unsigned __int32 access : 8;
};

/* 1113 */
typedef pal_rtc_nanotime pal_rtc_nanotime_t;

/* 1114 */
struct pal_rtc_nanotime
{
  volatile uint64_t_0 tsc_base;
  volatile uint64_t_0 ns_base;
  uint32_t_0 scale;
  uint32_t_0 shift;
  volatile uint32_t_0 generation;
  uint32_t_0 spare1;
};

/* 1115 */
struct mt_cpu
{
  uint64_t_0 mtc_snaps[3];
  uint64_t_0 mtc_counts[3];
  uint64_t_0 mtc_counts_last[3];
};

/* 1116 */
typedef uint8_t_0 pcid_ref_t;

/* 1117 */
struct pcid_cdata_t
{
  pcid_t cpu_pcid_free_hint;
  pcid_ref_t cpu_pcid_refcounts[2048];
  pmap_t cpu_pcid_last_pmap_dispatched[2048];
};

/* 1118 */
typedef vmx_cpu vmx_cpu_t;

/* 1119 */
struct vmx_cpu
{
  vmx_specs_t specs;
  void *vmxon_region;
};

/* 1120 */
typedef vmx_specs vmx_specs_t;

/* 1121 */
struct vmx_specs
{
  boolean_t initialized;
  boolean_t vmx_present;
  boolean_t vmx_on;
  uint32_t_0 vmcs_id;
  uint32_t_0 cr0_fixed_0;
  uint32_t_0 cr0_fixed_1;
  uint32_t_0 cr4_fixed_0;
  uint32_t_0 cr4_fixed_1;
};

/* 1122 */
struct mca_state
{
  boolean_t mca_is_saved;
  boolean_t mca_is_valid;
  ia32_mcg_ctl_t mca_mcg_ctl;
  ia32_mcg_status_t mca_mcg_status;
  mca_mci_bank_t mca_error_bank[];
};

/* 1123 */
struct x86_lcpu
{
  x86_lcpu *next_in_core;
  x86_lcpu *next_in_die;
  x86_lcpu *next_in_pkg;
  x86_lcpu *lcpu;
  x86_core *core;
  x86_die *die;
  x86_pkg *package;
  cpu_data *cpu;
  uint32_t_0 flags;
  uint32_t_0 cpu_num;
  uint32_t_0 lnum;
  uint32_t_0 pnum;
  boolean_t master;
  boolean_t primary;
  volatile lcpu_state_t state;
  volatile boolean_t stopped;
  uint64_t_0 rtcPop;
  uint64_t_0 rtcDeadline;
  x86_cpu_cache_t *caches[3];
  void *pmStats;
  void *pmState;
};

/* 1124 */
struct x86_core
{
  x86_core *next_in_die;
  x86_core *next_in_pkg;
  x86_die *die;
  x86_pkg *package;
  x86_lcpu *lcpus;
  uint32_t_0 flags;
  uint32_t_0 lcore_num;
  uint32_t_0 pcore_num;
  uint32_t_0 num_lcpus;
  uint32_t_0 active_lcpus;
  void *pmStats;
  void *pmState;
};

/* 1125 */
struct x86_die
{
  x86_die *next_in_pkg;
  x86_lcpu *lcpus;
  x86_core *cores;
  x86_pkg *package;
  uint32_t_0 flags;
  uint32_t_0 ldie_num;
  uint32_t_0 pdie_num;
  uint32_t_0 num_cores;
  x86_cpu_cache_t *LLC;
  void *pmStats;
  void *pmState;
};

/* 1126 */
struct __attribute__((aligned(8))) x86_pkg
{
  x86_pkg *next;
  x86_lcpu *lcpus;
  x86_core *cores;
  x86_die *dies;
  uint32_t_0 flags;
  uint32_t_0 lpkg_num;
  uint32_t_0 ppkg_num;
  uint32_t_0 num_dies;
  void *pmStats;
  void *pmState;
  mca_state *mca_state;
  uint64_t_0 package_idle_exits;
  uint32_t_0 num_idle;
};

/* 1127 */
typedef x86_cpu_cache x86_cpu_cache_t;

/* 1128 */
struct x86_cpu_cache
{
  x86_cpu_cache *next;
  x86_die *die;
  uint8_t_0 maxcpus;
  uint8_t_0 nlcpus;
  uint8_t_0 type;
  uint8_t_0 level;
  uint16_t ways;
  uint16_t partitions;
  uint16_t line_size;
  uint32_t_0 cache_size;
  x86_lcpu *cpus[];
};

/* 1129 */
typedef lcpu_state lcpu_state_t;

/* 1130 */
typedef void *cpu_id_t;

/* 1131 */
struct dyld_uuid_info_64_v2
{
  uint64_t_0 imageLoadAddress;
  uuid_t imageUUID;
  uint64_t_0 imageSlidBaseAddress;
};

/* 1132 */
struct __attribute__((packed)) __attribute__((aligned(1))) mem_and_io_snapshot
{
  uint32_t_0 snapshot_magic;
  uint32_t_0 free_pages;
  uint32_t_0 active_pages;
  uint32_t_0 inactive_pages;
  uint32_t_0 purgeable_pages;
  uint32_t_0 wired_pages;
  uint32_t_0 speculative_pages;
  uint32_t_0 throttled_pages;
  uint32_t_0 filebacked_pages;
  uint32_t_0 compressions;
  uint32_t_0 decompressions;
  uint32_t_0 compressor_size;
  int32_t busy_buffer_count;
  uint32_t_0 pages_wanted;
  uint32_t_0 pages_reclaimed;
  uint8_t_0 pages_wanted_reclaimed_valid;
};

/* 1133 */
struct jetsam_coalition_snapshot
{
  uint64_t_0 jcs_id;
  uint64_t_0 jcs_flags;
  uint64_t_0 jcs_thread_group;
  uint64_t_0 jcs_leader_task_uniqueid;
};

/* 1134 */
struct thread_delta_snapshot_v3
{
  uint64_t_0 tds_thread_id;
  uint64_t_0 tds_voucher_identifier;
  uint64_t_0 tds_ss_flags;
  uint64_t_0 tds_last_made_runnable_time;
  uint32_t_0 tds_state;
  uint32_t_0 tds_sched_flags;
  int16_t tds_base_priority;
  int16_t tds_sched_priority;
  uint8_t_0 tds_eqos;
  uint8_t_0 tds_rqos;
  uint8_t_0 tds_rqos_override;
  uint8_t_0 tds_io_tier;
  uint64_t_0 tds_requested_policy;
  uint64_t_0 tds_effective_policy;
};

/* 1135 */
typedef stackshot_thread_waitinfo thread_waitinfo_t;

/* 1136 */
struct __attribute__((packed)) __attribute__((aligned(1))) stackshot_thread_waitinfo
{
  uint64_t_0 owner;
  uint64_t_0 waiter;
  uint64_t_0 context;
  uint8_t_0 wait_type;
};

/* 1137 */
struct task_snapshot_v2
{
  uint64_t_0 ts_unique_pid;
  uint64_t_0 ts_ss_flags;
  uint64_t_0 ts_user_time_in_terminated_threads;
  uint64_t_0 ts_system_time_in_terminated_threads;
  uint64_t_0 ts_p_start_sec;
  uint64_t_0 ts_task_size;
  uint64_t_0 ts_max_resident_size;
  uint32_t_0 ts_suspend_count;
  uint32_t_0 ts_faults;
  uint32_t_0 ts_pageins;
  uint32_t_0 ts_cow_faults;
  uint32_t_0 ts_was_throttled;
  uint32_t_0 ts_did_throttle;
  uint32_t_0 ts_latency_qos;
  int32_t ts_pid;
  char ts_p_comm[32];
};

/* 1138 */
struct io_stats_snapshot
{
  uint64_t_0 ss_disk_reads_count;
  uint64_t_0 ss_disk_reads_size;
  uint64_t_0 ss_disk_writes_count;
  uint64_t_0 ss_disk_writes_size;
  uint64_t_0 ss_io_priority_count[4];
  uint64_t_0 ss_io_priority_size[4];
  uint64_t_0 ss_paging_count;
  uint64_t_0 ss_paging_size;
  uint64_t_0 ss_non_paging_count;
  uint64_t_0 ss_non_paging_size;
  uint64_t_0 ss_data_count;
  uint64_t_0 ss_data_size;
  uint64_t_0 ss_metadata_count;
  uint64_t_0 ss_metadata_size;
};

/* 1139 */
struct instrs_cycles_snapshot
{
  uint64_t_0 ics_instructions;
  uint64_t_0 ics_cycles;
};

/* 1140 */
struct __attribute__((packed)) __attribute__((aligned(4))) task_delta_snapshot_v2
{
  uint64_t_0 tds_unique_pid;
  uint64_t_0 tds_ss_flags;
  uint64_t_0 tds_user_time_in_terminated_threads;
  uint64_t_0 tds_system_time_in_terminated_threads;
  uint64_t_0 tds_task_size;
  uint64_t_0 tds_max_resident_size;
  uint32_t_0 tds_suspend_count;
  uint32_t_0 tds_faults;
  uint32_t_0 tds_pageins;
  uint32_t_0 tds_cow_faults;
  uint32_t_0 tds_was_throttled;
  uint32_t_0 tds_did_throttle;
  uint32_t_0 tds_latency_qos;
};

/* 1141 */
struct thread_snapshot_v4
{
  uint64_t_0 ths_thread_id;
  uint64_t_0 ths_wait_event;
  uint64_t_0 ths_continuation;
  uint64_t_0 ths_total_syscalls;
  uint64_t_0 ths_voucher_identifier;
  uint64_t_0 ths_dqserialnum;
  uint64_t_0 ths_user_time;
  uint64_t_0 ths_sys_time;
  uint64_t_0 ths_ss_flags;
  uint64_t_0 ths_last_run_time;
  uint64_t_0 ths_last_made_runnable_time;
  uint32_t_0 ths_state;
  uint32_t_0 ths_sched_flags;
  int16_t ths_base_priority;
  int16_t ths_sched_priority;
  uint8_t_0 ths_eqos;
  uint8_t_0 ths_rqos;
  uint8_t_0 ths_rqos_override;
  uint8_t_0 ths_io_tier;
  uint64_t_0 ths_thread_t;
  uint64_t_0 ths_requested_policy;
  uint64_t_0 ths_effective_policy;
};

/* 1142 */
struct stackshot_cpu_times_v2
{
  uint64_t_0 user_usec;
  uint64_t_0 system_usec;
  uint64_t_0 runnable_usec;
};

/* 1143 */
struct stack_snapshot_stacktop
{
  uint64_t_0 sp;
  uint8_t_0 stack_contents[8];
};

/* 1144 */
typedef user64_dyld_uuid_info kernel_uuid_info;

/* 1145 */
struct user64_dyld_uuid_info
{
  uint64_t_0 imageLoadAddress;
  uuid_t imageUUID;
};

/* 1146 */
typedef mach_timebase_info mach_timebase_info_data_t;

/* 1147 */
struct mach_timebase_info
{
  uint32_t_0 numer;
  uint32_t_0 denom;
};

/* 1148 */
struct stackshot_context
{
  int pid;
  uint32_t_0 trace_flags;
};

/* 1149 */
typedef vm_statistics64 *vm_statistics64_t;

/* 1150 */
typedef time_value time_value_t;

/* 1151 */
struct time_value
{
  integer_t seconds;
  integer_t microseconds;
};

/* 1152 */
struct user32_dyld_all_image_infos
{
  uint32_t_0 version;
  uint32_t_0 infoArrayCount;
  user32_addr_t infoArray;
  user32_addr_t notification;
  dyld_bool processDetachedFromSharedRegion;
  dyld_bool libSystemInitialized;
  user32_addr_t dyldImageLoadAddress;
  user32_addr_t jitInfo;
  user32_addr_t dyldVersion;
  user32_addr_t errorMessage;
  user32_addr_t terminationFlags;
  user32_addr_t coreSymbolicationShmPage;
  user32_addr_t systemOrderFlag;
  user32_size_t uuidArrayCount;
  user32_addr_t uuidArray;
  user32_addr_t dyldAllImageInfosAddress;
  user32_addr_t initialImageCount;
  user32_addr_t errorKind;
  user32_addr_t errorClientOfDylibPath;
  user32_addr_t errorTargetDylibPath;
  user32_addr_t errorSymbol;
  user32_addr_t sharedCacheSlide;
  uint8_t_0 sharedCacheUUID[16];
  user32_addr_t sharedCacheBaseAddress;
  uint64_t_0 timestamp;
  user32_addr_t reserved[14];
  user32_addr_t compact_dyld_image_info_addr;
  user32_size_t compact_dyld_image_info_size;
};

/* 1153 */
typedef __uint32_t user32_addr_t;

/* 1154 */
typedef uint8_t_0 dyld_bool;

/* 1155 */
typedef __uint32_t user32_size_t;

/* 1156 */
struct user64_dyld_all_image_infos
{
  uint32_t_0 version;
  uint32_t_0 infoArrayCount;
  user64_addr_t infoArray;
  user64_addr_t notification;
  dyld_bool processDetachedFromSharedRegion;
  dyld_bool libSystemInitialized;
  user64_addr_t dyldImageLoadAddress;
  user64_addr_t jitInfo;
  user64_addr_t dyldVersion;
  user64_addr_t errorMessage;
  user64_addr_t terminationFlags;
  user64_addr_t coreSymbolicationShmPage;
  user64_addr_t systemOrderFlag;
  user64_size_t uuidArrayCount;
  user64_addr_t uuidArray;
  user64_addr_t dyldAllImageInfosAddress;
  user64_addr_t initialImageCount;
  user64_addr_t errorKind;
  user64_addr_t errorClientOfDylibPath;
  user64_addr_t errorTargetDylibPath;
  user64_addr_t errorSymbol;
  user64_addr_t sharedCacheSlide;
  uint8_t_0 sharedCacheUUID[16];
  user64_addr_t sharedCacheBaseAddress;
  uint64_t_0 timestamp;
  user64_addr_t reserved[14];
  user64_addr_t compact_dyld_image_info_addr;
  user64_size_t compact_dyld_image_info_size;
};

/* 1157 */
typedef __uint64_t user64_addr_t;

/* 1158 */
typedef __uint64_t user64_size_t;

/* 1159 */
struct $FC642AD1785420F6AB9F306FE5040BB1
{
  unsigned __int8 data[1518];
  unsigned int off;
  unsigned int len;
  boolean_t input;
};

/* 1160 */
struct kdp_manual_pkt
{
  unsigned __int8 data[128];
  unsigned int len;
  boolean_t input;
};

/* 1161 */
struct $E0BA06CA4C170E6E7DF7A513B8DD05F0
{
  $E0BA06CA4C170E6E7DF7A513B8DD05F0::$EBB254A5A72CB9D59C306694C64766EE loc;
  $E0BA06CA4C170E6E7DF7A513B8DD05F0::$EBB254A5A72CB9D59C306694C64766EE rmt;
};

/* 1162 */
struct __attribute__((aligned(4))) $E0BA06CA4C170E6E7DF7A513B8DD05F0::$EBB254A5A72CB9D59C306694C64766EE
{
  kdp_in_addr in;
  kdp_ether_addr ea;
};

/* 1163 */
struct kdp_in_addr
{
  uint32_t_0 s_addr;
};

/* 1164 */
struct kdp_ether_addr
{
  u_char ether_addr_octet[6];
};

/* 1165 */
typedef void (*kdp_send_t)(void *, unsigned int);

/* 1166 */
typedef void (*kdp_receive_t)(void *, unsigned int *, unsigned int);

/* 1167 */
typedef uint32_t_0 (*kdp_link_t)(void);

/* 1168 */
typedef boolean_t (*kdp_mode_t)(boolean_t);

/* 1169 */
enum kern_dump_type : __int32
{
  KERN_DUMP_DISK = 0x0,
  KERN_DUMP_NET = 0x1,
};

/* 1170 */
enum $F39F992E2D3C1D28C6C91D8C17CCDC1A : __int32
{
  KDP_EVENT_ENTER = 0x0,
  KDP_EVENT_EXIT = 0x1,
  KDP_EVENT_PANICLOG = 0x2,
};

/* 1171 */
struct __attribute__((packed)) __attribute__((aligned(2))) corehdr
{
  __int16 th_opcode;
  corehdr::$05B39541D75164CC2D8822AD507F4FD3 th_u;
  char th_data[];
};

/* 1172 */
union corehdr::$05B39541D75164CC2D8822AD507F4FD3
{
  unsigned int tu_block;
  unsigned int tu_code;
  char tu_rpl[1];
};

/* 1173 */
struct kdp_ether_header
{
  u_char ether_dhost[6];
  u_char ether_shost[6];
  u_short ether_type;
};

/* 1174 */
struct kdp_ether_arp
{
  kdp_arphdr ea_hdr;
  u_char arp_sha[6];
  u_char arp_spa[4];
  u_char arp_tha[6];
  u_char arp_tpa[4];
};

/* 1175 */
struct kdp_arphdr
{
  u_short ar_hrd;
  u_short ar_pro;
  u_char ar_hln;
  u_char ar_pln;
  u_short ar_op;
};

/* 1176 */
typedef __builtin_va_list va_list_2;

/* 1177 */
struct kdp_udpiphdr
{
  kdp_ipovly ui_i;
  kdp_udphdr ui_u;
};

/* 1178 */
struct kdp_ipovly
{
  uint32_t_0 ih_next;
  uint32_t_0 ih_prev;
  u_char ih_x1;
  u_char ih_pr;
  __int16 ih_len;
  kdp_in_addr ih_src;
  kdp_in_addr ih_dst;
};

/* 1179 */
struct kdp_udphdr
{
  u_short uh_sport;
  u_short uh_dport;
  __int16 uh_ulen;
  u_short uh_sum;
};

/* 1180 */
struct kdp_ip
{
  kdp_ip::$3615A173109AD68EBDCD63CEDB0876C5 ip_vhltl;
  u_short ip_id;
  __int16 ip_off;
  u_char ip_ttl;
  u_char ip_p;
  u_short ip_sum;
  kdp_in_addr ip_src;
  kdp_in_addr ip_dst;
};

/* 1181 */
union kdp_ip::$3615A173109AD68EBDCD63CEDB0876C5
{
  uint32_t_0 ip_w;
  kdp_ip::$3615A173109AD68EBDCD63CEDB0876C5::$11C79481E719B582CD81DA5B759718D6 ip_x;
};

/* 1182 */
struct kdp_ip::$3615A173109AD68EBDCD63CEDB0876C5::$11C79481E719B582CD81DA5B759718D6
{
  unsigned __int32 ip_xhl : 4;
  unsigned __int32 ip_xv : 4;
  unsigned __int32 ip_xtos : 8;
  unsigned __int32 ip_xlen : 16;
};

/* 1183 */
struct mach_core_fileheader
{
  uint64_t_0 signature;
  uint64_t_0 log_offset;
  uint64_t_0 log_length;
  uint64_t_0 num_files;
  mach_core_details files[16];
};

/* 1184 */
struct mach_core_details
{
  uint64_t_0 gzip_offset;
  uint64_t_0 gzip_length;
  char core_name[16];
};

/* 1185 */
typedef z_stream_s z_stream;

/* 1186 */
struct z_stream_s
{
  Bytef *next_in;
  uInt avail_in;
  uLong total_in;
  Bytef *next_out;
  uInt avail_out;
  uLong total_out;
  char *msg;
  internal_state *state;
  alloc_func zalloc;
  free_func zfree;
  voidpf opaque;
  int data_type;
  uLong adler;
  uLong reserved;
};

/* 1187 */
typedef Byte Bytef;

/* 1188 */
typedef unsigned __int8 Byte;

/* 1189 */
typedef unsigned int uInt;

/* 1190 */
typedef unsigned __int64 uLong;

/* 1191 */
struct internal_state
{
  int dummy;
};

/* 1192 */
typedef voidpf (*alloc_func)(voidpf, uInt, uInt);

/* 1193 */
typedef void *voidpf;

/* 1194 */
typedef void (*free_func)(voidpf, voidpf);

/* 1195 */
enum kdp_core_output::$82DFFD8F6D3D88410FEF821E5076C3EE : __int32
{
  kMaxZLibChunk = 0x40000000,
};

/* 1196 */
struct kdp_core_out_vars
{
  kern_dump_output_proc outproc;
  z_output_func zoutput;
  size_t zipped;
  uint64_t_0 totalbytes;
  uint64_t_0 lastpercent;
  IOReturn error;
  unsigned int outremain;
  unsigned int outlen;
  unsigned int writes;
  Bytef *outbuf;
};

/* 1197 */
typedef int (*kern_dump_output_proc)(unsigned int, char *, uint64_t_0, void *);

/* 1198 */
typedef int (*z_output_func)(z_streamp, Bytef *, unsigned int);

/* 1199 */
typedef z_stream *z_streamp;

/* 1200 */
struct kern_dump_preflight_context
{
  uint32_t_0 region_count;
  uint64_t_0 dumpable_bytes;
};

/* 1201 */
struct kern_dump_send_seg_desc_context
{
  core_save_segment_descriptions_cb callback;
  void *context;
};

/* 1202 */
typedef kern_return_t (*core_save_segment_descriptions_cb)(uint64_t_0, uint64_t_0, void *);

/* 1203 */
typedef __builtin_va_list va_list_3;

/* 1204 */
struct kern_dump_send_segdata_context
{
  core_save_segment_data_cb callback;
  void *context;
};

/* 1205 */
typedef kern_return_t (*core_save_segment_data_cb)(void *, uint64_t_0, void *);

/* 1206 */
typedef int (*pmap_traverse_callback)(vm_map_offset_t, vm_map_offset_t, void *);

/* 1207 */
struct kern_coredump_callback_config
{
  kern_return_t (*kcc_coredump_init)(void *, void *);
  kern_return_t (*kcc_coredump_get_summary)(void *, core_save_summary_cb, void *);
  kern_return_t (*kcc_coredump_save_segment_descriptions)(void *, core_save_segment_descriptions_cb, void *);
  kern_return_t (*kcc_coredump_save_thread_state)(void *, void *, core_save_thread_state_cb, void *);
  kern_return_t (*kcc_coredump_save_sw_vers)(void *, core_save_sw_vers_cb, void *);
  kern_return_t (*kcc_coredump_save_segment_data)(void *, core_save_segment_data_cb, void *);
  kern_return_t (*kcc_coredump_save_misc_data)(void *, core_save_misc_data_cb, void *);
};

/* 1208 */
typedef kern_return_t (*core_save_summary_cb)(uint64_t_0, uint64_t_0, uint64_t_0, uint64_t_0, uint64_t_0, void *);

/* 1209 */
typedef kern_return_t (*core_save_thread_state_cb)(void *, void *);

/* 1210 */
typedef kern_return_t (*core_save_sw_vers_cb)(void *, uint64_t_0, void *);

/* 1211 */
typedef kern_return_t (*core_save_misc_data_cb)(void *, uint64_t_0, void *);

/* 1212 */
struct kern_coredump_core
{
  kern_coredump_core *kcc_next;
  void *kcc_refcon;
  char kcc_corename[16];
  boolean_t kcc_is64bit;
  uint32_t_0 kcc_mh_magic;
  cpu_type_t kcc_cpu_type;
  cpu_subtype_t kcc_cpu_subtype;
  kern_coredump_callback_config kcc_cb;
};

/* 1213 */
struct processor_core_context
{
  kdp_core_out_vars *core_outvars;
  kern_coredump_callback_config *core_config;
  void *core_refcon;
  boolean_t core_is64bit;
  uint32_t_0 core_mh_magic;
  cpu_type_t core_cpu_type;
  cpu_subtype_t core_cpu_subtype;
  uint64_t_0 core_file_length;
  uint64_t_0 core_file_length_compressed;
  uint64_t_0 core_segment_count;
  uint64_t_0 core_segments_remaining;
  uint64_t_0 core_segment_byte_total;
  uint64_t_0 core_segment_bytes_remaining;
  uint64_t_0 core_thread_count;
  uint64_t_0 core_threads_remaining;
  uint64_t_0 core_thread_state_size;
  uint64_t_0 core_misc_bytes_count;
  uint64_t_0 core_misc_bytes_remaining;
  uint64_t_0 core_cur_hoffset;
  uint64_t_0 core_cur_foffset;
  uint64_t_0 core_header_size;
  uint64_t_0 core_total_bytes;
};

/* 1214 */
struct thread_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
};

/* 1215 */
struct mach_header
{
  uint32_t_0 magic;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
  uint32_t_0 filetype;
  uint32_t_0 ncmds;
  uint32_t_0 sizeofcmds;
  uint32_t_0 flags;
};

/* 1216 */
struct segment_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  char segname[16];
  uint32_t_0 vmaddr;
  uint32_t_0 vmsize;
  uint32_t_0 fileoff;
  uint32_t_0 filesize;
  vm_prot_t maxprot;
  vm_prot_t initprot;
  uint32_t_0 nsects;
  uint32_t_0 flags;
};

/* 1217 */
struct ident_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
};

/* 1218 */
enum $CADB661C337641B3573A1A0EAAF8780E : __int32
{
  DS_WAITSTART = 0x0,
  DS_READING = 0x1,
  DS_ESCAPED = 0x2,
};

/* 1219 */
typedef natural_t mach_port_type_t;

/* 1220 */
typedef void *event_t;

/* 1221 */
typedef natural_t mach_port_right_t;

/* 1222 */
typedef ipc_space *ipc_space_t;

/* 1223 */
typedef mach_port_name_t mach_port_gen_t;

/* 1224 */
typedef ipc_table_size *ipc_table_size_t;

/* 1225 */
typedef __builtin_va_list va_list_4;

/* 1226 */
struct __attribute__((aligned(8))) ipc_voucher_attr_manager
{
  ipc_voucher_attr_manager_release_value_t ivam_release_value;
  ipc_voucher_attr_manager_get_value_t ivam_get_value;
  ipc_voucher_attr_manager_extract_content_t ivam_extract_content;
  ipc_voucher_attr_manager_command_t ivam_command;
  ipc_voucher_attr_manager_release_t ivam_release;
  ipc_voucher_attr_manager_flags ivam_flags;
};

/* 1227 */
typedef kern_return_t (*ipc_voucher_attr_manager_release_value_t)(ipc_voucher_attr_manager_t, mach_voucher_attr_key_t, mach_voucher_attr_value_handle_t, mach_voucher_attr_value_reference_t);

/* 1228 */
typedef ipc_voucher_attr_manager *ipc_voucher_attr_manager_t;

/* 1229 */
typedef uint32_t_0 mach_voucher_attr_key_t;

/* 1230 */
typedef uint64_t_0 mach_voucher_attr_value_handle_t;

/* 1231 */
typedef kern_return_t (*ipc_voucher_attr_manager_get_value_t)(ipc_voucher_attr_manager_t, mach_voucher_attr_key_t, mach_voucher_attr_recipe_command_t, mach_voucher_attr_value_handle_array_t, mach_voucher_attr_value_handle_array_size_t, mach_voucher_attr_content_t, mach_voucher_attr_content_size_t, mach_voucher_attr_value_handle_t *, mach_voucher_attr_value_flags_t *, ipc_voucher_t *);

/* 1232 */
typedef uint32_t_0 mach_voucher_attr_recipe_command_t;

/* 1233 */
typedef mach_voucher_attr_value_handle_t *mach_voucher_attr_value_handle_array_t;

/* 1234 */
typedef mach_msg_type_number_t mach_voucher_attr_value_handle_array_size_t;

/* 1235 */
typedef uint8_t_0 *mach_voucher_attr_content_t;

/* 1236 */
typedef uint32_t_0 mach_voucher_attr_content_size_t;

/* 1237 */
typedef uint32_t_0 mach_voucher_attr_value_flags_t;

/* 1238 */
typedef kern_return_t (*ipc_voucher_attr_manager_extract_content_t)(ipc_voucher_attr_manager_t, mach_voucher_attr_key_t, mach_voucher_attr_value_handle_array_t, mach_voucher_attr_value_handle_array_size_t, mach_voucher_attr_recipe_command_t *, mach_voucher_attr_content_t, mach_voucher_attr_content_size_t *);

/* 1239 */
typedef kern_return_t (*ipc_voucher_attr_manager_command_t)(ipc_voucher_attr_manager_t, mach_voucher_attr_key_t, mach_voucher_attr_value_handle_array_t, mach_voucher_attr_value_handle_array_size_t, mach_voucher_attr_command_t, mach_voucher_attr_content_t, mach_voucher_attr_content_size_t, mach_voucher_attr_content_t, mach_voucher_attr_content_size_t *);

/* 1240 */
typedef uint32_t_0 mach_voucher_attr_command_t;

/* 1241 */
typedef void (*ipc_voucher_attr_manager_release_t)(ipc_voucher_attr_manager_t);

/* 1242 */
typedef uint32_t_0 ipc_voucher_attr_manager_flags;

/* 1243 */
typedef zone *zone_t;

/* 1244 */
struct __attribute__((aligned(64))) zone_cache
{
  lck_mtx_t_0 zcc_depot_lock;
  zcc_per_cpu_cache zcc_per_cpu_caches[64];
  int zcc_depot_index;
  zcc_magazine *zcc_depot_list[];
};

/* 1245 */
struct zone_free_element
{
  zone_free_element *next;
};

/* 1246 */
struct zone::$E72408AD974A9D7F41A85C5F0B38E430
{
  queue_head_t any_free_foreign;
  queue_head_t all_free;
  queue_head_t intermediate;
  queue_head_t all_used;
};

/* 1247 */
typedef __builtin_va_list va_list_5;

/* 1248 */
typedef gzalloc_data gzalloc_data_t;

/* 1249 */
struct gzalloc_data
{
  uint32_t_0 gzfc_index;
  vm_offset_t *gzfc;
};

/* 1250 */
typedef btlog btlog_t;

/* 1251 */
struct __attribute__((aligned(8))) btlog
{
  vm_address_t btlog_buffer;
  vm_size_t btlog_buffersize;
  uintptr_t btrecords;
  size_t btrecord_btdepth;
  size_t btrecord_size;
  btlog_recordindex_t head;
  btlog_recordindex_t tail;
  btlog_recordindex_t activerecord;
  btlog_recordindex_t freelist_records;
  size_t active_record_count;
  size_t active_element_count;
  btlog_element_t *freelist_elements;
  btlog::$99379AD13CE35945B546F8E40958BE17 elem_linkage_un;
  simple_lock_data_t btlog_lock;
  boolean_t caller_will_remove_entries_for_element;
};

/* 1252 */
typedef ipc_voucher_attr_control *ipc_voucher_attr_control_t;

/* 1253 */
struct __attribute__((aligned(8))) ipc_voucher_attr_control
{
  os_refcnt_t ivac_refs;
  boolean_t ivac_is_growing;
  ivac_entry_t ivac_table;
  iv_index_t ivac_table_size;
  iv_index_t ivac_init_table_size;
  iv_index_t ivac_freelist;
  ipc_port_t ivac_port;
  lck_spin_t_0 ivac_lock_data;
  iv_index_t ivac_key_index;
};

/* 1254 */
typedef ivac_entry *ivac_entry_t;

/* 1255 */
typedef ivac_entry_s ivac_entry;

/* 1256 */
struct ivac_entry_s
{
  iv_value_handle_t ivace_value;
  unsigned __int32 ivace_layered : 1;
  unsigned __int32 ivace_releasing : 1;
  unsigned __int32 ivace_free : 1;
  unsigned __int32 ivace_persist : 1;
  unsigned __int32 ivace_refs : 28;
  ivac_entry_s::$599FB6440176119DD46F1FD9432762CF ivace_u;
  iv_index_t ivace_next;
  iv_index_t ivace_index;
};

/* 1257 */
typedef mach_voucher_attr_value_handle_t iv_value_handle_t;

/* 1258 */
typedef mach_voucher_attr_value_reference_t iv_value_refs_t;

/* 1259 */
union ivac_entry_s::$599FB6440176119DD46F1FD9432762CF
{
  iv_value_refs_t ivaceu_made;
  iv_index_t ivaceu_layer;
};

/* 1260 */
enum memory_order : __int32
{
  memory_order_relaxed = 0x0,
  memory_order_consume = 0x1,
  memory_order_acquire = 0x2,
  memory_order_release = 0x3,
  memory_order_acq_rel = 0x4,
  memory_order_seq_cst = 0x5,
};

/* 1261 */
enum turnstile_type : __int8
{
  TURNSTILE_NONE = 0x0,
  TURNSTILE_KERNEL_MUTEX = 0x1,
  TURNSTILE_ULOCK = 0x2,
  TURNSTILE_PTHREAD_MUTEX = 0x3,
  TURNSTILE_SYNC_IPC = 0x4,
  TURNSTILE_WORKLOOPS = 0x5,
  TURNSTILE_WORKQS = 0x6,
  TURNSTILE_KNOTE = 0x7,
  TURNSTILE_TOTAL_TYPES = 0x8,
};

/* 1262 */
enum turnstile_update_complete_flags : __int32
{
  TURNSTILE_INTERLOCK_NOT_HELD = 0x1,
  TURNSTILE_INTERLOCK_HELD = 0x2,
};

/* 1263 */
typedef ipc_importance_elem *ipc_importance_elem_t;

/* 1264 */
typedef int iit_update_type_t;

/* 1265 */
typedef ipc_importance_inherit *ipc_importance_inherit_t;

/* 1266 */
struct ipc_importance_inherit
{
  ipc_importance_elem iii_elem;
  boolean_t iii_donating;
  uint32_t_0 iii_depth;
  ipc_importance_task_t iii_to_task;
  ipc_importance_elem_t iii_from_elem;
  queue_chain_t iii_inheritance;
};

/* 1267 */
typedef mach_vm_address_t mach_port_context_t;

/* 1268 */
typedef ipc_voucher_attr_recipe_data_t *ipc_voucher_attr_recipe_t;

/* 1269 */
typedef ipc_voucher_attr_recipe_data ipc_voucher_attr_recipe_data_t;

/* 1270 */
struct __attribute__((packed)) __attribute__((aligned(4))) ipc_voucher_attr_recipe_data
{
  mach_voucher_attr_key_t key;
  mach_voucher_attr_recipe_command_t command;
  ipc_voucher_t previous_voucher;
  mach_voucher_attr_content_size_t content_size;
  uint8_t_0 content[];
};

/* 1271 */
typedef queue_entry *queue_entry_t;

/* 1272 */
typedef ipc_kmsg *ipc_kmsg_t;

/* 1273 */
struct task_pend_token
{
  unsigned __int32 tpt_update_sockets : 1;
  unsigned __int32 tpt_update_timers : 1;
  unsigned __int32 tpt_update_watchers : 1;
  unsigned __int32 tpt_update_live_donor : 1;
  unsigned __int32 tpt_update_coal_sfi : 1;
  unsigned __int32 tpt_update_throttle : 1;
  unsigned __int32 tpt_update_thread_sfi : 1;
  unsigned __int32 tpt_force_recompute_pri : 1;
  unsigned __int32 tpt_update_tg_ui_flag : 1;
};

/* 1274 */
typedef __builtin_va_list va_list_6;

/* 1275 */
typedef __builtin_va_list va_list_7;

/* 1276 */
union mach_msg_descriptor_t
{
  mach_msg_port_descriptor_t port;
  mach_msg_ool_descriptor32_t out_of_line;
  mach_msg_ool_ports_descriptor32_t ool_ports;
  mach_msg_type_descriptor_t type;
};

/* 1277 */
struct mach_msg_ool_descriptor32_t
{
  uint32_t_0 address;
  mach_msg_size_t size;
  __int32 deallocate : 8;
  unsigned __int32 copy : 8;
  unsigned __int32 pad1 : 8;
  unsigned __int32 type : 8;
};

/* 1278 */
struct mach_msg_ool_ports_descriptor32_t
{
  uint32_t_0 address;
  mach_msg_size_t count;
  __int32 deallocate : 8;
  unsigned __int32 copy : 8;
  unsigned __int32 disposition : 8;
  unsigned __int32 type : 8;
};

/* 1279 */
struct mach_msg_ool_ports_descriptor_t
{
  void *address;
  __int32 deallocate : 8;
  unsigned __int32 copy : 8;
  unsigned __int32 disposition : 8;
  unsigned __int32 type : 8;
  mach_msg_size_t count;
};

/* 1280 */
struct mach_msg_security_trailer_t
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
};

/* 1281 */
typedef vm_map_copy *vm_map_copy_t;

/* 1282 */
struct vm_map_copy
{
  int type;
  vm_object_offset_t offset;
  vm_map_size_t size;
  vm_map_copy::$890C15401AE8DD89347B5D97519221E0 c_u;
};

/* 1283 */
union vm_map_copy::$890C15401AE8DD89347B5D97519221E0
{
  vm_map_header hdr;
  vm_object_t object;
  uint8_t_0 kdata[];
};

/* 1284 */
typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;

/* 1285 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_msg_mac_trailer_t
{
  mach_msg_trailer_type_t msgh_trailer_type;
  mach_msg_trailer_size_t msgh_trailer_size;
  mach_port_seqno_t msgh_seqno;
  security_token_t msgh_sender;
  audit_token_t msgh_audit;
  mach_port_context_t msgh_context;
  int msgh_ad;
  msg_labels_t msgh_labels;
};

/* 1286 */
struct msg_labels_t
{
  mach_port_name_t sender;
};

/* 1287 */
struct mach_msg_legacy_header_t
{
  mach_msg_bits_t msgh_bits;
  mach_msg_size_t msgh_size;
  mach_port_name_t msgh_remote_port;
  mach_port_name_t msgh_local_port;
  mach_port_name_t msgh_voucher_port;
  mach_msg_id_t msgh_id;
};

/* 1288 */
struct mach_msg_ool_descriptor64_t
{
  uint64_t_0 address;
  __int32 deallocate : 8;
  unsigned __int32 copy : 8;
  unsigned __int32 pad1 : 8;
  unsigned __int32 type : 8;
  mach_msg_size_t size;
};

/* 1289 */
typedef uint64_t_0 vm_map_address_t;

/* 1290 */
struct mach_msg_ool_ports_descriptor64_t
{
  uint64_t_0 address;
  __int32 deallocate : 8;
  unsigned __int32 copy : 8;
  unsigned __int32 disposition : 8;
  unsigned __int32 type : 8;
  mach_msg_size_t count;
};

/* 1291 */
typedef natural_t mach_port_urefs_t;

/* 1292 */
struct mach_msg_legacy_port_descriptor_t
{
  mach_port_name_t name;
  mach_msg_size_t pad1;
  unsigned __int32 pad2 : 16;
  unsigned __int32 disposition : 8;
  unsigned __int32 type : 8;
};

/* 1293 */
typedef ipc_kmsg_queue *ipc_kmsg_queue_t;

/* 1294 */
typedef unsigned __int64 pthread_priority_t;

/* 1295 */
struct mach_msg_legacy_base_t
{
  mach_msg_legacy_header_t header;
  mach_msg_body_t body;
};

/* 1296 */
enum e_waitq_lock_state : __int32
{
  WAITQ_KEEP_LOCKED = 0x1,
  WAITQ_UNLOCK = 0x2,
  WAITQ_SHOULD_LOCK = 0x4,
  WAITQ_ALREADY_LOCKED = 0x8,
  WAITQ_DONT_LOCK = 0x10,
};

/* 1297 */
typedef __builtin_va_list va_list_8;

/* 1298 */
typedef ipc_mqueue *ipc_mqueue_t;

/* 1299 */
typedef ipc_pset *ipc_pset_t;

/* 1300 */
struct ipc_pset
{
  ipc_object ips_object;
  ipc_mqueue ips_messages;
};

/* 1301 */
typedef __builtin_va_list va_list_9;

/* 1302 */
typedef natural_t ipc_object_type_t;

/* 1303 */
typedef ipc_port_request *ipc_port_request_t;

/* 1304 */
typedef __builtin_va_list va_list_10;

/* 1305 */
typedef integer_t mach_port_delta_t;

/* 1306 */
struct filterops
{
  _Bool f_isfd;
  _Bool f_adjusts_qos;
  _Bool f_extended_codes;
  int (*f_attach)(knote *, kevent_internal_s *);
  void (*f_detach)(knote *);
  int (*f_event)(knote *, __int64);
  int (*f_touch)(knote *, kevent_internal_s *);
  int (*f_process)(knote *, filt_process_s *, kevent_internal_s *);
  int (*f_peek)(knote *);
  _Bool (*f_allow_drop)(knote *, kevent_internal_s *);
  void (*f_post_register_wait)(uthread *, knote_lock_ctx *, _kevent_register *);
};

/* 1307 */
typedef __builtin_va_list va_list_11;

/* 1308 */
typedef __builtin_va_list va_list_12;

/* 1309 */
typedef __builtin_va_list va_list_13;

/* 1310 */
typedef __builtin_va_list va_list_14;

/* 1311 */
typedef ipc_voucher_global_table_element ipc_voucher_global_table_element_0;

/* 1312 */
struct __attribute__((aligned(8))) ipc_voucher_global_table_element
{
  ipc_voucher_attr_manager_t ivgte_manager;
  ipc_voucher_attr_control_t ivgte_control;
  mach_voucher_attr_key_t ivgte_key;
};

/* 1313 */
typedef mach_voucher_attr_recipe_data_t *mach_voucher_attr_recipe_t;

/* 1314 */
typedef mach_voucher_attr_recipe_data mach_voucher_attr_recipe_data_t;

/* 1315 */
struct mach_voucher_attr_recipe_data
{
  mach_voucher_attr_key_t key;
  mach_voucher_attr_recipe_command_t command;
  mach_voucher_name_t previous_voucher;
  mach_voucher_attr_content_size_t content_size;
  uint8_t_0 content[];
};

/* 1316 */
typedef mach_port_name_t mach_voucher_name_t;

/* 1317 */
typedef host *host_t;

/* 1318 */
typedef mach_voucher_attr_raw_recipe_t mach_voucher_attr_raw_recipe_array_t;

/* 1319 */
typedef uint8_t_0 *mach_voucher_attr_raw_recipe_t;

/* 1320 */
typedef __int64 SInt64;

/* 1321 */
typedef user_data_value_element *user_data_element_t;

/* 1322 */
struct user_data_value_element
{
  mach_voucher_attr_value_reference_t e_made;
  mach_voucher_attr_content_size_t e_size;
  iv_index_t e_sum;
  iv_index_t e_hash;
  queue_chain_t e_hash_link;
  uint8_t_0 e_data[];
};

/* 1323 */
typedef ipc_voucher_attr_raw_recipe_t ipc_voucher_attr_raw_recipe_array_t;

/* 1324 */
typedef uint8_t_0 *ipc_voucher_attr_raw_recipe_t;

/* 1325 */
typedef mach_msg_type_number_t ipc_voucher_attr_raw_recipe_array_size_t;

/* 1326 */
struct mach_no_senders_notification_t
{
  mach_msg_header_t not_header;
  NDR_record_t NDR;
  mach_msg_type_number_t not_count;
  mach_msg_format_0_trailer_t trailer;
};

/* 1327 */
typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;

/* 1328 */
typedef mach_msg_type_number_t ipc_voucher_attr_recipe_size_t;

/* 1329 */
typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_array_size_t;

/* 1330 */
typedef mach_msg_type_number_t mach_voucher_attr_recipe_size_t;

/* 1331 */
typedef mach_msg_type_number_t mach_voucher_attr_raw_recipe_size_t;

/* 1332 */
typedef mach_port_t mach_voucher_attr_manager_t;

/* 1333 */
typedef uint32_t_0 ipc_pthread_priority_value_t;

/* 1334 */
struct mach_generate_activity_id_args
{
  mach_port_name_t target;
  char target_r_[4];
  int count;
  char count_r_[4];
  user_addr_t activity_id;
  char activity_id_r_[];
};

/* 1335 */
typedef __builtin_va_list va_list_15;

/* 1336 */
typedef ipc_info_name_t *ipc_info_name_array_t;

/* 1337 */
typedef ipc_info_name ipc_info_name_t;

/* 1338 */
struct ipc_info_name
{
  mach_port_name_t iin_name;
  integer_t iin_collision;
  mach_port_type_t iin_type;
  mach_port_urefs_t iin_urefs;
  natural_t iin_object;
  natural_t iin_next;
  natural_t iin_hash;
};

/* 1339 */
typedef ipc_info_tree_name ipc_info_tree_name_t;

/* 1340 */
struct ipc_info_tree_name
{
  ipc_info_name_t iitn_name;
  mach_port_name_t iitn_lchild;
  mach_port_name_t iitn_rchild;
};

/* 1341 */
typedef ipc_info_space ipc_info_space_t;

/* 1342 */
struct ipc_info_space
{
  natural_t iis_genno_mask;
  natural_t iis_table_size;
  natural_t iis_table_next;
  natural_t iis_tree_size;
  natural_t iis_tree_small;
  natural_t iis_tree_hash;
};

/* 1343 */
typedef ipc_info_tree_name_t *ipc_info_tree_name_array_t;

/* 1344 */
typedef ipc_info_space_basic ipc_info_space_basic_t;

/* 1345 */
struct ipc_info_space_basic
{
  natural_t iisb_genno_mask;
  natural_t iisb_table_size;
  natural_t iisb_table_next;
  natural_t iisb_table_inuse;
  natural_t iisb_reserved[2];
};

/* 1346 */
typedef __builtin_va_list va_list_16;

/* 1347 */
struct _kernelrpc_mach_vm_allocate_trap_args
{
  mach_port_name_t target;
  char target_r_[4];
  user_addr_t addr;
  mach_vm_size_t size;
  int flags;
  char flags_r_[4];
};

/* 1348 */
struct _kernelrpc_mach_vm_deallocate_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_vm_address_t address;
  mach_vm_size_t size;
  char size_r_[];
};

/* 1349 */
struct _kernelrpc_mach_vm_protect_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_vm_address_t address;
  mach_vm_size_t size;
  boolean_t set_maximum;
  char set_maximum_r_[4];
  vm_prot_t new_protection;
  char new_protection_r_[4];
};

/* 1350 */
struct _kernelrpc_mach_vm_map_trap_args
{
  mach_port_name_t target;
  char target_r_[4];
  user_addr_t addr;
  mach_vm_size_t size;
  mach_vm_offset_t mask;
  int flags;
  char flags_r_[4];
  vm_prot_t cur_protection;
  char cur_protection_r_[4];
};

/* 1351 */
struct _kernelrpc_mach_vm_purgable_control_trap_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_vm_offset_t address;
  vm_purgable_t control;
  char control_r_[4];
  user_addr_t state;
  char state_r_[];
};

/* 1352 */
typedef int vm_purgable_t;

/* 1353 */
struct _kernelrpc_mach_port_allocate_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_right_t right;
  char right_r_[4];
  user_addr_t name;
  char name_r_[];
};

/* 1354 */
struct _kernelrpc_mach_port_destroy_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
};

/* 1355 */
struct _kernelrpc_mach_port_deallocate_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
};

/* 1356 */
struct _kernelrpc_mach_port_mod_refs_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
  mach_port_right_t right;
  char right_r_[4];
  mach_port_delta_t delta;
  char delta_r_[4];
};

/* 1357 */
struct _kernelrpc_mach_port_move_member_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t member;
  char member_r_[4];
  mach_port_name_t after;
  char after_r_[4];
};

/* 1358 */
struct _kernelrpc_mach_port_insert_right_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
  mach_port_name_t poly;
  char poly_r_[4];
  mach_msg_type_name_t polyPoly;
  char polyPoly_r_[4];
};

/* 1359 */
struct _kernelrpc_mach_port_get_attributes_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
  mach_port_flavor_t flavor;
  char flavor_r_[4];
  user_addr_t info;
  user_addr_t count;
  char count_r_[];
};

/* 1360 */
typedef int mach_port_flavor_t;

/* 1361 */
typedef task *task_inspect_t;

/* 1362 */
struct _kernelrpc_mach_port_insert_member_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
  mach_port_name_t pset;
  char pset_r_[4];
};

/* 1363 */
struct _kernelrpc_mach_port_extract_member_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
  mach_port_name_t pset;
  char pset_r_[4];
};

/* 1364 */
struct _kernelrpc_mach_port_construct_args
{
  mach_port_name_t target;
  char target_r_[4];
  user_addr_t options;
  uint64_t_0 context;
  user_addr_t name;
  char name_r_[];
};

/* 1365 */
typedef mach_port_options mach_port_options_t;

/* 1366 */
struct mach_port_options
{
  uint32_t_0 flags;
  mach_port_limits_t mpl;
  uint64_t_0 reserved[2];
};

/* 1367 */
typedef mach_port_limits mach_port_limits_t;

/* 1368 */
struct mach_port_limits
{
  mach_port_msgcount_t mpl_qlimit;
};

/* 1369 */
typedef natural_t mach_port_msgcount_t;

/* 1370 */
struct _kernelrpc_mach_port_destruct_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
  mach_port_delta_t srdelta;
  char srdelta_r_[4];
  uint64_t_0 guard;
  char guard_r_[];
};

/* 1371 */
struct _kernelrpc_mach_port_guard_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
  uint64_t_0 guard;
  boolean_t strict;
  char strict_r_[4];
};

/* 1372 */
struct _kernelrpc_mach_port_unguard_args
{
  mach_port_name_t target;
  char target_r_[4];
  mach_port_name_t name;
  char name_r_[4];
  uint64_t_0 guard;
  char guard_r_[];
};

/* 1373 */
struct host_create_mach_voucher_args
{
  mach_port_name_t host;
  char host_r_[4];
  mach_voucher_attr_raw_recipe_array_t recipes;
  int recipes_size;
  char recipes_size_r_[4];
  user_addr_t voucher;
  char voucher_r_[];
};

/* 1374 */
struct mach_voucher_extract_attr_recipe_args
{
  mach_port_name_t voucher_name;
  char voucher_name_r_[4];
  mach_voucher_attr_key_t key;
  char key_r_[4];
  mach_voucher_attr_raw_recipe_t recipe;
  user_addr_t recipe_size;
  char recipe_size_r_[];
};

/* 1375 */
typedef __builtin_va_list va_list_17;

/* 1376 */
struct mach_msg_overwrite_trap_args
{
  user_addr_t msg;
  mach_msg_option_t option;
  char option_r_[4];
  mach_msg_size_t send_size;
  char send_size_r_[4];
  mach_msg_size_t rcv_size;
  char rcv_size_r_[4];
  mach_port_name_t rcv_name;
  char rcv_name_r_[4];
  mach_msg_timeout_t timeout;
  char timeout_r_[4];
  mach_msg_priority_t override;
  char override_r_[4];
  user_addr_t rcv_msg;
  char rcv_msg_r_[];
};

/* 1377 */
typedef natural_t mach_msg_timeout_t;

/* 1378 */
typedef mach_port_qos mach_port_qos_t;

/* 1379 */
struct mach_port_qos
{
  unsigned __int32 name : 1;
  unsigned __int32 prealloc : 1;
  __int32 pad1 : 30;
  natural_t len;
};

/* 1380 */
typedef __builtin_va_list va_list_18;

/* 1381 */
typedef mach_port_status mach_port_status_t;

/* 1382 */
struct mach_port_status
{
  mach_port_rights_t mps_pset;
  mach_port_seqno_t mps_seqno;
  mach_port_mscount_t mps_mscount;
  mach_port_msgcount_t mps_qlimit;
  mach_port_msgcount_t mps_msgcount;
  mach_port_rights_t mps_sorights;
  boolean_t mps_srights;
  boolean_t mps_pdrequest;
  boolean_t mps_nsrequest;
  natural_t mps_flags;
};

/* 1383 */
typedef mach_port_info_ext mach_port_info_ext_t;

/* 1384 */
struct mach_port_info_ext
{
  mach_port_status_t mpie_status;
  mach_port_msgcount_t mpie_boost_cnt;
  uint32_t_0 reserved[6];
};

/* 1385 */
typedef integer_t *mach_port_info_t;

/* 1386 */
typedef char *mach_msg_trailer_info_t;

/* 1387 */
typedef task_affinity_tag_info *task_affinity_tag_info_t;

/* 1388 */
struct task_affinity_tag_info
{
  integer_t set_count;
  integer_t min;
  integer_t max;
  integer_t task_count;
};

/* 1389 */
typedef __builtin_va_list va_list_19;

/* 1390 */
typedef affinity_space *affinity_space_t;

/* 1391 */
typedef unsigned int spl_t;

/* 1392 */
enum perfcontrol_event : __int32
{
  QUANTUM_EXPIRY = 0x1,
  THREAD_GROUP_UPDATE = 0x2,
  PERFCONTROL_ATTR_UPDATE = 0x3,
  CONTEXT_SWITCH = 0xA,
  IDLE = 0xB,
};

/* 1393 */
typedef __builtin_va_list va_list_20;

/* 1394 */
typedef __builtin_va_list va_list_21;

/* 1395 */
union backtrace_thread_user::$176DE59C025292608B3AA5DDD4C4A975
{
  backtrace_thread_user::$176DE59C025292608B3AA5DDD4C4A975::$F1E349EAAB70129EABE71C0CE0568933 u64;
  backtrace_thread_user::$176DE59C025292608B3AA5DDD4C4A975::$41043A1F6857A254CE5C6AA9E3D50B8F u32;
};

/* 1396 */
struct backtrace_thread_user::$176DE59C025292608B3AA5DDD4C4A975::$F1E349EAAB70129EABE71C0CE0568933
{
  uint64_t_0 fp;
  uint64_t_0 ret;
};

/* 1397 */
struct backtrace_thread_user::$176DE59C025292608B3AA5DDD4C4A975::$41043A1F6857A254CE5C6AA9E3D50B8F
{
  uint32_t_0 fp;
  uint32_t_0 ret;
};

/* 1398 */
typedef btlog_record btlog_record_t;

/* 1399 */
struct btlog_record
{
  unsigned __int32 next : 24;
  unsigned __int32 operation : 8;
  uint32_t_0 ref_count;
  uint32_t_0 bthash;
  _element_record_queue element_record_queue;
  void *bt[];
};

/* 1400 */
typedef uint32_t_0 btlog_recordindex_t;

/* 1401 */
struct _element_record_queue
{
  btlog_element *tqh_first;
  btlog_element **tqh_last;
};

/* 1402 */
struct btlog_element
{
  unsigned __int32 recindex : 24;
  unsigned __int32 operation : 8;
  uintptr_t elem;
  btlog_element::$0B2B7E265FD0828113B7FF5493FEB09F element_record_link;
  btlog_element::$0B2B7E265FD0828113B7FF5493FEB09F element_hash_link;
};

/* 1403 */
struct btlog_element::$0B2B7E265FD0828113B7FF5493FEB09F
{
  btlog_element *tqe_next;
  btlog_element **tqe_prev;
};

/* 1404 */
typedef btlog_element btlog_element_t;

/* 1405 */
union btlog::$99379AD13CE35945B546F8E40958BE17
{
  btlog_element_t **elem_recindex_hashtbl;
  _element_hash_queue *element_hash_queue;
};

/* 1406 */
struct _element_hash_queue
{
  btlog_element *tqh_first;
  btlog_element **tqh_last;
};

/* 1407 */
struct MD5_CTX
{
  u_int32_t state[4];
  u_int32_t count[2];
  unsigned __int8 buffer[64];
};

/* 1408 */
struct clock_calend
{
  uint64_t_0 s_scale_ns;
  int64_t s_adj_nsx;
  uint64_t_0 tick_scale_x;
  uint64_t_0 offset_count;
  bintime offset;
  bintime bintime;
  bintime boottime;
  bintime basesleep;
};

/* 1409 */
struct bintime
{
  time_t sec;
  uint64_t_0 frac;
};

/* 1410 */
typedef __darwin_time_t time_t;

/* 1411 */
struct __attribute__((aligned(8))) unlocked_clock_calend
{
  clock_calend calend;
  uint32_t_0 gen;
};

/* 1412 */
typedef unsigned int clock_nsec_t;

/* 1413 */
typedef unsigned___int128 __uint128_t;

/* 1414 */
struct mach_timebase_info_trap_args
{
  user_addr_t info;
  char info_r_[];
};

/* 1415 */
struct latched_time
{
  uint64_t_0 monotonic_time_usec;
  uint64_t_0 mach_time;
};

/* 1416 */
struct mach_wait_until_trap_args
{
  uint64_t_0 deadline;
  char deadline_r_[];
};

/* 1417 */
struct clock_ops
{
  int (*c_config)(void);
  int (*c_init)(void);
  kern_return_t (*c_gettime)(mach_timespec_t *);
  kern_return_t (*c_getattr)(clock_flavor_t, clock_attr_t, mach_msg_type_number_t *);
};

/* 1418 */
typedef mach_timespec mach_timespec_t;

/* 1419 */
struct mach_timespec
{
  unsigned int tv_sec;
  clock_res_t tv_nsec;
};

/* 1420 */
typedef int clock_res_t;

/* 1421 */
typedef int clock_flavor_t;

/* 1422 */
typedef int *clock_attr_t;

/* 1423 */
struct clock
{
  clock_ops_t cl_ops;
  ipc_port *cl_service;
  ipc_port *cl_control;
};

/* 1424 */
typedef const clock_ops *clock_ops_t;

/* 1425 */
typedef __builtin_va_list va_list_22;

/* 1426 */
struct alarm
{
  alarm *al_next;
  alarm *al_prev;
  int al_status;
  mach_timespec_t al_time;
  alarm::$3851193366978EE8909265B2401E948C al_alrm;
  __int64 al_seqno;
};

/* 1427 */
struct alarm::$3851193366978EE8909265B2401E948C
{
  int type;
  ipc_port_t port;
  mach_msg_type_name_t port_type;
  clock *clock;
  void *data;
};

/* 1428 */
typedef thread_call thread_call_data_t;

/* 1429 */
typedef void (*thread_call_func_t)(thread_call_param_t, thread_call_param_t);

/* 1430 */
typedef void *thread_call_param_t;

/* 1431 */
typedef void (*timer_call_func_t)(timer_call_param_t, timer_call_param_t);

/* 1432 */
typedef void *timer_call_param_t;

/* 1433 */
typedef clock *clock_t;

/* 1434 */
typedef alarm *alarm_t;

/* 1435 */
typedef int sleep_type_t;

/* 1436 */
struct clock_sleep_trap_args
{
  mach_port_name_t clock_name;
  char clock_name_r_[4];
  sleep_type_t sleep_type;
  char sleep_type_r_[4];
  int sleep_sec;
  char sleep_sec_r_[4];
  int sleep_nsec;
  char sleep_nsec_r_[4];
  user_addr_t wakeup_time;
  char wakeup_time_r_[];
};

/* 1437 */
union coalition::$63A32F67D9ED628BA50318E352FD6B89
{
  i_resource_coalition r;
  i_jetsam_coalition j;
};

/* 1438 */
struct i_resource_coalition
{
  ledger_t ledger;
  uint64_t_0 bytesread;
  uint64_t_0 byteswritten;
  uint64_t_0 energy;
  uint64_t_0 gpu_time;
  uint64_t_0 logical_immediate_writes;
  uint64_t_0 logical_deferred_writes;
  uint64_t_0 logical_invalidated_writes;
  uint64_t_0 logical_metadata_writes;
  uint64_t_0 cpu_ptime;
  uint64_t_0 cpu_time_eqos[7];
  uint64_t_0 cpu_time_rqos[7];
  uint64_t_0 task_count;
  uint64_t_0 dead_task_count;
  uint64_t_0 last_became_nonempty_time;
  uint64_t_0 time_nonempty;
  queue_head_t tasks;
};

/* 1439 */
struct i_jetsam_coalition
{
  task_t leader;
  queue_head_t extensions;
  queue_head_t services;
  queue_head_t other;
  thread_group *thread_group;
};

/* 1440 */
struct thread_group;

/* 1441 */
typedef __builtin_va_list va_list_23;

/* 1442 */
struct coalition_type
{
  int type;
  int has_default;
  kern_return_t (*init)(coalition_t, boolean_t);
  void (*dealloc)(coalition_t);
  kern_return_t (*adopt_task)(coalition_t, task_t);
  kern_return_t (*remove_task)(coalition_t, task_t);
  kern_return_t (*set_taskrole)(coalition_t, task_t, int);
  int (*get_taskrole)(coalition_t, task_t);
  void (*iterate_tasks)(coalition_t, void *, void (*)(coalition_t, void *, task_t));
};

/* 1443 */
struct coal_sort_s
{
  int pid;
  int usr_order;
  uint64_t_0 bytes;
};

/* 1444 */
typedef void (*coalition_iterate_fn_t)(void *, int, coalition_t);

/* 1445 */
struct procinfo_coalinfo
{
  uint64_t_0 coalition_id;
  uint32_t_0 coalition_type;
  uint32_t_0 coalition_tasks;
};

/* 1446 */
struct coalition_resource_usage
{
  uint64_t_0 tasks_started;
  uint64_t_0 tasks_exited;
  uint64_t_0 time_nonempty;
  uint64_t_0 cpu_time;
  uint64_t_0 interrupt_wakeups;
  uint64_t_0 platform_idle_wakeups;
  uint64_t_0 bytesread;
  uint64_t_0 byteswritten;
  uint64_t_0 gpu_time;
  uint64_t_0 cpu_time_billed_to_me;
  uint64_t_0 cpu_time_billed_to_others;
  uint64_t_0 energy;
  uint64_t_0 logical_immediate_writes;
  uint64_t_0 logical_deferred_writes;
  uint64_t_0 logical_invalidated_writes;
  uint64_t_0 logical_metadata_writes;
  uint64_t_0 energy_billed_to_me;
  uint64_t_0 energy_billed_to_others;
  uint64_t_0 cpu_ptime;
  uint64_t_0 cpu_time_eqos_len;
  uint64_t_0 cpu_time_eqos[7];
};

/* 1447 */
typedef int (*cmpfunc_t)(const void *, const void *);

/* 1448 */
struct macos_panic_header
{
  uint32_t_0 mph_magic;
  uint32_t_0 mph_crc;
  uint32_t_0 mph_version;
  uint32_t_0 mph_padding;
  uint64_t_0 mph_panic_flags;
  uint32_t_0 mph_panic_log_offset;
  uint32_t_0 mph_panic_log_len;
  uint32_t_0 mph_stackshot_offset;
  uint32_t_0 mph_stackshot_len;
  uint32_t_0 mph_other_log_offset;
  uint32_t_0 mph_other_log_len;
  char mph_data[];
};

/* 1449 */
typedef int atomic_int;

/* 1450 */
typedef __darwin_uuid_string_t uuid_string_t;

/* 1451 */
typedef char __darwin_uuid_string_t[37];

/* 1452 */
struct kdp_callout
{
  kdp_callout *callout_next;
  kdp_callout_fn_t callout_fn;
  boolean_t callout_in_progress;
  void *callout_arg;
};

/* 1453 */
typedef void (*kdp_callout_fn_t)(void *, kdp_event_t);

/* 1454 */
typedef $F39F992E2D3C1D28C6C91D8C17CCDC1A kdp_event_t;

/* 1455 */
struct debugger_state_0
{
  debugger_op db_current_op;
  const char *db_message;
  const char *db_panic_str;
  va_list *db_panic_args;
  uint64_t_0 db_panic_options;
  void *db_panic_data_ptr;
  boolean_t db_proceed_on_sync_failure;
  uint32_t_0 db_entry_count;
  kern_return_t db_op_return;
  unsigned __int64 db_panic_caller;
};

/* 1456 */
typedef pasc pasc_t;

/* 1457 */
struct __attribute__((packed)) __attribute__((aligned(1))) pasc
{
  unsigned __int32 a : 7;
  unsigned __int32 b : 7;
  unsigned __int32 c : 7;
  unsigned __int32 d : 7;
  unsigned __int32 e : 7;
  unsigned __int32 f : 7;
  unsigned __int32 g : 7;
  unsigned __int32 h : 7;
};

/* 1458 */
typedef mach_memory_info mach_memory_info_t;

/* 1459 */
struct mach_memory_info
{
  uint64_t_0 flags;
  uint64_t_0 site;
  uint64_t_0 size;
  uint64_t_0 free;
  uint64_t_0 largest;
  uint64_t_0 collectable_bytes;
  uint64_t_0 mapped;
  uint64_t_0 peak;
  uint16_t tag;
  uint16_t zone;
  uint16_t _resvA[2];
  uint64_t_0 _resv[3];
  char name[80];
};

/* 1460 */
struct ztrace
{
  vm_size_t zt_size;
  uint32_t_0 zt_depth;
  void *zt_stack[15];
  uint32_t_0 zt_collisions;
  uint32_t_0 zt_hit_count;
};

/* 1461 */
typedef uint64_t_0 (*io_rate_update_callback_t)(uint64_t_0, uint64_t_0, uint64_t_0, uint64_t_0, uint64_t_0);

/* 1462 */
typedef uint64_t_0 (*gpu_set_fceiling_t)(uint32_t_0, uint64_t_0);

/* 1463 */
typedef gpu_descriptor *gpu_descriptor_t;

/* 1464 */
struct gpu_descriptor
{
  uint32_t_0 gpu_id;
  uint32_t_0 gpu_max_domains;
};

/* 1465 */
typedef integer_t exception_data_type_t;

/* 1466 */
typedef __builtin_va_list va_list_24;

/* 1467 */
typedef natural_t *thread_state_t;

/* 1468 */
typedef int wait_interrupt_t;

/* 1469 */
typedef mach_exception_data_type_t *mach_exception_data_t;

/* 1470 */
typedef natural_t thread_state_data_t[614];

/* 1471 */
typedef __builtin_va_list va_list_25;

/* 1472 */
typedef host host_data_t;

/* 1473 */
typedef __builtin_va_list va_list_26;

/* 1474 */
struct __attribute__((aligned(8))) host_stats_cache
{
  uint64_t_0 last_access;
  uint64_t_0 current_requests;
  uint64_t_0 max_requests;
  uintptr_t data;
  mach_msg_type_number_t count;
};

/* 1475 */
typedef host_load_info host_load_info_data_t;

/* 1476 */
struct host_load_info
{
  integer_t avenrun[3];
  integer_t mach_factor[3];
};

/* 1477 */
typedef vm_statistics vm_statistics_data_t;

/* 1478 */
struct vm_statistics
{
  natural_t free_count;
  natural_t active_count;
  natural_t inactive_count;
  natural_t wire_count;
  natural_t zero_fill_count;
  natural_t reactivations;
  natural_t pageins;
  natural_t pageouts;
  natural_t faults;
  natural_t cow_faults;
  natural_t lookups;
  natural_t hits;
  natural_t purgeable_count;
  natural_t purges;
  natural_t speculative_count;
};

/* 1479 */
typedef host_cpu_load_info host_cpu_load_info_data_t;

/* 1480 */
struct host_cpu_load_info
{
  natural_t cpu_ticks[4];
};

/* 1481 */
typedef task_power_info task_power_info_data_t;

/* 1482 */
struct task_power_info
{
  uint64_t_0 total_user;
  uint64_t_0 total_system;
  uint64_t_0 task_interrupt_wakeups;
  uint64_t_0 task_platform_idle_wakeups;
  uint64_t_0 task_timer_wakeups_bin_1;
  uint64_t_0 task_timer_wakeups_bin_2;
};

/* 1483 */
typedef task_power_info_v2 task_power_info_v2_data_t;

/* 1484 */
struct task_power_info_v2
{
  task_power_info_data_t cpu_energy;
  gpu_energy_data gpu_energy;
  uint64_t_0 task_ptime;
  uint64_t_0 task_pset_switches;
};

/* 1485 */
struct gpu_energy_data
{
  uint64_t_0 task_gpu_utilisation;
  uint64_t_0 task_gpu_stat_reserved0;
  uint64_t_0 task_gpu_stat_reserved1;
  uint64_t_0 task_gpu_stat_reserved2;
};

/* 1486 */
typedef processor_t *processor_array_t;

/* 1487 */
typedef host_basic_info *host_basic_info_t;

/* 1488 */
struct host_basic_info
{
  integer_t max_cpus;
  integer_t avail_cpus;
  natural_t memory_size;
  cpu_type_t cpu_type;
  cpu_subtype_t cpu_subtype;
  cpu_threadtype_t cpu_threadtype;
  integer_t physical_cpu;
  integer_t physical_cpu_max;
  integer_t logical_cpu;
  integer_t logical_cpu_max;
  uint64_t_0 max_mem;
};

/* 1489 */
typedef integer_t cpu_threadtype_t;

/* 1490 */
typedef host_sched_info *host_sched_info_t;

/* 1491 */
struct host_sched_info
{
  integer_t min_timeout;
  integer_t min_quantum;
};

/* 1492 */
typedef host_priority_info *host_priority_info_t;

/* 1493 */
struct host_priority_info
{
  integer_t kernel_priority;
  integer_t system_priority;
  integer_t server_priority;
  integer_t user_priority;
  integer_t depress_priority;
  integer_t idle_priority;
  integer_t minimum_priority;
  integer_t maximum_priority;
};

/* 1494 */
typedef host_can_has_debugger_info *host_can_has_debugger_info_t;

/* 1495 */
struct host_can_has_debugger_info
{
  boolean_t can_has_debugger;
};

/* 1496 */
typedef host_preferred_user_arch *host_preferred_user_arch_t;

/* 1497 */
struct host_preferred_user_arch
{
  cpu_type_t cpu_type;
  cpu_subtype_t cpu_subtype;
};

/* 1498 */
typedef host_load_info *host_load_info_t;

/* 1499 */
typedef vm_statistics *vm_statistics_t;

/* 1500 */
typedef host_cpu_load_info *host_cpu_load_info_t;

/* 1501 */
typedef task_power_info *task_power_info_t;

/* 1502 */
typedef task_power_info_v2 *task_power_info_v2_t;

/* 1503 */
typedef vm_extmod_statistics *vm_extmod_statistics_t;

/* 1504 */
typedef integer_t *host_info_t;

/* 1505 */
typedef integer_t *processor_info_t;

/* 1506 */
typedef integer_t *processor_info_array_t;

/* 1507 */
typedef integer_t *host_info64_t;

/* 1508 */
typedef processor_set_t *processor_set_name_array_t;

/* 1509 */
typedef mach_port_t io_master_t;

/* 1510 */
typedef host *host_security_t;

/* 1511 */
struct vpl
{
  vm_page_queue_head_t vpl_queue;
  unsigned int vpl_count;
  unsigned int vpl_internal_count;
  unsigned int vpl_external_count;
  lck_spin_t_0 vpl_lock;
};

/* 1512 */
struct _processor_statistics_np
{
  int32_t ps_cpuid;
  uint32_t_0 ps_csw_count;
  uint32_t_0 ps_preempt_count;
  uint32_t_0 ps_preempted_rt_count;
  uint32_t_0 ps_preempted_by_rt_count;
  uint32_t_0 ps_rt_sched_count;
  uint32_t_0 ps_interrupt_count;
  uint32_t_0 ps_ipi_count;
  uint32_t_0 ps_timer_pop_count;
  uint64_t_0 ps_runq_count_sum;
  uint32_t_0 ps_idle_transitions;
  uint32_t_0 ps_quantum_timer_expirations;
};

/* 1513 */
typedef __builtin_va_list va_list_27;

/* 1514 */
typedef host_notify_entry *host_notify_t;

/* 1515 */
struct host_notify_entry
{
  queue_chain_t entries;
  ipc_port_t port;
};

/* 1516 */
struct __Request__host_calendar_changed_t
{
  mach_msg_header_t Head;
};

/* 1517 */
struct __Request__host_calendar_set_t
{
  mach_msg_header_t Head;
};

/* 1518 */
typedef __builtin_va_list va_list_28;

/* 1519 */
typedef __builtin_va_list va_list_29;

/* 1520 */
typedef processor_set_t processor_set_name_t;

/* 1521 */
struct host_self_trap_args
{
  int32_t dummy;
};

/* 1522 */
typedef exception_mask_t *exception_mask_array_t;

/* 1523 */
typedef unsigned int exception_mask_t;

/* 1524 */
typedef mach_port_t *exception_port_array_t;

/* 1525 */
typedef exception_behavior_t *exception_behavior_array_t;

/* 1526 */
typedef thread_state_flavor_t *thread_state_flavor_array_t;

/* 1527 */
struct mig_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  mach_msg_size_t maxsize;
  vm_address_t reserved;
  mig_routine_descriptor routine[1];
};

/* 1528 */
typedef __builtin_va_list va_list_30;

/* 1529 */
typedef routine_descriptor mig_routine_descriptor;

/* 1530 */
struct __attribute__((aligned(8))) mig_hash_t
{
  mach_msg_id_t num;
  mig_routine_t routine;
  int size;
};

/* 1531 */
typedef natural_t ipc_kobject_type_t;

/* 1532 */
typedef __builtin_va_list va_list_31;

/* 1533 */
typedef mig_object *mig_object_t;

/* 1534 */
struct mig_object
{
  const IMIGObjectVtbl_0 *pVtbl;
  mach_port_t port;
};

/* 1535 */
typedef IMIGObjectVtbl IMIGObjectVtbl_0;

/* 1536 */
struct IMIGObjectVtbl
{
  kern_return_t (*QueryInterface)(IMIGObject_0 *, const MIGIID_0 *, void **);
  unsigned __int64 (*AddRef)(IMIGObject_0 *);
  unsigned __int64 (*Release)(IMIGObject_0 *);
  unsigned __int64 (*GetServer)(IMIGObject_0 *, mig_server_routine_t *);
  boolean_t (*RaiseNotification)(IMIGObject_0 *, mig_notify_type_t);
  boolean_t (*RequestNotification)(IMIGObject_0 *, IMIGNotifyObject_0 *, mig_notify_type_t);
};

/* 1537 */
typedef IMIGObject IMIGObject_0;

/* 1538 */
struct IMIGObject
{
  const IMIGObjectVtbl_0 *pVtbl;
};

/* 1539 */
typedef MIGIID MIGIID_0;

/* 1540 */
struct __attribute__((aligned(8))) MIGIID
{
  unsigned __int64 data1;
  unsigned __int16 data2;
  unsigned __int16 data3;
  unsigned __int8 data4[8];
};

/* 1541 */
typedef unsigned int mig_notify_type_t;

/* 1542 */
typedef IMIGNotifyObject IMIGNotifyObject_0;

/* 1543 */
struct IMIGNotifyObject
{
  const IMIGNotifyObjectVtbl_0 *pVtbl;
};

/* 1544 */
typedef IMIGNotifyObjectVtbl IMIGNotifyObjectVtbl_0;

/* 1545 */
struct IMIGNotifyObjectVtbl
{
  kern_return_t (*QueryInterface)(IMIGNotifyObject_0 *, const MIGIID_0 *, void **);
  unsigned __int64 (*AddRef)(IMIGNotifyObject_0 *);
  unsigned __int64 (*Release)(IMIGNotifyObject_0 *);
  unsigned __int64 (*GetServer)(IMIGNotifyObject_0 *, mig_server_routine_t *);
  boolean_t (*RaiseNotification)(IMIGNotifyObject_0 *, mig_notify_type_t);
  boolean_t (*RequestNotification)(IMIGNotifyObject_0 *, IMIGNotifyObject_0 *, mig_notify_type_t);
  void (*HandleNotification)(IMIGNotifyObject_0 *, IMIGObject_0 *, mig_notify_type_t);
};

/* 1546 */
typedef __builtin_va_list va_list_32;

/* 1547 */
struct fileglob
{
  fileglob::$6F9AD2542AAC309208990354E0BC2E77 f_msglist;
  int32_t fg_flag;
  int32_t fg_count;
  int32_t fg_msgcount;
  int32_t fg_lflags;
  kauth_cred_t fg_cred;
  const fileops *fg_ops;
  off_t fg_offset;
  void *fg_data;
  void *fg_vn_data;
  lck_mtx_t fg_lock;
  label *fg_label;
};

/* 1548 */
typedef unsigned int uint_t_0;

/* 1549 */
typedef semaphore *semaphore_t;

/* 1550 */
typedef __builtin_va_list va_list_33;

/* 1551 */
typedef lock_set *lock_set_t;

/* 1552 */
struct lock_set;

/* 1553 */
typedef __builtin_va_list va_list_34;

/* 1554 */
typedef mach_port_t *mach_port_array_t;

/* 1555 */
typedef task *task_name_t;

/* 1556 */
typedef task *task_suspension_token_t;

/* 1557 */
typedef ipc_space *ipc_space_inspect_t;

/* 1558 */
typedef thread *thread_inspect_t;

/* 1559 */
struct task_self_trap_args
{
  int32_t dummy;
};

/* 1560 */
struct thread_self_trap_args
{
  int32_t dummy;
};

/* 1561 */
struct mach_reply_port_args
{
  int32_t dummy;
};

/* 1562 */
struct thread_get_special_reply_port_args
{
  int32_t dummy;
};

/* 1563 */
typedef __builtin_va_list va_list_35;

/* 1564 */
struct kalloc_zone_config
{
  int kzc_size;
  const char *kzc_name;
};

/* 1565 */
typedef _OSMallocTag_ *OSMallocTag;

/* 1566 */
struct __attribute__((aligned(8))) _OSMallocTag_
{
  queue_chain_t OSMT_link;
  uint32_t_0 OSMT_refcnt;
  uint32_t_0 OSMT_state;
  uint32_t_0 OSMT_attr;
  char OSMT_name[64];
};

/* 1567 */
struct vm_map_kernel_flags_t
{
  unsigned __int32 vmkf_atomic_entry : 1;
  unsigned __int32 vmkf_permanent : 1;
  unsigned __int32 vmkf_guard_after : 1;
  unsigned __int32 vmkf_guard_before : 1;
  unsigned __int32 vmkf_submap : 1;
  unsigned __int32 vmkf_already : 1;
  unsigned __int32 vmkf_beyond_max : 1;
  unsigned __int32 vmkf_no_pmap_check : 1;
  unsigned __int32 vmkf_map_jit : 1;
  unsigned __int32 vmkf_iokit_acct : 1;
  unsigned __int32 vmkf_keep_map_locked : 1;
  unsigned __int32 vmkf_fourk : 1;
  unsigned __int32 vmkf_overwrite_immutable : 1;
  unsigned __int32 vmkf_remap_prot_copy : 1;
  unsigned __int32 vmkf_cs_enforcement_override : 1;
  unsigned __int32 vmkf_cs_enforcement : 1;
  unsigned __int32 __vmkf_unused : 16;
};

/* 1568 */
typedef ledger_template *ledger_template_t;

/* 1569 */
typedef __builtin_va_list va_list_36;

/* 1570 */
struct entry_template
{
  char et_key[32];
  char et_group[32];
  char et_units[32];
  uint32_t_0 et_flags;
  ledger_callback *et_callback;
};

/* 1571 */
struct ledger_callback
{
  ledger_callback_t lc_func;
  const void *lc_param0;
  const void *lc_param1;
};

/* 1572 */
typedef void (*ledger_callback_t)(int, const void *, const void *);

/* 1573 */
typedef unsigned __int64 UInt64;

/* 1574 */
struct ledger_entry_info
{
  int64_t lei_balance;
  int64_t lei_credit;
  int64_t lei_debit;
  uint64_t_0 lei_limit;
  uint64_t_0 lei_refill_period;
  uint64_t_0 lei_last_refill;
};

/* 1575 */
struct ledger_template_info
{
  char lti_name[32];
  char lti_group[32];
  char lti_units[32];
};

/* 1576 */
struct ledger_info
{
  char li_name[32];
  int64_t li_id;
  int64_t li_entries;
};

/* 1577 */
typedef __builtin_va_list va_list_37;

/* 1578 */
typedef lockgroup_info lockgroup_info_t;

/* 1579 */
struct lockgroup_info
{
  char lockgroup_name[64];
  uint64_t_0 lockgroup_attr;
  uint64_t_0 lock_spin_cnt;
  uint64_t_0 lock_spin_util_cnt;
  uint64_t_0 lock_spin_held_cnt;
  uint64_t_0 lock_spin_miss_cnt;
  uint64_t_0 lock_spin_held_max;
  uint64_t_0 lock_spin_held_cum;
  uint64_t_0 lock_mtx_cnt;
  uint64_t_0 lock_mtx_util_cnt;
  uint64_t_0 lock_mtx_held_cnt;
  uint64_t_0 lock_mtx_miss_cnt;
  uint64_t_0 lock_mtx_wait_cnt;
  uint64_t_0 lock_mtx_held_max;
  uint64_t_0 lock_mtx_held_cum;
  uint64_t_0 lock_mtx_wait_max;
  uint64_t_0 lock_mtx_wait_cum;
  uint64_t_0 lock_rw_cnt;
  uint64_t_0 lock_rw_util_cnt;
  uint64_t_0 lock_rw_held_cnt;
  uint64_t_0 lock_rw_miss_cnt;
  uint64_t_0 lock_rw_wait_cnt;
  uint64_t_0 lock_rw_held_max;
  uint64_t_0 lock_rw_held_cum;
  uint64_t_0 lock_rw_wait_max;
  uint64_t_0 lock_rw_wait_cum;
};

/* 1580 */
typedef hslock *hw_lock_t;

/* 1581 */
typedef unsigned int lck_type_t;

/* 1582 */
typedef unsigned int lck_sleep_action_t;

/* 1583 */
typedef lockgroup_info_t *lockgroup_info_array_t;

/* 1584 */
struct lt_elem
{
  ltable_id lt_id;
  uint32_t_0 lt_bits;
  uint32_t_0 lt_next_idx;
};

/* 1585 */
struct ltable_id
{
  ltable_id::$07BE61E66B985AA47B01632D142ED4CA _anon_0;
};

/* 1586 */
union ltable_id::$07BE61E66B985AA47B01632D142ED4CA
{
  uint64_t_0 id;
  ltable_id::$07BE61E66B985AA47B01632D142ED4CA::$04EE847225AE1BD0129F795E0A39FE26 _anon_0;
};

/* 1587 */
struct ltable_id::$07BE61E66B985AA47B01632D142ED4CA::$04EE847225AE1BD0129F795E0A39FE26
{
  unsigned __int64 idx : 18;
  unsigned __int64 generation : 46;
};

/* 1588 */
struct __attribute__((aligned(8))) link_table
{
  lt_elem **table;
  lt_elem **next_free_slab;
  ltable_id free_list;
  uint32_t_0 elem_sz;
  uint32_t_0 slab_shift;
  uint32_t_0 slab_msk;
  uint32_t_0 slab_elem;
  uint32_t_0 slab_sz;
  uint32_t_0 nelem;
  uint32_t_0 used_elem;
  zone_t slab_zone;
  ltable_poison_func poison;
  lck_mtx_t_0 lock;
  uint32_t_0 state;
};

/* 1589 */
typedef void (*ltable_poison_func)(link_table *, lt_elem *);

/* 1590 */
struct machine_info
{
  integer_t major_version;
  integer_t minor_version;
  integer_t max_cpus;
  uint32_t_0 memory_size;
  uint64_t_0 max_mem;
  uint32_t_0 physical_cpu;
  integer_t physical_cpu_max;
  uint32_t_0 logical_cpu;
  integer_t logical_cpu_max;
};

/* 1591 */
typedef __builtin_va_list va_list_38;

/* 1592 */
typedef int mach_node_id_t;

/* 1593 */
typedef mnl_msg *mnl_msg_t;

/* 1594 */
struct mnl_msg
{
  uint8_t_0 sub;
  uint8_t_0 cmd;
  uint8_t_0 qos;
  uint8_t_0 flags;
  uint32_t_0 node_id;
  mnl_name_t object;
  uint32_t_0 options;
  uint32_t_0 size;
};

/* 1595 */
typedef uint64_t_0 mnl_name_t;

/* 1596 */
typedef mnl_node_info *mnl_node_info_t;

/* 1597 */
struct mnl_node_info
{
  mach_node_id_t node_id;
  uint8_t_0 datamodel;
  uint8_t_0 byteorder;
  uint32_t_0 proto_vers_min;
  uint32_t_0 proto_vers_max;
};

/* 1598 */
typedef __builtin_va_list va_list_39;

/* 1599 */
typedef policy_rr_base *policy_rr_base_t;

/* 1600 */
struct policy_rr_base
{
  integer_t base_priority;
  integer_t quantum;
};

/* 1601 */
typedef policy_rr_limit *policy_rr_limit_t;

/* 1602 */
struct policy_rr_limit
{
  integer_t max_priority;
};

/* 1603 */
typedef policy_fifo_base *policy_fifo_base_t;

/* 1604 */
struct policy_fifo_base
{
  integer_t base_priority;
};

/* 1605 */
typedef policy_fifo_limit *policy_fifo_limit_t;

/* 1606 */
struct policy_fifo_limit
{
  integer_t max_priority;
};

/* 1607 */
typedef policy_timeshare_base *policy_timeshare_base_t;

/* 1608 */
struct policy_timeshare_base
{
  integer_t base_priority;
};

/* 1609 */
typedef policy_timeshare_limit *policy_timeshare_limit_t;

/* 1610 */
struct policy_timeshare_limit
{
  integer_t max_priority;
};

/* 1611 */
typedef integer_t *policy_limit_t;

/* 1612 */
typedef integer_t *policy_base_t;

/* 1613 */
typedef policy_rr_limit policy_rr_limit_data_t;

/* 1614 */
typedef policy_fifo_limit policy_fifo_limit_data_t;

/* 1615 */
typedef policy_timeshare_limit policy_timeshare_limit_data_t;

/* 1616 */
typedef __builtin_va_list va_list_40;

/* 1617 */
typedef mk_timer *mk_timer_t;

/* 1618 */
struct mk_timer
{
  simple_lock_data_t lock;
  thread_call_data_t call_entry;
  unsigned __int32 is_dead : 1;
  unsigned __int32 is_armed : 1;
  int active;
  ipc_port_t port;
};

/* 1619 */
struct mk_timer_create_trap_args
{
  int32_t dummy;
};

/* 1620 */
typedef mk_timer_expire_msg mk_timer_expire_msg_t;

/* 1621 */
struct mk_timer_expire_msg
{
  mach_msg_header_t header;
  uint64_t_0 unused[3];
};

/* 1622 */
struct mk_timer_destroy_trap_args
{
  mach_port_name_t name;
  char name_r_[4];
};

/* 1623 */
struct mk_timer_arm_trap_args
{
  mach_port_name_t name;
  char name_r_[4];
  uint64_t_0 expire_time;
  char expire_time_r_[];
};

/* 1624 */
struct mk_timer_arm_leeway_trap_args
{
  mach_port_name_t name;
  char name_r_[4];
  uint64_t_0 mk_timer_flags;
  uint64_t_0 expire_time;
  uint64_t_0 mk_leeway;
  char mk_leeway_r_[];
};

/* 1625 */
struct mk_timer_cancel_trap_args
{
  mach_port_name_t name;
  char name_r_[4];
  user_addr_t result_time;
  char result_time_r_[];
};

/* 1626 */
typedef int (*text_crypter_create_hook_t)(pager_crypt_info *, const char *, void *);

/* 1627 */
struct __attribute__((aligned(8))) pager_crypt_info
{
  int (*page_decrypt)(const void *, void *, unsigned __int64, void *);
  void (*crypt_end)(void *);
  void *crypt_ops;
  volatile int crypt_refcnt;
};

/* 1628 */
typedef int (*dsmos_page_transform_hook_t)(const void *, void *, unsigned __int64, void *);

/* 1629 */
typedef __builtin_va_list va_list_41;

/* 1630 */
struct console_printbuf_state
{
  int pos;
  int total;
  int flags;
  char str[256];
};

/* 1631 */
struct shift_data
{
  int shift1;
  int shift2;
};

/* 1632 */
enum set_sched_pri_options_t : __int32
{
  SETPRI_DEFAULT = 0x0,
  SETPRI_LAZY = 0x1,
};

/* 1633 */
enum $0408A3AD1C2F3E0CD3D790F049E31BAA : __int32
{
  SCHED_NONE = 0x0,
  SCHED_TAILQ = 0x1,
  SCHED_HEADQ = 0x2,
  SCHED_PREEMPT = 0x4,
  SCHED_REBALANCE = 0x8,
};

/* 1634 */
typedef __builtin_va_list va_list_42;

/* 1635 */
typedef priority_queue_entry *priority_queue_entry_t;

/* 1636 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *priority_queue_compare_fn_t;

/* 1637 */
typedef __builtin_va_list va_list_43;

/* 1638 */
typedef processor_basic_info *processor_basic_info_t;

/* 1639 */
struct processor_basic_info
{
  cpu_type_t cpu_type;
  cpu_subtype_t cpu_subtype;
  boolean_t running;
  int slot_num;
  boolean_t is_master;
};

/* 1640 */
typedef processor_cpu_load_info *processor_cpu_load_info_t;

/* 1641 */
struct processor_cpu_load_info
{
  unsigned int cpu_ticks[4];
};

/* 1642 */
typedef processor_set_basic_info *processor_set_basic_info_t;

/* 1643 */
struct processor_set_basic_info
{
  int processor_count;
  int default_policy;
};

/* 1644 */
typedef processor_set_load_info *processor_set_load_info_t;

/* 1645 */
struct processor_set_load_info
{
  int task_count;
  int thread_count;
  integer_t load_average;
  integer_t mach_factor;
};

/* 1646 */
typedef integer_t *processor_set_info_t;

/* 1647 */
typedef task_t *task_array_t;

/* 1648 */
typedef thread_t *thread_array_t;

/* 1649 */
typedef __builtin_va_list va_list_44;

/* 1650 */
struct sched_average
{
  sched_avg_comp_t comp;
  void *param;
  int period;
  uint64_t_0 deadline;
};

/* 1651 */
typedef void (*sched_avg_comp_t)(void *);

/* 1652 */
typedef sched_average *sched_average_t;

/* 1653 */
struct sched_dispatch_table
{
  const char *sched_name;
  void (*init)(void);
  void (*timebase_init)(void);
  void (*processor_init)(processor_t);
  void (*pset_init)(processor_set_t);
  void (*maintenance_continuation)(void);
  thread_t (*choose_thread)(processor_t, int, ast_t);
  boolean_t steal_thread_enabled;
  thread_t (*steal_thread)(processor_set_t);
  int (*compute_timeshare_priority)(thread_t);
  processor_t (*choose_processor)(processor_set_t, processor_t, thread_t);
  boolean_t (*processor_enqueue)(processor_t, thread_t, integer_t);
  void (*processor_queue_shutdown)(processor_t);
  boolean_t (*processor_queue_remove)(processor_t, thread_t);
  boolean_t (*processor_queue_empty)(processor_t);
  boolean_t (*priority_is_urgent)(int);
  ast_t (*processor_csw_check)(processor_t);
  boolean_t (*processor_queue_has_priority)(processor_t, int, boolean_t);
  uint32_t_0 (*initial_quantum_size)(thread_t);
  sched_mode_t (*initial_thread_sched_mode)(task_t);
  boolean_t (*can_update_priority)(thread_t);
  void (*update_priority)(thread_t);
  void (*lightweight_update_priority)(thread_t);
  void (*quantum_expire)(thread_t);
  int (*processor_runq_count)(processor_t);
  uint64_t_0 (*processor_runq_stats_count_sum)(processor_t);
  boolean_t (*processor_bound_count)(processor_t);
  void (*thread_update_scan)(sched_update_scan_context_t);
  boolean_t direct_dispatch_to_idle_processors;
  boolean_t multiple_psets_enabled;
  boolean_t sched_groups_enabled;
  boolean_t avoid_processor_enabled;
  _Bool (*thread_avoid_processor)(processor_t, thread_t);
  void (*processor_balance)(processor_t, processor_set_t);
  rt_queue_t (*rt_runq)(processor_set_t);
  void (*rt_init)(processor_set_t);
  void (*rt_queue_shutdown)(processor_t);
  void (*rt_runq_scan)(sched_update_scan_context_t);
  int64_t (*rt_runq_count_sum)(void);
  uint32_t_0 (*qos_max_parallelism)(int, uint64_t_0);
  void (*check_spill)(processor_set_t, thread_t);
  sched_ipi_type_t (*ipi_policy)(processor_t, thread_t, boolean_t, sched_ipi_event_t);
  _Bool (*thread_should_yield)(processor_t, thread_t);
};

/* 1654 */
typedef __builtin_va_list va_list_45;

/* 1655 */
typedef sched_update_scan_context *sched_update_scan_context_t;

/* 1656 */
struct sched_update_scan_context
{
  uint64_t_0 earliest_bg_make_runnable_time;
  uint64_t_0 earliest_normal_make_runnable_time;
  uint64_t_0 earliest_rt_make_runnable_time;
};

/* 1657 */
typedef rt_queue *rt_queue_t;

/* 1658 */
enum sched_ipi_type_t : __int32
{
  SCHED_IPI_NONE = 0x0,
  SCHED_IPI_IMMEDIATE = 0x1,
  SCHED_IPI_IDLE = 0x2,
  SCHED_IPI_DEFERRED = 0x3,
};

/* 1659 */
enum sched_ipi_event_t : __int32
{
  SCHED_IPI_EVENT_BOUND_THR = 0x1,
  SCHED_IPI_EVENT_PREEMPT = 0x2,
  SCHED_IPI_EVENT_SMT_REBAL = 0x3,
  SCHED_IPI_EVENT_SPILL = 0x4,
  SCHED_IPI_EVENT_REBALANCE = 0x5,
};

/* 1660 */
typedef run_queue *run_queue_t;

/* 1661 */
typedef __builtin_va_list va_list_46;

/* 1662 */
enum $<1594734,1>::$8BE7D4823841C48AF7E5B7315CE9390C : __int32
{
  eExitIdle = 0x0,
  eInterruptRunning = 0x1,
  eDoNothing = 0x2,
};

/* 1663 */
typedef int wait_timeout_urgency_t;

/* 1664 */
typedef $0408A3AD1C2F3E0CD3D790F049E31BAA sched_options_t;

/* 1665 */
typedef host_basic_info host_basic_info_data_t;

/* 1666 */
typedef __builtin_va_list va_list_47;

/* 1667 */
struct sched_entry
{
  queue_chain_t entry_links;
  int16_t sched_pri;
  int16_t runq;
  int32_t pad;
};

/* 1668 */
typedef __builtin_va_list va_list_48;

/* 1669 */
typedef run_queue_t entry_queue_t;

/* 1670 */
typedef run_queue_t group_runq_t;

/* 1671 */
typedef sched_entry *sched_entry_t;

/* 1672 */
struct sfi_class_registration_t
{
  sfi_class_id_t class_id;
  thread_continue_t class_continuation;
  const char *class_name;
  const char *class_ledger_name;
};

/* 1673 */
struct sfi_class_state
{
  uint64_t_0 off_time_usecs;
  uint64_t_0 off_time_interval;
  timer_call_data_t on_timer;
  uint64_t_0 on_timer_deadline;
  boolean_t on_timer_programmed;
  boolean_t class_sfi_is_enabled;
  volatile boolean_t class_in_on_phase;
  waitq_0 waitq;
  thread_continue_t continuation;
  const char *class_name;
  const char *class_ledger_name;
};

/* 1674 */
typedef __builtin_va_list va_list_49;

/* 1675 */
typedef __builtin_va_list va_list_50;

/* 1676 */
typedef __builtin_va_list va_list_51;

/* 1677 */
typedef __builtin_va_list va_list_52;

/* 1678 */
typedef __builtin_va_list va_list_53;

/* 1679 */
struct semaphore_signal_thread_trap_args
{
  mach_port_name_t signal_name;
  char signal_name_r_[4];
  mach_port_name_t thread_name;
  char thread_name_r_[4];
};

/* 1680 */
struct semaphore_signal_trap_args
{
  mach_port_name_t signal_name;
  char signal_name_r_[4];
};

/* 1681 */
struct semaphore_signal_all_trap_args
{
  mach_port_name_t signal_name;
  char signal_name_r_[4];
};

/* 1682 */
struct semaphore_wait_trap_args
{
  mach_port_name_t wait_name;
  char wait_name_r_[4];
};

/* 1683 */
struct semaphore_timedwait_trap_args
{
  mach_port_name_t wait_name;
  char wait_name_r_[4];
  unsigned int sec;
  char sec_r_[4];
  clock_res_t nsec;
  char nsec_r_[4];
};

/* 1684 */
struct semaphore_wait_signal_trap_args
{
  mach_port_name_t wait_name;
  char wait_name_r_[4];
  mach_port_name_t signal_name;
  char signal_name_r_[4];
};

/* 1685 */
struct semaphore_timedwait_signal_trap_args
{
  mach_port_name_t wait_name;
  char wait_name_r_[4];
  mach_port_name_t signal_name;
  char signal_name_r_[4];
  unsigned int sec;
  char sec_r_[4];
  clock_res_t nsec;
  char nsec_r_[4];
};

/* 1686 */
typedef __builtin_va_list va_list_54;

/* 1687 */
typedef __builtin_va_list va_list_55;

/* 1688 */
struct pfz_exit_args
{
  int32_t dummy;
};

/* 1689 */
struct swtch_args
{
  int32_t dummy;
};

/* 1690 */
struct swtch_pri_args
{
  int pri;
  char pri_r_[4];
};

/* 1691 */
struct thread_switch_args
{
  mach_port_name_t thread_name;
  char thread_name_r_[4];
  int option;
  char option_r_[4];
  mach_msg_timeout_t option_time;
  char option_time_r_[4];
};

/* 1692 */
struct __attribute__((aligned(8))) mach_trap_t
{
  int mach_trap_arg_count;
  kern_return_t (*mach_trap_function)(void *);
  mach_munge_t *mach_trap_arg_munge32;
  int mach_trap_u32_words;
};

/* 1693 */
typedef void mach_munge_t(void *);

/* 1694 */
struct kern_invalid_args
{
  int32_t dummy;
};

/* 1695 */
struct _task_ledger_indices
{
  int cpu_time;
  int tkm_private;
  int tkm_shared;
  int phys_mem;
  int wired_mem;
  int internal;
  int iokit_mapped;
  int alternate_accounting;
  int alternate_accounting_compressed;
  int page_table;
  int phys_footprint;
  int internal_compressed;
  int purgeable_volatile;
  int purgeable_nonvolatile;
  int purgeable_volatile_compressed;
  int purgeable_nonvolatile_compressed;
  int network_volatile;
  int network_nonvolatile;
  int network_volatile_compressed;
  int network_nonvolatile_compressed;
  int platform_idle_wakeups;
  int interrupt_wakeups;
  int sfi_wait_times[17];
  int cpu_time_billed_to_me;
  int cpu_time_billed_to_others;
  int physical_writes;
  int logical_writes;
  int energy_billed_to_me;
  int energy_billed_to_others;
};

/* 1696 */
typedef __builtin_va_list va_list_56;

/* 1697 */
typedef zinfo_usage_store_t zinfo_usage_store_t_0;

/* 1698 */
struct zinfo_usage_store_t
{
  uint64_t_0 alloc;
  uint64_t_0 free;
};

/* 1699 */
struct expired_task_statistics_t
{
  uint64_t_0 total_user_time;
  uint64_t_0 total_system_time;
  uint64_t_0 task_interrupt_wakeups;
  uint64_t_0 task_platform_idle_wakeups;
  uint64_t_0 task_timer_wakeups_bin_1;
  uint64_t_0 task_timer_wakeups_bin_2;
  uint64_t_0 total_ptime;
  uint64_t_0 total_pset_switches;
  uint64_t_0 task_gpu_ns;
  uint64_t_0 task_energy;
};

/* 1700 */
typedef task_trace_memory_info *task_trace_memory_info_t;

/* 1701 */
struct task_trace_memory_info
{
  uint64_t_0 user_memory_address;
  uint64_t_0 buffer_size;
  uint64_t_0 mailbox_array_size;
};

/* 1702 */
typedef task_basic_info_32 *task_basic_info_32_t;

/* 1703 */
struct task_basic_info_32
{
  integer_t suspend_count;
  natural_t virtual_size;
  natural_t resident_size;
  time_value_t user_time;
  time_value_t system_time;
  policy_t policy;
};

/* 1704 */
typedef int policy_t;

/* 1705 */
typedef task_basic_info_64 *task_basic_info_64_t;

/* 1706 */
struct task_basic_info_64
{
  integer_t suspend_count;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t virtual_size;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t resident_size;
  time_value_t user_time;
  time_value_t system_time;
  policy_t policy;
};

/* 1707 */
typedef mach_task_basic_info *mach_task_basic_info_t;

/* 1708 */
struct mach_task_basic_info
{
  mach_vm_size_t virtual_size;
  mach_vm_size_t resident_size;
  mach_vm_size_t resident_size_max;
  time_value_t user_time;
  time_value_t system_time;
  policy_t policy;
  integer_t suspend_count;
};

/* 1709 */
typedef task_thread_times_info *task_thread_times_info_t;

/* 1710 */
struct task_thread_times_info
{
  time_value_t user_time;
  time_value_t system_time;
};

/* 1711 */
typedef task_absolutetime_info *task_absolutetime_info_t;

/* 1712 */
struct task_absolutetime_info
{
  uint64_t_0 total_user;
  uint64_t_0 total_system;
  uint64_t_0 threads_user;
  uint64_t_0 threads_system;
};

/* 1713 */
typedef task_dyld_info *task_dyld_info_t;

/* 1714 */
struct __attribute__((packed)) __attribute__((aligned(4))) task_dyld_info
{
  mach_vm_address_t all_image_info_addr;
  mach_vm_size_t all_image_info_size;
  integer_t all_image_info_format;
};

/* 1715 */
typedef task_extmod_info *task_extmod_info_t;

/* 1716 */
struct task_extmod_info
{
  unsigned __int8 task_uuid[16];
  vm_extmod_statistics_data_t extmod_statistics;
};

/* 1717 */
typedef task_kernelmemory_info *task_kernelmemory_info_t;

/* 1718 */
struct task_kernelmemory_info
{
  uint64_t_0 total_palloc;
  uint64_t_0 total_pfree;
  uint64_t_0 total_salloc;
  uint64_t_0 total_sfree;
};

/* 1719 */
typedef task_events_info *task_events_info_t;

/* 1720 */
struct task_events_info
{
  integer_t faults;
  integer_t pageins;
  integer_t cow_faults;
  integer_t messages_sent;
  integer_t messages_received;
  integer_t syscalls_mach;
  integer_t syscalls_unix;
  integer_t csw;
};

/* 1721 */
typedef task_vm_info *task_vm_info_t;

/* 1722 */
struct task_vm_info
{
  mach_vm_size_t virtual_size;
  integer_t region_count;
  integer_t page_size;
  mach_vm_size_t resident_size;
  mach_vm_size_t resident_size_peak;
  mach_vm_size_t device;
  mach_vm_size_t device_peak;
  mach_vm_size_t internal;
  mach_vm_size_t internal_peak;
  mach_vm_size_t external;
  mach_vm_size_t external_peak;
  mach_vm_size_t reusable;
  mach_vm_size_t reusable_peak;
  mach_vm_size_t purgeable_volatile_pmap;
  mach_vm_size_t purgeable_volatile_resident;
  mach_vm_size_t purgeable_volatile_virtual;
  mach_vm_size_t compressed;
  mach_vm_size_t compressed_peak;
  mach_vm_size_t compressed_lifetime;
  mach_vm_size_t phys_footprint;
  mach_vm_address_t min_address;
  mach_vm_address_t max_address;
};

/* 1723 */
typedef task_wait_state_info *task_wait_state_info_t;

/* 1724 */
struct task_wait_state_info
{
  uint64_t_0 total_wait_state_time;
  uint64_t_0 total_wait_sfi_state_time;
  uint32_t_0 _reserved[4];
};

/* 1725 */
typedef task_flags_info *task_flags_info_t;

/* 1726 */
struct task_flags_info
{
  uint32_t_0 flags;
};

/* 1727 */
struct vm_purgeable_info
{
  vm_purgeable_stat_t fifo_data[8];
  vm_purgeable_stat_t obsolete_data;
  vm_purgeable_stat_t lifo_data[8];
};

/* 1728 */
typedef vm_purgeable_stat vm_purgeable_stat_t;

/* 1729 */
struct vm_purgeable_stat
{
  uint64_t_0 count;
  uint64_t_0 size;
};

/* 1730 */
struct task_inspect_basic_counts
{
  uint64_t_0 instructions;
  uint64_t_0 cycles;
};

/* 1731 */
typedef dyld_kernel_image_info_t *dyld_kernel_image_info_array_t;

/* 1732 */
typedef dyld_kernel_image_info dyld_kernel_image_info_t;

/* 1733 */
struct dyld_kernel_image_info
{
  uuid_t uuid;
  fsobj_id_t fsobjid;
  fsid_t fsid;
  uint64_t_0 load_addr;
};

/* 1734 */
typedef fsobj_id fsobj_id_t;

/* 1735 */
struct fsobj_id
{
  u_int32_t fid_objno;
  u_int32_t fid_generation;
};

/* 1736 */
typedef fsid fsid_t;

/* 1737 */
struct fsid
{
  int32_t val[2];
};

/* 1738 */
typedef ledger_array_t ledger_port_array_t;

/* 1739 */
typedef ledger_t *ledger_array_t;

/* 1740 */
typedef integer_t *task_info_t;

/* 1741 */
typedef vm_purgeable_info task_purgable_info_t;

/* 1742 */
typedef integer_t *task_inspect_info_t;

/* 1743 */
typedef vm_shared_region *vm_shared_region_t;

/* 1744 */
typedef thread_act_t *thread_act_array_t;

/* 1745 */
typedef thread *thread_act_t;

/* 1746 */
typedef gpu_energy_data *gpu_energy_data_t;

/* 1747 */
typedef dyld_kernel_process_info dyld_kernel_process_info_t;

/* 1748 */
struct __attribute__((aligned(8))) dyld_kernel_process_info
{
  dyld_kernel_image_info cache_image_info;
  uint64_t_0 timestamp;
  uint32_t_0 imageCount;
  uint32_t_0 initialImageCount;
  uint8_t_0 dyldState;
  boolean_t no_cache;
  boolean_t private_cache;
};

/* 1749 */
enum vm_pressure_level : __int32
{
  kVMPressureNormal = 0x0,
  kVMPressureWarning = 0x1,
  kVMPressureUrgent = 0x2,
  kVMPressureCritical = 0x3,
};

/* 1750 */
enum $ACC5190C8C7A10357CD58A3CC9D68BF8 : __int32
{
  THREAD_CALL_PRIORITY_HIGH = 0x0,
  THREAD_CALL_PRIORITY_KERNEL = 0x1,
  THREAD_CALL_PRIORITY_USER = 0x2,
  THREAD_CALL_PRIORITY_LOW = 0x3,
  THREAD_CALL_PRIORITY_KERNEL_HIGH = 0x4,
};

/* 1751 */
typedef __builtin_va_list va_list_57;

/* 1752 */
typedef task_category_policy *task_category_policy_t;

/* 1753 */
struct task_category_policy
{
  task_role_t role;
};

/* 1754 */
typedef integer_t task_role_t;

/* 1755 */
typedef task_qos_policy *task_qos_policy_t;

/* 1756 */
struct task_qos_policy
{
  task_latency_qos_t task_latency_qos_tier;
  task_throughput_qos_t task_throughput_qos_tier;
};

/* 1757 */
typedef integer_t task_latency_qos_t;

/* 1758 */
typedef integer_t task_throughput_qos_t;

/* 1759 */
typedef task_suppression_policy *task_suppression_policy_t;

/* 1760 */
struct task_suppression_policy
{
  integer_t active;
  integer_t lowpri_cpu;
  integer_t timer_throttle;
  integer_t disk_throttle;
  integer_t cpu_limit;
  integer_t suspend;
  integer_t throughput_qos;
  integer_t suppressed_cpu;
  integer_t background_sockets;
  integer_t reserved[7];
};

/* 1761 */
typedef task_policy_state *task_policy_state_t;

/* 1762 */
struct task_policy_state
{
  uint64_t_0 requested;
  uint64_t_0 effective;
  uint64_t_0 pending;
  uint32_t_0 imp_assertcnt;
  uint32_t_0 imp_externcnt;
  uint64_t_0 flags;
  uint64_t_0 imp_transitions;
  uint64_t_0 tps_requested_policy;
  uint64_t_0 tps_effective_policy;
};

/* 1763 */
typedef proc *proc_t;

/* 1764 */
typedef task_pend_token *task_pend_token_t;

/* 1765 */
typedef integer_t *task_policy_t;

/* 1766 */
typedef char posix_path_t[1024];

/* 1767 */
typedef uint64_t_0 resource_notify_flags_t;

/* 1768 */
struct _thread_ledger_indices
{
  int cpu_time;
};

/* 1769 */
typedef __builtin_va_list va_list_58;

/* 1770 */
typedef thread_basic_info *thread_basic_info_t;

/* 1771 */
struct thread_basic_info
{
  time_value_t user_time;
  time_value_t system_time;
  integer_t cpu_usage;
  policy_t policy;
  integer_t run_state;
  integer_t flags;
  integer_t suspend_count;
  integer_t sleep_time;
};

/* 1772 */
typedef thread_identifier_info *thread_identifier_info_t;

/* 1773 */
struct thread_identifier_info
{
  uint64_t_0 thread_id;
  uint64_t_0 thread_handle;
  uint64_t_0 dispatch_qaddr;
};

/* 1774 */
typedef policy_timeshare_info *policy_timeshare_info_t;

/* 1775 */
struct policy_timeshare_info
{
  integer_t max_priority;
  integer_t base_priority;
  integer_t cur_priority;
  boolean_t depressed;
  integer_t depress_priority;
};

/* 1776 */
typedef policy_rr_info *policy_rr_info_t;

/* 1777 */
struct policy_rr_info
{
  integer_t max_priority;
  integer_t base_priority;
  integer_t quantum;
  boolean_t depressed;
  integer_t depress_priority;
};

/* 1778 */
typedef thread_extended_info *thread_extended_info_t;

/* 1779 */
struct thread_extended_info
{
  uint64_t_0 pth_user_time;
  uint64_t_0 pth_system_time;
  int32_t pth_cpu_usage;
  int32_t pth_policy;
  int32_t pth_run_state;
  int32_t pth_flags;
  int32_t pth_sleep_time;
  int32_t pth_curpri;
  int32_t pth_priority;
  int32_t pth_maxpriority;
  char pth_name[64];
};

/* 1780 */
typedef thread_kernel_state *thread_kernel_state_t;

/* 1781 */
struct __attribute__((aligned(16))) thread_kernel_state
{
  machine_thread_kernel_state machine;
  kern_allocation_name_t allocation_name;
};

/* 1782 */
typedef x86_kernel_state machine_thread_kernel_state;

/* 1783 */
struct x86_kernel_state
{
  uint64_t_0 k_rbx;
  uint64_t_0 k_rsp;
  uint64_t_0 k_rbp;
  uint64_t_0 k_r12;
  uint64_t_0 k_r13;
  uint64_t_0 k_r14;
  uint64_t_0 k_r15;
  uint64_t_0 k_rip;
};

/* 1784 */
typedef kern_allocation_name *kern_allocation_name_t;

/* 1785 */
typedef vm_allocation_site kern_allocation_name;

/* 1786 */
struct thread_exception_elt
{
  queue_chain_t elt;
  exception_type_t exception_type;
  task_t exception_task;
  thread_t exception_thread;
};

/* 1787 */
typedef int exception_type_t;

/* 1788 */
typedef void (*sched_call_t)(int, thread_t);

/* 1789 */
typedef thread_basic_info thread_basic_info_data_t;

/* 1790 */
typedef __builtin_va_list va_list_59;

/* 1791 */
typedef __builtin_va_list va_list_60;

/* 1792 */
enum thread_call_group_flags_t : __int32
{
  TCG_NONE = 0x0,
  TCG_PARALLEL = 0x1,
  TCG_DEALLOC_ACTIVE = 0x2,
};

/* 1793 */
enum thread_call_flavor_t : __int32
{
  TCF_ABSOLUTE = 0x0,
  TCF_CONTINUOUS = 0x1,
  TCF_COUNT = 0x2,
};

/* 1794 */
typedef call_entry *call_entry_t;

/* 1795 */
typedef thread_call_group *thread_call_group_t;

/* 1796 */
typedef $ACC5190C8C7A10357CD58A3CC9D68BF8 thread_call_priority_t;

/* 1797 */
typedef uint32_t_0 thread_call_options_t;

/* 1798 */
struct qos_policy_params_t
{
  int qos_pri[7];
  int qos_iotier[7];
  uint32_t_0 qos_through_qos[7];
  uint32_t_0 qos_latency_qos[7];
};

/* 1799 */
typedef __builtin_va_list va_list_61;

/* 1800 */
typedef integer_t *thread_policy_t;

/* 1801 */
typedef thread_extended_policy *thread_extended_policy_t;

/* 1802 */
struct thread_extended_policy
{
  boolean_t timeshare;
};

/* 1803 */
typedef thread_time_constraint_policy *thread_time_constraint_policy_t;

/* 1804 */
struct thread_time_constraint_policy
{
  uint32_t_0 period;
  uint32_t_0 computation;
  uint32_t_0 constraint;
  boolean_t preemptible;
};

/* 1805 */
typedef thread_precedence_policy *thread_precedence_policy_t;

/* 1806 */
struct thread_precedence_policy
{
  integer_t importance;
};

/* 1807 */
typedef thread_affinity_policy *thread_affinity_policy_t;

/* 1808 */
struct thread_affinity_policy
{
  integer_t affinity_tag;
};

/* 1809 */
typedef thread_throughput_qos_policy *thread_throughput_qos_policy_t;

/* 1810 */
struct thread_throughput_qos_policy
{
  thread_throughput_qos_t thread_throughput_qos_tier;
};

/* 1811 */
typedef integer_t thread_throughput_qos_t;

/* 1812 */
typedef thread_latency_qos_policy *thread_latency_qos_policy_t;

/* 1813 */
struct thread_latency_qos_policy
{
  thread_latency_qos_t thread_latency_qos_tier;
};

/* 1814 */
typedef integer_t thread_latency_qos_t;

/* 1815 */
typedef thread_qos_policy *thread_qos_policy_t;

/* 1816 */
struct thread_qos_policy
{
  integer_t qos_tier;
  integer_t tier_importance;
};

/* 1817 */
typedef thread_policy_state *thread_policy_state_t;

/* 1818 */
struct thread_policy_state
{
  integer_t requested;
  integer_t effective;
  integer_t pending;
  integer_t flags;
  uint64_t_0 thps_requested_policy;
  uint64_t_0 thps_effective_policy;
  uint32_t_0 thps_user_promotions;
  uint32_t_0 thps_user_promotion_basepri;
  uint32_t_0 thps_ipc_overrides;
  uint32_t_0 reserved32;
  uint64_t_0 reserved[2];
};

/* 1819 */
typedef thread_qos_policy thread_qos_policy_data_t;

/* 1820 */
typedef __builtin_va_list va_list_62;

/* 1821 */
struct timer_longterm_t
{
  mpqueue_head_t queue;
  uint64_t_0 enqueues;
  uint64_t_0 dequeues;
  uint64_t_0 escalates;
  uint64_t_0 scan_time;
  threshold_t threshold;
  uint64_t_0 scan_limit;
  uint64_t_0 scan_interval;
  uint64_t_0 scan_pauses;
};

/* 1822 */
struct threshold_t
{
  uint64_t_0 interval;
  uint64_t_0 margin;
  uint64_t_0 deadline;
  uint64_t_0 preempted;
  timer_call_t call;
  uint64_t_0 deadline_set;
  timer_call_data_t timer;
  uint64_t_0 scans;
  uint64_t_0 preempts;
  uint64_t_0 latency;
  uint64_t_0 latency_min;
  uint64_t_0 latency_max;
};

/* 1823 */
typedef timer_call *timer_call_t;

/* 1824 */
struct timer_coalescing_priority_params_t
{
  uint32_t_0 powergate_latency_abstime;
  uint32_t_0 idle_entry_timer_processing_hdeadline_threshold_abstime;
  uint32_t_0 interrupt_timer_coalescing_ilat_threshold_abstime;
  uint32_t_0 timer_resort_threshold_abstime;
  int32_t timer_coalesce_rt_shift;
  int32_t timer_coalesce_bg_shift;
  int32_t timer_coalesce_kt_shift;
  int32_t timer_coalesce_fp_shift;
  int32_t timer_coalesce_ts_shift;
  uint64_t_0 timer_coalesce_rt_abstime_max;
  uint64_t_0 timer_coalesce_bg_abstime_max;
  uint64_t_0 timer_coalesce_kt_abstime_max;
  uint64_t_0 timer_coalesce_fp_abstime_max;
  uint64_t_0 timer_coalesce_ts_abstime_max;
  uint32_t_0 latency_qos_scale[6];
  uint64_t_0 latency_qos_abstime_max[6];
  boolean_t latency_tier_rate_limited[6];
};

/* 1825 */
typedef __builtin_va_list va_list_63;

/* 1826 */
struct timer_coalescing_priority_params_ns_t
{
  uint32_t_0 idle_entry_timer_processing_hdeadline_threshold_ns;
  uint32_t_0 interrupt_timer_coalescing_ilat_threshold_ns;
  uint32_t_0 timer_resort_threshold_ns;
  int32_t timer_coalesce_rt_shift;
  int32_t timer_coalesce_bg_shift;
  int32_t timer_coalesce_kt_shift;
  int32_t timer_coalesce_fp_shift;
  int32_t timer_coalesce_ts_shift;
  uint64_t_0 timer_coalesce_rt_ns_max;
  uint64_t_0 timer_coalesce_bg_ns_max;
  uint64_t_0 timer_coalesce_kt_ns_max;
  uint64_t_0 timer_coalesce_fp_ns_max;
  uint64_t_0 timer_coalesce_ts_ns_max;
  uint32_t_0 latency_qos_scale[6];
  uint64_t_0 latency_qos_ns_max[6];
  boolean_t latency_tier_rate_limited[6];
};

/* 1827 */
typedef turnstile_promote_policy turnstile_promote_policy_t;

/* 1828 */
enum turnstile_promote_policy : __int32
{
  TURNSTILE_PROMOTE_NONE = 0x0,
  TURNSTILE_KERNEL_PROMOTE = 0x1,
  TURNSTILE_USER_PROMOTE = 0x2,
  TURNSTILE_USER_IPC_PROMOTE = 0x4,
};

/* 1829 */
typedef __builtin_va_list va_list_64;

/* 1830 */
struct turnstile_htable_bucket
{
  lck_spin_t_0 ts_ht_bucket_lock;
  turnstile_hashlist ts_ht_bucket_list;
};

/* 1831 */
struct turnstile_hashlist
{
  turnstile_0 *slh_first;
};

/* 1832 */
enum turnstile_stats_update_flags : __int32
{
  TSU_FLAGS_NONE = 0x0,
  TSU_TURNSTILE_BLOCK_COUNT = 0x1,
  TSU_REGULAR_WAITQ_BLOCK_COUNT = 0x2,
  TSU_PRI_PROPAGATION = 0x4,
  TSU_NO_INHERITOR = 0x8,
  TSU_NO_TURNSTILE = 0x10,
  TSU_NO_PRI_CHANGE_NEEDED = 0x20,
  TSU_THREAD_RUNNABLE = 0x40,
  TSU_ABOVE_UI_PRI_CHANGE = 0x80,
  TSU_THREAD_ARG = 0x100,
  TSU_TURNSTILE_ARG = 0x200,
  TSU_BOOST_ARG = 0x400,
};

/* 1833 */
typedef uint8_t_0 priority_queue_key_t;

/* 1834 */
typedef turnstile_type turnstile_type_t;

/* 1835 */
typedef turnstile_update_complete_flags turnstile_update_complete_flags_t;

/* 1836 */
union turnstile_type_gencount
{
  uint32_t_0 value;
  turnstile_type_gencount::$670AA5A10A0A5950B35875E6BB3D3BFE _anon_0;
};

/* 1837 */
struct turnstile_type_gencount::$670AA5A10A0A5950B35875E6BB3D3BFE
{
  unsigned __int32 ts_type : 8;
  unsigned __int32 ts_gencount : 24;
};

/* 1838 */
typedef turnstile_stats_update_flags turnstile_stats_update_flags_t;

/* 1839 */
struct __block_literal_1
{
  void *__isa;
  int __flags;
  int __reserved;
  int (*__FuncPtr)(priority_queue_entry_t, priority_queue_entry_t);
  __block_descriptor *__descriptor;
};

/* 1840 */
struct __block_literal_5
{
  void *__isa;
  int __flags;
  int __reserved;
  int (*__FuncPtr)(priority_queue_entry_t, priority_queue_entry_t);
  __block_descriptor *__descriptor;
};

/* 1841 */
struct __block_literal_4
{
  void *__isa;
  int __flags;
  int __reserved;
  int (*__FuncPtr)(priority_queue_entry_t, priority_queue_entry_t);
  __block_descriptor *__descriptor;
};

/* 1842 */
struct __block_literal_3
{
  void *__isa;
  int __flags;
  int __reserved;
  int (*__FuncPtr)(priority_queue_entry_t, priority_queue_entry_t);
  __block_descriptor *__descriptor;
};

/* 1843 */
struct __block_literal_6
{
  void *__isa;
  int __flags;
  int __reserved;
  int (*__FuncPtr)(priority_queue_entry_t, priority_queue_entry_t);
  __block_descriptor *__descriptor;
};

/* 1844 */
struct __block_literal_2
{
  void *__isa;
  int __flags;
  int __reserved;
  int (*__FuncPtr)(priority_queue_entry_t, priority_queue_entry_t);
  __block_descriptor *__descriptor;
};

/* 1845 */
typedef __builtin_va_list va_list_65;

/* 1846 */
typedef exception_data_type_t *exception_data_t;

/* 1847 */
typedef __builtin_va_list va_list_66;

/* 1848 */
struct waitq_link
{
  lt_elem wqte;
  waitq_link::$8AF38CAC433BEBB916013A67C19D51F8 _anon_0;
};

/* 1849 */
union waitq_link::$8AF38CAC433BEBB916013A67C19D51F8
{
  waitq_link::$8AF38CAC433BEBB916013A67C19D51F8::$6EC3C3288EA65DFF9FFE115441FCF94A wql_wqs;
  waitq_link::$8AF38CAC433BEBB916013A67C19D51F8::$E55D5EC90C4A610D42BD378235C00A33 wql_link;
};

/* 1850 */
struct waitq_link::$8AF38CAC433BEBB916013A67C19D51F8::$6EC3C3288EA65DFF9FFE115441FCF94A
{
  waitq_set_0 *wql_set;
};

/* 1851 */
struct waitq_link::$8AF38CAC433BEBB916013A67C19D51F8::$E55D5EC90C4A610D42BD378235C00A33
{
  uint64_t_0 left_setid;
  uint64_t_0 right_setid;
};

/* 1852 */
struct wq_prepost
{
  lt_elem wqte;
  wq_prepost::$DA98CBBEA8B9F3ECE7C37E925770A8B6 _anon_0;
};

/* 1853 */
union wq_prepost::$DA98CBBEA8B9F3ECE7C37E925770A8B6
{
  wq_prepost::$DA98CBBEA8B9F3ECE7C37E925770A8B6::$92D51DAF1A542EB141B089C50C79B1A9 wqp_wq;
  wq_prepost::$DA98CBBEA8B9F3ECE7C37E925770A8B6::$75394B0355E2979B9062AEA91CDBD79B wqp_post;
};

/* 1854 */
struct wq_prepost::$DA98CBBEA8B9F3ECE7C37E925770A8B6::$92D51DAF1A542EB141B089C50C79B1A9
{
  waitq_0 *wqp_wq_ptr;
};

/* 1855 */
struct wq_prepost::$DA98CBBEA8B9F3ECE7C37E925770A8B6::$75394B0355E2979B9062AEA91CDBD79B
{
  uint64_t_0 wqp_next_id;
  uint64_t_0 wqp_wq_id;
};

/* 1856 */
struct waitq_select_args
{
  waitq_0 *posted_waitq;
  waitq_0 *waitq;
  event64_t event;
  waitq_select_cb select_cb;
  void *select_ctx;
  uint64_t_0 *reserved_preposts;
  queue_t threadq;
  int max_threads;
  int *nthreads;
  spl_t *spl;
};

/* 1857 */
typedef thread_t (*waitq_select_cb)(void *, waitq_0 *, int, thread_t);

/* 1858 */
struct __attribute__((aligned(8))) _is_posted_ctx
{
  waitq_0 *posting_wq;
  int did_prepost;
};

/* 1859 */
struct find_max_pri_ctx
{
  integer_t max_sched_pri;
  integer_t max_base_pri;
  thread_t highest_thread;
};

/* 1860 */
struct select_thread_ctx
{
  thread_t thread;
  event64_t event;
  spl_t *spl;
};

/* 1861 */
struct wq_unlink_ctx
{
  waitq_0 *unlink_wq;
  waitq_set_0 *unlink_wqset;
};

/* 1862 */
struct wq_it_ctx
{
  void *input;
  void *ctx;
  waitq_iterator_t it;
};

/* 1863 */
typedef int (*waitq_iterator_t)(void *, waitq_0 *, waitq_set_0 *);

/* 1864 */
typedef e_waitq_lock_state waitq_lock_state_t;

/* 1865 */
typedef int (*wqp_callback_func)(waitq_set_0 *, void *, wq_prepost *, waitq_0 *);

/* 1866 */
typedef int (*wql_callback_func)(waitq_0 *, void *, waitq_link *);

/* 1867 */
typedef __builtin_va_list va_list_67;

/* 1868 */
struct __attribute__((aligned(8))) kern_work_interval_args
{
  uint64_t_0 work_interval_id;
  uint64_t_0 start;
  uint64_t_0 finish;
  uint64_t_0 deadline;
  uint64_t_0 next_start;
  uint32_t_0 notify_flags;
  uint32_t_0 create_flags;
  uint16_t urgency;
};

/* 1869 */
struct kern_work_interval_create_args
{
  uint64_t_0 wica_id;
  uint32_t_0 wica_port;
  uint32_t_0 wica_create_flags;
};

/* 1870 */
typedef __builtin_va_list va_list_68;

/* 1871 */
struct zallocation
{
  uintptr_t za_element;
  vm_size_t za_size;
  uint32_t_0 za_trace_index;
  uint32_t_0 za_hit_count;
};

/* 1872 */
struct zone_page_metadata
{
  queue_chain_t pages;
  zone_page_metadata::$7C0B635AC981FF74212A75F0AE2EA4E5 _anon_0;
  uint16_t free_count;
  unsigned __int32 zindex : 10;
  unsigned __int32 page_count : 6;
};

/* 1873 */
union zone_page_metadata::$7C0B635AC981FF74212A75F0AE2EA4E5
{
  uint32_t_0 freelist_offset;
  uint32_t_0 real_metadata_offset;
};

/* 1874 */
typedef mach_zone_name mach_zone_name_t;

/* 1875 */
struct mach_zone_name
{
  char mzn_name[80];
};

/* 1876 */
typedef mach_zone_info_data mach_zone_info_t;

/* 1877 */
struct mach_zone_info_data
{
  uint64_t_0 mzi_count;
  uint64_t_0 mzi_cur_size;
  uint64_t_0 mzi_max_size;
  uint64_t_0 mzi_elem_size;
  uint64_t_0 mzi_alloc_size;
  uint64_t_0 mzi_sum_size;
  uint64_t_0 mzi_exhaustible;
  uint64_t_0 mzi_collectable;
};

/* 1878 */
typedef ml_cpu_info ml_cpu_info_t;

/* 1879 */
struct ml_cpu_info
{
  uint32_t_0 vector_unit;
  uint32_t_0 cache_line_size;
  uint32_t_0 l1_icache_size;
  uint32_t_0 l1_dcache_size;
  uint32_t_0 l2_settings;
  uint32_t_0 l2_cache_size;
  uint32_t_0 l3_settings;
  uint32_t_0 l3_cache_size;
};

/* 1880 */
typedef mach_zone_name_t *mach_zone_name_array_t;

/* 1881 */
typedef mach_zone_info_t *mach_zone_info_array_t;

/* 1882 */
typedef task_zone_info_t *task_zone_info_array_t;

/* 1883 */
typedef task_zone_info_data task_zone_info_t;

/* 1884 */
struct task_zone_info_data
{
  uint64_t_0 tzi_count;
  uint64_t_0 tzi_cur_size;
  uint64_t_0 tzi_max_size;
  uint64_t_0 tzi_elem_size;
  uint64_t_0 tzi_alloc_size;
  uint64_t_0 tzi_sum_size;
  uint64_t_0 tzi_exhaustible;
  uint64_t_0 tzi_collectable;
  uint64_t_0 tzi_caller_acct;
  uint64_t_0 tzi_task_alloc;
  uint64_t_0 tzi_task_free;
};

/* 1885 */
typedef mach_memory_info_t *mach_memory_info_array_t;

/* 1886 */
typedef zone_btrecord_t *zone_btrecord_array_t;

/* 1887 */
typedef zone_btrecord zone_btrecord_t;

/* 1888 */
struct zone_btrecord
{
  uint32_t_0 ref_count;
  uint32_t_0 operation_type;
  uint64_t_0 bt[15];
};

/* 1889 */
struct __attribute__((aligned(64))) zcc_per_cpu_cache
{
  zcc_magazine *current;
  zcc_magazine *previous;
};

/* 1890 */
struct zcc_magazine
{
  uint32_t_0 zcc_magazine_index;
  uint32_t_0 zcc_magazine_capacity;
  void *zcc_elements[];
};

/* 1891 */
typedef __builtin_va_list va_list_69;

/* 1892 */
typedef __builtin_va_list va_list_70;

/* 1893 */
typedef gzalloc_header gzhdr_t;

/* 1894 */
struct gzalloc_header
{
  zone_t gzone;
  uint32_t_0 gzsize;
  uint32_t_0 gzsig;
};

/* 1895 */
typedef __builtin_va_list va_list_71;

/* 1896 */
typedef integer_t *thread_info_t;

/* 1897 */
struct proc_taskinfo_internal
{
  uint64_t_0 pti_virtual_size;
  uint64_t_0 pti_resident_size;
  uint64_t_0 pti_total_user;
  uint64_t_0 pti_total_system;
  uint64_t_0 pti_threads_user;
  uint64_t_0 pti_threads_system;
  int32_t pti_policy;
  int32_t pti_faults;
  int32_t pti_pageins;
  int32_t pti_cow_faults;
  int32_t pti_messages_sent;
  int32_t pti_messages_received;
  int32_t pti_syscalls_mach;
  int32_t pti_syscalls_unix;
  int32_t pti_csw;
  int32_t pti_threadnum;
  int32_t pti_numrunning;
  int32_t pti_priority;
};

/* 1898 */
typedef task_absolutetime_info task_absolutetime_info_data_t;

/* 1899 */
struct proc_threadinfo_internal
{
  uint64_t_0 pth_user_time;
  uint64_t_0 pth_system_time;
  int32_t pth_cpu_usage;
  int32_t pth_policy;
  int32_t pth_run_state;
  int32_t pth_flags;
  int32_t pth_sleep_time;
  int32_t pth_curpri;
  int32_t pth_priority;
  int32_t pth_maxpriority;
  char pth_name[64];
};

/* 1900 */
struct clock_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[3];
};

/* 1901 */
typedef __builtin_va_list va_list_72;

/* 1902 */
struct _Xclock_get_time::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 1903 */
typedef __Reply__clock_get_time_t _Xclock_get_time::Reply;

/* 1904 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__clock_get_time_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_timespec_t cur_time;
};

/* 1905 */
typedef __Request__clock_get_time_t _Xclock_get_time::__Request;

/* 1906 */
struct __Request__clock_get_time_t
{
  mach_msg_header_t Head;
};

/* 1907 */
struct _Xclock_get_attributes::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_flavor_t flavor;
  mach_msg_type_number_t clock_attrCnt;
  mach_msg_trailer_t trailer;
};

/* 1908 */
typedef __Reply__clock_get_attributes_t _Xclock_get_attributes::Reply;

/* 1909 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__clock_get_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t clock_attrCnt;
  int clock_attr[1];
};

/* 1910 */
typedef __Request__clock_get_attributes_t _Xclock_get_attributes::__Request;

/* 1911 */
struct __Request__clock_get_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_flavor_t flavor;
  mach_msg_type_number_t clock_attrCnt;
};

/* 1912 */
struct _Xclock_alarm::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t alarm_port;
  NDR_record_t NDR;
  alarm_type_t alarm_type;
  mach_timespec_t alarm_time;
  mach_msg_trailer_t trailer;
};

/* 1913 */
typedef int alarm_type_t;

/* 1914 */
typedef __Reply__clock_alarm_t _Xclock_alarm::Reply;

/* 1915 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__clock_alarm_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 1916 */
typedef __Request__clock_alarm_t _Xclock_alarm::__Request;

/* 1917 */
struct __Request__clock_alarm_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t alarm_port;
  NDR_record_t NDR;
  alarm_type_t alarm_type;
  mach_timespec_t alarm_time;
};

/* 1918 */
struct clock_priv_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[2];
};

/* 1919 */
typedef __builtin_va_list va_list_73;

/* 1920 */
struct _Xclock_set_time::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_timespec_t new_time;
  mach_msg_trailer_t trailer;
};

/* 1921 */
typedef __Reply__clock_set_time_t _Xclock_set_time::Reply;

/* 1922 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__clock_set_time_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 1923 */
typedef __Request__clock_set_time_t _Xclock_set_time::__Request;

/* 1924 */
struct __Request__clock_set_time_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_timespec_t new_time;
};

/* 1925 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xclock_set_attributes::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_flavor_t flavor;
  mach_msg_type_number_t clock_attrCnt;
  int clock_attr[1];
  mach_msg_trailer_t trailer;
};

/* 1926 */
typedef __Reply__clock_set_attributes_t _Xclock_set_attributes::Reply;

/* 1927 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__clock_set_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 1928 */
typedef __Request__clock_set_attributes_t _Xclock_set_attributes::__Request;

/* 1929 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__clock_set_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_flavor_t flavor;
  mach_msg_type_number_t clock_attrCnt;
  int clock_attr[1];
};

/* 1930 */
typedef mach_port_t clock_reply_t;

/* 1931 */
struct clock_alarm_reply::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t alarm_code;
  alarm_type_t alarm_type;
  mach_timespec_t alarm_time;
};

/* 1932 */
union clock_alarm_reply::$D493F8ABD2A97573936C8491A058D747
{
  clock_alarm_reply::Request In;
};

/* 1933 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__exception_raise_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 1934 */
union exception_raise_state::exception_raise_stateMessU
{
  exception_raise_state::Request In;
  exception_raise_state::Reply Out;
};

/* 1935 */
struct exception_raise_state::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 1936 */
struct __attribute__((packed)) __attribute__((aligned(4))) exception_raise_state::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
  mach_msg_trailer_t trailer;
};

/* 1937 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__exception_raise_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
};

/* 1938 */
union exception_raise_state_identity::exception_raise_state_identityMessU
{
  exception_raise_state_identity::Request In;
  exception_raise_state_identity::Reply Out;
};

/* 1939 */
struct __attribute__((packed)) __attribute__((aligned(4))) exception_raise_state_identity::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 1940 */
struct __attribute__((packed)) __attribute__((aligned(4))) exception_raise_state_identity::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
  mach_msg_trailer_t trailer;
};

/* 1941 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__exception_raise_state_identity_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
};

/* 1942 */
union exception_raise::$D9ADF70A24997143FBE39C6B27A3A85D
{
  exception_raise::Request In;
  exception_raise::Reply Out;
};

/* 1943 */
struct __attribute__((packed)) __attribute__((aligned(4))) exception_raise::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
};

/* 1944 */
struct __attribute__((packed)) __attribute__((aligned(4))) exception_raise::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_trailer_t trailer;
};

/* 1945 */
struct catch_exc_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[3];
};

/* 1946 */
typedef __builtin_va_list va_list_74;

/* 1947 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xexception_raise::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
  mach_msg_trailer_t trailer;
};

/* 1948 */
typedef __Reply__exception_raise_t _Xexception_raise::Reply;

/* 1949 */
typedef __Request__exception_raise_t _Xexception_raise::__Request;

/* 1950 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__exception_raise_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
};

/* 1951 */
struct _Xexception_raise_state::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
  mach_msg_trailer_t trailer;
};

/* 1952 */
typedef __Reply__exception_raise_state_t _Xexception_raise_state::Reply;

/* 1953 */
typedef __Request__exception_raise_state_t _Xexception_raise_state::__Request;

/* 1954 */
struct __Request__exception_raise_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 1955 */
typedef __Request__exception_raise_state_t $<2514639,1>::__Request;

/* 1956 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xexception_raise_state_identity::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
  mach_msg_trailer_t trailer;
};

/* 1957 */
typedef __Reply__exception_raise_state_identity_t _Xexception_raise_state_identity::Reply;

/* 1958 */
typedef __Request__exception_raise_state_identity_t _Xexception_raise_state_identity::__Request;

/* 1959 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__exception_raise_state_identity_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  integer_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 1960 */
typedef __Request__exception_raise_state_identity_t $<2515431,1>::__Request;

/* 1961 */
struct host_priv_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[26];
};

/* 1962 */
typedef __builtin_va_list va_list_75;

/* 1963 */
struct _Xhost_get_boot_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 1964 */
typedef __Reply__host_get_boot_info_t _Xhost_get_boot_info::Reply;

/* 1965 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_get_boot_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t boot_infoOffset;
  mach_msg_type_number_t boot_infoCnt;
  char boot_info[4096];
};

/* 1966 */
typedef __Request__host_get_boot_info_t _Xhost_get_boot_info::__Request;

/* 1967 */
struct __Request__host_get_boot_info_t
{
  mach_msg_header_t Head;
};

/* 1968 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_reboot::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int options;
  mach_msg_trailer_t trailer;
};

/* 1969 */
typedef __Reply__host_reboot_t _Xhost_reboot::Reply;

/* 1970 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_reboot_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 1971 */
typedef __Request__host_reboot_t _Xhost_reboot::__Request;

/* 1972 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_reboot_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int options;
};

/* 1973 */
struct _Xhost_priv_statistics::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 1974 */
typedef integer_t host_flavor_t;

/* 1975 */
typedef __Reply__host_priv_statistics_t _Xhost_priv_statistics::Reply;

/* 1976 */
struct __Reply__host_priv_statistics_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[68];
};

/* 1977 */
typedef __Request__host_priv_statistics_t _Xhost_priv_statistics::__Request;

/* 1978 */
struct __Request__host_priv_statistics_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
};

/* 1979 */
struct _Xhost_default_memory_manager::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t default_manager;
  NDR_record_t NDR;
  memory_object_cluster_size_t cluster_size;
  mach_msg_trailer_t trailer;
};

/* 1980 */
typedef __Reply__host_default_memory_manager_t _Xhost_default_memory_manager::Reply;

/* 1981 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_default_memory_manager_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t default_manager;
};

/* 1982 */
typedef __Request__host_default_memory_manager_t _Xhost_default_memory_manager::__Request;

/* 1983 */
struct __Request__host_default_memory_manager_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t default_manager;
  NDR_record_t NDR;
  memory_object_cluster_size_t cluster_size;
};

/* 1984 */
struct _Xvm_wire::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) vm_size_t size;
  vm_prot_t desired_access;
  mach_msg_trailer_t trailer;
};

/* 1985 */
typedef __Reply__vm_wire_t _Xvm_wire::Reply;

/* 1986 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__vm_wire_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 1987 */
typedef __Request__vm_wire_t _Xvm_wire::__Request;

/* 1988 */
struct __Request__vm_wire_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) vm_size_t size;
  vm_prot_t desired_access;
};

/* 1989 */
struct _Xthread_wire::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t thread;
  NDR_record_t NDR;
  boolean_t wired;
  mach_msg_trailer_t trailer;
};

/* 1990 */
typedef __Reply__thread_wire_t _Xthread_wire::Reply;

/* 1991 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_wire_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 1992 */
typedef __Request__thread_wire_t _Xthread_wire::__Request;

/* 1993 */
struct __Request__thread_wire_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t thread;
  NDR_record_t NDR;
  boolean_t wired;
};

/* 1994 */
struct _Xvm_allocate_cpm::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) vm_size_t size;
  int flags;
  mach_msg_trailer_t trailer;
};

/* 1995 */
typedef __Reply__vm_allocate_cpm_t _Xvm_allocate_cpm::Reply;

/* 1996 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__vm_allocate_cpm_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_address_t address;
};

/* 1997 */
typedef __Request__vm_allocate_cpm_t _Xvm_allocate_cpm::__Request;

/* 1998 */
struct __Request__vm_allocate_cpm_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) vm_size_t size;
  int flags;
};

/* 1999 */
struct _Xhost_processors::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2000 */
typedef __Reply__host_processors_t _Xhost_processors::Reply;

/* 2001 */
struct __Reply__host_processors_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_ports_descriptor_t out_processor_list;
  NDR_record_t NDR;
  mach_msg_type_number_t out_processor_listCnt;
};

/* 2002 */
typedef __Request__host_processors_t _Xhost_processors::__Request;

/* 2003 */
struct __Request__host_processors_t
{
  mach_msg_header_t Head;
};

/* 2004 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_get_clock_control::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_id_t clock_id;
  mach_msg_trailer_t trailer;
};

/* 2005 */
typedef int clock_id_t;

/* 2006 */
typedef __Reply__host_get_clock_control_t _Xhost_get_clock_control::Reply;

/* 2007 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_get_clock_control_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t clock_ctrl;
};

/* 2008 */
typedef __Request__host_get_clock_control_t _Xhost_get_clock_control::__Request;

/* 2009 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_get_clock_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_id_t clock_id;
};

/* 2010 */
struct _Xkmod_create::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t info;
  mach_msg_trailer_t trailer;
};

/* 2011 */
typedef __Reply__kmod_create_t _Xkmod_create::Reply;

/* 2012 */
struct __Reply__kmod_create_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  kmod_t module;
};

/* 2013 */
typedef int kmod_t;

/* 2014 */
typedef __Request__kmod_create_t _Xkmod_create::__Request;

/* 2015 */
struct __Request__kmod_create_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t info;
};

/* 2016 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xkmod_destroy::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kmod_t module;
  mach_msg_trailer_t trailer;
};

/* 2017 */
typedef __Reply__kmod_destroy_t _Xkmod_destroy::Reply;

/* 2018 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__kmod_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2019 */
typedef __Request__kmod_destroy_t _Xkmod_destroy::__Request;

/* 2020 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__kmod_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kmod_t module;
};

/* 2021 */
struct _Xkmod_control::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  kmod_t module;
  kmod_control_flavor_t flavor;
  mach_msg_type_number_t dataCnt;
  mach_msg_trailer_t trailer;
};

/* 2022 */
typedef int kmod_control_flavor_t;

/* 2023 */
typedef __Reply__kmod_control_t _Xkmod_control::Reply;

/* 2024 */
struct __Reply__kmod_control_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  mach_msg_type_number_t dataCnt;
};

/* 2025 */
typedef __Request__kmod_control_t _Xkmod_control::__Request;

/* 2026 */
struct __Request__kmod_control_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  kmod_t module;
  kmod_control_flavor_t flavor;
  mach_msg_type_number_t dataCnt;
};

/* 2027 */
typedef void *kmod_args_t;

/* 2028 */
struct _Xhost_get_special_port::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int node;
  int which;
  mach_msg_trailer_t trailer;
};

/* 2029 */
typedef __Reply__host_get_special_port_t _Xhost_get_special_port::Reply;

/* 2030 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_get_special_port_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t port;
};

/* 2031 */
typedef __Request__host_get_special_port_t _Xhost_get_special_port::__Request;

/* 2032 */
struct __Request__host_get_special_port_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int node;
  int which;
};

/* 2033 */
struct _Xhost_set_special_port::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t port;
  NDR_record_t NDR;
  int which;
  mach_msg_trailer_t trailer;
};

/* 2034 */
typedef __Reply__host_set_special_port_t _Xhost_set_special_port::Reply;

/* 2035 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_set_special_port_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2036 */
typedef __Request__host_set_special_port_t _Xhost_set_special_port::__Request;

/* 2037 */
struct __Request__host_set_special_port_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t port;
  NDR_record_t NDR;
  int which;
};

/* 2038 */
struct _Xhost_set_exception_ports::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
  mach_msg_trailer_t trailer;
};

/* 2039 */
typedef __Reply__host_set_exception_ports_t _Xhost_set_exception_ports::Reply;

/* 2040 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_set_exception_ports_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2041 */
typedef __Request__host_set_exception_ports_t _Xhost_set_exception_ports::__Request;

/* 2042 */
struct __Request__host_set_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
};

/* 2043 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_get_exception_ports::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  mach_msg_trailer_t trailer;
};

/* 2044 */
typedef __Reply__host_get_exception_ports_t _Xhost_get_exception_ports::Reply;

/* 2045 */
struct __Reply__host_get_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t old_handlers[32];
  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
};

/* 2046 */
typedef __Request__host_get_exception_ports_t _Xhost_get_exception_ports::__Request;

/* 2047 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_get_exception_ports_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
};

/* 2048 */
struct _Xhost_swap_exception_ports::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
  mach_msg_trailer_t trailer;
};

/* 2049 */
typedef __Reply__host_swap_exception_ports_t _Xhost_swap_exception_ports::Reply;

/* 2050 */
struct __Reply__host_swap_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t old_handlerss[32];
  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
};

/* 2051 */
typedef __Request__host_swap_exception_ports_t _Xhost_swap_exception_ports::__Request;

/* 2052 */
struct __Request__host_swap_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
};

/* 2053 */
struct _Xmach_vm_wire_external::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t size;
  vm_prot_t desired_access;
  mach_msg_trailer_t trailer;
};

/* 2054 */
typedef __Reply__mach_vm_wire_external_t _Xmach_vm_wire_external::Reply;

/* 2055 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_wire_external_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2056 */
typedef __Request__mach_vm_wire_external_t _Xmach_vm_wire_external::__Request;

/* 2057 */
struct __Request__mach_vm_wire_external_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t size;
  vm_prot_t desired_access;
};

/* 2058 */
struct _Xhost_processor_sets::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2059 */
typedef __Reply__host_processor_sets_t _Xhost_processor_sets::Reply;

/* 2060 */
struct __Reply__host_processor_sets_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_ports_descriptor_t processor_sets;
  NDR_record_t NDR;
  mach_msg_type_number_t processor_setsCnt;
};

/* 2061 */
typedef __Request__host_processor_sets_t _Xhost_processor_sets::__Request;

/* 2062 */
struct __Request__host_processor_sets_t
{
  mach_msg_header_t Head;
};

/* 2063 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_processor_set_priv::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t set_name;
  mach_msg_trailer_t trailer;
};

/* 2064 */
typedef __Reply__host_processor_set_priv_t _Xhost_processor_set_priv::Reply;

/* 2065 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_processor_set_priv_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t set;
};

/* 2066 */
typedef __Request__host_processor_set_priv_t _Xhost_processor_set_priv::__Request;

/* 2067 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_processor_set_priv_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t set_name;
};

/* 2068 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_set_UNDServer::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t server;
  mach_msg_trailer_t trailer;
};

/* 2069 */
typedef __Reply__host_set_UNDServer_t _Xhost_set_UNDServer::Reply;

/* 2070 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_set_UNDServer_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2071 */
typedef __Request__host_set_UNDServer_t _Xhost_set_UNDServer::__Request;

/* 2072 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_set_UNDServer_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t server;
};

/* 2073 */
struct _Xhost_get_UNDServer::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2074 */
typedef __Reply__host_get_UNDServer_t _Xhost_get_UNDServer::Reply;

/* 2075 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_get_UNDServer_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t server;
};

/* 2076 */
typedef __Request__host_get_UNDServer_t _Xhost_get_UNDServer::__Request;

/* 2077 */
struct __Request__host_get_UNDServer_t
{
  mach_msg_header_t Head;
};

/* 2078 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xkext_request::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t request_data;
  NDR_record_t NDR;
  uint32_t_0 user_log_flags;
  mach_msg_type_number_t request_dataCnt;
  mach_msg_trailer_t trailer;
};

/* 2079 */
typedef __Reply__kext_request_t _Xkext_request::Reply;

/* 2080 */
struct __Reply__kext_request_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t response_data;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t log_data;
  NDR_record_t NDR;
  mach_msg_type_number_t response_dataCnt;
  mach_msg_type_number_t log_dataCnt;
  kern_return_t op_result;
};

/* 2081 */
typedef __Request__kext_request_t _Xkext_request::__Request;

/* 2082 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__kext_request_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t request_data;
  NDR_record_t NDR;
  uint32_t_0 user_log_flags;
  mach_msg_type_number_t request_dataCnt;
};

/* 2083 */
typedef clock *clock_ctrl_t;

/* 2084 */
typedef mach_port_t exception_handler_t;

/* 2085 */
struct host_security_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[2];
};

/* 2086 */
typedef __builtin_va_list va_list_76;

/* 2087 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_security_create_task_token::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_task;
  mach_msg_port_descriptor_t host;
  mach_msg_ool_ports_descriptor_t ledgers;
  NDR_record_t NDR;
  security_token_t sec_token;
  audit_token_t audit_token;
  mach_msg_type_number_t ledgersCnt;
  boolean_t inherit_memory;
  mach_msg_trailer_t trailer;
};

/* 2088 */
typedef __Reply__host_security_create_task_token_t _Xhost_security_create_task_token::Reply;

/* 2089 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_security_create_task_token_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_task;
};

/* 2090 */
typedef __Request__host_security_create_task_token_t _Xhost_security_create_task_token::__Request;

/* 2091 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_security_create_task_token_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t parent_task;
  mach_msg_port_descriptor_t host;
  mach_msg_ool_ports_descriptor_t ledgers;
  NDR_record_t NDR;
  security_token_t sec_token;
  audit_token_t audit_token;
  mach_msg_type_number_t ledgersCnt;
  boolean_t inherit_memory;
};

/* 2092 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_security_set_task_token::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t target_task;
  mach_msg_port_descriptor_t host;
  NDR_record_t NDR;
  security_token_t sec_token;
  audit_token_t audit_token;
  mach_msg_trailer_t trailer;
};

/* 2093 */
typedef __Reply__host_security_set_task_token_t _Xhost_security_set_task_token::Reply;

/* 2094 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_security_set_task_token_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2095 */
typedef __Request__host_security_set_task_token_t _Xhost_security_set_task_token::__Request;

/* 2096 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_security_set_task_token_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t target_task;
  mach_msg_port_descriptor_t host;
  NDR_record_t NDR;
  security_token_t sec_token;
  audit_token_t audit_token;
};

/* 2097 */
struct send_ktrace_background_available::Request
{
  mach_msg_header_t Head;
};

/* 2098 */
union send_ktrace_background_available::$11E29CF6D5916A0AD773CE3ACD549094
{
  send_ktrace_background_available::Request In;
};

/* 2099 */
struct lock_set_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[6];
};

/* 2100 */
typedef __builtin_va_list va_list_77;

/* 2101 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xlock_acquire::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
  mach_msg_trailer_t trailer;
};

/* 2102 */
typedef __Reply__lock_acquire_t _Xlock_acquire::Reply;

/* 2103 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lock_acquire_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2104 */
typedef __Request__lock_acquire_t _Xlock_acquire::__Request;

/* 2105 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__lock_acquire_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
};

/* 2106 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xlock_release::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
  mach_msg_trailer_t trailer;
};

/* 2107 */
typedef __Reply__lock_release_t _Xlock_release::Reply;

/* 2108 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lock_release_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2109 */
typedef __Request__lock_release_t _Xlock_release::__Request;

/* 2110 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__lock_release_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
};

/* 2111 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xlock_try::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
  mach_msg_trailer_t trailer;
};

/* 2112 */
typedef __Reply__lock_try_t _Xlock_try::Reply;

/* 2113 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lock_try_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2114 */
typedef __Request__lock_try_t _Xlock_try::__Request;

/* 2115 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__lock_try_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
};

/* 2116 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xlock_make_stable::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
  mach_msg_trailer_t trailer;
};

/* 2117 */
typedef __Reply__lock_make_stable_t _Xlock_make_stable::Reply;

/* 2118 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lock_make_stable_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2119 */
typedef __Request__lock_make_stable_t _Xlock_make_stable::__Request;

/* 2120 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__lock_make_stable_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
};

/* 2121 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xlock_handoff::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
  mach_msg_trailer_t trailer;
};

/* 2122 */
typedef __Reply__lock_handoff_t _Xlock_handoff::Reply;

/* 2123 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lock_handoff_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2124 */
typedef __Request__lock_handoff_t _Xlock_handoff::__Request;

/* 2125 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__lock_handoff_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
};

/* 2126 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xlock_handoff_accept::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
  mach_msg_trailer_t trailer;
};

/* 2127 */
typedef __Reply__lock_handoff_accept_t _Xlock_handoff_accept::Reply;

/* 2128 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lock_handoff_accept_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2129 */
typedef __Request__lock_handoff_accept_t _Xlock_handoff_accept::__Request;

/* 2130 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__lock_handoff_accept_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int lock_id;
};

/* 2131 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_exception_raise_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2132 */
union mach_exception_raise_state::mach_exception_raise_stateMessU
{
  mach_exception_raise_state::Request In;
  mach_exception_raise_state::Reply Out;
};

/* 2133 */
struct mach_exception_raise_state::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 2134 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_exception_raise_state::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
  mach_msg_trailer_t trailer;
};

/* 2135 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_exception_raise_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
};

/* 2136 */
union mach_exception_raise_state_identity::mach_exception_raise_state_identityMessU
{
  mach_exception_raise_state_identity::Request In;
  mach_exception_raise_state_identity::Reply Out;
};

/* 2137 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_exception_raise_state_identity::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 2138 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_exception_raise_state_identity::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
  mach_msg_trailer_t trailer;
};

/* 2139 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_exception_raise_state_identity_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
};

/* 2140 */
union mach_exception_raise::$A1887D8AE0DDAEA998EC5DA5CF0B2C05
{
  mach_exception_raise::Request In;
  mach_exception_raise::Reply Out;
};

/* 2141 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_exception_raise::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
};

/* 2142 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_exception_raise::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_trailer_t trailer;
};

/* 2143 */
struct catch_mach_exc_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[3];
};

/* 2144 */
typedef __builtin_va_list va_list_78;

/* 2145 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_exception_raise::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
  mach_msg_trailer_t trailer;
};

/* 2146 */
typedef __Reply__mach_exception_raise_t _Xmach_exception_raise::Reply;

/* 2147 */
typedef __Request__mach_exception_raise_t _Xmach_exception_raise::__Request;

/* 2148 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_exception_raise_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
};

/* 2149 */
struct _Xmach_exception_raise_state::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
  mach_msg_trailer_t trailer;
};

/* 2150 */
typedef __Reply__mach_exception_raise_state_t _Xmach_exception_raise_state::Reply;

/* 2151 */
typedef __Request__mach_exception_raise_state_t _Xmach_exception_raise_state::__Request;

/* 2152 */
struct __Request__mach_exception_raise_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 2153 */
typedef __Request__mach_exception_raise_state_t $<2629384,1>::__Request;

/* 2154 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_exception_raise_state_identity::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
  mach_msg_trailer_t trailer;
};

/* 2155 */
typedef __Reply__mach_exception_raise_state_identity_t _Xmach_exception_raise_state_identity::Reply;

/* 2156 */
typedef __Request__mach_exception_raise_state_identity_t _Xmach_exception_raise_state_identity::__Request;

/* 2157 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_exception_raise_state_identity_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t thread;
  mach_msg_port_descriptor_t task;
  NDR_record_t NDR;
  exception_type_t exception;
  mach_msg_type_number_t codeCnt;
  int64_t code[2];
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 2158 */
typedef __Request__mach_exception_raise_state_identity_t $<2630176,1>::__Request;

/* 2159 */
struct mach_host_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[35];
};

/* 2160 */
typedef __builtin_va_list va_list_79;

/* 2161 */
struct _Xhost_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 2162 */
typedef __Reply__host_info_t _Xhost_info::Reply;

/* 2163 */
struct __Reply__host_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[68];
};

/* 2164 */
typedef __Request__host_info_t _Xhost_info::__Request;

/* 2165 */
struct __Request__host_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
};

/* 2166 */
struct _Xhost_kernel_version::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2167 */
typedef __Reply__host_kernel_version_t _Xhost_kernel_version::Reply;

/* 2168 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_kernel_version_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t kernel_versionOffset;
  mach_msg_type_number_t kernel_versionCnt;
  char kernel_version[512];
};

/* 2169 */
typedef __Request__host_kernel_version_t _Xhost_kernel_version::__Request;

/* 2170 */
struct __Request__host_kernel_version_t
{
  mach_msg_header_t Head;
};

/* 2171 */
struct _Xhost_page_size::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2172 */
typedef __Reply__host_page_size_t _Xhost_page_size::Reply;

/* 2173 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_page_size_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_size_t out_page_size;
};

/* 2174 */
typedef __Request__host_page_size_t _Xhost_page_size::__Request;

/* 2175 */
struct __Request__host_page_size_t
{
  mach_msg_header_t Head;
};

/* 2176 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_memory_object_memory_entry::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pager;
  NDR_record_t NDR;
  boolean_t internal;
  vm_size_t size;
  vm_prot_t permission;
  mach_msg_trailer_t trailer;
};

/* 2177 */
typedef __Reply__mach_memory_object_memory_entry_t _Xmach_memory_object_memory_entry::Reply;

/* 2178 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_memory_object_memory_entry_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t entry_handle;
};

/* 2179 */
typedef __Request__mach_memory_object_memory_entry_t _Xmach_memory_object_memory_entry::__Request;

/* 2180 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_memory_object_memory_entry_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pager;
  NDR_record_t NDR;
  boolean_t internal;
  vm_size_t size;
  vm_prot_t permission;
};

/* 2181 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_processor_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_flavor_t flavor;
  mach_msg_trailer_t trailer;
};

/* 2182 */
typedef int processor_flavor_t;

/* 2183 */
typedef __Reply__host_processor_info_t _Xhost_processor_info::Reply;

/* 2184 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_processor_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t out_processor_info;
  NDR_record_t NDR;
  natural_t out_processor_count;
  mach_msg_type_number_t out_processor_infoCnt;
};

/* 2185 */
typedef __Request__host_processor_info_t _Xhost_processor_info::__Request;

/* 2186 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_processor_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_flavor_t flavor;
};

/* 2187 */
struct _Xhost_get_io_master::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2188 */
typedef __Reply__host_get_io_master_t _Xhost_get_io_master::Reply;

/* 2189 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_get_io_master_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t io_master;
};

/* 2190 */
typedef __Request__host_get_io_master_t _Xhost_get_io_master::__Request;

/* 2191 */
struct __Request__host_get_io_master_t
{
  mach_msg_header_t Head;
};

/* 2192 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_get_clock_service::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_id_t clock_id;
  mach_msg_trailer_t trailer;
};

/* 2193 */
typedef __Reply__host_get_clock_service_t _Xhost_get_clock_service::Reply;

/* 2194 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_get_clock_service_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t clock_serv;
};

/* 2195 */
typedef __Request__host_get_clock_service_t _Xhost_get_clock_service::__Request;

/* 2196 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_get_clock_service_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  clock_id_t clock_id;
};

/* 2197 */
struct _Xkmod_get_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2198 */
typedef __Reply__kmod_get_info_t _Xkmod_get_info::Reply;

/* 2199 */
struct __Reply__kmod_get_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t modules;
  NDR_record_t NDR;
  mach_msg_type_number_t modulesCnt;
};

/* 2200 */
typedef __Request__kmod_get_info_t _Xkmod_get_info::__Request;

/* 2201 */
struct __Request__kmod_get_info_t
{
  mach_msg_header_t Head;
};

/* 2202 */
struct _Xhost_virtual_physical_table_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2203 */
typedef __Reply__host_virtual_physical_table_info_t _Xhost_virtual_physical_table_info::Reply;

/* 2204 */
struct __Reply__host_virtual_physical_table_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t info;
  NDR_record_t NDR;
  mach_msg_type_number_t infoCnt;
};

/* 2205 */
typedef __Request__host_virtual_physical_table_info_t _Xhost_virtual_physical_table_info::__Request;

/* 2206 */
struct __Request__host_virtual_physical_table_info_t
{
  mach_msg_header_t Head;
};

/* 2207 */
struct _Xprocessor_set_default::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2208 */
typedef __Reply__processor_set_default_t _Xprocessor_set_default::Reply;

/* 2209 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_default_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t default_set;
};

/* 2210 */
typedef __Request__processor_set_default_t _Xprocessor_set_default::__Request;

/* 2211 */
struct __Request__processor_set_default_t
{
  mach_msg_header_t Head;
};

/* 2212 */
struct _Xprocessor_set_create::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2213 */
typedef __Reply__processor_set_create_t _Xprocessor_set_create::Reply;

/* 2214 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_create_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;
  mach_msg_port_descriptor_t new_name;
};

/* 2215 */
typedef __Request__processor_set_create_t _Xprocessor_set_create::__Request;

/* 2216 */
struct __Request__processor_set_create_t
{
  mach_msg_header_t Head;
};

/* 2217 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_memory_object_memory_entry_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pager;
  NDR_record_t NDR;
  boolean_t internal;
  memory_object_size_t size;
  vm_prot_t permission;
  mach_msg_trailer_t trailer;
};

/* 2218 */
typedef __Reply__mach_memory_object_memory_entry_64_t _Xmach_memory_object_memory_entry_64::Reply;

/* 2219 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_memory_object_memory_entry_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t entry_handle;
};

/* 2220 */
typedef __Request__mach_memory_object_memory_entry_64_t _Xmach_memory_object_memory_entry_64::__Request;

/* 2221 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_memory_object_memory_entry_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pager;
  NDR_record_t NDR;
  boolean_t internal;
  memory_object_size_t size;
  vm_prot_t permission;
};

/* 2222 */
struct _Xhost_statistics_from_user::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 2223 */
typedef __Reply__host_statistics_from_user_t _Xhost_statistics_from_user::Reply;

/* 2224 */
struct __Reply__host_statistics_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[68];
};

/* 2225 */
typedef __Request__host_statistics_from_user_t _Xhost_statistics_from_user::__Request;

/* 2226 */
struct __Request__host_statistics_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info_outCnt;
};

/* 2227 */
struct _Xhost_request_notification::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t notify_port;
  NDR_record_t NDR;
  host_flavor_t notify_type;
  mach_msg_trailer_t trailer;
};

/* 2228 */
typedef __Reply__host_request_notification_t _Xhost_request_notification::Reply;

/* 2229 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_request_notification_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2230 */
typedef __Request__host_request_notification_t _Xhost_request_notification::__Request;

/* 2231 */
struct __Request__host_request_notification_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t notify_port;
  NDR_record_t NDR;
  host_flavor_t notify_type;
};

/* 2232 */
struct _Xhost_lockgroup_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2233 */
typedef __Reply__host_lockgroup_info_t _Xhost_lockgroup_info::Reply;

/* 2234 */
struct __Reply__host_lockgroup_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t lockgroup_info;
  NDR_record_t NDR;
  mach_msg_type_number_t lockgroup_infoCnt;
};

/* 2235 */
typedef __Request__host_lockgroup_info_t _Xhost_lockgroup_info::__Request;

/* 2236 */
struct __Request__host_lockgroup_info_t
{
  mach_msg_header_t Head;
};

/* 2237 */
struct _Xhost_statistics64_from_user::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info64_outCnt;
  mach_msg_trailer_t trailer;
};

/* 2238 */
typedef __Reply__host_statistics64_from_user_t _Xhost_statistics64_from_user::Reply;

/* 2239 */
struct __Reply__host_statistics64_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t host_info64_outCnt;
  integer_t host_info64_out[256];
};

/* 2240 */
typedef __Request__host_statistics64_from_user_t _Xhost_statistics64_from_user::__Request;

/* 2241 */
struct __Request__host_statistics64_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  host_flavor_t flavor;
  mach_msg_type_number_t host_info64_outCnt;
};

/* 2242 */
struct _Xmach_zone_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2243 */
typedef __Reply__mach_zone_info_t _Xmach_zone_info::Reply;

/* 2244 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_zone_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t info;
  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t infoCnt;
};

/* 2245 */
typedef __Request__mach_zone_info_t _Xmach_zone_info::__Request;

/* 2246 */
struct __Request__mach_zone_info_t
{
  mach_msg_header_t Head;
};

/* 2247 */
struct _Xmach_zone_force_gc::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2248 */
typedef __Reply__mach_zone_force_gc_t _Xmach_zone_force_gc::Reply;

/* 2249 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_zone_force_gc_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2250 */
typedef __Request__mach_zone_force_gc_t _Xmach_zone_force_gc::__Request;

/* 2251 */
struct __Request__mach_zone_force_gc_t
{
  mach_msg_header_t Head;
};

/* 2252 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_create_mach_voucher::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t recipesCnt;
  uint8_t_0 recipes[5120];
  mach_msg_trailer_t trailer;
};

/* 2253 */
typedef __Reply__host_create_mach_voucher_t _Xhost_create_mach_voucher::Reply;

/* 2254 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_create_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;
};

/* 2255 */
typedef __Request__host_create_mach_voucher_t _Xhost_create_mach_voucher::__Request;

/* 2256 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_create_mach_voucher_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t recipesCnt;
  uint8_t_0 recipes[5120];
};

/* 2257 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_register_mach_voucher_attr_manager::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t attr_manager;
  NDR_record_t NDR;
  mach_voucher_attr_value_handle_t default_value;
  mach_msg_trailer_t trailer;
};

/* 2258 */
typedef __Reply__host_register_mach_voucher_attr_manager_t _Xhost_register_mach_voucher_attr_manager::Reply;

/* 2259 */
struct __Reply__host_register_mach_voucher_attr_manager_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_attr_control;
  NDR_record_t NDR;
  mach_voucher_attr_key_t new_key;
};

/* 2260 */
typedef __Request__host_register_mach_voucher_attr_manager_t _Xhost_register_mach_voucher_attr_manager::__Request;

/* 2261 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_register_mach_voucher_attr_manager_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t attr_manager;
  NDR_record_t NDR;
  mach_voucher_attr_value_handle_t default_value;
};

/* 2262 */
struct _Xhost_register_well_known_mach_voucher_attr_manager::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t attr_manager;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_voucher_attr_value_handle_t default_value;
  mach_voucher_attr_key_t key;
  mach_msg_trailer_t trailer;
};

/* 2263 */
typedef __Reply__host_register_well_known_mach_voucher_attr_manager_t _Xhost_register_well_known_mach_voucher_attr_manager::Reply;

/* 2264 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_register_well_known_mach_voucher_attr_manager_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_attr_control;
};

/* 2265 */
typedef __Request__host_register_well_known_mach_voucher_attr_manager_t _Xhost_register_well_known_mach_voucher_attr_manager::__Request;

/* 2266 */
struct __Request__host_register_well_known_mach_voucher_attr_manager_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t attr_manager;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_voucher_attr_value_handle_t default_value;
  mach_voucher_attr_key_t key;
};

/* 2267 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_set_atm_diagnostic_flag::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 diagnostic_flag;
  mach_msg_trailer_t trailer;
};

/* 2268 */
typedef __Reply__host_set_atm_diagnostic_flag_t _Xhost_set_atm_diagnostic_flag::Reply;

/* 2269 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_set_atm_diagnostic_flag_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2270 */
typedef __Request__host_set_atm_diagnostic_flag_t _Xhost_set_atm_diagnostic_flag::__Request;

/* 2271 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_set_atm_diagnostic_flag_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 diagnostic_flag;
};

/* 2272 */
struct _Xmach_memory_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2273 */
typedef __Reply__mach_memory_info_t _Xmach_memory_info::Reply;

/* 2274 */
struct __Reply__mach_memory_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t names;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t info;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t memory_info;
  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t infoCnt;
  mach_msg_type_number_t memory_infoCnt;
};

/* 2275 */
typedef __Request__mach_memory_info_t _Xmach_memory_info::__Request;

/* 2276 */
struct __Request__mach_memory_info_t
{
  mach_msg_header_t Head;
};

/* 2277 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xhost_set_multiuser_config_flags::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 multiuser_flags;
  mach_msg_trailer_t trailer;
};

/* 2278 */
typedef __Reply__host_set_multiuser_config_flags_t _Xhost_set_multiuser_config_flags::Reply;

/* 2279 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__host_set_multiuser_config_flags_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2280 */
typedef __Request__host_set_multiuser_config_flags_t _Xhost_set_multiuser_config_flags::__Request;

/* 2281 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__host_set_multiuser_config_flags_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 multiuser_flags;
};

/* 2282 */
struct _Xmach_zone_info_for_zone::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_zone_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2283 */
typedef __Reply__mach_zone_info_for_zone_t _Xmach_zone_info_for_zone::Reply;

/* 2284 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_zone_info_for_zone_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_zone_info_t info;
};

/* 2285 */
typedef __Request__mach_zone_info_for_zone_t _Xmach_zone_info_for_zone::__Request;

/* 2286 */
struct __Request__mach_zone_info_for_zone_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_zone_name_t name;
};

/* 2287 */
struct _Xmach_zone_info_for_largest_zone::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2288 */
typedef __Reply__mach_zone_info_for_largest_zone_t _Xmach_zone_info_for_largest_zone::Reply;

/* 2289 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_zone_info_for_largest_zone_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_zone_name_t name;
  mach_zone_info_t info;
};

/* 2290 */
typedef __Request__mach_zone_info_for_largest_zone_t _Xmach_zone_info_for_largest_zone::__Request;

/* 2291 */
struct __Request__mach_zone_info_for_largest_zone_t
{
  mach_msg_header_t Head;
};

/* 2292 */
struct _Xmach_zone_get_zlog_zones::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2293 */
typedef __Reply__mach_zone_get_zlog_zones_t _Xmach_zone_get_zlog_zones::Reply;

/* 2294 */
struct __Reply__mach_zone_get_zlog_zones_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t names;
  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
};

/* 2295 */
typedef __Request__mach_zone_get_zlog_zones_t _Xmach_zone_get_zlog_zones::__Request;

/* 2296 */
struct __Request__mach_zone_get_zlog_zones_t
{
  mach_msg_header_t Head;
};

/* 2297 */
struct _Xmach_zone_get_btlog_records::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_zone_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2298 */
typedef __Reply__mach_zone_get_btlog_records_t _Xmach_zone_get_btlog_records::Reply;

/* 2299 */
struct __Reply__mach_zone_get_btlog_records_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t recs;
  NDR_record_t NDR;
  mach_msg_type_number_t recsCnt;
};

/* 2300 */
typedef __Request__mach_zone_get_btlog_records_t _Xmach_zone_get_btlog_records::__Request;

/* 2301 */
struct __Request__mach_zone_get_btlog_records_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_zone_name_t name;
};

/* 2302 */
typedef clock *clock_serv_t;

/* 2303 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_notify_port_deleted::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2304 */
union mach_notify_port_deleted::$6BA70419BAF7AF7D213CDD1573355BAE
{
  mach_notify_port_deleted::Request In;
};

/* 2305 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_notify_send_possible::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2306 */
union mach_notify_send_possible::$B400917A15E174B2E8CA73DB541EB5B5
{
  mach_notify_send_possible::Request In;
};

/* 2307 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_notify_port_destroyed::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t rights;
};

/* 2308 */
union mach_notify_port_destroyed::$B2C06D241270651CDB0503DFA42EF783
{
  mach_notify_port_destroyed::Request In;
};

/* 2309 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_notify_no_senders::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_mscount_t mscount;
};

/* 2310 */
union mach_notify_no_senders::$D82A43FB9F24344C9DD7B13CEE4C6798
{
  mach_notify_no_senders::Request In;
};

/* 2311 */
struct mach_notify_send_once::Request
{
  mach_msg_header_t Head;
};

/* 2312 */
union mach_notify_send_once::$DE57552834C0CCD1AEE7BB1059259968
{
  mach_notify_send_once::Request In;
};

/* 2313 */
struct __attribute__((packed)) __attribute__((aligned(4))) mach_notify_dead_name::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2314 */
union mach_notify_dead_name::$F1438FA554D52C74A0DB94793CD06017
{
  mach_notify_dead_name::Request In;
};

/* 2315 */
struct mach_port_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[37];
};

/* 2316 */
typedef __builtin_va_list va_list_80;

/* 2317 */
struct _Xmach_port_names::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2318 */
typedef __Reply__mach_port_names_t _Xmach_port_names::Reply;

/* 2319 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_names_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t types;
  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t typesCnt;
};

/* 2320 */
typedef __Request__mach_port_names_t _Xmach_port_names::__Request;

/* 2321 */
struct __Request__mach_port_names_t
{
  mach_msg_header_t Head;
};

/* 2322 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_type::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2323 */
typedef __Reply__mach_port_type_t _Xmach_port_type::Reply;

/* 2324 */
struct __Reply__mach_port_type_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_type_t ptype;
};

/* 2325 */
typedef __Request__mach_port_type_t _Xmach_port_type::__Request;

/* 2326 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_type_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2327 */
struct _Xmach_port_rename::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t old_name;
  mach_port_name_t new_name;
  mach_msg_trailer_t trailer;
};

/* 2328 */
typedef __Reply__mach_port_rename_t _Xmach_port_rename::Reply;

/* 2329 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_rename_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2330 */
typedef __Request__mach_port_rename_t _Xmach_port_rename::__Request;

/* 2331 */
struct __Request__mach_port_rename_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t old_name;
  mach_port_name_t new_name;
};

/* 2332 */
struct _Xmach_port_allocate_name::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2333 */
typedef __Reply__mach_port_allocate_name_t _Xmach_port_allocate_name::Reply;

/* 2334 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_allocate_name_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2335 */
typedef __Request__mach_port_allocate_name_t _Xmach_port_allocate_name::__Request;

/* 2336 */
struct __Request__mach_port_allocate_name_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_name_t name;
};

/* 2337 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_allocate::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_msg_trailer_t trailer;
};

/* 2338 */
typedef __Reply__mach_port_allocate_t _Xmach_port_allocate::Reply;

/* 2339 */
struct __Reply__mach_port_allocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_name_t name;
};

/* 2340 */
typedef __Request__mach_port_allocate_t _Xmach_port_allocate::__Request;

/* 2341 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_allocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
};

/* 2342 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_destroy::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2343 */
typedef __Reply__mach_port_destroy_t _Xmach_port_destroy::Reply;

/* 2344 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2345 */
typedef __Request__mach_port_destroy_t _Xmach_port_destroy::__Request;

/* 2346 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2347 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_deallocate::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2348 */
typedef __Reply__mach_port_deallocate_t _Xmach_port_deallocate::Reply;

/* 2349 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_deallocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2350 */
typedef __Request__mach_port_deallocate_t _Xmach_port_deallocate::__Request;

/* 2351 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_deallocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2352 */
struct _Xmach_port_get_refs::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_right_t right;
  mach_msg_trailer_t trailer;
};

/* 2353 */
typedef __Reply__mach_port_get_refs_t _Xmach_port_get_refs::Reply;

/* 2354 */
struct __Reply__mach_port_get_refs_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_urefs_t refs;
};

/* 2355 */
typedef __Request__mach_port_get_refs_t _Xmach_port_get_refs::__Request;

/* 2356 */
struct __Request__mach_port_get_refs_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_right_t right;
};

/* 2357 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_mod_refs::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_right_t right;
  mach_port_delta_t delta;
  mach_msg_trailer_t trailer;
};

/* 2358 */
typedef __Reply__mach_port_mod_refs_t _Xmach_port_mod_refs::Reply;

/* 2359 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_mod_refs_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2360 */
typedef __Request__mach_port_mod_refs_t _Xmach_port_mod_refs::__Request;

/* 2361 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_mod_refs_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_right_t right;
  mach_port_delta_t delta;
};

/* 2362 */
struct _Xmach_port_peek::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_type_t trailer_type;
  mach_port_seqno_t request_seqnop;
  mach_msg_type_number_t trailer_infopCnt;
  mach_msg_trailer_t trailer;
};

/* 2363 */
typedef __Reply__mach_port_peek_t _Xmach_port_peek::Reply;

/* 2364 */
struct __Reply__mach_port_peek_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_seqno_t request_seqnop;
  mach_msg_size_t msg_sizep;
  mach_msg_id_t msg_idp;
  mach_msg_type_number_t trailer_infopCnt;
  char trailer_infop[68];
};

/* 2365 */
typedef __Request__mach_port_peek_t _Xmach_port_peek::__Request;

/* 2366 */
struct __Request__mach_port_peek_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_type_t trailer_type;
  mach_port_seqno_t request_seqnop;
  mach_msg_type_number_t trailer_infopCnt;
};

/* 2367 */
struct _Xmach_port_set_mscount::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_mscount_t mscount;
  mach_msg_trailer_t trailer;
};

/* 2368 */
typedef __Reply__mach_port_set_mscount_t _Xmach_port_set_mscount::Reply;

/* 2369 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_set_mscount_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2370 */
typedef __Request__mach_port_set_mscount_t _Xmach_port_set_mscount::__Request;

/* 2371 */
struct __Request__mach_port_set_mscount_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_mscount_t mscount;
};

/* 2372 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_get_set_status::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2373 */
typedef __Reply__mach_port_get_set_status_t _Xmach_port_get_set_status::Reply;

/* 2374 */
struct __Reply__mach_port_get_set_status_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t members;
  NDR_record_t NDR;
  mach_msg_type_number_t membersCnt;
};

/* 2375 */
typedef __Request__mach_port_get_set_status_t _Xmach_port_get_set_status::__Request;

/* 2376 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_get_set_status_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2377 */
struct _Xmach_port_move_member::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t member;
  mach_port_name_t after;
  mach_msg_trailer_t trailer;
};

/* 2378 */
typedef __Reply__mach_port_move_member_t _Xmach_port_move_member::Reply;

/* 2379 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_move_member_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2380 */
typedef __Request__mach_port_move_member_t _Xmach_port_move_member::__Request;

/* 2381 */
struct __Request__mach_port_move_member_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t member;
  mach_port_name_t after;
};

/* 2382 */
struct _Xmach_port_request_notification::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t notify;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_id_t msgid;
  mach_port_mscount_t sync;
  mach_msg_trailer_t trailer;
};

/* 2383 */
typedef __Reply__mach_port_request_notification_t _Xmach_port_request_notification::Reply;

/* 2384 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_request_notification_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t previous;
};

/* 2385 */
typedef __Request__mach_port_request_notification_t _Xmach_port_request_notification::__Request;

/* 2386 */
struct __Request__mach_port_request_notification_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t notify;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_id_t msgid;
  mach_port_mscount_t sync;
};

/* 2387 */
struct _Xmach_port_insert_right::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t poly;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2388 */
typedef __Reply__mach_port_insert_right_t _Xmach_port_insert_right::Reply;

/* 2389 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_insert_right_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2390 */
typedef __Request__mach_port_insert_right_t _Xmach_port_insert_right::__Request;

/* 2391 */
struct __Request__mach_port_insert_right_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t poly;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2392 */
struct _Xmach_port_extract_right::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_type_name_t msgt_name;
  mach_msg_trailer_t trailer;
};

/* 2393 */
typedef __Reply__mach_port_extract_right_t _Xmach_port_extract_right::Reply;

/* 2394 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_extract_right_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t poly;
};

/* 2395 */
typedef __Request__mach_port_extract_right_t _Xmach_port_extract_right::__Request;

/* 2396 */
struct __Request__mach_port_extract_right_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_type_name_t msgt_name;
};

/* 2397 */
struct _Xmach_port_set_seqno::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_seqno_t seqno;
  mach_msg_trailer_t trailer;
};

/* 2398 */
typedef __Reply__mach_port_set_seqno_t _Xmach_port_set_seqno::Reply;

/* 2399 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_set_seqno_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2400 */
typedef __Request__mach_port_set_seqno_t _Xmach_port_set_seqno::__Request;

/* 2401 */
struct __Request__mach_port_set_seqno_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_seqno_t seqno;
};

/* 2402 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_get_attributes::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_flavor_t flavor;
  mach_msg_type_number_t port_info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 2403 */
typedef __Reply__mach_port_get_attributes_t _Xmach_port_get_attributes::Reply;

/* 2404 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_get_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t port_info_outCnt;
  integer_t port_info_out[17];
};

/* 2405 */
typedef __Request__mach_port_get_attributes_t _Xmach_port_get_attributes::__Request;

/* 2406 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_get_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_flavor_t flavor;
  mach_msg_type_number_t port_info_outCnt;
};

/* 2407 */
struct _Xmach_port_set_attributes::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_flavor_t flavor;
  mach_msg_type_number_t port_infoCnt;
  integer_t port_info[17];
  mach_msg_trailer_t trailer;
};

/* 2408 */
typedef __Reply__mach_port_set_attributes_t _Xmach_port_set_attributes::Reply;

/* 2409 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_set_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2410 */
typedef __Request__mach_port_set_attributes_t _Xmach_port_set_attributes::__Request;

/* 2411 */
struct __Request__mach_port_set_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_flavor_t flavor;
  mach_msg_type_number_t port_infoCnt;
  integer_t port_info[17];
};

/* 2412 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_allocate_qos::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_qos_t qos;
  mach_msg_trailer_t trailer;
};

/* 2413 */
typedef __Reply__mach_port_allocate_qos_t _Xmach_port_allocate_qos::Reply;

/* 2414 */
struct __Reply__mach_port_allocate_qos_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_qos_t qos;
  mach_port_name_t name;
};

/* 2415 */
typedef __Request__mach_port_allocate_qos_t _Xmach_port_allocate_qos::__Request;

/* 2416 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_allocate_qos_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_qos_t qos;
};

/* 2417 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_allocate_full::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t proto;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_qos_t qos;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2418 */
typedef __Reply__mach_port_allocate_full_t _Xmach_port_allocate_full::Reply;

/* 2419 */
struct __Reply__mach_port_allocate_full_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_qos_t qos;
  mach_port_name_t name;
};

/* 2420 */
typedef __Request__mach_port_allocate_full_t _Xmach_port_allocate_full::__Request;

/* 2421 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_allocate_full_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t proto;
  NDR_record_t NDR;
  mach_port_right_t right;
  mach_port_qos_t qos;
  mach_port_name_t name;
};

/* 2422 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_set_port_space::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int table_entries;
  mach_msg_trailer_t trailer;
};

/* 2423 */
typedef __Reply__task_set_port_space_t _Xtask_set_port_space::Reply;

/* 2424 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_port_space_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2425 */
typedef __Request__task_set_port_space_t _Xtask_set_port_space::__Request;

/* 2426 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_set_port_space_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int table_entries;
};

/* 2427 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_get_srights::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2428 */
typedef __Reply__mach_port_get_srights_t _Xmach_port_get_srights::Reply;

/* 2429 */
struct __Reply__mach_port_get_srights_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_rights_t srights;
};

/* 2430 */
typedef __Request__mach_port_get_srights_t _Xmach_port_get_srights::__Request;

/* 2431 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_get_srights_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2432 */
struct _Xmach_port_space_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2433 */
typedef __Reply__mach_port_space_info_t _Xmach_port_space_info::Reply;

/* 2434 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_space_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t table_info;
  mach_msg_ool_descriptor_t tree_info;
  NDR_record_t NDR;
  ipc_info_space_t space_info;
  mach_msg_type_number_t table_infoCnt;
  mach_msg_type_number_t tree_infoCnt;
};

/* 2435 */
typedef __Request__mach_port_space_info_t _Xmach_port_space_info::__Request;

/* 2436 */
struct __Request__mach_port_space_info_t
{
  mach_msg_header_t Head;
};

/* 2437 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_dnrequest_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2438 */
typedef __Reply__mach_port_dnrequest_info_t _Xmach_port_dnrequest_info::Reply;

/* 2439 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_dnrequest_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned int dnr_total;
  unsigned int dnr_used;
};

/* 2440 */
typedef __Request__mach_port_dnrequest_info_t _Xmach_port_dnrequest_info::__Request;

/* 2441 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_dnrequest_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2442 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_kernel_object::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2443 */
typedef __Reply__mach_port_kernel_object_t _Xmach_port_kernel_object::Reply;

/* 2444 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_kernel_object_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned int object_type;
  unsigned int object_addr;
};

/* 2445 */
typedef __Request__mach_port_kernel_object_t _Xmach_port_kernel_object::__Request;

/* 2446 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_kernel_object_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2447 */
struct _Xmach_port_insert_member::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_name_t pset;
  mach_msg_trailer_t trailer;
};

/* 2448 */
typedef __Reply__mach_port_insert_member_t _Xmach_port_insert_member::Reply;

/* 2449 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_insert_member_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2450 */
typedef __Request__mach_port_insert_member_t _Xmach_port_insert_member::__Request;

/* 2451 */
struct __Request__mach_port_insert_member_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_name_t pset;
};

/* 2452 */
struct _Xmach_port_extract_member::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_name_t pset;
  mach_msg_trailer_t trailer;
};

/* 2453 */
typedef __Reply__mach_port_extract_member_t _Xmach_port_extract_member::Reply;

/* 2454 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_extract_member_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2455 */
typedef __Request__mach_port_extract_member_t _Xmach_port_extract_member::__Request;

/* 2456 */
struct __Request__mach_port_extract_member_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_name_t pset;
};

/* 2457 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_get_context::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2458 */
typedef __Reply__mach_port_get_context_t _Xmach_port_get_context::Reply;

/* 2459 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_get_context_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t context;
};

/* 2460 */
typedef __Request__mach_port_get_context_t _Xmach_port_get_context::__Request;

/* 2461 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_get_context_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2462 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_set_context::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_vm_address_t context;
  mach_msg_trailer_t trailer;
};

/* 2463 */
typedef __Reply__mach_port_set_context_t _Xmach_port_set_context::Reply;

/* 2464 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_set_context_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2465 */
typedef __Request__mach_port_set_context_t _Xmach_port_set_context::__Request;

/* 2466 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_set_context_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_vm_address_t context;
};

/* 2467 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_kobject::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2468 */
typedef __Reply__mach_port_kobject_t _Xmach_port_kobject::Reply;

/* 2469 */
struct __Reply__mach_port_kobject_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  natural_t object_type;
  mach_vm_address_t object_addr;
};

/* 2470 */
typedef __Request__mach_port_kobject_t _Xmach_port_kobject::__Request;

/* 2471 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_kobject_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2472 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_construct::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t options;
  NDR_record_t NDR;
  uint64_t_0 context;
  mach_msg_trailer_t trailer;
};

/* 2473 */
typedef __Reply__mach_port_construct_t _Xmach_port_construct::Reply;

/* 2474 */
struct __Reply__mach_port_construct_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_port_name_t name;
};

/* 2475 */
typedef __Request__mach_port_construct_t _Xmach_port_construct::__Request;

/* 2476 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_construct_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t options;
  NDR_record_t NDR;
  uint64_t_0 context;
};

/* 2477 */
struct _Xmach_port_destruct::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_delta_t srdelta;
  uint64_t_0 guard;
  mach_msg_trailer_t trailer;
};

/* 2478 */
typedef __Reply__mach_port_destruct_t _Xmach_port_destruct::Reply;

/* 2479 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_destruct_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2480 */
typedef __Request__mach_port_destruct_t _Xmach_port_destruct::__Request;

/* 2481 */
struct __Request__mach_port_destruct_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_port_delta_t srdelta;
  uint64_t_0 guard;
};

/* 2482 */
struct _Xmach_port_guard::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 guard;
  boolean_t strict;
  mach_msg_trailer_t trailer;
};

/* 2483 */
typedef __Reply__mach_port_guard_t _Xmach_port_guard::Reply;

/* 2484 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_guard_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2485 */
typedef __Request__mach_port_guard_t _Xmach_port_guard::__Request;

/* 2486 */
struct __Request__mach_port_guard_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 guard;
  boolean_t strict;
};

/* 2487 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_unguard::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  uint64_t_0 guard;
  mach_msg_trailer_t trailer;
};

/* 2488 */
typedef __Reply__mach_port_unguard_t _Xmach_port_unguard::Reply;

/* 2489 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_unguard_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2490 */
typedef __Request__mach_port_unguard_t _Xmach_port_unguard::__Request;

/* 2491 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_unguard_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  uint64_t_0 guard;
};

/* 2492 */
struct _Xmach_port_space_basic_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2493 */
typedef __Reply__mach_port_space_basic_info_t _Xmach_port_space_basic_info::Reply;

/* 2494 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_port_space_basic_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  ipc_info_space_basic_t basic_info;
};

/* 2495 */
typedef __Request__mach_port_space_basic_info_t _Xmach_port_space_basic_info::__Request;

/* 2496 */
struct __Request__mach_port_space_basic_info_t
{
  mach_msg_header_t Head;
};

/* 2497 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_port_special_reply_port_reset_link::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
  mach_msg_trailer_t trailer;
};

/* 2498 */
typedef __Reply__mach_port_special_reply_port_reset_link_t _Xmach_port_special_reply_port_reset_link::Reply;

/* 2499 */
struct __Reply__mach_port_special_reply_port_reset_link_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t srp_lost_link;
};

/* 2500 */
typedef __Request__mach_port_special_reply_port_reset_link_t _Xmach_port_special_reply_port_reset_link::__Request;

/* 2501 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_port_special_reply_port_reset_link_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t name;
};

/* 2502 */
struct mach_vm_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[21];
};

/* 2503 */
typedef __builtin_va_list va_list_81;

/* 2504 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_vm_allocate_external::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  int flags;
  mach_msg_trailer_t trailer;
};

/* 2505 */
typedef __Reply__mach_vm_allocate_external_t _Xmach_vm_allocate_external::Reply;

/* 2506 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_allocate_external_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t address;
};

/* 2507 */
typedef __Request__mach_vm_allocate_external_t _Xmach_vm_allocate_external::__Request;

/* 2508 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_vm_allocate_external_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  int flags;
};

/* 2509 */
struct _Xmach_vm_deallocate::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_msg_trailer_t trailer;
};

/* 2510 */
typedef __Reply__mach_vm_deallocate_t _Xmach_vm_deallocate::Reply;

/* 2511 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_deallocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2512 */
typedef __Request__mach_vm_deallocate_t _Xmach_vm_deallocate::__Request;

/* 2513 */
struct __Request__mach_vm_deallocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
};

/* 2514 */
struct _Xmach_vm_protect::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  boolean_t set_maximum;
  vm_prot_t new_protection;
  mach_msg_trailer_t trailer;
};

/* 2515 */
typedef __Reply__mach_vm_protect_t _Xmach_vm_protect::Reply;

/* 2516 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_protect_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2517 */
typedef __Request__mach_vm_protect_t _Xmach_vm_protect::__Request;

/* 2518 */
struct __Request__mach_vm_protect_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  boolean_t set_maximum;
  vm_prot_t new_protection;
};

/* 2519 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_vm_inherit::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_inherit_t new_inheritance;
  mach_msg_trailer_t trailer;
};

/* 2520 */
typedef __Reply__mach_vm_inherit_t _Xmach_vm_inherit::Reply;

/* 2521 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_inherit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2522 */
typedef __Request__mach_vm_inherit_t _Xmach_vm_inherit::__Request;

/* 2523 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_vm_inherit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_inherit_t new_inheritance;
};

/* 2524 */
struct _Xmach_vm_read::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_msg_trailer_t trailer;
};

/* 2525 */
typedef __Reply__mach_vm_read_t _Xmach_vm_read::Reply;

/* 2526 */
struct __Reply__mach_vm_read_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  mach_msg_type_number_t dataCnt;
};

/* 2527 */
typedef __Request__mach_vm_read_t _Xmach_vm_read::__Request;

/* 2528 */
struct __Request__mach_vm_read_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
};

/* 2529 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_vm_read_list::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_read_entry_t data_list;
  natural_t count;
  mach_msg_trailer_t trailer;
};

/* 2530 */
typedef mach_vm_read_entry mach_vm_read_entry_t[256];

/* 2531 */
struct mach_vm_read_entry
{
  mach_vm_address_t address;
  mach_vm_size_t size;
};

/* 2532 */
typedef __Reply__mach_vm_read_list_t _Xmach_vm_read_list::Reply;

/* 2533 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_read_list_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_read_entry_t data_list;
};

/* 2534 */
typedef __Request__mach_vm_read_list_t _Xmach_vm_read_list::__Request;

/* 2535 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_vm_read_list_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_read_entry_t data_list;
  natural_t count;
};

/* 2536 */
typedef _Xmach_vm_read_list::$CB123E6D82F52F715E5E80E8BA58699D *_Xmach_vm_read_list::sp;

/* 2537 */
struct _Xmach_vm_read_list::$CB123E6D82F52F715E5E80E8BA58699D
{
  char data[4096];
};

/* 2538 */
struct _Xmach_vm_write::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t address;
  mach_msg_type_number_t dataCnt;
  mach_msg_trailer_t trailer;
};

/* 2539 */
typedef __Reply__mach_vm_write_t _Xmach_vm_write::Reply;

/* 2540 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_write_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2541 */
typedef __Request__mach_vm_write_t _Xmach_vm_write::__Request;

/* 2542 */
struct __Request__mach_vm_write_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t address;
  mach_msg_type_number_t dataCnt;
};

/* 2543 */
struct _Xmach_vm_copy::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t source_address;
  mach_vm_size_t size;
  mach_vm_address_t dest_address;
  mach_msg_trailer_t trailer;
};

/* 2544 */
typedef __Reply__mach_vm_copy_t _Xmach_vm_copy::Reply;

/* 2545 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_copy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2546 */
typedef __Request__mach_vm_copy_t _Xmach_vm_copy::__Request;

/* 2547 */
struct __Request__mach_vm_copy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t source_address;
  mach_vm_size_t size;
  mach_vm_address_t dest_address;
};

/* 2548 */
struct _Xmach_vm_read_overwrite::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_vm_address_t data;
  mach_msg_trailer_t trailer;
};

/* 2549 */
typedef __Reply__mach_vm_read_overwrite_t _Xmach_vm_read_overwrite::Reply;

/* 2550 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_read_overwrite_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_size_t outsize;
};

/* 2551 */
typedef __Request__mach_vm_read_overwrite_t _Xmach_vm_read_overwrite::__Request;

/* 2552 */
struct __Request__mach_vm_read_overwrite_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_vm_address_t data;
};

/* 2553 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_vm_msync::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_sync_t sync_flags;
  mach_msg_trailer_t trailer;
};

/* 2554 */
typedef __Reply__mach_vm_msync_t _Xmach_vm_msync::Reply;

/* 2555 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_msync_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2556 */
typedef __Request__mach_vm_msync_t _Xmach_vm_msync::__Request;

/* 2557 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_vm_msync_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_sync_t sync_flags;
};

/* 2558 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_vm_behavior_set::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_behavior_t new_behavior;
  mach_msg_trailer_t trailer;
};

/* 2559 */
typedef int vm_behavior_t;

/* 2560 */
typedef __Reply__mach_vm_behavior_set_t _Xmach_vm_behavior_set::Reply;

/* 2561 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_behavior_set_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2562 */
typedef __Request__mach_vm_behavior_set_t _Xmach_vm_behavior_set::__Request;

/* 2563 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_vm_behavior_set_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_behavior_t new_behavior;
};

/* 2564 */
struct _Xmach_vm_map_external::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t object;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t size;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_offset_t mask;
  int flags;
  memory_object_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
  mach_msg_trailer_t trailer;
};

/* 2565 */
typedef __Reply__mach_vm_map_external_t _Xmach_vm_map_external::Reply;

/* 2566 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_map_external_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t address;
};

/* 2567 */
typedef __Request__mach_vm_map_external_t _Xmach_vm_map_external::__Request;

/* 2568 */
struct __Request__mach_vm_map_external_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t object;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t size;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_offset_t mask;
  int flags;
  memory_object_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
};

/* 2569 */
struct _Xmach_vm_machine_attribute::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_machine_attribute_t attribute;
  vm_machine_attribute_val_t value;
  mach_msg_trailer_t trailer;
};

/* 2570 */
typedef unsigned int vm_machine_attribute_t;

/* 2571 */
typedef int vm_machine_attribute_val_t;

/* 2572 */
typedef __Reply__mach_vm_machine_attribute_t _Xmach_vm_machine_attribute::Reply;

/* 2573 */
struct __Reply__mach_vm_machine_attribute_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_machine_attribute_val_t value;
};

/* 2574 */
typedef __Request__mach_vm_machine_attribute_t _Xmach_vm_machine_attribute::__Request;

/* 2575 */
struct __Request__mach_vm_machine_attribute_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  mach_vm_size_t size;
  vm_machine_attribute_t attribute;
  vm_machine_attribute_val_t value;
};

/* 2576 */
struct _Xmach_vm_remap_external::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t src_task;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t target_address;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t size;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_offset_t mask;
  int flags;
  mach_vm_address_t src_address;
  boolean_t copy;
  vm_inherit_t inheritance;
  mach_msg_trailer_t trailer;
};

/* 2577 */
typedef __Reply__mach_vm_remap_external_t _Xmach_vm_remap_external::Reply;

/* 2578 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_remap_external_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t target_address;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
};

/* 2579 */
typedef __Request__mach_vm_remap_external_t _Xmach_vm_remap_external::__Request;

/* 2580 */
struct __Request__mach_vm_remap_external_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t src_task;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t target_address;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t size;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_offset_t mask;
  int flags;
  mach_vm_address_t src_address;
  boolean_t copy;
  vm_inherit_t inheritance;
};

/* 2581 */
struct _Xmach_vm_page_query::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_offset_t offset;
  mach_msg_trailer_t trailer;
};

/* 2582 */
typedef __Reply__mach_vm_page_query_t _Xmach_vm_page_query::Reply;

/* 2583 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_page_query_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  integer_t disposition;
  integer_t ref_count;
};

/* 2584 */
typedef __Request__mach_vm_page_query_t _Xmach_vm_page_query::__Request;

/* 2585 */
struct __Request__mach_vm_page_query_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_offset_t offset;
};

/* 2586 */
struct _Xmach_vm_region_recurse::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  mach_msg_trailer_t trailer;
};

/* 2587 */
typedef __Reply__mach_vm_region_recurse_t _Xmach_vm_region_recurse::Reply;

/* 2588 */
struct __Reply__mach_vm_region_recurse_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t size;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  int info[19];
};

/* 2589 */
typedef __Request__mach_vm_region_recurse_t _Xmach_vm_region_recurse::__Request;

/* 2590 */
struct __Request__mach_vm_region_recurse_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
};

/* 2591 */
struct _Xmach_vm_region::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
  mach_msg_trailer_t trailer;
};

/* 2592 */
typedef int vm_region_flavor_t;

/* 2593 */
typedef __Reply__mach_vm_region_t _Xmach_vm_region::Reply;

/* 2594 */
struct __Reply__mach_vm_region_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t object_name;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_address_t address;
  __attribute__((packed)) __attribute__((aligned(1))) mach_vm_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[10];
};

/* 2595 */
typedef __Request__mach_vm_region_t _Xmach_vm_region::__Request;

/* 2596 */
struct __Request__mach_vm_region_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
};

/* 2597 */
struct _X_mach_make_memory_entry::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t parent_handle;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_size_t size;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_offset_t offset;
  vm_prot_t permission;
  mach_msg_trailer_t trailer;
};

/* 2598 */
typedef __Reply___mach_make_memory_entry_t _X_mach_make_memory_entry::Reply;

/* 2599 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply___mach_make_memory_entry_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_handle;
  NDR_record_t NDR;
  memory_object_size_t size;
};

/* 2600 */
typedef __Request___mach_make_memory_entry_t _X_mach_make_memory_entry::__Request;

/* 2601 */
struct __Request___mach_make_memory_entry_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t parent_handle;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_size_t size;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_offset_t offset;
  vm_prot_t permission;
};

/* 2602 */
struct _Xmach_vm_purgable_control::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  vm_purgable_t control;
  int state;
  mach_msg_trailer_t trailer;
};

/* 2603 */
typedef __Reply__mach_vm_purgable_control_t _Xmach_vm_purgable_control::Reply;

/* 2604 */
struct __Reply__mach_vm_purgable_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int state;
};

/* 2605 */
typedef __Request__mach_vm_purgable_control_t _Xmach_vm_purgable_control::__Request;

/* 2606 */
struct __Request__mach_vm_purgable_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  vm_purgable_t control;
  int state;
};

/* 2607 */
struct _Xmach_vm_page_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  vm_page_info_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
  mach_msg_trailer_t trailer;
};

/* 2608 */
typedef int vm_page_info_flavor_t;

/* 2609 */
typedef __Reply__mach_vm_page_info_t _Xmach_vm_page_info::Reply;

/* 2610 */
struct __Reply__mach_vm_page_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t infoCnt;
  int info[32];
};

/* 2611 */
typedef __Request__mach_vm_page_info_t _Xmach_vm_page_info::__Request;

/* 2612 */
struct __Request__mach_vm_page_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_address_t address;
  vm_page_info_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
};

/* 2613 */
struct _Xmach_vm_page_range_query::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_offset_t address;
  mach_vm_size_t size;
  mach_vm_address_t dispositions;
  mach_vm_size_t dispositions_count;
  mach_msg_trailer_t trailer;
};

/* 2614 */
typedef __Reply__mach_vm_page_range_query_t _Xmach_vm_page_range_query::Reply;

/* 2615 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_vm_page_range_query_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_size_t dispositions_count;
};

/* 2616 */
typedef __Request__mach_vm_page_range_query_t _Xmach_vm_page_range_query::__Request;

/* 2617 */
struct __Request__mach_vm_page_range_query_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_vm_offset_t address;
  mach_vm_size_t size;
  mach_vm_address_t dispositions;
  mach_vm_size_t dispositions_count;
};

/* 2618 */
typedef mach_port_t mem_entry_name_port_t;

/* 2619 */
struct mach_voucher_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[5];
};

/* 2620 */
typedef __builtin_va_list va_list_82;

/* 2621 */
struct _Xmach_voucher_extract_attr_content::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_attr_key_t key;
  mach_msg_type_number_t contentCnt;
  mach_msg_trailer_t trailer;
};

/* 2622 */
typedef __Reply__mach_voucher_extract_attr_content_t _Xmach_voucher_extract_attr_content::Reply;

/* 2623 */
struct __Reply__mach_voucher_extract_attr_content_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t contentCnt;
  uint8_t_0 content[4096];
};

/* 2624 */
typedef __Request__mach_voucher_extract_attr_content_t _Xmach_voucher_extract_attr_content::__Request;

/* 2625 */
struct __Request__mach_voucher_extract_attr_content_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_attr_key_t key;
  mach_msg_type_number_t contentCnt;
};

/* 2626 */
struct _Xmach_voucher_extract_attr_recipe::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_attr_key_t key;
  mach_msg_type_number_t recipeCnt;
  mach_msg_trailer_t trailer;
};

/* 2627 */
typedef __Reply__mach_voucher_extract_attr_recipe_t _Xmach_voucher_extract_attr_recipe::Reply;

/* 2628 */
struct __Reply__mach_voucher_extract_attr_recipe_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t recipeCnt;
  uint8_t_0 recipe[4096];
};

/* 2629 */
typedef __Request__mach_voucher_extract_attr_recipe_t _Xmach_voucher_extract_attr_recipe::__Request;

/* 2630 */
struct __Request__mach_voucher_extract_attr_recipe_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_attr_key_t key;
  mach_msg_type_number_t recipeCnt;
};

/* 2631 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_voucher_extract_all_attr_recipes::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t recipesCnt;
  mach_msg_trailer_t trailer;
};

/* 2632 */
typedef __Reply__mach_voucher_extract_all_attr_recipes_t _Xmach_voucher_extract_all_attr_recipes::Reply;

/* 2633 */
struct __Reply__mach_voucher_extract_all_attr_recipes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t recipesCnt;
  uint8_t_0 recipes[5120];
};

/* 2634 */
typedef __Request__mach_voucher_extract_all_attr_recipes_t _Xmach_voucher_extract_all_attr_recipes::__Request;

/* 2635 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_voucher_extract_all_attr_recipes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t recipesCnt;
};

/* 2636 */
struct _Xmach_voucher_attr_command::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_attr_key_t key;
  mach_voucher_attr_command_t command;
  mach_msg_type_number_t in_contentCnt;
  uint8_t_0 in_content[4096];
  mach_msg_type_number_t out_contentCnt;
  mach_msg_trailer_t trailer;
};

/* 2637 */
typedef __Reply__mach_voucher_attr_command_t _Xmach_voucher_attr_command::Reply;

/* 2638 */
struct __Reply__mach_voucher_attr_command_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t out_contentCnt;
  uint8_t_0 out_content[4096];
};

/* 2639 */
typedef __Request__mach_voucher_attr_command_t _Xmach_voucher_attr_command::__Request;

/* 2640 */
struct __Request__mach_voucher_attr_command_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_attr_key_t key;
  mach_voucher_attr_command_t command;
  mach_msg_type_number_t in_contentCnt;
  uint8_t_0 in_content[4096];
  mach_msg_type_number_t out_contentCnt;
};

/* 2641 */
typedef __Request__mach_voucher_attr_command_t $<2784405,1>::__Request;

/* 2642 */
struct _Xmach_voucher_debug_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t voucher_name;
  mach_msg_type_number_t recipesCnt;
  mach_msg_trailer_t trailer;
};

/* 2643 */
typedef __Reply__mach_voucher_debug_info_t _Xmach_voucher_debug_info::Reply;

/* 2644 */
struct __Reply__mach_voucher_debug_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t recipesCnt;
  uint8_t_0 recipes[5120];
};

/* 2645 */
typedef __Request__mach_voucher_debug_info_t _Xmach_voucher_debug_info::__Request;

/* 2646 */
struct __Request__mach_voucher_debug_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_port_name_t voucher_name;
  mach_msg_type_number_t recipesCnt;
};

/* 2647 */
struct mach_voucher_attr_control_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[2];
};

/* 2648 */
typedef __builtin_va_list va_list_83;

/* 2649 */
struct _Xmach_voucher_attr_control_get_values::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t voucher;
  NDR_record_t NDR;
  mach_msg_type_number_t value_handlesCnt;
  mach_msg_trailer_t trailer;
};

/* 2650 */
typedef __Reply__mach_voucher_attr_control_get_values_t _Xmach_voucher_attr_control_get_values::Reply;

/* 2651 */
struct __Reply__mach_voucher_attr_control_get_values_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t value_handlesCnt;
  mach_voucher_attr_value_handle_t value_handles[4];
};

/* 2652 */
typedef __Request__mach_voucher_attr_control_get_values_t _Xmach_voucher_attr_control_get_values::__Request;

/* 2653 */
struct __Request__mach_voucher_attr_control_get_values_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t voucher;
  NDR_record_t NDR;
  mach_msg_type_number_t value_handlesCnt;
};

/* 2654 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_voucher_attr_control_create_mach_voucher::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t recipesCnt;
  uint8_t_0 recipes[5120];
  mach_msg_trailer_t trailer;
};

/* 2655 */
typedef __Reply__mach_voucher_attr_control_create_mach_voucher_t _Xmach_voucher_attr_control_create_mach_voucher::Reply;

/* 2656 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_voucher_attr_control_create_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;
};

/* 2657 */
typedef __Request__mach_voucher_attr_control_create_mach_voucher_t _Xmach_voucher_attr_control_create_mach_voucher::__Request;

/* 2658 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_voucher_attr_control_create_mach_voucher_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t recipesCnt;
  uint8_t_0 recipes[5120];
};

/* 2659 */
struct memory_entry_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[2];
};

/* 2660 */
typedef __builtin_va_list va_list_84;

/* 2661 */
struct _Xmach_memory_entry_purgable_control::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_purgable_t control;
  int state;
  mach_msg_trailer_t trailer;
};

/* 2662 */
typedef __Reply__mach_memory_entry_purgable_control_t _Xmach_memory_entry_purgable_control::Reply;

/* 2663 */
struct __Reply__mach_memory_entry_purgable_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int state;
};

/* 2664 */
typedef __Request__mach_memory_entry_purgable_control_t _Xmach_memory_entry_purgable_control::__Request;

/* 2665 */
struct __Request__mach_memory_entry_purgable_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_purgable_t control;
  int state;
};

/* 2666 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmach_memory_entry_access_tracking::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int access_tracking;
  mach_msg_trailer_t trailer;
};

/* 2667 */
typedef __Reply__mach_memory_entry_access_tracking_t _Xmach_memory_entry_access_tracking::Reply;

/* 2668 */
struct __Reply__mach_memory_entry_access_tracking_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int access_tracking;
  uint32_t_0 access_tracking_reads;
  uint32_t_0 access_tracking_writes;
};

/* 2669 */
typedef __Request__mach_memory_entry_access_tracking_t _Xmach_memory_entry_access_tracking::__Request;

/* 2670 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__mach_memory_entry_access_tracking_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int access_tracking;
};

/* 2671 */
struct memory_object_control_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[12];
};

/* 2672 */
typedef __builtin_va_list va_list_85;

/* 2673 */
struct _Xmemory_object_get_attributes::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_flavor_t flavor;
  mach_msg_type_number_t attributesCnt;
  mach_msg_trailer_t trailer;
};

/* 2674 */
typedef int memory_object_flavor_t;

/* 2675 */
typedef __Reply__memory_object_get_attributes_t _Xmemory_object_get_attributes::Reply;

/* 2676 */
struct __Reply__memory_object_get_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t attributesCnt;
  int attributes[6];
};

/* 2677 */
typedef __Request__memory_object_get_attributes_t _Xmemory_object_get_attributes::__Request;

/* 2678 */
struct __Request__memory_object_get_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_flavor_t flavor;
  mach_msg_type_number_t attributesCnt;
};

/* 2679 */
struct _Xmemory_object_change_attributes::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_flavor_t flavor;
  mach_msg_type_number_t attributesCnt;
  int attributes[6];
  mach_msg_trailer_t trailer;
};

/* 2680 */
typedef __Reply__memory_object_change_attributes_t _Xmemory_object_change_attributes::Reply;

/* 2681 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__memory_object_change_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2682 */
typedef __Request__memory_object_change_attributes_t _Xmemory_object_change_attributes::__Request;

/* 2683 */
struct __Request__memory_object_change_attributes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_flavor_t flavor;
  mach_msg_type_number_t attributesCnt;
  int attributes[6];
};

/* 2684 */
struct _Xmemory_object_synchronize_completed::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  memory_object_size_t length;
  mach_msg_trailer_t trailer;
};

/* 2685 */
typedef __Reply__memory_object_synchronize_completed_t _Xmemory_object_synchronize_completed::Reply;

/* 2686 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__memory_object_synchronize_completed_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2687 */
typedef __Request__memory_object_synchronize_completed_t _Xmemory_object_synchronize_completed::__Request;

/* 2688 */
struct __Request__memory_object_synchronize_completed_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  memory_object_size_t length;
};

/* 2689 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmemory_object_lock_request::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  memory_object_size_t size;
  memory_object_return_t should_return;
  integer_t flags;
  vm_prot_t lock_value;
  mach_msg_trailer_t trailer;
};

/* 2690 */
typedef int memory_object_return_t;

/* 2691 */
typedef __Reply__memory_object_lock_request_t _Xmemory_object_lock_request::Reply;

/* 2692 */
struct __Reply__memory_object_lock_request_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_offset_t resid_offset;
  integer_t io_errno;
};

/* 2693 */
typedef __Request__memory_object_lock_request_t _Xmemory_object_lock_request::__Request;

/* 2694 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__memory_object_lock_request_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  memory_object_size_t size;
  memory_object_return_t should_return;
  integer_t flags;
  vm_prot_t lock_value;
};

/* 2695 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmemory_object_destroy::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t reason;
  mach_msg_trailer_t trailer;
};

/* 2696 */
typedef __Reply__memory_object_destroy_t _Xmemory_object_destroy::Reply;

/* 2697 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__memory_object_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2698 */
typedef __Request__memory_object_destroy_t _Xmemory_object_destroy::__Request;

/* 2699 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__memory_object_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t reason;
};

/* 2700 */
struct _Xmemory_object_upl_request::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  upl_size_t size;
  mach_msg_type_number_t page_listCnt;
  integer_t cntrl_flags;
  integer_t tag;
  mach_msg_trailer_t trailer;
};

/* 2701 */
typedef uint32_t_0 upl_size_t;

/* 2702 */
typedef __Reply__memory_object_upl_request_t _Xmemory_object_upl_request::Reply;

/* 2703 */
struct __Reply__memory_object_upl_request_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t upl;
  NDR_record_t NDR;
  mach_msg_type_number_t page_listCnt;
  upl_page_info_t page_list[256];
};

/* 2704 */
typedef upl_page_info upl_page_info_t;

/* 2705 */
struct upl_page_info
{
  ppnum_t phys_addr;
  unsigned __int32 free_when_done : 1;
  unsigned __int32 absent : 1;
  unsigned __int32 dirty : 1;
  unsigned __int32 precious : 1;
  unsigned __int32 device : 1;
  unsigned __int32 speculative : 1;
  unsigned __int32 cs_validated : 1;
  unsigned __int32 cs_tainted : 1;
  unsigned __int32 cs_nx : 1;
  unsigned __int32 needed : 1;
  unsigned __int32 mark : 1;
};

/* 2706 */
typedef __Request__memory_object_upl_request_t _Xmemory_object_upl_request::__Request;

/* 2707 */
struct __Request__memory_object_upl_request_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  upl_size_t size;
  mach_msg_type_number_t page_listCnt;
  integer_t cntrl_flags;
  integer_t tag;
};

/* 2708 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmemory_object_super_upl_request::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  upl_size_t size;
  upl_size_t super_size;
  mach_msg_type_number_t page_listCnt;
  integer_t cntrl_flags;
  integer_t tag;
  mach_msg_trailer_t trailer;
};

/* 2709 */
typedef __Reply__memory_object_super_upl_request_t _Xmemory_object_super_upl_request::Reply;

/* 2710 */
struct __Reply__memory_object_super_upl_request_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t upl;
  NDR_record_t NDR;
  mach_msg_type_number_t page_listCnt;
  upl_page_info_t page_list[256];
};

/* 2711 */
typedef __Request__memory_object_super_upl_request_t _Xmemory_object_super_upl_request::__Request;

/* 2712 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__memory_object_super_upl_request_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  upl_size_t size;
  upl_size_t super_size;
  mach_msg_type_number_t page_listCnt;
  integer_t cntrl_flags;
  integer_t tag;
};

/* 2713 */
struct _Xmemory_object_cluster_size::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_fault_info_t fault_info;
  mach_msg_trailer_t trailer;
};

/* 2714 */
typedef __Reply__memory_object_cluster_size_t _Xmemory_object_cluster_size::Reply;

/* 2715 */
struct __Reply__memory_object_cluster_size_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_offset_t start;
  __attribute__((packed)) __attribute__((aligned(1))) vm_size_t length;
  uint32_t_0 io_streaming;
};

/* 2716 */
typedef __Request__memory_object_cluster_size_t _Xmemory_object_cluster_size::__Request;

/* 2717 */
struct __Request__memory_object_cluster_size_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_fault_info_t fault_info;
};

/* 2718 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmemory_object_page_op::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  integer_t ops;
  mach_msg_trailer_t trailer;
};

/* 2719 */
typedef __Reply__memory_object_page_op_t _Xmemory_object_page_op::Reply;

/* 2720 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__memory_object_page_op_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 phys_entry;
  integer_t flags;
};

/* 2721 */
typedef __Request__memory_object_page_op_t _Xmemory_object_page_op::__Request;

/* 2722 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__memory_object_page_op_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset;
  integer_t ops;
};

/* 2723 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmemory_object_recover_named::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t wait_on_terminating;
  mach_msg_trailer_t trailer;
};

/* 2724 */
typedef __Reply__memory_object_recover_named_t _Xmemory_object_recover_named::Reply;

/* 2725 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__memory_object_recover_named_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2726 */
typedef __Request__memory_object_recover_named_t _Xmemory_object_recover_named::__Request;

/* 2727 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__memory_object_recover_named_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t wait_on_terminating;
};

/* 2728 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmemory_object_release_name::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  integer_t flags;
  mach_msg_trailer_t trailer;
};

/* 2729 */
typedef __Reply__memory_object_release_name_t _Xmemory_object_release_name::Reply;

/* 2730 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__memory_object_release_name_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2731 */
typedef __Request__memory_object_release_name_t _Xmemory_object_release_name::__Request;

/* 2732 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__memory_object_release_name_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  integer_t flags;
};

/* 2733 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmemory_object_range_op::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset_beg;
  memory_object_offset_t offset_end;
  integer_t ops;
  mach_msg_trailer_t trailer;
};

/* 2734 */
typedef __Reply__memory_object_range_op_t _Xmemory_object_range_op::Reply;

/* 2735 */
struct __Reply__memory_object_range_op_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  integer_t range;
};

/* 2736 */
typedef __Request__memory_object_range_op_t _Xmemory_object_range_op::__Request;

/* 2737 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__memory_object_range_op_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  memory_object_offset_t offset_beg;
  memory_object_offset_t offset_end;
  integer_t ops;
};

/* 2738 */
typedef upl *upl_t;

/* 2739 */
struct upl
{
  lck_mtx_t_0 Lock;
  int ref_count;
  int ext_ref_count;
  int flags;
  vm_object_offset_t offset;
  upl_size_t size;
  vm_offset_t kaddr;
  vm_object_t map_object;
  ppnum_t highest_page;
  void *vector_upl;
  upl_t associated_upl;
  upl_io_completion *upl_iodone;
  int upl_priority;
  uint64_t_0 *upl_reprio_info;
  void *decmp_io_upl;
  thread_t upl_creator;
  queue_chain_t uplq;
};

/* 2740 */
typedef send_cpu_usage_violation::$A46E204D7CD616F42C268F4CACFD59A9 *send_cpu_usage_violation::sp;

/* 2741 */
struct send_cpu_usage_violation::$A46E204D7CD616F42C268F4CACFD59A9
{
  char data[33];
};

/* 2742 */
typedef send_cpu_usage_violation::$25B22D466DE2E9CCA74068C1262EEBB6 *send_cpu_usage_violation::sp_0;

/* 2743 */
struct send_cpu_usage_violation::$25B22D466DE2E9CCA74068C1262EEBB6
{
  char data[512];
};

/* 2744 */
struct send_cpu_usage_violation::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  proc_name_t procname;
  char procnamePad[3];
  int pid;
  posix_path_t killed_proc_path;
  mach_timespec_t timestamp;
  int64_t observed_cpu_nsecs;
  int64_t observation_nsecs;
  int64_t cpu_nsecs_allowed;
  int64_t limit_window_nsecs;
  resource_notify_flags_t flags;
};

/* 2745 */
union send_cpu_usage_violation::$5764FBBAF221280A33DC39029B4A557D
{
  send_cpu_usage_violation::Request In;
};

/* 2746 */
typedef send_cpu_wakes_violation::$A46E204D7CD616F42C268F4CACFD59A9 *send_cpu_wakes_violation::sp;

/* 2747 */
struct send_cpu_wakes_violation::$A46E204D7CD616F42C268F4CACFD59A9
{
  char data[33];
};

/* 2748 */
typedef send_cpu_wakes_violation::$25B22D466DE2E9CCA74068C1262EEBB6 *send_cpu_wakes_violation::sp_0;

/* 2749 */
struct send_cpu_wakes_violation::$25B22D466DE2E9CCA74068C1262EEBB6
{
  char data[512];
};

/* 2750 */
struct send_cpu_wakes_violation::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  proc_name_t procname;
  char procnamePad[3];
  int pid;
  posix_path_t killed_proc_path;
  mach_timespec_t timestamp;
  int64_t observed_cpu_wakes;
  int64_t observation_nsecs;
  int64_t cpu_wakes_allowed;
  int64_t limit_window_nsecs;
  resource_notify_flags_t flags;
};

/* 2751 */
union send_cpu_wakes_violation::$671F86484A33E6281E192E3756158E04
{
  send_cpu_wakes_violation::Request In;
};

/* 2752 */
typedef send_disk_writes_violation::$A46E204D7CD616F42C268F4CACFD59A9 *send_disk_writes_violation::sp;

/* 2753 */
struct send_disk_writes_violation::$A46E204D7CD616F42C268F4CACFD59A9
{
  char data[33];
};

/* 2754 */
typedef send_disk_writes_violation::$25B22D466DE2E9CCA74068C1262EEBB6 *send_disk_writes_violation::sp_0;

/* 2755 */
struct send_disk_writes_violation::$25B22D466DE2E9CCA74068C1262EEBB6
{
  char data[512];
};

/* 2756 */
struct send_disk_writes_violation::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  proc_name_t procname;
  char procnamePad[3];
  int pid;
  posix_path_t killed_proc_path;
  mach_timespec_t timestamp;
  int64_t observed_bytes_dirtied;
  int64_t observation_nsecs;
  int64_t bytes_dirtied_allowed;
  int64_t limit_window_nsecs;
  resource_notify_flags_t flags;
};

/* 2757 */
union send_disk_writes_violation::$71B4F99F03DD0C01AC5DD5BB13FD0128
{
  send_disk_writes_violation::Request In;
};

/* 2758 */
struct upl_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[4];
};

/* 2759 */
typedef __builtin_va_list va_list_86;

/* 2760 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xupl_abort::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  integer_t abort_cond;
  mach_msg_trailer_t trailer;
};

/* 2761 */
typedef __Reply__upl_abort_t _Xupl_abort::Reply;

/* 2762 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__upl_abort_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2763 */
typedef __Request__upl_abort_t _Xupl_abort::__Request;

/* 2764 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__upl_abort_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  integer_t abort_cond;
};

/* 2765 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xupl_abort_range::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  upl_offset_t offset;
  upl_size_t size;
  integer_t abort_cond;
  mach_msg_trailer_t trailer;
};

/* 2766 */
typedef uint32_t_0 upl_offset_t;

/* 2767 */
typedef __Reply__upl_abort_range_t _Xupl_abort_range::Reply;

/* 2768 */
struct __Reply__upl_abort_range_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t empty;
};

/* 2769 */
typedef __Request__upl_abort_range_t _Xupl_abort_range::__Request;

/* 2770 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__upl_abort_range_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  upl_offset_t offset;
  upl_size_t size;
  integer_t abort_cond;
};

/* 2771 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xupl_commit::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t page_listCnt;
  upl_page_info_t page_list[256];
  mach_msg_trailer_t trailer;
};

/* 2772 */
typedef __Reply__upl_commit_t _Xupl_commit::Reply;

/* 2773 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__upl_commit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2774 */
typedef __Request__upl_commit_t _Xupl_commit::__Request;

/* 2775 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__upl_commit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t page_listCnt;
  upl_page_info_t page_list[256];
};

/* 2776 */
struct _Xupl_commit_range::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  upl_offset_t offset;
  upl_size_t size;
  integer_t cntrl_flags;
  mach_msg_type_number_t page_listCnt;
  upl_page_info_t page_list[256];
  mach_msg_trailer_t trailer;
};

/* 2777 */
typedef __Reply__upl_commit_range_t _Xupl_commit_range::Reply;

/* 2778 */
struct __Reply__upl_commit_range_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t empty;
};

/* 2779 */
typedef __Request__upl_commit_range_t _Xupl_commit_range::__Request;

/* 2780 */
struct __Request__upl_commit_range_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  upl_offset_t offset;
  upl_size_t size;
  integer_t cntrl_flags;
  mach_msg_type_number_t page_listCnt;
  upl_page_info_t page_list[256];
};

/* 2781 */
struct __attribute__((packed)) __attribute__((aligned(4))) audit_triggers::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flags;
};

/* 2782 */
union audit_triggers::$6BD872A3B7E5E7CB16203C057CBAAD4B
{
  audit_triggers::Request In;
};

/* 2783 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__check_task_access_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2784 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__find_code_signature_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2785 */
struct __attribute__((packed)) __attribute__((aligned(4))) check_task_access::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int32_t calling_pid;
  uint32_t_0 calling_gid;
  int32_t target_pid;
};

/* 2786 */
union check_task_access::$6BCA82B31041210B3F9866A27CF2170D
{
  check_task_access::Request In;
  check_task_access::Reply Out;
};

/* 2787 */
struct __attribute__((packed)) __attribute__((aligned(4))) check_task_access::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_trailer_t trailer;
};

/* 2788 */
struct __attribute__((packed)) __attribute__((aligned(4))) find_code_signature::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int32_t new_pid;
};

/* 2789 */
union find_code_signature::$660EC3F7B7FD044F196B37665414610F
{
  find_code_signature::Request In;
  find_code_signature::Reply Out;
};

/* 2790 */
struct __attribute__((packed)) __attribute__((aligned(4))) find_code_signature::Reply
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_trailer_t trailer;
};

/* 2791 */
typedef __builtin_va_list va_list_87;

/* 2792 */
union corpse_creation_gate
{
  corpse_creation_gate::$DAC884F00AC6D7CC3BD185CEC701D725 _anon_0;
  uint32_t_0 value;
};

/* 2793 */
struct corpse_creation_gate::$DAC884F00AC6D7CC3BD185CEC701D725
{
  uint16_t user_faults;
  uint16_t corpses;
};

/* 2794 */
struct kcdata_item
{
  uint32_t_0 type;
  uint32_t_0 size;
  uint64_t_0 flags;
  char data[];
};

/* 2795 */
struct kcdata_subtype_descriptor
{
  uint8_t_0 kcs_flags;
  uint8_t_0 kcs_elem_type;
  uint16_t kcs_elem_offset;
  uint32_t_0 kcs_elem_size;
  char kcs_name[32];
};

/* 2796 */
struct kcdata_type_definition
{
  uint32_t_0 kct_type_identifier;
  uint32_t_0 kct_num_elements;
  char kct_name[32];
  kcdata_subtype_descriptor kct_elements[];
};

/* 2797 */
struct _uint64_with_description_data
{
  char desc[32];
  uint64_t_0 data;
};

/* 2798 */
struct _uint32_with_description_data
{
  char desc[32];
  uint32_t_0 data;
};

/* 2799 */
struct __attribute__((packed)) __attribute__((aligned(4))) telemetry_notification::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 flags;
};

/* 2800 */
union telemetry_notification::$DFEE6701DFC6DFFF2B8B53987AE40EDE
{
  telemetry_notification::Request In;
};

/* 2801 */
struct _bank_ledger_indices
{
  int cpu_time;
  int energy;
};

/* 2802 */
typedef __builtin_va_list va_list_88;

/* 2803 */
typedef bank_task *bank_task_t;

/* 2804 */
typedef bank_element *bank_element_t;

/* 2805 */
typedef bank_account *bank_account_t;

/* 2806 */
struct bank_account
{
  bank_element ba_elem;
  ledger_t ba_bill;
  bank_task_t ba_merchant;
  bank_task_t ba_holder;
  bank_task_t ba_secureoriginator;
  bank_task_t ba_proximateprocess;
  queue_chain_t ba_next_acc_to_pay;
  queue_chain_t ba_next_acc_to_charge;
};

/* 2807 */
struct persona_token
{
  proc_persona_info originator;
  proc_persona_info proximate;
};

/* 2808 */
typedef __builtin_va_list va_list_89;

/* 2809 */
struct atm_value_hash
{
  queue_head_t hash_list;
  lck_mtx_t_0 hash_list_lock;
};

/* 2810 */
typedef uint64_t_0 aid_t;

/* 2811 */
typedef uint64_t_0 mach_atm_subaid_t;

/* 2812 */
typedef atm_value *atm_value_t;

/* 2813 */
struct __attribute__((aligned(8))) atm_value
{
  aid_t aid;
  queue_head_t listeners;
  lck_mtx_t_0 listener_lock;
  queue_chain_t vid_hash_elt;
  uint32_t_0 sync;
  uint32_t_0 listener_count;
  uint32_t_0 reference_count;
};

/* 2814 */
typedef atm_link_object *atm_link_object_t;

/* 2815 */
struct __attribute__((aligned(8))) atm_link_object
{
  atm_task_descriptor_t descriptor;
  queue_chain_t listeners_element;
  atm_guard_t guard;
  uint32_t_0 reference_count;
};

/* 2816 */
typedef atm_task_descriptor *atm_task_descriptor_t;

/* 2817 */
typedef uint64_t_0 atm_guard_t;

/* 2818 */
typedef atm_value_hash *atm_value_hash_t;

/* 2819 */
union atm_collect_trace_info::atm_collect_trace_infoMessU
{
  atm_collect_trace_info::Request In;
};

/* 2820 */
struct atm_collect_trace_info::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t memory_buffers[512];
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) atm_aid_t activity_trace_id;
  __attribute__((packed)) __attribute__((aligned(1))) mach_atm_subaid_t sub_activity_id;
  uint32_t_0 flags;
  mach_msg_type_number_t memory_buffersCnt;
  mach_msg_type_number_t buffer_sizesCnt;
  uint64_t_0 buffer_sizes[512];
};

/* 2821 */
typedef uint64_t_0 atm_aid_t;

/* 2822 */
struct atm_inspect_process_buffer::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t trace_buffer;
  NDR_record_t NDR;
  uint32_t_0 proc_pid;
  uint64_t_0 proc_uniqueid;
  uint64_t_0 buffer_size;
};

/* 2823 */
union atm_inspect_process_buffer::$DFAE90704058055F37DD52F0766519DA
{
  atm_inspect_process_buffer::Request In;
};

/* 2824 */
typedef atm_memory_descriptor_t *atm_memory_descriptor_array_t;

/* 2825 */
typedef mach_port_t atm_memory_descriptor_t;

/* 2826 */
typedef uint64_t_0 *atm_memory_size_array_t;

/* 2827 */
typedef __builtin_va_list va_list_90;

/* 2828 */
struct __attribute__((packed)) __attribute__((aligned(4))) coalition_notification::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint64_t_0 id;
  uint32_t_0 flags;
};

/* 2829 */
union coalition_notification::$FBFA67DE82AAF1840DAAE0583AB11FD5
{
  coalition_notification::Request In;
};

/* 2830 */
struct __attribute__((packed)) __attribute__((aligned(4))) send_sysdiagnose_notification::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 flags;
};

/* 2831 */
union send_sysdiagnose_notification::$F5B5B7D996F279F0B87127C4DEAF82D0
{
  send_sysdiagnose_notification::Request In;
};

/* 2832 */
struct processor_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[6];
};

/* 2833 */
typedef __builtin_va_list va_list_91;

/* 2834 */
struct _Xprocessor_start::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2835 */
typedef __Reply__processor_start_t _Xprocessor_start::Reply;

/* 2836 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_start_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2837 */
typedef __Request__processor_start_t _Xprocessor_start::__Request;

/* 2838 */
struct __Request__processor_start_t
{
  mach_msg_header_t Head;
};

/* 2839 */
struct _Xprocessor_exit::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2840 */
typedef __Reply__processor_exit_t _Xprocessor_exit::Reply;

/* 2841 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_exit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2842 */
typedef __Request__processor_exit_t _Xprocessor_exit::__Request;

/* 2843 */
struct __Request__processor_exit_t
{
  mach_msg_header_t Head;
};

/* 2844 */
struct _Xprocessor_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_flavor_t flavor;
  mach_msg_type_number_t processor_info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 2845 */
typedef __Reply__processor_info_t _Xprocessor_info::Reply;

/* 2846 */
struct __Reply__processor_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t host;
  NDR_record_t NDR;
  mach_msg_type_number_t processor_info_outCnt;
  integer_t processor_info_out[12];
};

/* 2847 */
typedef __Request__processor_info_t _Xprocessor_info::__Request;

/* 2848 */
struct __Request__processor_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_flavor_t flavor;
  mach_msg_type_number_t processor_info_outCnt;
};

/* 2849 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xprocessor_control::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t processor_cmdCnt;
  integer_t processor_cmd[12];
  mach_msg_trailer_t trailer;
};

/* 2850 */
typedef __Reply__processor_control_t _Xprocessor_control::Reply;

/* 2851 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2852 */
typedef __Request__processor_control_t _Xprocessor_control::__Request;

/* 2853 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__processor_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t processor_cmdCnt;
  integer_t processor_cmd[12];
};

/* 2854 */
struct _Xprocessor_assign::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_set;
  NDR_record_t NDR;
  boolean_t wait;
  mach_msg_trailer_t trailer;
};

/* 2855 */
typedef __Reply__processor_assign_t _Xprocessor_assign::Reply;

/* 2856 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_assign_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2857 */
typedef __Request__processor_assign_t _Xprocessor_assign::__Request;

/* 2858 */
struct __Request__processor_assign_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_set;
  NDR_record_t NDR;
  boolean_t wait;
};

/* 2859 */
struct _Xprocessor_get_assignment::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2860 */
typedef __Reply__processor_get_assignment_t _Xprocessor_get_assignment::Reply;

/* 2861 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_get_assignment_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;
};

/* 2862 */
typedef __Request__processor_get_assignment_t _Xprocessor_get_assignment::__Request;

/* 2863 */
struct __Request__processor_get_assignment_t
{
  mach_msg_header_t Head;
};

/* 2864 */
struct processor_set_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[10];
};

/* 2865 */
typedef __builtin_va_list va_list_92;

/* 2866 */
struct _Xprocessor_set_statistics::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_set_flavor_t flavor;
  mach_msg_type_number_t info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 2867 */
typedef int processor_set_flavor_t;

/* 2868 */
typedef __Reply__processor_set_statistics_t _Xprocessor_set_statistics::Reply;

/* 2869 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_statistics_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t info_outCnt;
  integer_t info_out[5];
};

/* 2870 */
typedef __Request__processor_set_statistics_t _Xprocessor_set_statistics::__Request;

/* 2871 */
struct __Request__processor_set_statistics_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_set_flavor_t flavor;
  mach_msg_type_number_t info_outCnt;
};

/* 2872 */
struct _Xprocessor_set_destroy::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2873 */
typedef __Reply__processor_set_destroy_t _Xprocessor_set_destroy::Reply;

/* 2874 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2875 */
typedef __Request__processor_set_destroy_t _Xprocessor_set_destroy::__Request;

/* 2876 */
struct __Request__processor_set_destroy_t
{
  mach_msg_header_t Head;
};

/* 2877 */
struct _Xprocessor_set_max_priority::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int max_priority;
  boolean_t change_threads;
  mach_msg_trailer_t trailer;
};

/* 2878 */
typedef __Reply__processor_set_max_priority_t _Xprocessor_set_max_priority::Reply;

/* 2879 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_max_priority_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2880 */
typedef __Request__processor_set_max_priority_t _Xprocessor_set_max_priority::__Request;

/* 2881 */
struct __Request__processor_set_max_priority_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int max_priority;
  boolean_t change_threads;
};

/* 2882 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xprocessor_set_policy_enable::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  mach_msg_trailer_t trailer;
};

/* 2883 */
typedef __Reply__processor_set_policy_enable_t _Xprocessor_set_policy_enable::Reply;

/* 2884 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_policy_enable_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2885 */
typedef __Request__processor_set_policy_enable_t _Xprocessor_set_policy_enable::__Request;

/* 2886 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__processor_set_policy_enable_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
};

/* 2887 */
struct _Xprocessor_set_policy_disable::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  boolean_t change_threads;
  mach_msg_trailer_t trailer;
};

/* 2888 */
typedef __Reply__processor_set_policy_disable_t _Xprocessor_set_policy_disable::Reply;

/* 2889 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_policy_disable_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2890 */
typedef __Request__processor_set_policy_disable_t _Xprocessor_set_policy_disable::__Request;

/* 2891 */
struct __Request__processor_set_policy_disable_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  boolean_t change_threads;
};

/* 2892 */
struct _Xprocessor_set_tasks::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2893 */
typedef __Reply__processor_set_tasks_t _Xprocessor_set_tasks::Reply;

/* 2894 */
struct __Reply__processor_set_tasks_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_ports_descriptor_t task_list;
  NDR_record_t NDR;
  mach_msg_type_number_t task_listCnt;
};

/* 2895 */
typedef __Request__processor_set_tasks_t _Xprocessor_set_tasks::__Request;

/* 2896 */
struct __Request__processor_set_tasks_t
{
  mach_msg_header_t Head;
};

/* 2897 */
struct _Xprocessor_set_threads::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2898 */
typedef __Reply__processor_set_threads_t _Xprocessor_set_threads::Reply;

/* 2899 */
struct __Reply__processor_set_threads_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_ports_descriptor_t thread_list;
  NDR_record_t NDR;
  mach_msg_type_number_t thread_listCnt;
};

/* 2900 */
typedef __Request__processor_set_threads_t _Xprocessor_set_threads::__Request;

/* 2901 */
struct __Request__processor_set_threads_t
{
  mach_msg_header_t Head;
};

/* 2902 */
struct _Xprocessor_set_policy_control::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_set_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[5];
  boolean_t change;
  mach_msg_trailer_t trailer;
};

/* 2903 */
typedef __Reply__processor_set_policy_control_t _Xprocessor_set_policy_control::Reply;

/* 2904 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_policy_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2905 */
typedef __Request__processor_set_policy_control_t _Xprocessor_set_policy_control::__Request;

/* 2906 */
struct __Request__processor_set_policy_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  processor_set_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[5];
  boolean_t change;
};

/* 2907 */
typedef __Request__processor_set_policy_control_t $<3059611,1>::__Request;

/* 2908 */
struct _Xprocessor_set_stack_usage::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2909 */
typedef __Reply__processor_set_stack_usage_t _Xprocessor_set_stack_usage::Reply;

/* 2910 */
struct __Reply__processor_set_stack_usage_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  unsigned int ltotal;
  vm_size_t space;
  vm_size_t resident;
  vm_size_t maxusage;
  vm_offset_t maxstack;
};

/* 2911 */
typedef __Request__processor_set_stack_usage_t _Xprocessor_set_stack_usage::__Request;

/* 2912 */
struct __Request__processor_set_stack_usage_t
{
  mach_msg_header_t Head;
};

/* 2913 */
struct _Xprocessor_set_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 2914 */
typedef __Reply__processor_set_info_t _Xprocessor_set_info::Reply;

/* 2915 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__processor_set_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t host;
  NDR_record_t NDR;
  mach_msg_type_number_t info_outCnt;
  integer_t info_out[5];
};

/* 2916 */
typedef __Request__processor_set_info_t _Xprocessor_set_info::__Request;

/* 2917 */
struct __Request__processor_set_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t info_outCnt;
};

/* 2918 */
struct task_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[52];
};

/* 2919 */
typedef __builtin_va_list va_list_93;

/* 2920 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_create::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t ledgers;
  NDR_record_t NDR;
  mach_msg_type_number_t ledgersCnt;
  boolean_t inherit_memory;
  mach_msg_trailer_t trailer;
};

/* 2921 */
typedef __Reply__task_create_t _Xtask_create::Reply;

/* 2922 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_create_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_task;
};

/* 2923 */
typedef __Request__task_create_t _Xtask_create::__Request;

/* 2924 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_create_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_ports_descriptor_t ledgers;
  NDR_record_t NDR;
  mach_msg_type_number_t ledgersCnt;
  boolean_t inherit_memory;
};

/* 2925 */
struct _Xtask_terminate::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2926 */
typedef __Reply__task_terminate_t _Xtask_terminate::Reply;

/* 2927 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_terminate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2928 */
typedef __Request__task_terminate_t _Xtask_terminate::__Request;

/* 2929 */
struct __Request__task_terminate_t
{
  mach_msg_header_t Head;
};

/* 2930 */
struct _Xtask_threads::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2931 */
typedef __Reply__task_threads_t _Xtask_threads::Reply;

/* 2932 */
struct __Reply__task_threads_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_ports_descriptor_t act_list;
  NDR_record_t NDR;
  mach_msg_type_number_t act_listCnt;
};

/* 2933 */
typedef __Request__task_threads_t _Xtask_threads::__Request;

/* 2934 */
struct __Request__task_threads_t
{
  mach_msg_header_t Head;
};

/* 2935 */
struct _Xmach_ports_register::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_ports_descriptor_t init_port_set;
  NDR_record_t NDR;
  mach_msg_type_number_t init_port_setCnt;
  mach_msg_trailer_t trailer;
};

/* 2936 */
typedef __Reply__mach_ports_register_t _Xmach_ports_register::Reply;

/* 2937 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__mach_ports_register_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2938 */
typedef __Request__mach_ports_register_t _Xmach_ports_register::__Request;

/* 2939 */
struct __Request__mach_ports_register_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_ports_descriptor_t init_port_set;
  NDR_record_t NDR;
  mach_msg_type_number_t init_port_setCnt;
};

/* 2940 */
struct _Xmach_ports_lookup::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2941 */
typedef __Reply__mach_ports_lookup_t _Xmach_ports_lookup::Reply;

/* 2942 */
struct __Reply__mach_ports_lookup_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_ports_descriptor_t init_port_set;
  NDR_record_t NDR;
  mach_msg_type_number_t init_port_setCnt;
};

/* 2943 */
typedef __Request__mach_ports_lookup_t _Xmach_ports_lookup::__Request;

/* 2944 */
struct __Request__mach_ports_lookup_t
{
  mach_msg_header_t Head;
};

/* 2945 */
struct _Xtask_info_from_user::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_flavor_t flavor;
  mach_msg_type_number_t task_info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 2946 */
typedef natural_t task_flavor_t;

/* 2947 */
typedef __Reply__task_info_from_user_t _Xtask_info_from_user::Reply;

/* 2948 */
struct __Reply__task_info_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[52];
};

/* 2949 */
typedef __Request__task_info_from_user_t _Xtask_info_from_user::__Request;

/* 2950 */
struct __Request__task_info_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_flavor_t flavor;
  mach_msg_type_number_t task_info_outCnt;
};

/* 2951 */
struct _Xtask_set_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_flavor_t flavor;
  mach_msg_type_number_t task_info_inCnt;
  integer_t task_info_in[52];
  mach_msg_trailer_t trailer;
};

/* 2952 */
typedef __Reply__task_set_info_t _Xtask_set_info::Reply;

/* 2953 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2954 */
typedef __Request__task_set_info_t _Xtask_set_info::__Request;

/* 2955 */
struct __Request__task_set_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_flavor_t flavor;
  mach_msg_type_number_t task_info_inCnt;
  integer_t task_info_in[52];
};

/* 2956 */
struct _Xtask_suspend::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2957 */
typedef __Reply__task_suspend_t _Xtask_suspend::Reply;

/* 2958 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_suspend_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2959 */
typedef __Request__task_suspend_t _Xtask_suspend::__Request;

/* 2960 */
struct __Request__task_suspend_t
{
  mach_msg_header_t Head;
};

/* 2961 */
struct _Xtask_resume::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2962 */
typedef __Reply__task_resume_t _Xtask_resume::Reply;

/* 2963 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_resume_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2964 */
typedef __Request__task_resume_t _Xtask_resume::__Request;

/* 2965 */
struct __Request__task_resume_t
{
  mach_msg_header_t Head;
};

/* 2966 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_get_special_port::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int which_port;
  mach_msg_trailer_t trailer;
};

/* 2967 */
typedef __Reply__task_get_special_port_t _Xtask_get_special_port::Reply;

/* 2968 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_get_special_port_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;
};

/* 2969 */
typedef __Request__task_get_special_port_t _Xtask_get_special_port::__Request;

/* 2970 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_get_special_port_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int which_port;
};

/* 2971 */
struct _Xtask_set_special_port::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t special_port;
  NDR_record_t NDR;
  int which_port;
  mach_msg_trailer_t trailer;
};

/* 2972 */
typedef __Reply__task_set_special_port_t _Xtask_set_special_port::Reply;

/* 2973 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_special_port_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2974 */
typedef __Request__task_set_special_port_t _Xtask_set_special_port::__Request;

/* 2975 */
struct __Request__task_set_special_port_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t special_port;
  NDR_record_t NDR;
  int which_port;
};

/* 2976 */
struct _Xthread_create_from_user::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 2977 */
typedef __Reply__thread_create_from_user_t _Xthread_create_from_user::Reply;

/* 2978 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_create_from_user_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_act;
};

/* 2979 */
typedef __Request__thread_create_from_user_t _Xthread_create_from_user::__Request;

/* 2980 */
struct __Request__thread_create_from_user_t
{
  mach_msg_header_t Head;
};

/* 2981 */
struct _Xthread_create_running_from_user::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
  mach_msg_trailer_t trailer;
};

/* 2982 */
typedef __Reply__thread_create_running_from_user_t _Xthread_create_running_from_user::Reply;

/* 2983 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_create_running_from_user_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t child_act;
};

/* 2984 */
typedef __Request__thread_create_running_from_user_t _Xthread_create_running_from_user::__Request;

/* 2985 */
struct __Request__thread_create_running_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
};

/* 2986 */
struct _Xtask_set_exception_ports::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
  mach_msg_trailer_t trailer;
};

/* 2987 */
typedef __Reply__task_set_exception_ports_t _Xtask_set_exception_ports::Reply;

/* 2988 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_exception_ports_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 2989 */
typedef __Request__task_set_exception_ports_t _Xtask_set_exception_ports::__Request;

/* 2990 */
struct __Request__task_set_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
};

/* 2991 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_get_exception_ports::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  mach_msg_trailer_t trailer;
};

/* 2992 */
typedef __Reply__task_get_exception_ports_t _Xtask_get_exception_ports::Reply;

/* 2993 */
struct __Reply__task_get_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t old_handlers[32];
  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
};

/* 2994 */
typedef __Request__task_get_exception_ports_t _Xtask_get_exception_ports::__Request;

/* 2995 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_get_exception_ports_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
};

/* 2996 */
struct _Xtask_swap_exception_ports::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
  mach_msg_trailer_t trailer;
};

/* 2997 */
typedef __Reply__task_swap_exception_ports_t _Xtask_swap_exception_ports::Reply;

/* 2998 */
struct __Reply__task_swap_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t old_handlerss[32];
  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
};

/* 2999 */
typedef __Request__task_swap_exception_ports_t _Xtask_swap_exception_ports::__Request;

/* 3000 */
struct __Request__task_swap_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
};

/* 3001 */
struct _Xlock_set_create::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int n_ulocks;
  int policy;
  mach_msg_trailer_t trailer;
};

/* 3002 */
typedef __Reply__lock_set_create_t _Xlock_set_create::Reply;

/* 3003 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lock_set_create_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_lock_set;
};

/* 3004 */
typedef __Request__lock_set_create_t _Xlock_set_create::__Request;

/* 3005 */
struct __Request__lock_set_create_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int n_ulocks;
  int policy;
};

/* 3006 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xlock_set_destroy::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t lock_set;
  mach_msg_trailer_t trailer;
};

/* 3007 */
typedef __Reply__lock_set_destroy_t _Xlock_set_destroy::Reply;

/* 3008 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__lock_set_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3009 */
typedef __Request__lock_set_destroy_t _Xlock_set_destroy::__Request;

/* 3010 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__lock_set_destroy_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t lock_set;
};

/* 3011 */
struct _Xsemaphore_create::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  int value;
  mach_msg_trailer_t trailer;
};

/* 3012 */
typedef __Reply__semaphore_create_t _Xsemaphore_create::Reply;

/* 3013 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__semaphore_create_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t semaphore;
};

/* 3014 */
typedef __Request__semaphore_create_t _Xsemaphore_create::__Request;

/* 3015 */
struct __Request__semaphore_create_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int policy;
  int value;
};

/* 3016 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xsemaphore_destroy::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t semaphore;
  mach_msg_trailer_t trailer;
};

/* 3017 */
typedef __Reply__semaphore_destroy_t _Xsemaphore_destroy::Reply;

/* 3018 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__semaphore_destroy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3019 */
typedef __Request__semaphore_destroy_t _Xsemaphore_destroy::__Request;

/* 3020 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__semaphore_destroy_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t semaphore;
};

/* 3021 */
struct _Xtask_policy_set::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
  mach_msg_trailer_t trailer;
};

/* 3022 */
typedef natural_t task_policy_flavor_t;

/* 3023 */
typedef __Reply__task_policy_set_t _Xtask_policy_set::Reply;

/* 3024 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_policy_set_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3025 */
typedef __Request__task_policy_set_t _Xtask_policy_set::__Request;

/* 3026 */
struct __Request__task_policy_set_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
};

/* 3027 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_policy_get::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  boolean_t get_default;
  mach_msg_trailer_t trailer;
};

/* 3028 */
typedef __Reply__task_policy_get_t _Xtask_policy_get::Reply;

/* 3029 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_policy_get_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
  boolean_t get_default;
};

/* 3030 */
typedef __Request__task_policy_get_t _Xtask_policy_get::__Request;

/* 3031 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_policy_get_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  boolean_t get_default;
};

/* 3032 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_policy::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  boolean_t set_limit;
  boolean_t change;
  mach_msg_trailer_t trailer;
};

/* 3033 */
typedef __Reply__task_policy_t _Xtask_policy::Reply;

/* 3034 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_policy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3035 */
typedef __Request__task_policy_t _Xtask_policy::__Request;

/* 3036 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_policy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  boolean_t set_limit;
  boolean_t change;
};

/* 3037 */
typedef __Request__task_policy_t $<3099590,1>::__Request;

/* 3038 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_set_emulation::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t routine_entry_pt;
  int routine_number;
  mach_msg_trailer_t trailer;
};

/* 3039 */
typedef __Reply__task_set_emulation_t _Xtask_set_emulation::Reply;

/* 3040 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_emulation_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3041 */
typedef __Request__task_set_emulation_t _Xtask_set_emulation::__Request;

/* 3042 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_set_emulation_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t routine_entry_pt;
  int routine_number;
};

/* 3043 */
struct _Xtask_get_emulation_vector::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3044 */
typedef __Reply__task_get_emulation_vector_t _Xtask_get_emulation_vector::Reply;

/* 3045 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_get_emulation_vector_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t emulation_vector;
  NDR_record_t NDR;
  int vector_start;
  mach_msg_type_number_t emulation_vectorCnt;
};

/* 3046 */
typedef __Request__task_get_emulation_vector_t _Xtask_get_emulation_vector::__Request;

/* 3047 */
struct __Request__task_get_emulation_vector_t
{
  mach_msg_header_t Head;
};

/* 3048 */
typedef mach_vm_offset_t *emulation_vector_t;

/* 3049 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_set_emulation_vector::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t emulation_vector;
  NDR_record_t NDR;
  int vector_start;
  mach_msg_type_number_t emulation_vectorCnt;
  mach_msg_trailer_t trailer;
};

/* 3050 */
typedef __Reply__task_set_emulation_vector_t _Xtask_set_emulation_vector::Reply;

/* 3051 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_emulation_vector_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3052 */
typedef __Request__task_set_emulation_vector_t _Xtask_set_emulation_vector::__Request;

/* 3053 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_set_emulation_vector_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t emulation_vector;
  NDR_record_t NDR;
  int vector_start;
  mach_msg_type_number_t emulation_vectorCnt;
};

/* 3054 */
struct _Xtask_set_ras_pc::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t basepc;
  vm_address_t boundspc;
  mach_msg_trailer_t trailer;
};

/* 3055 */
typedef __Reply__task_set_ras_pc_t _Xtask_set_ras_pc::Reply;

/* 3056 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_ras_pc_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3057 */
typedef __Request__task_set_ras_pc_t _Xtask_set_ras_pc::__Request;

/* 3058 */
struct __Request__task_set_ras_pc_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm_address_t basepc;
  vm_address_t boundspc;
};

/* 3059 */
struct _Xtask_zone_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3060 */
typedef __Reply__task_zone_info_t _Xtask_zone_info::Reply;

/* 3061 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_zone_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t names;
  mach_msg_ool_descriptor_t info;
  NDR_record_t NDR;
  mach_msg_type_number_t namesCnt;
  mach_msg_type_number_t infoCnt;
};

/* 3062 */
typedef __Request__task_zone_info_t _Xtask_zone_info::__Request;

/* 3063 */
struct __Request__task_zone_info_t
{
  mach_msg_header_t Head;
};

/* 3064 */
struct _Xtask_assign::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_set;
  NDR_record_t NDR;
  boolean_t assign_threads;
  mach_msg_trailer_t trailer;
};

/* 3065 */
typedef __Reply__task_assign_t _Xtask_assign::Reply;

/* 3066 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_assign_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3067 */
typedef __Request__task_assign_t _Xtask_assign::__Request;

/* 3068 */
struct __Request__task_assign_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_set;
  NDR_record_t NDR;
  boolean_t assign_threads;
};

/* 3069 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_assign_default::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t assign_threads;
  mach_msg_trailer_t trailer;
};

/* 3070 */
typedef __Reply__task_assign_default_t _Xtask_assign_default::Reply;

/* 3071 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_assign_default_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3072 */
typedef __Request__task_assign_default_t _Xtask_assign_default::__Request;

/* 3073 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_assign_default_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t assign_threads;
};

/* 3074 */
struct _Xtask_get_assignment::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3075 */
typedef __Reply__task_get_assignment_t _Xtask_get_assignment::Reply;

/* 3076 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_get_assignment_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;
};

/* 3077 */
typedef __Request__task_get_assignment_t _Xtask_get_assignment::__Request;

/* 3078 */
struct __Request__task_get_assignment_t
{
  mach_msg_header_t Head;
};

/* 3079 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_set_policy::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pset;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  mach_msg_type_number_t limitCnt;
  integer_t limit[1];
  boolean_t change;
  mach_msg_trailer_t trailer;
};

/* 3080 */
typedef __Reply__task_set_policy_t _Xtask_set_policy::Reply;

/* 3081 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_policy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3082 */
typedef __Request__task_set_policy_t _Xtask_set_policy::__Request;

/* 3083 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_set_policy_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t pset;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  mach_msg_type_number_t limitCnt;
  integer_t limit[1];
  boolean_t change;
};

/* 3084 */
typedef __Request__task_set_policy_t $<3106234,1>::__Request;

/* 3085 */
struct _Xtask_get_state::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t old_stateCnt;
  mach_msg_trailer_t trailer;
};

/* 3086 */
typedef __Reply__task_get_state_t _Xtask_get_state::Reply;

/* 3087 */
struct __Reply__task_get_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 3088 */
typedef __Request__task_get_state_t _Xtask_get_state::__Request;

/* 3089 */
struct __Request__task_get_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t old_stateCnt;
};

/* 3090 */
struct _Xtask_set_state::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
  mach_msg_trailer_t trailer;
};

/* 3091 */
typedef __Reply__task_set_state_t _Xtask_set_state::Reply;

/* 3092 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3093 */
typedef __Request__task_set_state_t _Xtask_set_state::__Request;

/* 3094 */
struct __Request__task_set_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
};

/* 3095 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_set_phys_footprint_limit::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int new_limit;
  mach_msg_trailer_t trailer;
};

/* 3096 */
typedef __Reply__task_set_phys_footprint_limit_t _Xtask_set_phys_footprint_limit::Reply;

/* 3097 */
struct __Reply__task_set_phys_footprint_limit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int old_limit;
};

/* 3098 */
typedef __Request__task_set_phys_footprint_limit_t _Xtask_set_phys_footprint_limit::__Request;

/* 3099 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_set_phys_footprint_limit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int new_limit;
};

/* 3100 */
struct _Xtask_suspend2::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3101 */
typedef __Reply__task_suspend2_t _Xtask_suspend2::Reply;

/* 3102 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_suspend2_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t suspend_token;
};

/* 3103 */
typedef __Request__task_suspend2_t _Xtask_suspend2::__Request;

/* 3104 */
struct __Request__task_suspend2_t
{
  mach_msg_header_t Head;
};

/* 3105 */
struct _Xtask_resume2::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3106 */
typedef __Reply__task_resume2_t _Xtask_resume2::Reply;

/* 3107 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_resume2_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3108 */
typedef __Request__task_resume2_t _Xtask_resume2::__Request;

/* 3109 */
struct __Request__task_resume2_t
{
  mach_msg_header_t Head;
};

/* 3110 */
struct _Xtask_purgable_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3111 */
typedef __Reply__task_purgable_info_t _Xtask_purgable_info::Reply;

/* 3112 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_purgable_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  task_purgable_info_t stats;
};

/* 3113 */
typedef __Request__task_purgable_info_t _Xtask_purgable_info::__Request;

/* 3114 */
struct __Request__task_purgable_info_t
{
  mach_msg_header_t Head;
};

/* 3115 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_get_mach_voucher::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_selector_t which;
  mach_msg_trailer_t trailer;
};

/* 3116 */
typedef uint32_t_0 mach_voucher_selector_t;

/* 3117 */
typedef __Reply__task_get_mach_voucher_t _Xtask_get_mach_voucher::Reply;

/* 3118 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_get_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;
};

/* 3119 */
typedef __Request__task_get_mach_voucher_t _Xtask_get_mach_voucher::__Request;

/* 3120 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_get_mach_voucher_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_selector_t which;
};

/* 3121 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_set_mach_voucher::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;
  mach_msg_trailer_t trailer;
};

/* 3122 */
typedef __Reply__task_set_mach_voucher_t _Xtask_set_mach_voucher::Reply;

/* 3123 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_set_mach_voucher_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3124 */
typedef __Request__task_set_mach_voucher_t _Xtask_set_mach_voucher::__Request;

/* 3125 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_set_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;
};

/* 3126 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_swap_mach_voucher::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_voucher;
  mach_msg_port_descriptor_t old_voucher;
  mach_msg_trailer_t trailer;
};

/* 3127 */
typedef __Reply__task_swap_mach_voucher_t _Xtask_swap_mach_voucher::Reply;

/* 3128 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_swap_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_voucher;
};

/* 3129 */
typedef __Request__task_swap_mach_voucher_t _Xtask_swap_mach_voucher::__Request;

/* 3130 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_swap_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_voucher;
  mach_msg_port_descriptor_t old_voucher;
};

/* 3131 */
struct _Xtask_generate_corpse::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3132 */
typedef __Reply__task_generate_corpse_t _Xtask_generate_corpse::Reply;

/* 3133 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_generate_corpse_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t corpse_task_port;
};

/* 3134 */
typedef __Request__task_generate_corpse_t _Xtask_generate_corpse::__Request;

/* 3135 */
struct __Request__task_generate_corpse_t
{
  mach_msg_header_t Head;
};

/* 3136 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_map_corpse_info::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t corspe_task;
  mach_msg_trailer_t trailer;
};

/* 3137 */
typedef __Reply__task_map_corpse_info_t _Xtask_map_corpse_info::Reply;

/* 3138 */
struct __Reply__task_map_corpse_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  __attribute__((packed)) __attribute__((aligned(1))) vm_address_t kcd_addr_begin;
  uint32_t_0 kcd_size;
};

/* 3139 */
typedef __Request__task_map_corpse_info_t _Xtask_map_corpse_info::__Request;

/* 3140 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_map_corpse_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t corspe_task;
};

/* 3141 */
struct _Xtask_register_dyld_image_infos::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t dyld_images;
  NDR_record_t NDR;
  mach_msg_type_number_t dyld_imagesCnt;
  mach_msg_trailer_t trailer;
};

/* 3142 */
typedef __Reply__task_register_dyld_image_infos_t _Xtask_register_dyld_image_infos::Reply;

/* 3143 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_register_dyld_image_infos_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3144 */
typedef __Request__task_register_dyld_image_infos_t _Xtask_register_dyld_image_infos::__Request;

/* 3145 */
struct __Request__task_register_dyld_image_infos_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t dyld_images;
  NDR_record_t NDR;
  mach_msg_type_number_t dyld_imagesCnt;
};

/* 3146 */
struct _Xtask_unregister_dyld_image_infos::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t dyld_images;
  NDR_record_t NDR;
  mach_msg_type_number_t dyld_imagesCnt;
  mach_msg_trailer_t trailer;
};

/* 3147 */
typedef __Reply__task_unregister_dyld_image_infos_t _Xtask_unregister_dyld_image_infos::Reply;

/* 3148 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_unregister_dyld_image_infos_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3149 */
typedef __Request__task_unregister_dyld_image_infos_t _Xtask_unregister_dyld_image_infos::__Request;

/* 3150 */
struct __Request__task_unregister_dyld_image_infos_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t dyld_images;
  NDR_record_t NDR;
  mach_msg_type_number_t dyld_imagesCnt;
};

/* 3151 */
struct _Xtask_get_dyld_image_infos::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3152 */
typedef __Reply__task_get_dyld_image_infos_t _Xtask_get_dyld_image_infos::Reply;

/* 3153 */
struct __Reply__task_get_dyld_image_infos_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t dyld_images;
  NDR_record_t NDR;
  mach_msg_type_number_t dyld_imagesCnt;
};

/* 3154 */
typedef __Request__task_get_dyld_image_infos_t _Xtask_get_dyld_image_infos::__Request;

/* 3155 */
struct __Request__task_get_dyld_image_infos_t
{
  mach_msg_header_t Head;
};

/* 3156 */
struct _Xtask_register_dyld_shared_cache_image_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  dyld_kernel_image_info_t dyld_cache_image;
  boolean_t no_cache;
  boolean_t private_cache;
  mach_msg_trailer_t trailer;
};

/* 3157 */
typedef __Reply__task_register_dyld_shared_cache_image_info_t _Xtask_register_dyld_shared_cache_image_info::Reply;

/* 3158 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_register_dyld_shared_cache_image_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3159 */
typedef __Request__task_register_dyld_shared_cache_image_info_t _Xtask_register_dyld_shared_cache_image_info::__Request;

/* 3160 */
struct __Request__task_register_dyld_shared_cache_image_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  dyld_kernel_image_info_t dyld_cache_image;
  boolean_t no_cache;
  boolean_t private_cache;
};

/* 3161 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_register_dyld_set_dyld_state::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint8_t_0 dyld_state;
  char dyld_statePad[3];
  mach_msg_trailer_t trailer;
};

/* 3162 */
typedef __Reply__task_register_dyld_set_dyld_state_t _Xtask_register_dyld_set_dyld_state::Reply;

/* 3163 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_register_dyld_set_dyld_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3164 */
typedef __Request__task_register_dyld_set_dyld_state_t _Xtask_register_dyld_set_dyld_state::__Request;

/* 3165 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_register_dyld_set_dyld_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint8_t_0 dyld_state;
  char dyld_statePad[3];
};

/* 3166 */
struct _Xtask_register_dyld_get_process_state::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3167 */
typedef __Reply__task_register_dyld_get_process_state_t _Xtask_register_dyld_get_process_state::Reply;

/* 3168 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_register_dyld_get_process_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  dyld_kernel_process_info_t dyld_process_state;
};

/* 3169 */
typedef __Request__task_register_dyld_get_process_state_t _Xtask_register_dyld_get_process_state::__Request;

/* 3170 */
struct __Request__task_register_dyld_get_process_state_t
{
  mach_msg_header_t Head;
};

/* 3171 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xtask_map_corpse_info_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t corspe_task;
  mach_msg_trailer_t trailer;
};

/* 3172 */
typedef __Reply__task_map_corpse_info_64_t _Xtask_map_corpse_info_64::Reply;

/* 3173 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__task_map_corpse_info_64_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t kcd_addr_begin;
  mach_vm_size_t kcd_size;
};

/* 3174 */
typedef __Request__task_map_corpse_info_64_t _Xtask_map_corpse_info_64::__Request;

/* 3175 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__task_map_corpse_info_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t corspe_task;
};

/* 3176 */
struct _Xtask_inspect::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_inspect_flavor_t flavor;
  mach_msg_type_number_t info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 3177 */
typedef natural_t task_inspect_flavor_t;

/* 3178 */
typedef __Reply__task_inspect_t _Xtask_inspect::Reply;

/* 3179 */
struct __Reply__task_inspect_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t info_outCnt;
  integer_t info_out[4];
};

/* 3180 */
typedef __Request__task_inspect_t _Xtask_inspect::__Request;

/* 3181 */
struct __Request__task_inspect_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  task_inspect_flavor_t flavor;
  mach_msg_type_number_t info_outCnt;
};

/* 3182 */
struct thread_act_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[28];
};

/* 3183 */
typedef __builtin_va_list va_list_94;

/* 3184 */
struct _Xthread_terminate::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3185 */
typedef __Reply__thread_terminate_t _Xthread_terminate::Reply;

/* 3186 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_terminate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3187 */
typedef __Request__thread_terminate_t _Xthread_terminate::__Request;

/* 3188 */
struct __Request__thread_terminate_t
{
  mach_msg_header_t Head;
};

/* 3189 */
struct _Xact_get_state_to_user::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t old_stateCnt;
  mach_msg_trailer_t trailer;
};

/* 3190 */
typedef __Reply__act_get_state_to_user_t _Xact_get_state_to_user::Reply;

/* 3191 */
struct __Reply__act_get_state_to_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 3192 */
typedef __Request__act_get_state_to_user_t _Xact_get_state_to_user::__Request;

/* 3193 */
struct __Request__act_get_state_to_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t old_stateCnt;
};

/* 3194 */
struct _Xact_set_state_from_user::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
  mach_msg_trailer_t trailer;
};

/* 3195 */
typedef __Reply__act_set_state_from_user_t _Xact_set_state_from_user::Reply;

/* 3196 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__act_set_state_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3197 */
typedef __Request__act_set_state_from_user_t _Xact_set_state_from_user::__Request;

/* 3198 */
struct __Request__act_set_state_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
};

/* 3199 */
struct _Xthread_get_state_to_user::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t old_stateCnt;
  mach_msg_trailer_t trailer;
};

/* 3200 */
typedef __Reply__thread_get_state_to_user_t _Xthread_get_state_to_user::Reply;

/* 3201 */
struct __Reply__thread_get_state_to_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t old_stateCnt;
  natural_t old_state[614];
};

/* 3202 */
typedef __Request__thread_get_state_to_user_t _Xthread_get_state_to_user::__Request;

/* 3203 */
struct __Request__thread_get_state_to_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t old_stateCnt;
};

/* 3204 */
struct _Xthread_set_state_from_user::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
  mach_msg_trailer_t trailer;
};

/* 3205 */
typedef __Reply__thread_set_state_from_user_t _Xthread_set_state_from_user::Reply;

/* 3206 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_set_state_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3207 */
typedef __Request__thread_set_state_from_user_t _Xthread_set_state_from_user::__Request;

/* 3208 */
struct __Request__thread_set_state_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_state_flavor_t flavor;
  mach_msg_type_number_t new_stateCnt;
  natural_t new_state[614];
};

/* 3209 */
struct _Xthread_suspend::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3210 */
typedef __Reply__thread_suspend_t _Xthread_suspend::Reply;

/* 3211 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_suspend_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3212 */
typedef __Request__thread_suspend_t _Xthread_suspend::__Request;

/* 3213 */
struct __Request__thread_suspend_t
{
  mach_msg_header_t Head;
};

/* 3214 */
struct _Xthread_resume::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3215 */
typedef __Reply__thread_resume_t _Xthread_resume::Reply;

/* 3216 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_resume_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3217 */
typedef __Request__thread_resume_t _Xthread_resume::__Request;

/* 3218 */
struct __Request__thread_resume_t
{
  mach_msg_header_t Head;
};

/* 3219 */
struct _Xthread_abort::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3220 */
typedef __Reply__thread_abort_t _Xthread_abort::Reply;

/* 3221 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_abort_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3222 */
typedef __Request__thread_abort_t _Xthread_abort::__Request;

/* 3223 */
struct __Request__thread_abort_t
{
  mach_msg_header_t Head;
};

/* 3224 */
struct _Xthread_abort_safely::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3225 */
typedef __Reply__thread_abort_safely_t _Xthread_abort_safely::Reply;

/* 3226 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_abort_safely_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3227 */
typedef __Request__thread_abort_safely_t _Xthread_abort_safely::__Request;

/* 3228 */
struct __Request__thread_abort_safely_t
{
  mach_msg_header_t Head;
};

/* 3229 */
struct _Xthread_depress_abort_from_user::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3230 */
typedef __Reply__thread_depress_abort_from_user_t _Xthread_depress_abort_from_user::Reply;

/* 3231 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_depress_abort_from_user_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3232 */
typedef __Request__thread_depress_abort_from_user_t _Xthread_depress_abort_from_user::__Request;

/* 3233 */
struct __Request__thread_depress_abort_from_user_t
{
  mach_msg_header_t Head;
};

/* 3234 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xthread_get_special_port::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int which_port;
  mach_msg_trailer_t trailer;
};

/* 3235 */
typedef __Reply__thread_get_special_port_t _Xthread_get_special_port::Reply;

/* 3236 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_get_special_port_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t special_port;
};

/* 3237 */
typedef __Request__thread_get_special_port_t _Xthread_get_special_port::__Request;

/* 3238 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__thread_get_special_port_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  int which_port;
};

/* 3239 */
struct _Xthread_set_special_port::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t special_port;
  NDR_record_t NDR;
  int which_port;
  mach_msg_trailer_t trailer;
};

/* 3240 */
typedef __Reply__thread_set_special_port_t _Xthread_set_special_port::Reply;

/* 3241 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_set_special_port_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3242 */
typedef __Request__thread_set_special_port_t _Xthread_set_special_port::__Request;

/* 3243 */
struct __Request__thread_set_special_port_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t special_port;
  NDR_record_t NDR;
  int which_port;
};

/* 3244 */
struct _Xthread_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_flavor_t flavor;
  mach_msg_type_number_t thread_info_outCnt;
  mach_msg_trailer_t trailer;
};

/* 3245 */
typedef natural_t thread_flavor_t;

/* 3246 */
typedef __Reply__thread_info_t _Xthread_info::Reply;

/* 3247 */
struct __Reply__thread_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[32];
};

/* 3248 */
typedef __Request__thread_info_t _Xthread_info::__Request;

/* 3249 */
struct __Request__thread_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_flavor_t flavor;
  mach_msg_type_number_t thread_info_outCnt;
};

/* 3250 */
struct _Xthread_set_exception_ports::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
  mach_msg_trailer_t trailer;
};

/* 3251 */
typedef __Reply__thread_set_exception_ports_t _Xthread_set_exception_ports::Reply;

/* 3252 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_set_exception_ports_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3253 */
typedef __Request__thread_set_exception_ports_t _Xthread_set_exception_ports::__Request;

/* 3254 */
struct __Request__thread_set_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
};

/* 3255 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xthread_get_exception_ports::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  mach_msg_trailer_t trailer;
};

/* 3256 */
typedef __Reply__thread_get_exception_ports_t _Xthread_get_exception_ports::Reply;

/* 3257 */
struct __Reply__thread_get_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t old_handlers[32];
  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
};

/* 3258 */
typedef __Request__thread_get_exception_ports_t _Xthread_get_exception_ports::__Request;

/* 3259 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__thread_get_exception_ports_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
};

/* 3260 */
struct _Xthread_swap_exception_ports::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
  mach_msg_trailer_t trailer;
};

/* 3261 */
typedef __Reply__thread_swap_exception_ports_t _Xthread_swap_exception_ports::Reply;

/* 3262 */
struct __Reply__thread_swap_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t old_handlers[32];
  NDR_record_t NDR;
  mach_msg_type_number_t masksCnt;
  exception_mask_t masks[32];
  exception_behavior_t old_behaviors[32];
  thread_state_flavor_t old_flavors[32];
};

/* 3263 */
typedef __Request__thread_swap_exception_ports_t _Xthread_swap_exception_ports::__Request;

/* 3264 */
struct __Request__thread_swap_exception_ports_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t new_port;
  NDR_record_t NDR;
  exception_mask_t exception_mask;
  exception_behavior_t behavior;
  thread_state_flavor_t new_flavor;
};

/* 3265 */
struct _Xthread_policy::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  boolean_t set_limit;
  mach_msg_trailer_t trailer;
};

/* 3266 */
typedef __Reply__thread_policy_t _Xthread_policy::Reply;

/* 3267 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_policy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3268 */
typedef __Request__thread_policy_t _Xthread_policy::__Request;

/* 3269 */
struct __Request__thread_policy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  boolean_t set_limit;
};

/* 3270 */
typedef __Request__thread_policy_t $<3156310,1>::__Request;

/* 3271 */
struct _Xthread_policy_set::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
  mach_msg_trailer_t trailer;
};

/* 3272 */
typedef natural_t thread_policy_flavor_t;

/* 3273 */
typedef __Reply__thread_policy_set_t _Xthread_policy_set::Reply;

/* 3274 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_policy_set_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3275 */
typedef __Request__thread_policy_set_t _Xthread_policy_set::__Request;

/* 3276 */
struct __Request__thread_policy_set_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
};

/* 3277 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xthread_policy_get::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  boolean_t get_default;
  mach_msg_trailer_t trailer;
};

/* 3278 */
typedef __Reply__thread_policy_get_t _Xthread_policy_get::Reply;

/* 3279 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_policy_get_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t policy_infoCnt;
  integer_t policy_info[16];
  boolean_t get_default;
};

/* 3280 */
typedef __Request__thread_policy_get_t _Xthread_policy_get::__Request;

/* 3281 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__thread_policy_get_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  thread_policy_flavor_t flavor;
  mach_msg_type_number_t policy_infoCnt;
  boolean_t get_default;
};

/* 3282 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xthread_assign::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;
  mach_msg_trailer_t trailer;
};

/* 3283 */
typedef __Reply__thread_assign_t _Xthread_assign::Reply;

/* 3284 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_assign_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3285 */
typedef __Request__thread_assign_t _Xthread_assign::__Request;

/* 3286 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__thread_assign_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_set;
};

/* 3287 */
struct _Xthread_assign_default::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3288 */
typedef __Reply__thread_assign_default_t _Xthread_assign_default::Reply;

/* 3289 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_assign_default_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3290 */
typedef __Request__thread_assign_default_t _Xthread_assign_default::__Request;

/* 3291 */
struct __Request__thread_assign_default_t
{
  mach_msg_header_t Head;
};

/* 3292 */
struct _Xthread_get_assignment::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3293 */
typedef __Reply__thread_get_assignment_t _Xthread_get_assignment::Reply;

/* 3294 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_get_assignment_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t assigned_set;
};

/* 3295 */
typedef __Request__thread_get_assignment_t _Xthread_get_assignment::__Request;

/* 3296 */
struct __Request__thread_get_assignment_t
{
  mach_msg_header_t Head;
};

/* 3297 */
struct _Xthread_set_policy::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t pset;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  mach_msg_type_number_t limitCnt;
  integer_t limit[1];
  mach_msg_trailer_t trailer;
};

/* 3298 */
typedef __Reply__thread_set_policy_t _Xthread_set_policy::Reply;

/* 3299 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_set_policy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3300 */
typedef __Request__thread_set_policy_t _Xthread_set_policy::__Request;

/* 3301 */
struct __Request__thread_set_policy_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t pset;
  NDR_record_t NDR;
  policy_t policy;
  mach_msg_type_number_t baseCnt;
  integer_t base[5];
  mach_msg_type_number_t limitCnt;
  integer_t limit[1];
};

/* 3302 */
typedef __Request__thread_set_policy_t $<3161421,1>::__Request;

/* 3303 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xthread_get_mach_voucher::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_selector_t which;
  mach_msg_trailer_t trailer;
};

/* 3304 */
typedef __Reply__thread_get_mach_voucher_t _Xthread_get_mach_voucher::Reply;

/* 3305 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_get_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;
};

/* 3306 */
typedef __Request__thread_get_mach_voucher_t _Xthread_get_mach_voucher::__Request;

/* 3307 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__thread_get_mach_voucher_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_voucher_selector_t which;
};

/* 3308 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xthread_set_mach_voucher::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;
  mach_msg_trailer_t trailer;
};

/* 3309 */
typedef __Reply__thread_set_mach_voucher_t _Xthread_set_mach_voucher::Reply;

/* 3310 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_set_mach_voucher_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3311 */
typedef __Request__thread_set_mach_voucher_t _Xthread_set_mach_voucher::__Request;

/* 3312 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__thread_set_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t voucher;
};

/* 3313 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xthread_swap_mach_voucher::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_voucher;
  mach_msg_port_descriptor_t old_voucher;
  mach_msg_trailer_t trailer;
};

/* 3314 */
typedef __Reply__thread_swap_mach_voucher_t _Xthread_swap_mach_voucher::Reply;

/* 3315 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__thread_swap_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t old_voucher;
};

/* 3316 */
typedef __Request__thread_swap_mach_voucher_t _Xthread_swap_mach_voucher::__Request;

/* 3317 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__thread_swap_mach_voucher_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t new_voucher;
  mach_msg_port_descriptor_t old_voucher;
};

/* 3318 */
struct vm32_map_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[32];
};

/* 3319 */
typedef __builtin_va_list va_list_95;

/* 3320 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xregion::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
  mach_msg_trailer_t trailer;
};

/* 3321 */
typedef uint32_t_0 vm32_address_t;

/* 3322 */
typedef __Reply__region_t _Xregion::Reply;

/* 3323 */
struct __Reply__region_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t object_name;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[10];
};

/* 3324 */
typedef uint32_t_0 vm32_size_t;

/* 3325 */
typedef __Request__region_t _Xregion::__Request;

/* 3326 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__region_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
};

/* 3327 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xallocate::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  int flags;
  mach_msg_trailer_t trailer;
};

/* 3328 */
typedef __Reply__allocate_t _Xallocate::Reply;

/* 3329 */
struct __Reply__allocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm32_address_t address;
};

/* 3330 */
typedef __Request__allocate_t _Xallocate::__Request;

/* 3331 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__allocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  int flags;
};

/* 3332 */
struct _Xdeallocate::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  mach_msg_trailer_t trailer;
};

/* 3333 */
typedef __Reply__deallocate_t _Xdeallocate::Reply;

/* 3334 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__deallocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3335 */
typedef __Request__deallocate_t _Xdeallocate::__Request;

/* 3336 */
struct __Request__deallocate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
};

/* 3337 */
struct _Xprotect::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  boolean_t set_maximum;
  vm_prot_t new_protection;
  mach_msg_trailer_t trailer;
};

/* 3338 */
typedef __Reply__protect_t _Xprotect::Reply;

/* 3339 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__protect_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3340 */
typedef __Request__protect_t _Xprotect::__Request;

/* 3341 */
struct __Request__protect_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  boolean_t set_maximum;
  vm_prot_t new_protection;
};

/* 3342 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xinherit::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm_inherit_t new_inheritance;
  mach_msg_trailer_t trailer;
};

/* 3343 */
typedef __Reply__inherit_t _Xinherit::Reply;

/* 3344 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__inherit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3345 */
typedef __Request__inherit_t _Xinherit::__Request;

/* 3346 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__inherit_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm_inherit_t new_inheritance;
};

/* 3347 */
struct _Xread::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  mach_msg_trailer_t trailer;
};

/* 3348 */
typedef __Reply__read_t _Xread::Reply;

/* 3349 */
struct __Reply__read_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  mach_msg_type_number_t dataCnt;
};

/* 3350 */
typedef __Request__read_t _Xread::__Request;

/* 3351 */
struct __Request__read_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
};

/* 3352 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xread_list::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_read_entry_t data_list;
  natural_t count;
  mach_msg_trailer_t trailer;
};

/* 3353 */
typedef vm32_read_entry vm32_read_entry_t[256];

/* 3354 */
struct vm32_read_entry
{
  vm32_address_t address;
  vm32_size_t size;
};

/* 3355 */
typedef __Reply__read_list_t _Xread_list::Reply;

/* 3356 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__read_list_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm32_read_entry_t data_list;
};

/* 3357 */
typedef __Request__read_list_t _Xread_list::__Request;

/* 3358 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__read_list_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_read_entry_t data_list;
  natural_t count;
};

/* 3359 */
typedef _Xread_list::$8194EB1D7888BC7E8C03198B7A33B84A *_Xread_list::sp;

/* 3360 */
struct _Xread_list::$8194EB1D7888BC7E8C03198B7A33B84A
{
  char data[2048];
};

/* 3361 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xwrite::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  vm32_address_t address;
  mach_msg_type_number_t dataCnt;
  mach_msg_trailer_t trailer;
};

/* 3362 */
typedef __Reply__write_t _Xwrite::Reply;

/* 3363 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__write_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3364 */
typedef __Request__write_t _Xwrite::__Request;

/* 3365 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__write_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t data;
  NDR_record_t NDR;
  vm32_address_t address;
  mach_msg_type_number_t dataCnt;
};

/* 3366 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xcopy::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t source_address;
  vm32_size_t size;
  vm32_address_t dest_address;
  mach_msg_trailer_t trailer;
};

/* 3367 */
typedef __Reply__copy_t _Xcopy::Reply;

/* 3368 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__copy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3369 */
typedef __Request__copy_t _Xcopy::__Request;

/* 3370 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__copy_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t source_address;
  vm32_size_t size;
  vm32_address_t dest_address;
};

/* 3371 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xread_overwrite::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm32_address_t data;
  mach_msg_trailer_t trailer;
};

/* 3372 */
typedef __Reply__read_overwrite_t _Xread_overwrite::Reply;

/* 3373 */
struct __Reply__read_overwrite_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm32_size_t outsize;
};

/* 3374 */
typedef __Request__read_overwrite_t _Xread_overwrite::__Request;

/* 3375 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__read_overwrite_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm32_address_t data;
};

/* 3376 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmsync::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm_sync_t sync_flags;
  mach_msg_trailer_t trailer;
};

/* 3377 */
typedef __Reply__msync_t _Xmsync::Reply;

/* 3378 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__msync_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3379 */
typedef __Request__msync_t _Xmsync::__Request;

/* 3380 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__msync_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm_sync_t sync_flags;
};

/* 3381 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xbehavior_set::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm_behavior_t new_behavior;
  mach_msg_trailer_t trailer;
};

/* 3382 */
typedef __Reply__behavior_set_t _Xbehavior_set::Reply;

/* 3383 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__behavior_set_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3384 */
typedef __Request__behavior_set_t _Xbehavior_set::__Request;

/* 3385 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__behavior_set_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm_behavior_t new_behavior;
};

/* 3386 */
struct _Xmap::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t object;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm32_address_t mask;
  int flags;
  vm32_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
  mach_msg_trailer_t trailer;
};

/* 3387 */
typedef uint32_t_0 vm32_offset_t;

/* 3388 */
typedef __Reply__map_t _Xmap::Reply;

/* 3389 */
struct __Reply__map_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm32_address_t address;
};

/* 3390 */
typedef __Request__map_t _Xmap::__Request;

/* 3391 */
struct __Request__map_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t object;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm32_address_t mask;
  int flags;
  vm32_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
};

/* 3392 */
struct _Xmachine_attribute::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm_machine_attribute_t attribute;
  vm_machine_attribute_val_t value;
  mach_msg_trailer_t trailer;
};

/* 3393 */
typedef __Reply__machine_attribute_t _Xmachine_attribute::Reply;

/* 3394 */
struct __Reply__machine_attribute_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm_machine_attribute_val_t value;
};

/* 3395 */
typedef __Request__machine_attribute_t _Xmachine_attribute::__Request;

/* 3396 */
struct __Request__machine_attribute_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm_machine_attribute_t attribute;
  vm_machine_attribute_val_t value;
};

/* 3397 */
struct _Xremap::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t src_task;
  NDR_record_t NDR;
  vm32_address_t target_address;
  vm32_size_t size;
  vm32_address_t mask;
  boolean_t anywhere;
  vm32_address_t src_address;
  boolean_t copy;
  vm_inherit_t inheritance;
  mach_msg_trailer_t trailer;
};

/* 3398 */
typedef __Reply__remap_t _Xremap::Reply;

/* 3399 */
struct __Reply__remap_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm32_address_t target_address;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
};

/* 3400 */
typedef __Request__remap_t _Xremap::__Request;

/* 3401 */
struct __Request__remap_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t src_task;
  NDR_record_t NDR;
  vm32_address_t target_address;
  vm32_size_t size;
  vm32_address_t mask;
  boolean_t anywhere;
  vm32_address_t src_address;
  boolean_t copy;
  vm_inherit_t inheritance;
};

/* 3402 */
struct __attribute__((packed)) __attribute__((aligned(4))) _X_task_wire::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t must_wire;
  mach_msg_trailer_t trailer;
};

/* 3403 */
typedef __Reply___task_wire_t _X_task_wire::Reply;

/* 3404 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply___task_wire_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3405 */
typedef __Request___task_wire_t _X_task_wire::__Request;

/* 3406 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request___task_wire_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  boolean_t must_wire;
};

/* 3407 */
struct _Xmake_memory_entry::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t parent_entry;
  NDR_record_t NDR;
  vm32_size_t size;
  vm32_offset_t offset;
  vm_prot_t permission;
  mach_msg_trailer_t trailer;
};

/* 3408 */
typedef __Reply__make_memory_entry_t _Xmake_memory_entry::Reply;

/* 3409 */
struct __Reply__make_memory_entry_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t object_handle;
  NDR_record_t NDR;
  vm32_size_t size;
};

/* 3410 */
typedef __Request__make_memory_entry_t _Xmake_memory_entry::__Request;

/* 3411 */
struct __Request__make_memory_entry_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t parent_entry;
  NDR_record_t NDR;
  vm32_size_t size;
  vm32_offset_t offset;
  vm_prot_t permission;
};

/* 3412 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmap_page_query::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_offset_t offset;
  mach_msg_trailer_t trailer;
};

/* 3413 */
typedef __Reply__map_page_query_t _Xmap_page_query::Reply;

/* 3414 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__map_page_query_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  integer_t disposition;
  integer_t ref_count;
};

/* 3415 */
typedef __Request__map_page_query_t _Xmap_page_query::__Request;

/* 3416 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__map_page_query_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_offset_t offset;
};

/* 3417 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xregion_info::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  mach_msg_trailer_t trailer;
};

/* 3418 */
typedef __Reply__region_info_t _Xregion_info::Reply;

/* 3419 */
struct __Reply__region_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t objects;
  NDR_record_t NDR;
  vm_info_region_t region;
  mach_msg_type_number_t objectsCnt;
};

/* 3420 */
typedef vm_info_region vm_info_region_t;

/* 3421 */
struct vm_info_region
{
  natural_t vir_start;
  natural_t vir_end;
  natural_t vir_object;
  natural_t vir_offset;
  boolean_t vir_needs_copy;
  vm_prot_t vir_protection;
  vm_prot_t vir_max_protection;
  vm_inherit_t vir_inheritance;
  natural_t vir_wired_count;
  natural_t vir_user_wired_count;
};

/* 3422 */
typedef __Request__region_info_t _Xregion_info::__Request;

/* 3423 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__region_info_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
};

/* 3424 */
struct _Xmapped_pages_info::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3425 */
typedef __Reply__mapped_pages_info_t _Xmapped_pages_info::Reply;

/* 3426 */
struct __Reply__mapped_pages_info_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t pages;
  NDR_record_t NDR;
  mach_msg_type_number_t pagesCnt;
};

/* 3427 */
typedef __Request__mapped_pages_info_t _Xmapped_pages_info::__Request;

/* 3428 */
struct __Request__mapped_pages_info_t
{
  mach_msg_header_t Head;
};

/* 3429 */
typedef vm_offset_t *page_address_array_t;

/* 3430 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xregion_recurse::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  mach_msg_trailer_t trailer;
};

/* 3431 */
typedef __Reply__region_recurse_t _Xregion_recurse::Reply;

/* 3432 */
struct __Reply__region_recurse_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm32_address_t address;
  vm32_size_t size;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  int info[19];
};

/* 3433 */
typedef __Request__region_recurse_t _Xregion_recurse::__Request;

/* 3434 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__region_recurse_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
};

/* 3435 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xregion_recurse_64::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  mach_msg_trailer_t trailer;
};

/* 3436 */
typedef __Reply__region_recurse_64_t _Xregion_recurse_64::Reply;

/* 3437 */
struct __Reply__region_recurse_64_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm32_address_t address;
  vm32_size_t size;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
  int info[19];
};

/* 3438 */
typedef __Request__region_recurse_64_t _Xregion_recurse_64::__Request;

/* 3439 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__region_recurse_64_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  natural_t nesting_depth;
  mach_msg_type_number_t infoCnt;
};

/* 3440 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xregion_info_64::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  mach_msg_trailer_t trailer;
};

/* 3441 */
typedef __Reply__region_info_64_t _Xregion_info_64::Reply;

/* 3442 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__region_info_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t objects;
  NDR_record_t NDR;
  vm_info_region_64_t region;
  mach_msg_type_number_t objectsCnt;
};

/* 3443 */
typedef vm_info_region_64 vm_info_region_64_t;

/* 3444 */
struct __attribute__((packed)) __attribute__((aligned(4))) vm_info_region_64
{
  natural_t vir_start;
  natural_t vir_end;
  natural_t vir_object;
  memory_object_offset_t vir_offset;
  boolean_t vir_needs_copy;
  vm_prot_t vir_protection;
  vm_prot_t vir_max_protection;
  vm_inherit_t vir_inheritance;
  natural_t vir_wired_count;
  natural_t vir_user_wired_count;
};

/* 3445 */
typedef __Request__region_info_64_t _Xregion_info_64::__Request;

/* 3446 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__region_info_64_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
};

/* 3447 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xregion_64::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
  mach_msg_trailer_t trailer;
};

/* 3448 */
typedef __Reply__region_64_t _Xregion_64::Reply;

/* 3449 */
struct __Reply__region_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t object_name;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  mach_msg_type_number_t infoCnt;
  int info[10];
};

/* 3450 */
typedef __Request__region_64_t _Xregion_64::__Request;

/* 3451 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__region_64_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm_region_flavor_t flavor;
  mach_msg_type_number_t infoCnt;
};

/* 3452 */
struct _Xmake_memory_entry_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t parent_entry;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_size_t size;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_offset_t offset;
  vm_prot_t permission;
  mach_msg_trailer_t trailer;
};

/* 3453 */
typedef __Reply__make_memory_entry_64_t _Xmake_memory_entry_64::Reply;

/* 3454 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__make_memory_entry_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object_handle;
  NDR_record_t NDR;
  memory_object_size_t size;
};

/* 3455 */
typedef __Request__make_memory_entry_64_t _Xmake_memory_entry_64::__Request;

/* 3456 */
struct __Request__make_memory_entry_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t parent_entry;
  NDR_record_t NDR;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_size_t size;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_offset_t offset;
  vm_prot_t permission;
};

/* 3457 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xmap_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm32_address_t mask;
  int flags;
  memory_object_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
  mach_msg_trailer_t trailer;
};

/* 3458 */
typedef __Reply__map_64_t _Xmap_64::Reply;

/* 3459 */
struct __Reply__map_64_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  vm32_address_t address;
};

/* 3460 */
typedef __Request__map_64_t _Xmap_64::__Request;

/* 3461 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__map_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object;
  NDR_record_t NDR;
  vm32_address_t address;
  vm32_size_t size;
  vm32_address_t mask;
  int flags;
  memory_object_offset_t offset;
  boolean_t copy;
  vm_prot_t cur_protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
};

/* 3462 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xpurgable_control::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm_purgable_t control;
  int state;
  mach_msg_trailer_t trailer;
};

/* 3463 */
typedef __Reply__purgable_control_t _Xpurgable_control::Reply;

/* 3464 */
struct __Reply__purgable_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  int state;
};

/* 3465 */
typedef __Request__purgable_control_t _Xpurgable_control::__Request;

/* 3466 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__purgable_control_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  vm32_address_t address;
  vm_purgable_t control;
  int state;
};

/* 3467 */
struct _X_map_exec_lockdown::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3468 */
typedef __Reply___map_exec_lockdown_t _X_map_exec_lockdown::Reply;

/* 3469 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply___map_exec_lockdown_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3470 */
typedef __Request___map_exec_lockdown_t _X_map_exec_lockdown::__Request;

/* 3471 */
struct __Request___map_exec_lockdown_t
{
  mach_msg_header_t Head;
};

/* 3472 */
typedef __builtin_va_list va_list_96;

/* 3473 */
typedef vm_page *vm_page_t;

/* 3474 */
typedef vnode_pager *vnode_pager_t;

/* 3475 */
struct vnode_pager
{
  memory_object vn_pgr_hdr;
  unsigned int ref_count;
  vnode *vnode_handle;
};

/* 3476 */
typedef int *memory_object_info_t;

/* 3477 */
struct __attribute__((aligned(8))) upl_io_completion
{
  void *io_context;
  void (*io_done)(void *, int);
  int io_error;
};

/* 3478 */
struct timespec
{
  __darwin_time_t tv_sec;
  __int64 tv_nsec;
};

/* 3479 */
typedef memory_object_attr_info memory_object_attr_info_data_t;

/* 3480 */
struct memory_object_attr_info
{
  memory_object_copy_strategy_t copy_strategy;
  memory_object_cluster_size_t cluster_size;
  boolean_t may_cache_object;
  boolean_t temporary;
};

/* 3481 */
struct proc_regioninfo_internal
{
  uint32_t_0 pri_protection;
  uint32_t_0 pri_max_protection;
  uint32_t_0 pri_inheritance;
  uint32_t_0 pri_flags;
  uint64_t_0 pri_offset;
  uint32_t_0 pri_behavior;
  uint32_t_0 pri_user_wired_count;
  uint32_t_0 pri_user_tag;
  uint32_t_0 pri_pages_resident;
  uint32_t_0 pri_pages_shared_now_private;
  uint32_t_0 pri_pages_swapped_out;
  uint32_t_0 pri_pages_dirtied;
  uint32_t_0 pri_ref_count;
  uint32_t_0 pri_shadow_depth;
  uint32_t_0 pri_share_mode;
  uint32_t_0 pri_private_pages_resident;
  uint32_t_0 pri_shared_pages_resident;
  uint32_t_0 pri_obj_id;
  uint32_t_0 pri_depth;
  uint64_t_0 pri_address;
  uint64_t_0 pri_size;
};

/* 3482 */
typedef vm_region_extended_info vm_region_extended_info_data_t;

/* 3483 */
struct vm_region_extended_info
{
  vm_prot_t protection;
  unsigned int user_tag;
  unsigned int pages_resident;
  unsigned int pages_shared_now_private;
  unsigned int pages_swapped_out;
  unsigned int pages_dirtied;
  unsigned int ref_count;
  unsigned __int16 shadow_depth;
  unsigned __int8 external_pager;
  unsigned __int8 share_mode;
  unsigned int pages_reusable;
};

/* 3484 */
typedef vm_region_top_info vm_region_top_info_data_t;

/* 3485 */
struct __attribute__((aligned(4))) vm_region_top_info
{
  unsigned int obj_id;
  unsigned int ref_count;
  unsigned int private_pages_resident;
  unsigned int shared_pages_resident;
  unsigned __int8 share_mode;
};

/* 3486 */
typedef const memory_object_pager_ops *memory_object_pager_ops_t;

/* 3487 */
union c_segu
{
  c_segment_t c_seg;
  uintptr_t c_segno;
};

/* 3488 */
typedef c_segment *c_segment_t;

/* 3489 */
struct c_segment
{
  lck_mtx_t_0 c_lock;
  queue_chain_t c_age_list;
  queue_chain_t c_list;
  unsigned __int32 c_mysegno : 20;
  unsigned __int32 c_busy : 1;
  unsigned __int32 c_busy_swapping : 1;
  unsigned __int32 c_wanted : 1;
  unsigned __int32 c_on_minorcompact_q : 1;
  unsigned __int32 c_state : 4;
  unsigned __int32 c_overage_swap : 1;
  unsigned __int32 c_reserved : 3;
  uint32_t_0 c_creation_ts;
  uint64_t_0 c_generation_id;
  int32_t c_bytes_used;
  int32_t c_bytes_unused;
  uint32_t_0 c_slots_used;
  uint16_t c_firstemptyslot;
  uint16_t c_nextslot;
  uint32_t_0 c_nextoffset;
  uint32_t_0 c_populated_offset;
  uint32_t_0 c_swappedin_ts;
  c_segment::$D3273E8D75E07F3D3501ADB4D27F80E7 c_store;
  int c_slot_var_array_len;
  c_slot *c_slot_var_array;
  c_slot c_slot_fixed_array[];
};

/* 3490 */
union c_segment::$D3273E8D75E07F3D3501ADB4D27F80E7
{
  int32_t *c_buffer;
  uint64_t_0 c_swap_handle;
};

/* 3491 */
struct c_slot
{
  unsigned __int64 c_offset : 16;
  unsigned __int64 c_size : 12;
  unsigned __int64 c_packed_ptr : 36;
};

/* 3492 */
typedef __builtin_va_list va_list_97;

/* 3493 */
struct c_sv_hash_entry
{
  c_sv_hash_entry::$796F908443F52F0A2A319311616D25F7 c_sv_he_un;
};

/* 3494 */
union c_sv_hash_entry::$796F908443F52F0A2A319311616D25F7
{
  c_sv_hash_entry::$796F908443F52F0A2A319311616D25F7::$C98441EEDA7CB94313286472725089C3 c_sv_he;
  uint64_t_0 c_sv_he_record;
};

/* 3495 */
struct c_sv_hash_entry::$796F908443F52F0A2A319311616D25F7::$C98441EEDA7CB94313286472725089C3
{
  uint32_t_0 c_sv_he_ref;
  uint32_t_0 c_sv_he_data;
};

/* 3496 */
struct $3C5D076FAA71912093C12556A4B2C772
{
  uint64_t_0 asked_permission;
  uint64_t_0 compactions;
  uint64_t_0 moved_slots;
  uint64_t_0 moved_bytes;
  uint64_t_0 wasted_space_in_swapouts;
  uint64_t_0 count_of_swapouts;
  uint64_t_0 count_of_freed_segs;
};

/* 3497 */
enum $8A756D6B6DAE4E81C0E56B0B53018970 : __int32
{
  CMODE_WK = 0x0,
  CMODE_LZ4 = 0x1,
  CMODE_HYB = 0x2,
  VM_COMPRESSOR_DEFAULT_CODEC = 0x3,
  CMODE_INVALID = 0x4,
};

/* 3498 */
typedef c_slot_mapping *c_slot_mapping_t;

/* 3499 */
struct c_slot_mapping
{
  unsigned __int32 s_cseg : 22;
  unsigned __int32 s_cindx : 10;
};

/* 3500 */
typedef unsigned int WK_word;

/* 3501 */
typedef c_slot *c_slot_t;

/* 3502 */
typedef UInt64 AbsoluteTime;

/* 3503 */
typedef __builtin_va_list va_list_98;

/* 3504 */
struct $B8FF26BB2B18F607562A367CC0EF772A
{
  uint64_t_0 data_returns;
  uint64_t_0 data_requests;
  uint64_t_0 put;
  uint64_t_0 get;
  uint64_t_0 state_clr;
  uint64_t_0 state_get;
  uint64_t_0 transfer;
};

/* 3505 */
typedef compressor_pager *compressor_pager_t;

/* 3506 */
struct compressor_pager
{
  memory_object cpgr_hdr;
  lck_mtx_t_0 cpgr_lock;
  unsigned int cpgr_references;
  unsigned int cpgr_num_slots;
  unsigned int cpgr_num_slots_occupied;
  compressor_pager::$F30AA4E7C06FC62272C2DA9FC45801E3 cpgr_slots;
};

/* 3507 */
union compressor_pager::$F30AA4E7C06FC62272C2DA9FC45801E3
{
  compressor_slot_t cpgr_eslots[2];
  compressor_slot_t *cpgr_dslots;
  compressor_slot_t **cpgr_islots;
};

/* 3508 */
typedef int compressor_slot_t;

/* 3509 */
typedef int vm_external_state_t;

/* 3510 */
struct symmetric_xts
{
  ccxts_ctx enc[67];
  ccxts_ctx dec[67];
};

/* 3511 */
struct ccxts_ctx
{
  uint8_t_0 b[16];
};

/* 3512 */
struct swapout_io_completion
{
  int swp_io_busy;
  int swp_io_done;
  int swp_io_error;
  uint32_t_0 swp_c_size;
  c_segment_t swp_c_seg;
  swapfile *swp_swf;
  uint64_t_0 swp_f_offset;
  upl_io_completion swp_upl_ctx;
};

/* 3513 */
struct __attribute__((aligned(8))) swapfile
{
  queue_head_t swp_queue;
  char *swp_path;
  vnode *swp_vp;
  uint64_t_0 swp_size;
  uint8_t_0 *swp_bitmap;
  unsigned int swp_pathlen;
  unsigned int swp_nsegs;
  unsigned int swp_nseginuse;
  unsigned int swp_index;
  unsigned int swp_flags;
  unsigned int swp_free_hint;
  unsigned int swp_io_count;
  c_segment_t *swp_csegs;
  trim_list *swp_delayed_trim_list_head;
  unsigned int swp_delayed_trim_count;
};

/* 3514 */
struct trim_list
{
  uint64_t_0 tl_offset;
  uint64_t_0 tl_length;
  trim_list *tl_next;
};

/* 3515 */
typedef __builtin_va_list va_list_99;

/* 3516 */
struct compressor_tuneables_t
{
  uint32_t_0 lz4_selection_max;
  int32_t wkdm_reeval_threshold;
  int32_t lz4_threshold;
  uint32_t_0 lz4_max_failure_skips;
  uint32_t_0 lz4_max_failure_run_length;
  uint32_t_0 lz4_max_preselects;
  uint32_t_0 lz4_run_preselection_threshold;
  uint32_t_0 lz4_run_continue_bytes;
  uint32_t_0 lz4_profitable_bytes;
};

/* 3517 */
struct compressor_state_t
{
  uint16_t lz4_selection_run;
  uint16_t lz4_run_length;
  uint16_t lz4_preselects;
  uint32_t_0 lz4_total_preselects;
  uint16_t lz4_failure_skips;
  uint32_t_0 lz4_total_failure_skips;
  uint16_t lz4_failure_run_length;
  uint16_t lz4_total_unprofitables;
  uint32_t_0 lz4_total_negatives;
  uint32_t_0 lz4_total_failures;
};

/* 3518 */
typedef $8A756D6B6DAE4E81C0E56B0B53018970 vm_compressor_mode_t;

/* 3519 */
struct compressor_stats_t
{
  uint64_t_0 lz4_compressions;
  uint64_t_0 lz4_compression_failures;
  uint64_t_0 lz4_compressed_bytes;
  uint64_t_0 lz4_wk_compression_delta;
  uint64_t_0 lz4_wk_compression_negative_delta;
  uint64_t_0 lz4_post_wk_compressions;
  uint64_t_0 wk_compressions;
  uint64_t_0 wk_cabstime;
  uint64_t_0 wk_sv_compressions;
  uint64_t_0 wk_mzv_compressions;
  uint64_t_0 wk_compression_failures;
  uint64_t_0 wk_compressed_bytes_total;
  uint64_t_0 wk_compressions_exclusive;
  uint64_t_0 wk_compressed_bytes_exclusive;
  uint64_t_0 wkh_compressions;
  uint64_t_0 wkh_cabstime;
  uint64_t_0 wks_compressions;
  uint64_t_0 wks_cabstime;
  uint64_t_0 wks_compressed_bytes;
  uint64_t_0 wks_compression_failures;
  uint64_t_0 wks_sv_compressions;
  uint64_t_0 lz4_decompressions;
  uint64_t_0 lz4_decompressed_bytes;
  uint64_t_0 uc_decompressions;
  uint64_t_0 wk_decompressions;
  uint64_t_0 wk_dabstime;
  uint64_t_0 wkh_decompressions;
  uint64_t_0 wkh_dabstime;
  uint64_t_0 wks_decompressions;
  uint64_t_0 wks_dabstime;
  uint64_t_0 wk_decompressed_bytes;
  uint64_t_0 wk_sv_decompressions;
};

/* 3520 */
enum compressor_preselect_t : __int32
{
  CPRESELLZ4 = 0x0,
  CSKIPLZ4 = 0x1,
  CPRESELWK = 0x2,
};

/* 3521 */
union compressor_encode_scratch_t
{
  uint8_t_0 lz4state[8192];
  uint8_t_0 wkscratch[];
};

/* 3522 */
union compressor_decode_scratch_t
{
  uint8_t_0 lz4decodestate[8192];
  uint8_t_0 wkdecompscratch[];
};

/* 3523 */
struct lz4_hash_entry_t
{
  uint32_t_0 offset;
  uint32_t_0 word;
};

/* 3524 */
typedef vm_ghost *vm_ghost_t;

/* 3525 */
struct __attribute__((packed)) __attribute__((aligned(4))) vm_ghost
{
  unsigned __int64 g_next_index : 21;
  unsigned __int64 g_pages_held : 4;
  unsigned __int64 g_obj_offset : 39;
  uint32_t_0 g_obj_id;
};

/* 3526 */
typedef uint32_t_0 vm_phantom_hash_entry_t;

/* 3527 */
struct phantom_cache_stats
{
  uint32_t_0 pcs_wrapped;
  uint32_t_0 pcs_added_page_to_entry;
  uint32_t_0 pcs_added_new_entry;
  uint32_t_0 pcs_replaced_entry;
  uint32_t_0 pcs_lookup_found_page_in_cache;
  uint32_t_0 pcs_lookup_entry_not_in_cache;
  uint32_t_0 pcs_lookup_page_not_in_entry;
  uint32_t_0 pcs_updated_phantom_state;
};

/* 3528 */
struct $C47B543BE4D5444EC48CD98846CA6486
{
  uint32_t_0 added;
  uint32_t_0 found;
  uint32_t_0 added_ssd;
  uint32_t_0 found_ssd;
  uint32_t_0 elapsed_ms;
  boolean_t pressure_detected;
};

/* 3529 */
typedef __builtin_va_list va_list_100;

/* 3530 */
typedef __builtin_va_list va_list_101;

/* 3531 */
typedef device_pager *device_pager_t;

/* 3532 */
struct device_pager
{
  memory_object dev_pgr_hdr;
  lck_mtx_t_0 lock;
  unsigned int ref_count;
  device_port_t device_handle;
  vm_size_t size;
  int flags;
  boolean_t is_mapped;
};

/* 3533 */
typedef uintptr_t device_port_t;

/* 3534 */
typedef mach_port_t memory_object_default_t;

/* 3535 */
typedef __builtin_va_list va_list_102;

/* 3536 */
typedef old_memory_object_behave_info *old_memory_object_behave_info_t;

/* 3537 */
struct old_memory_object_behave_info
{
  memory_object_copy_strategy_t copy_strategy;
  boolean_t temporary;
  boolean_t invalidate;
};

/* 3538 */
typedef memory_object_behave_info *memory_object_behave_info_t;

/* 3539 */
struct memory_object_behave_info
{
  memory_object_copy_strategy_t copy_strategy;
  boolean_t temporary;
  boolean_t invalidate;
  boolean_t silent_overwrite;
  boolean_t advisory_pageout;
};

/* 3540 */
typedef memory_object_perf_info *memory_object_perf_info_t;

/* 3541 */
struct memory_object_perf_info
{
  memory_object_cluster_size_t cluster_size;
  boolean_t may_cache;
};

/* 3542 */
typedef old_memory_object_attr_info *old_memory_object_attr_info_t;

/* 3543 */
struct old_memory_object_attr_info
{
  boolean_t object_ready;
  boolean_t may_cache;
  memory_object_copy_strategy_t copy_strategy;
};

/* 3544 */
typedef memory_object_attr_info *memory_object_attr_info_t;

/* 3545 */
typedef vm_named_entry *vm_named_entry_t;

/* 3546 */
struct __attribute__((aligned(8))) vm_named_entry
{
  lck_mtx_t_0 Lock;
  vm_named_entry::$E65A1CF39BCCEFF3B3EA3F6E85118CB2 backing;
  vm_object_offset_t offset;
  vm_object_size_t size;
  vm_object_offset_t data_offset;
  vm_prot_t protection;
  int ref_count;
  unsigned __int32 internal : 1;
  unsigned __int32 is_sub_map : 1;
  unsigned __int32 is_copy : 1;
};

/* 3547 */
union vm_named_entry::$E65A1CF39BCCEFF3B3EA3F6E85118CB2
{
  vm_object_t object;
  vm_map_t map;
  vm_map_copy_t copy;
};

/* 3548 */
typedef uint64_t_0 upl_control_flags_t;

/* 3549 */
typedef vm_object_fault_info *vm_object_fault_info_t;

/* 3550 */
struct vm_object_fault_info
{
  int interruptible;
  uint32_t_0 user_tag;
  vm_size_t cluster_size;
  vm_behavior_t behavior;
  vm_map_offset_t lo_offset;
  vm_map_offset_t hi_offset;
  unsigned __int32 no_cache : 1;
  unsigned __int32 stealth : 1;
  unsigned __int32 io_sync : 1;
  unsigned __int32 cs_bypass : 1;
  unsigned __int32 pmap_cs_associated : 1;
  unsigned __int32 mark_zf_absent : 1;
  unsigned __int32 batch_pmap_op : 1;
  unsigned __int32 __vm_object_fault_info_unused_bits : 25;
  int pmap_options;
};

/* 3551 */
typedef upl_page_info_t *upl_page_info_array_t;

/* 3552 */
struct __attribute__((aligned(8))) vm_page_delayed_work
{
  vm_page_t dw_m;
  int dw_mask;
};

/* 3553 */
typedef int memory_object_lock_result_t;

/* 3554 */
struct vm_object_update::extent
{
  vm_object_offset_t e_base;
  vm_object_offset_t e_min;
  vm_object_offset_t e_max;
};

/* 3555 */
typedef __builtin_va_list va_list_103;

/* 3556 */
typedef vm_info_object_t *vm_info_object_array_t;

/* 3557 */
typedef vm_info_object vm_info_object_t;

/* 3558 */
struct vm_info_object
{
  natural_t vio_object;
  natural_t vio_size;
  unsigned int vio_ref_count;
  unsigned int vio_resident_page_count;
  unsigned int vio_absent_count;
  natural_t vio_copy;
  natural_t vio_shadow;
  natural_t vio_shadow_offset;
  natural_t vio_paging_offset;
  memory_object_copy_strategy_t vio_copy_strategy;
  vm_offset_t vio_last_alloc;
  unsigned int vio_paging_in_progress;
  boolean_t vio_pager_created;
  boolean_t vio_pager_initialized;
  boolean_t vio_pager_ready;
  boolean_t vio_can_persist;
  boolean_t vio_internal;
  boolean_t vio_temporary;
  boolean_t vio_alive;
  boolean_t vio_purgable;
  boolean_t vio_purgable_volatile;
};

/* 3559 */
typedef hash_info_bucket_t *hash_info_bucket_array_t;

/* 3560 */
typedef hash_info_bucket hash_info_bucket_t;

/* 3561 */
struct hash_info_bucket
{
  natural_t hib_count;
};

/* 3562 */
struct vmrtfr
{
  int vmrtfr_maxi;
  int vmrtfr_curi;
  int64_t vmrtf_total;
  vm_rtfault_record_t *vm_rtf_records;
};

/* 3563 */
struct vm_rtfault_record_t
{
  uint64_t_0 rtfabstime;
  uint64_t_0 rtfduration;
  uint64_t_0 rtfaddr;
  uint64_t_0 rtfpc;
  uint64_t_0 rtftid;
  uint64_t_0 rtfupid;
  uint64_t_0 rtftype;
};

/* 3564 */
typedef __builtin_va_list va_list_104;

/* 3565 */
typedef os_reason *os_reason_t;

/* 3566 */
struct __attribute__((packed)) __attribute__((aligned(4))) codesigning_exit_reason_info
{
  uint64_t_0 ceri_virt_addr;
  uint64_t_0 ceri_file_offset;
  char ceri_pathname[1024];
  char ceri_filename[1024];
  uint64_t_0 ceri_codesig_modtime_secs;
  uint64_t_0 ceri_codesig_modtime_nsecs;
  uint64_t_0 ceri_page_modtime_secs;
  uint64_t_0 ceri_page_modtime_nsecs;
  uint8_t_0 ceri_path_truncated;
  uint8_t_0 ceri_object_codesigned;
  uint8_t_0 ceri_page_codesig_validated;
  uint8_t_0 ceri_page_codesig_tainted;
  uint8_t_0 ceri_page_codesig_nx;
  uint8_t_0 ceri_page_wpmapped;
  uint8_t_0 ceri_page_slid;
  uint8_t_0 ceri_page_dirty;
  uint32_t_0 ceri_page_shadow_depth;
};

/* 3567 */
typedef vm_page_packed_queue_entry *vm_page_queue_entry_t;

/* 3568 */
typedef kern_return_t vm_fault_return_t;

/* 3569 */
typedef vm_map_version vm_map_version_t;

/* 3570 */
struct vm_map_version
{
  unsigned int main_timestamp;
};

/* 3571 */
typedef __builtin_va_list va_list_105;

/* 3572 */
struct SHA256_CTX
{
  ccdigest_ctx ctx[14];
};

/* 3573 */
struct ccdigest_ctx
{
  ccdigest_ctx::$699324CDE4CC40AFDBFB8D06C3D73393 state;
};

/* 3574 */
union ccdigest_ctx::$699324CDE4CC40AFDBFB8D06C3D73393
{
  uint8_t_0 u8;
  uint32_t_0 u32;
  uint64_t_0 u64;
  cc_unit ccn;
};

/* 3575 */
typedef uint64_t_0 cc_unit;

/* 3576 */
typedef __builtin_va_list va_list_106;

/* 3577 */
typedef submap_map submap_map_t;

/* 3578 */
struct submap_map
{
  vm_map_t parent_map;
  vm_map_offset_t base_start;
  vm_map_offset_t base_end;
  vm_map_size_t base_len;
  submap_map *next;
};

/* 3579 */
typedef vm_region_submap_short_info_64 *vm_region_submap_short_info_64_t;

/* 3580 */
struct __attribute__((aligned(4))) vm_region_submap_short_info_64
{
  vm_prot_t protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
  __attribute__((packed)) __attribute__((aligned(1))) memory_object_offset_t offset;
  unsigned int user_tag;
  unsigned int ref_count;
  unsigned __int16 shadow_depth;
  unsigned __int8 external_pager;
  unsigned __int8 share_mode;
  boolean_t is_submap;
  vm_behavior_t behavior;
  vm32_object_id_t object_id;
  unsigned __int16 user_wired_count;
};

/* 3581 */
typedef uint32_t_0 vm32_object_id_t;

/* 3582 */
typedef vm_region_basic_info *vm_region_basic_info_t;

/* 3583 */
struct __attribute__((aligned(4))) vm_region_basic_info
{
  vm_prot_t protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
  boolean_t shared;
  boolean_t reserved;
  uint32_t_0 offset;
  vm_behavior_t behavior;
  unsigned __int16 user_wired_count;
};

/* 3584 */
typedef vm_region_basic_info_64 *vm_region_basic_info_64_t;

/* 3585 */
struct __attribute__((packed)) __attribute__((aligned(4))) vm_region_basic_info_64
{
  vm_prot_t protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
  boolean_t shared;
  boolean_t reserved;
  memory_object_offset_t offset;
  vm_behavior_t behavior;
  unsigned __int16 user_wired_count;
};

/* 3586 */
typedef vm_region_extended_info *vm_region_extended_info_t;

/* 3587 */
typedef vm_region_top_info *vm_region_top_info_t;

/* 3588 */
typedef int *vm_page_info_t;

/* 3589 */
typedef vm_page_info_basic *vm_page_info_basic_t;

/* 3590 */
struct vm_page_info_basic
{
  int disposition;
  int ref_count;
  vm_object_id_t object_id;
  memory_object_offset_t offset;
  int depth;
  int __pad;
};

/* 3591 */
typedef unsigned __int64 vm_object_id_t;

/* 3592 */
struct __attribute__((packed)) __attribute__((aligned(4))) vm_map_corpse_footprint_region
{
  vm_map_offset_t cfr_vaddr;
  uint32_t_0 cfr_num_pages;
  unsigned __int8 cfr_disposition[];
};

/* 3593 */
typedef vm_page_info_basic vm_page_info_basic_data_t;

/* 3594 */
typedef upl_page_info_array_t upl_page_list_ptr_t;

/* 3595 */
typedef vm_region_submap_info_64 *vm_region_submap_info_64_t;

/* 3596 */
struct __attribute__((packed)) __attribute__((aligned(4))) vm_region_submap_info_64
{
  vm_prot_t protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
  memory_object_offset_t offset;
  unsigned int user_tag;
  unsigned int pages_resident;
  unsigned int pages_shared_now_private;
  unsigned int pages_swapped_out;
  unsigned int pages_dirtied;
  unsigned int ref_count;
  unsigned __int16 shadow_depth;
  unsigned __int8 external_pager;
  unsigned __int8 share_mode;
  boolean_t is_submap;
  vm_behavior_t behavior;
  vm32_object_id_t object_id;
  unsigned __int16 user_wired_count;
  __attribute__((aligned(4))) unsigned int pages_reusable;
};

/* 3597 */
typedef __builtin_va_list va_list_107;

/* 3598 */
typedef __builtin_va_list va_list_108;

/* 3599 */
typedef __builtin_va_list va_list_109;

/* 3600 */
typedef __builtin_va_list va_list_110;

/* 3601 */
struct vm_counters
{
  unsigned int do_collapse_compressor;
  unsigned int do_collapse_compressor_pages;
  unsigned int do_collapse_terminate;
  unsigned int do_collapse_terminate_failure;
  unsigned int should_cow_but_wired;
  unsigned int create_upl_extra_cow;
  unsigned int create_upl_extra_cow_pages;
  unsigned int create_upl_lookup_failure_write;
  unsigned int create_upl_lookup_failure_copy;
};

/* 3602 */
enum purgeable_q_type : __int32
{
  PURGEABLE_Q_TYPE_OBSOLETE = 0x0,
  PURGEABLE_Q_TYPE_FIFO = 0x1,
  PURGEABLE_Q_TYPE_LIFO = 0x2,
  PURGEABLE_Q_TYPE_MAX = 0x3,
};

/* 3603 */
typedef io_reprioritize_req *io_reprioritize_req_t;

/* 3604 */
struct io_reprioritize_req
{
  uint64_t_0 blkno;
  uint32_t_0 len;
  int priority;
  vnode *devvp;
  queue_chain_t io_reprioritize_list;
};

/* 3605 */
typedef pfc pmap_flush_context;

/* 3606 */
struct pfc
{
  __int64 pfc_cpus;
  __int64 pfc_invalid_global;
};

/* 3607 */
typedef uint64_t_0 chunk_state_t;

/* 3608 */
typedef purgeable_q *purgeable_q_t;

/* 3609 */
struct __attribute__((aligned(8))) purgeable_q
{
  token_idx_t token_q_head;
  token_idx_t token_q_tail;
  token_idx_t token_q_unripe;
  int32_t new_pages;
  queue_head_t objq[8];
  purgeable_q_type type;
};

/* 3610 */
typedef uint32_t_0 token_idx_t;

/* 3611 */
typedef _Bool Boolean_0;

/* 3612 */
struct __attribute__((aligned(8))) vm_pageout_queue
{
  vm_page_queue_head_t pgo_pending;
  unsigned int pgo_laundry;
  unsigned int pgo_maxlaundry;
  uint64_t_0 pgo_tid;
  uint8_t_0 pgo_lowpriority;
  unsigned __int32 pgo_idle : 1;
  unsigned __int32 pgo_busy : 1;
  unsigned __int32 pgo_throttled : 1;
  unsigned __int32 pgo_draining : 1;
  unsigned __int32 pgo_inited : 1;
};

/* 3613 */
typedef __builtin_va_list va_list_111;

/* 3614 */
struct vm_pageout_stat
{
  unsigned __int64 vm_page_active_count;
  unsigned __int64 vm_page_speculative_count;
  unsigned __int64 vm_page_inactive_count;
  unsigned __int64 vm_page_anonymous_count;
  unsigned __int64 vm_page_free_count;
  unsigned __int64 vm_page_wire_count;
  unsigned __int64 vm_page_compressor_count;
  unsigned __int64 vm_page_pages_compressed;
  unsigned __int64 vm_page_pageable_internal_count;
  unsigned __int64 vm_page_pageable_external_count;
  unsigned __int64 vm_page_xpmapped_external_count;
  unsigned int pages_grabbed;
  unsigned int pages_freed;
  unsigned int pages_compressed;
  unsigned int pages_grabbed_by_compressor;
  unsigned int failed_compressions;
  unsigned int pages_evicted;
  unsigned int pages_purged;
  unsigned int considered;
  unsigned int considered_bq_internal;
  unsigned int considered_bq_external;
  unsigned int skipped_external;
  unsigned int filecache_min_reactivations;
  unsigned int freed_speculative;
  unsigned int freed_cleaned;
  unsigned int freed_internal;
  unsigned int freed_external;
  unsigned int cleaned_dirty_external;
  unsigned int cleaned_dirty_internal;
  unsigned int inactive_referenced;
  unsigned int inactive_nolock;
  unsigned int reactivation_limit_exceeded;
  unsigned int forced_inactive_reclaim;
  unsigned int throttled_internal_q;
  unsigned int throttled_external_q;
  unsigned int phantom_ghosts_found;
  unsigned int phantom_ghosts_added;
};

/* 3615 */
struct __attribute__((aligned(8))) cq
{
  vm_pageout_queue *q;
  void *current_chead;
  char *scratch_buf;
  int id;
};

/* 3616 */
struct vm_pageout_vminfo
{
  unsigned __int64 vm_pageout_considered_page;
  unsigned __int64 vm_pageout_considered_bq_internal;
  unsigned __int64 vm_pageout_considered_bq_external;
  unsigned __int64 vm_pageout_skipped_external;
  unsigned __int64 vm_pageout_pages_evicted;
  unsigned __int64 vm_pageout_pages_purged;
  unsigned __int64 vm_pageout_freed_cleaned;
  unsigned __int64 vm_pageout_freed_speculative;
  unsigned __int64 vm_pageout_freed_external;
  unsigned __int64 vm_pageout_freed_internal;
  unsigned __int64 vm_pageout_inactive_dirty_internal;
  unsigned __int64 vm_pageout_inactive_dirty_external;
  unsigned __int64 vm_pageout_inactive_referenced;
  unsigned __int64 vm_pageout_reactivation_limit_exceeded;
  unsigned __int64 vm_pageout_inactive_force_reclaim;
  unsigned __int64 vm_pageout_inactive_nolock;
  unsigned __int64 vm_pageout_filecache_min_reactivated;
  unsigned __int64 vm_pageout_scan_inactive_throttled_internal;
  unsigned __int64 vm_pageout_scan_inactive_throttled_external;
  uint64_t_0 vm_pageout_compressions;
  uint64_t_0 vm_compressor_pages_grabbed;
  unsigned __int64 vm_compressor_failed;
  unsigned __int64 vm_page_pages_freed;
  unsigned __int64 vm_phantom_cache_found_ghost;
  unsigned __int64 vm_phantom_cache_added_ghost;
};

/* 3617 */
struct vm_pageout_state
{
  boolean_t vm_pressure_thread_running;
  boolean_t vm_pressure_changed;
  boolean_t vm_restricted_to_single_processor;
  int vm_compressor_thread_count;
  unsigned int vm_page_speculative_q_age_ms;
  unsigned int vm_page_speculative_percentage;
  unsigned int vm_page_speculative_target;
  unsigned int vm_pageout_swap_wait;
  unsigned int vm_pageout_idle_wait;
  unsigned int vm_pageout_empty_wait;
  unsigned int vm_pageout_burst_wait;
  unsigned int vm_pageout_deadlock_wait;
  unsigned int vm_pageout_deadlock_relief;
  unsigned int vm_pageout_burst_inactive_throttle;
  unsigned int vm_pageout_inactive;
  unsigned int vm_pageout_inactive_used;
  unsigned int vm_pageout_inactive_clean;
  uint32_t_0 vm_page_filecache_min;
  uint32_t_0 vm_page_filecache_min_divisor;
  uint32_t_0 vm_page_xpmapped_min;
  uint32_t_0 vm_page_xpmapped_min_divisor;
  uint64_t_0 vm_pageout_considered_page_last;
  int vm_page_free_count_init;
  unsigned int vm_memory_pressure;
  int memorystatus_purge_on_critical;
  int memorystatus_purge_on_warning;
  int memorystatus_purge_on_urgent;
  thread_t vm_pageout_external_iothread;
  thread_t vm_pageout_internal_iothread;
};

/* 3618 */
struct vm_config
{
  boolean_t compressor_is_present;
  boolean_t compressor_is_active;
  boolean_t swap_is_present;
  boolean_t swap_is_active;
  boolean_t freezer_swap_is_active;
};

/* 3619 */
typedef vm_pressure_level vm_pressure_level_t;

/* 3620 */
typedef uint32_t_0 *wpl_array_t;

/* 3621 */
typedef _vector_upl *vector_upl_t;

/* 3622 */
struct _vector_upl
{
  upl_size_t size;
  uint32_t_0 num_upls;
  uint32_t_0 invalid_upls;
  uint32_t_0 _reserved;
  vm_map_t submap;
  vm_offset_t submap_dst_addr;
  vm_object_offset_t offset;
  upl_t upl_elems[8];
  upl_page_info_array_t pagelist;
  vector_upl_iostates_t upl_iostates[8];
};

/* 3623 */
typedef _vector_upl_iostates vector_upl_iostates_t;

/* 3624 */
struct _vector_upl_iostates
{
  upl_offset_t offset;
  upl_size_t size;
};

/* 3625 */
struct flow_control
{
  int state;
  mach_timespec_t ts;
};

/* 3626 */
struct __attribute__((aligned(64))) vm_speculative_age_q
{
  vm_page_queue_head_t age_q;
  mach_timespec_t age_ts;
};

/* 3627 */
struct token
{
  token_cnt_t count;
  token_idx_t prev;
  token_idx_t next;
};

/* 3628 */
typedef uint32_t_0 token_cnt_t;

/* 3629 */
typedef __builtin_va_list va_list_112;

/* 3630 */
typedef vm_purgeable_info *vm_purgeable_info_t;

/* 3631 */
struct vplq
{
  vplq::$C1DD61CE979486D21E2A4333950E7117 vpl_un;
};

/* 3632 */
union vplq::$C1DD61CE979486D21E2A4333950E7117
{
  char cache_line_pad[128];
  vpl vpl;
};

/* 3633 */
struct __attribute__((aligned(8))) ppnum_mapping
{
  ppnum_mapping *ppnm_next;
  ppnum_t ppnm_base_paddr;
  unsigned int ppnm_sindx;
  unsigned int ppnm_eindx;
};

/* 3634 */
struct vm_page_bucket_t
{
  vm_page_packed_t page_list;
};

/* 3635 */
struct __attribute__((aligned(64))) vm_page_queue_free_head
{
  vm_page_queue_head_t qhead;
};

/* 3636 */
typedef __builtin_va_list va_list_113;

/* 3637 */
typedef vm_locks_array vm_locks_array_t;

/* 3638 */
struct vm_locks_array
{
  char pad;
  __attribute__((aligned(64))) lck_mtx_t_0 vm_page_queue_lock2;
  __attribute__((aligned(64))) lck_mtx_t_0 vm_page_queue_free_lock2;
  __attribute__((aligned(64))) char pad2;
};

/* 3639 */
struct vm_page_stats_reusable
{
  SInt32 reusable_count;
  uint64_t_0 reusable;
  uint64_t_0 reused;
  uint64_t_0 reused_wire;
  uint64_t_0 reused_remove;
  uint64_t_0 all_reusable_calls;
  uint64_t_0 partial_reusable_calls;
  uint64_t_0 all_reuse_calls;
  uint64_t_0 partial_reuse_calls;
  uint64_t_0 reusable_pages_success;
  uint64_t_0 reusable_pages_failure;
  uint64_t_0 reusable_pages_shared;
  uint64_t_0 reuse_pages_success;
  uint64_t_0 reuse_pages_failure;
  uint64_t_0 can_reuse_success;
  uint64_t_0 can_reuse_failure;
  uint64_t_0 reusable_reclaimed;
  uint64_t_0 reusable_nonwritable;
  uint64_t_0 reusable_shared;
  uint64_t_0 free_shared;
};

/* 3640 */
struct hibernate_statistics
{
  int hibernate_considered;
  int hibernate_reentered_on_q;
  int hibernate_found_dirty;
  int hibernate_skipped_cleaning;
  int hibernate_skipped_transient;
  int hibernate_skipped_precious;
  int hibernate_skipped_external;
  int hibernate_queue_nolock;
  int hibernate_queue_paused;
  int hibernate_throttled;
  int hibernate_throttle_timeout;
  int hibernate_drained;
  int hibernate_drain_timeout;
  int cd_lock_failed;
  int cd_found_precious;
  int cd_found_wired;
  int cd_found_busy;
  int cd_found_unusual;
  int cd_found_cleaning;
  int cd_found_laundry;
  int cd_found_dirty;
  int cd_found_xpmapped;
  int cd_skipped_xpmapped;
  int cd_local_free;
  int cd_total_free;
  int cd_vm_page_wire_count;
  int cd_vm_struct_pages_unneeded;
  int cd_pages;
  int cd_discarded;
  int cd_count_wire;
};

/* 3641 */
typedef vm_page_packed_queue_entry *vm_page_queue_t;

/* 3642 */
typedef __builtin_va_list va_list_114;

/* 3643 */
typedef slide_info_entry_toc *slide_info_entry_toc_t;

/* 3644 */
struct slide_info_entry_toc
{
  uint8_t_0 entry[128];
};

/* 3645 */
typedef vm_shared_region_slide_info *vm_shared_region_slide_info_t;

/* 3646 */
typedef vm_shared_region_slide_info_entry_v1 *vm_shared_region_slide_info_entry_v1_t;

/* 3647 */
typedef vm_shared_region_slide_info_entry_v3 *vm_shared_region_slide_info_entry_v3_t;

/* 3648 */
typedef vm_shared_region_slide_info_entry_v2 *vm_shared_region_slide_info_entry_v2_t;

/* 3649 */
typedef vm_shared_region_slide_info_entry_v4 *vm_shared_region_slide_info_entry_v4_t;

/* 3650 */
struct shared_file_mapping_np
{
  mach_vm_address_t sfm_address;
  mach_vm_size_t sfm_size;
  mach_vm_offset_t sfm_file_offset;
  vm_prot_t sfm_max_prot;
  vm_prot_t sfm_init_prot;
};

/* 3651 */
struct _dyld_cache_header
{
  char magic[16];
  uint32_t_0 mappingOffset;
  uint32_t_0 mappingCount;
  uint32_t_0 imagesOffset;
  uint32_t_0 imagesCount;
  uint64_t_0 dyldBaseAddress;
  uint64_t_0 codeSignatureOffset;
  uint64_t_0 codeSignatureSize;
  uint64_t_0 slideInfoOffset;
  uint64_t_0 slideInfoSize;
  uint64_t_0 localSymbolsOffset;
  uint64_t_0 localSymbolsSize;
  uint8_t_0 uuid[16];
  uint64_t_0 cacheType;
  uint32_t_0 branchPoolsOffset;
  uint32_t_0 branchPoolsCount;
  uint64_t_0 accelerateInfoAddr;
  uint64_t_0 accelerateInfoSize;
  uint64_t_0 imagesTextOffset;
  uint64_t_0 imagesTextCount;
  uint64_t_0 dylibsImageGroupAddr;
  uint64_t_0 dylibsImageGroupSize;
  uint64_t_0 otherImageGroupAddr;
  uint64_t_0 otherImageGroupSize;
  uint64_t_0 progClosuresAddr;
  uint64_t_0 progClosuresSize;
  uint64_t_0 progClosuresTrieAddr;
  uint64_t_0 progClosuresTrieSize;
  uint32_t_0 platform;
  unsigned __int32 formatVersion : 8;
  unsigned __int32 dylibsExpectedOnDisk : 1;
  unsigned __int32 simulator : 1;
  unsigned __int32 locallyBuiltCache : 1;
  unsigned __int32 padding : 21;
};

/* 3652 */
struct _dyld_cache_image_text_info
{
  uuid_t uuid;
  uint64_t_0 loadAddress;
  uint32_t_0 textSegmentSize;
  uint32_t_0 pathOffset;
};

/* 3653 */
typedef __builtin_va_list va_list_115;

/* 3654 */
typedef shared_region_pager *shared_region_pager_t;

/* 3655 */
struct shared_region_pager
{
  memory_object sc_pgr_hdr;
  queue_chain_t pager_queue;
  unsigned int ref_count;
  boolean_t is_ready;
  boolean_t is_mapped;
  vm_object_t backing_object;
  vm_object_offset_t backing_offset;
  vm_shared_region_slide_info *scp_slide_info;
};

/* 3656 */
typedef __builtin_va_list va_list_116;

/* 3657 */
typedef swapfile_pager *swapfile_pager_t;

/* 3658 */
struct swapfile_pager
{
  memory_object swp_pgr_hdr;
  queue_chain_t pager_queue;
  unsigned int ref_count;
  boolean_t is_ready;
  boolean_t is_mapped;
  vnode *swapfile_vnode;
};

/* 3659 */
typedef __builtin_va_list va_list_117;

/* 3660 */
typedef vm_region_submap_info *vm_region_submap_info_t;

/* 3661 */
struct __attribute__((aligned(4))) vm_region_submap_info
{
  vm_prot_t protection;
  vm_prot_t max_protection;
  vm_inherit_t inheritance;
  uint32_t_0 offset;
  unsigned int user_tag;
  unsigned int pages_resident;
  unsigned int pages_shared_now_private;
  unsigned int pages_swapped_out;
  unsigned int pages_dirtied;
  unsigned int ref_count;
  unsigned __int16 shadow_depth;
  unsigned __int8 external_pager;
  unsigned __int8 share_mode;
  boolean_t is_submap;
  vm_behavior_t behavior;
  vm32_object_id_t object_id;
  unsigned __int16 user_wired_count;
};

/* 3662 */
typedef int *vm_region_info_t;

/* 3663 */
struct vm_read_entry
{
  vm_address_t address;
  vm_size_t size;
};

/* 3664 */
typedef int *vm_region_recurse_info_64_t;

/* 3665 */
typedef vm_region_submap_info_64 vm_region_submap_info_data_64_t;

/* 3666 */
typedef __builtin_va_list va_list_118;

/* 3667 */
typedef __builtin_va_list va_list_119;

/* 3668 */
typedef struct IOObject *io_object_t;

/* 3669 */
struct IOObject;

/* 3670 */
typedef io_object_t io_connect_t;

/* 3671 */
struct is_iokit_subsystem
{
  mig_server_routine_t server;
  mach_msg_id_t start;
  mach_msg_id_t end;
  unsigned int maxsize;
  vm_address_t reserved;
  routine_descriptor routine[88];
};

/* 3672 */
typedef __builtin_va_list va_list_120;

/* 3673 */
struct _Xio_object_get_class::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3674 */
typedef __Reply__io_object_get_class_t _Xio_object_get_class::Reply;

/* 3675 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_object_get_class_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t classNameOffset;
  mach_msg_type_number_t classNameCnt;
  char className[128];
};

/* 3676 */
typedef __Request__io_object_get_class_t _Xio_object_get_class::__Request;

/* 3677 */
struct __Request__io_object_get_class_t
{
  mach_msg_header_t Head;
};

/* 3678 */
struct _Xio_object_conforms_to::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t classNameOffset;
  mach_msg_type_number_t classNameCnt;
  char className[128];
  mach_msg_trailer_t trailer;
};

/* 3679 */
typedef __Reply__io_object_conforms_to_t _Xio_object_conforms_to::Reply;

/* 3680 */
struct __Reply__io_object_conforms_to_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t conforms;
};

/* 3681 */
typedef __Request__io_object_conforms_to_t _Xio_object_conforms_to::__Request;

/* 3682 */
struct __Request__io_object_conforms_to_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t classNameOffset;
  mach_msg_type_number_t classNameCnt;
  char className[128];
};

/* 3683 */
struct _Xio_iterator_next::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3684 */
typedef __Reply__io_iterator_next_t _Xio_iterator_next::Reply;

/* 3685 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_iterator_next_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t object;
};

/* 3686 */
typedef __Request__io_iterator_next_t _Xio_iterator_next::__Request;

/* 3687 */
struct __Request__io_iterator_next_t
{
  mach_msg_header_t Head;
};

/* 3688 */
struct _Xio_iterator_reset::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3689 */
typedef __Reply__io_iterator_reset_t _Xio_iterator_reset::Reply;

/* 3690 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_iterator_reset_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3691 */
typedef __Request__io_iterator_reset_t _Xio_iterator_reset::__Request;

/* 3692 */
struct __Request__io_iterator_reset_t
{
  mach_msg_header_t Head;
};

/* 3693 */
struct _Xio_service_get_matching_services::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
  mach_msg_trailer_t trailer;
};

/* 3694 */
typedef __Reply__io_service_get_matching_services_t _Xio_service_get_matching_services::Reply;

/* 3695 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_get_matching_services_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t existing;
};

/* 3696 */
typedef __Request__io_service_get_matching_services_t _Xio_service_get_matching_services::__Request;

/* 3697 */
struct __Request__io_service_get_matching_services_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
};

/* 3698 */
struct _Xio_registry_entry_get_property::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t property_nameOffset;
  mach_msg_type_number_t property_nameCnt;
  char property_name[128];
  mach_msg_trailer_t trailer;
};

/* 3699 */
typedef __Reply__io_registry_entry_get_property_t _Xio_registry_entry_get_property::Reply;

/* 3700 */
struct __Reply__io_registry_entry_get_property_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
};

/* 3701 */
typedef __Request__io_registry_entry_get_property_t _Xio_registry_entry_get_property::__Request;

/* 3702 */
struct __Request__io_registry_entry_get_property_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t property_nameOffset;
  mach_msg_type_number_t property_nameCnt;
  char property_name[128];
};

/* 3703 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_registry_create_iterator::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  uint32_t_0 options;
  mach_msg_trailer_t trailer;
};

/* 3704 */
typedef __Reply__io_registry_create_iterator_t _Xio_registry_create_iterator::Reply;

/* 3705 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_create_iterator_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t iterator;
};

/* 3706 */
typedef __Request__io_registry_create_iterator_t _Xio_registry_create_iterator::__Request;

/* 3707 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_registry_create_iterator_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  uint32_t_0 options;
};

/* 3708 */
typedef __Request__io_registry_create_iterator_t $<4138600,1>::__Request;

/* 3709 */
struct _Xio_registry_iterator_enter_entry::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3710 */
typedef __Reply__io_registry_iterator_enter_entry_t _Xio_registry_iterator_enter_entry::Reply;

/* 3711 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_iterator_enter_entry_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3712 */
typedef __Request__io_registry_iterator_enter_entry_t _Xio_registry_iterator_enter_entry::__Request;

/* 3713 */
struct __Request__io_registry_iterator_enter_entry_t
{
  mach_msg_header_t Head;
};

/* 3714 */
struct _Xio_registry_iterator_exit_entry::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3715 */
typedef __Reply__io_registry_iterator_exit_entry_t _Xio_registry_iterator_exit_entry::Reply;

/* 3716 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_iterator_exit_entry_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3717 */
typedef __Request__io_registry_iterator_exit_entry_t _Xio_registry_iterator_exit_entry::__Request;

/* 3718 */
struct __Request__io_registry_iterator_exit_entry_t
{
  mach_msg_header_t Head;
};

/* 3719 */
struct _Xio_registry_entry_from_path::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t pathOffset;
  mach_msg_type_number_t pathCnt;
  char path[512];
  mach_msg_trailer_t trailer;
};

/* 3720 */
typedef __Reply__io_registry_entry_from_path_t _Xio_registry_entry_from_path::Reply;

/* 3721 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_from_path_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t registry_entry;
};

/* 3722 */
typedef __Request__io_registry_entry_from_path_t _Xio_registry_entry_from_path::__Request;

/* 3723 */
struct __Request__io_registry_entry_from_path_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t pathOffset;
  mach_msg_type_number_t pathCnt;
  char path[512];
};

/* 3724 */
struct _Xio_registry_entry_get_name::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3725 */
typedef __Reply__io_registry_entry_get_name_t _Xio_registry_entry_get_name::Reply;

/* 3726 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_get_name_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[128];
};

/* 3727 */
typedef __Request__io_registry_entry_get_name_t _Xio_registry_entry_get_name::__Request;

/* 3728 */
struct __Request__io_registry_entry_get_name_t
{
  mach_msg_header_t Head;
};

/* 3729 */
struct _Xio_registry_entry_get_properties::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3730 */
typedef __Reply__io_registry_entry_get_properties_t _Xio_registry_entry_get_properties::Reply;

/* 3731 */
struct __Reply__io_registry_entry_get_properties_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
};

/* 3732 */
typedef __Request__io_registry_entry_get_properties_t _Xio_registry_entry_get_properties::__Request;

/* 3733 */
struct __Request__io_registry_entry_get_properties_t
{
  mach_msg_header_t Head;
};

/* 3734 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_registry_entry_get_property_bytes::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t property_nameOffset;
  mach_msg_type_number_t property_nameCnt;
  char property_name[128];
  mach_msg_type_number_t dataCnt;
  mach_msg_trailer_t trailer;
};

/* 3735 */
typedef __Reply__io_registry_entry_get_property_bytes_t _Xio_registry_entry_get_property_bytes::Reply;

/* 3736 */
struct __Reply__io_registry_entry_get_property_bytes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t dataCnt;
  char data[4096];
};

/* 3737 */
typedef __Request__io_registry_entry_get_property_bytes_t _Xio_registry_entry_get_property_bytes::__Request;

/* 3738 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_registry_entry_get_property_bytes_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t property_nameOffset;
  mach_msg_type_number_t property_nameCnt;
  char property_name[128];
  mach_msg_type_number_t dataCnt;
};

/* 3739 */
typedef __Request__io_registry_entry_get_property_bytes_t $<4142944,1>::__Request;

/* 3740 */
struct _Xio_registry_entry_get_child_iterator::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_trailer_t trailer;
};

/* 3741 */
typedef __Reply__io_registry_entry_get_child_iterator_t _Xio_registry_entry_get_child_iterator::Reply;

/* 3742 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_get_child_iterator_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t iterator;
};

/* 3743 */
typedef __Request__io_registry_entry_get_child_iterator_t _Xio_registry_entry_get_child_iterator::__Request;

/* 3744 */
struct __Request__io_registry_entry_get_child_iterator_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
};

/* 3745 */
struct _Xio_registry_entry_get_parent_iterator::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_trailer_t trailer;
};

/* 3746 */
typedef __Reply__io_registry_entry_get_parent_iterator_t _Xio_registry_entry_get_parent_iterator::Reply;

/* 3747 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_get_parent_iterator_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t iterator;
};

/* 3748 */
typedef __Request__io_registry_entry_get_parent_iterator_t _Xio_registry_entry_get_parent_iterator::__Request;

/* 3749 */
struct __Request__io_registry_entry_get_parent_iterator_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
};

/* 3750 */
struct _Xio_service_close::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3751 */
typedef __Reply__io_service_close_t _Xio_service_close::Reply;

/* 3752 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_close_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3753 */
typedef __Request__io_service_close_t _Xio_service_close::__Request;

/* 3754 */
struct __Request__io_service_close_t
{
  mach_msg_header_t Head;
};

/* 3755 */
struct _Xio_connect_get_service::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3756 */
typedef __Reply__io_connect_get_service_t _Xio_connect_get_service::Reply;

/* 3757 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_get_service_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t service;
};

/* 3758 */
typedef __Request__io_connect_get_service_t _Xio_connect_get_service::__Request;

/* 3759 */
struct __Request__io_connect_get_service_t
{
  mach_msg_header_t Head;
};

/* 3760 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_set_notification_port::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t port;
  NDR_record_t NDR;
  uint32_t_0 notification_type;
  uint32_t_0 reference;
  mach_msg_trailer_t trailer;
};

/* 3761 */
typedef __Reply__io_connect_set_notification_port_t _Xio_connect_set_notification_port::Reply;

/* 3762 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_set_notification_port_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3763 */
typedef __Request__io_connect_set_notification_port_t _Xio_connect_set_notification_port::__Request;

/* 3764 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_set_notification_port_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t port;
  NDR_record_t NDR;
  uint32_t_0 notification_type;
  uint32_t_0 reference;
};

/* 3765 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_map_memory::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t into_task;
  NDR_record_t NDR;
  uint32_t_0 memory_type;
  uint32_t_0 address;
  uint32_t_0 size;
  uint32_t_0 flags;
  mach_msg_trailer_t trailer;
};

/* 3766 */
typedef __Reply__io_connect_map_memory_t _Xio_connect_map_memory::Reply;

/* 3767 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_map_memory_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 address;
  uint32_t_0 size;
};

/* 3768 */
typedef __Request__io_connect_map_memory_t _Xio_connect_map_memory::__Request;

/* 3769 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_map_memory_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t into_task;
  NDR_record_t NDR;
  uint32_t_0 memory_type;
  uint32_t_0 address;
  uint32_t_0 size;
  uint32_t_0 flags;
};

/* 3770 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_add_client::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t connect_to;
  mach_msg_trailer_t trailer;
};

/* 3771 */
typedef __Reply__io_connect_add_client_t _Xio_connect_add_client::Reply;

/* 3772 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_add_client_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3773 */
typedef __Request__io_connect_add_client_t _Xio_connect_add_client::__Request;

/* 3774 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_add_client_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t connect_to;
};

/* 3775 */
struct _Xio_connect_set_properties::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
  mach_msg_trailer_t trailer;
};

/* 3776 */
typedef __Reply__io_connect_set_properties_t _Xio_connect_set_properties::Reply;

/* 3777 */
struct __Reply__io_connect_set_properties_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  kern_return_t result;
};

/* 3778 */
typedef __Request__io_connect_set_properties_t _Xio_connect_set_properties::__Request;

/* 3779 */
struct __Request__io_connect_set_properties_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
};

/* 3780 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_method_scalarI_scalarO::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t outputCnt;
  mach_msg_trailer_t trailer;
};

/* 3781 */
typedef __Reply__io_connect_method_scalarI_scalarO_t _Xio_connect_method_scalarI_scalarO::Reply;

/* 3782 */
struct __Reply__io_connect_method_scalarI_scalarO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t outputCnt;
  int output[16];
};

/* 3783 */
typedef __Request__io_connect_method_scalarI_scalarO_t _Xio_connect_method_scalarI_scalarO::__Request;

/* 3784 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_method_scalarI_scalarO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t outputCnt;
};

/* 3785 */
typedef __Request__io_connect_method_scalarI_scalarO_t $<4150108,1>::__Request;

/* 3786 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_method_scalarI_structureO::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t outputCnt;
  mach_msg_trailer_t trailer;
};

/* 3787 */
typedef __Reply__io_connect_method_scalarI_structureO_t _Xio_connect_method_scalarI_structureO::Reply;

/* 3788 */
struct __Reply__io_connect_method_scalarI_structureO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t outputCnt;
  char output[4096];
};

/* 3789 */
typedef __Request__io_connect_method_scalarI_structureO_t _Xio_connect_method_scalarI_structureO::__Request;

/* 3790 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_method_scalarI_structureO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t outputCnt;
};

/* 3791 */
typedef __Request__io_connect_method_scalarI_structureO_t $<4150929,1>::__Request;

/* 3792 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_method_scalarI_structureI::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t inputStructCnt;
  char inputStruct[4096];
  mach_msg_trailer_t trailer;
};

/* 3793 */
typedef __Reply__io_connect_method_scalarI_structureI_t _Xio_connect_method_scalarI_structureI::Reply;

/* 3794 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_method_scalarI_structureI_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3795 */
typedef __Request__io_connect_method_scalarI_structureI_t _Xio_connect_method_scalarI_structureI::__Request;

/* 3796 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_method_scalarI_structureI_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t inputStructCnt;
  char inputStruct[4096];
};

/* 3797 */
typedef __Request__io_connect_method_scalarI_structureI_t $<4151766,1>::__Request;

/* 3798 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_method_structureI_structureO::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  char input[4096];
  mach_msg_type_number_t outputCnt;
  mach_msg_trailer_t trailer;
};

/* 3799 */
typedef __Reply__io_connect_method_structureI_structureO_t _Xio_connect_method_structureI_structureO::Reply;

/* 3800 */
struct __Reply__io_connect_method_structureI_structureO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t outputCnt;
  char output[4096];
};

/* 3801 */
typedef __Request__io_connect_method_structureI_structureO_t _Xio_connect_method_structureI_structureO::__Request;

/* 3802 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_method_structureI_structureO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  char input[4096];
  mach_msg_type_number_t outputCnt;
};

/* 3803 */
typedef __Request__io_connect_method_structureI_structureO_t $<4152678,1>::__Request;

/* 3804 */
struct _Xio_registry_entry_get_path::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_trailer_t trailer;
};

/* 3805 */
typedef __Reply__io_registry_entry_get_path_t _Xio_registry_entry_get_path::Reply;

/* 3806 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_get_path_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t pathOffset;
  mach_msg_type_number_t pathCnt;
  char path[512];
};

/* 3807 */
typedef __Request__io_registry_entry_get_path_t _Xio_registry_entry_get_path::__Request;

/* 3808 */
struct __Request__io_registry_entry_get_path_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
};

/* 3809 */
struct _Xio_registry_get_root_entry::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3810 */
typedef __Reply__io_registry_get_root_entry_t _Xio_registry_get_root_entry::Reply;

/* 3811 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_get_root_entry_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t root;
};

/* 3812 */
typedef __Request__io_registry_get_root_entry_t _Xio_registry_get_root_entry::__Request;

/* 3813 */
struct __Request__io_registry_get_root_entry_t
{
  mach_msg_header_t Head;
};

/* 3814 */
struct _Xio_registry_entry_set_properties::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
  mach_msg_trailer_t trailer;
};

/* 3815 */
typedef __Reply__io_registry_entry_set_properties_t _Xio_registry_entry_set_properties::Reply;

/* 3816 */
struct __Reply__io_registry_entry_set_properties_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  kern_return_t result;
};

/* 3817 */
typedef __Request__io_registry_entry_set_properties_t _Xio_registry_entry_set_properties::__Request;

/* 3818 */
struct __Request__io_registry_entry_set_properties_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
};

/* 3819 */
struct _Xio_registry_entry_in_plane::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_trailer_t trailer;
};

/* 3820 */
typedef __Reply__io_registry_entry_in_plane_t _Xio_registry_entry_in_plane::Reply;

/* 3821 */
struct __Reply__io_registry_entry_in_plane_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t inPlane;
};

/* 3822 */
typedef __Request__io_registry_entry_in_plane_t _Xio_registry_entry_in_plane::__Request;

/* 3823 */
struct __Request__io_registry_entry_in_plane_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
};

/* 3824 */
struct _Xio_object_get_retain_count::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3825 */
typedef __Reply__io_object_get_retain_count_t _Xio_object_get_retain_count::Reply;

/* 3826 */
struct __Reply__io_object_get_retain_count_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 retainCount;
};

/* 3827 */
typedef __Request__io_object_get_retain_count_t _Xio_object_get_retain_count::__Request;

/* 3828 */
struct __Request__io_object_get_retain_count_t
{
  mach_msg_header_t Head;
};

/* 3829 */
struct _Xio_service_get_busy_state::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3830 */
typedef __Reply__io_service_get_busy_state_t _Xio_service_get_busy_state::Reply;

/* 3831 */
struct __Reply__io_service_get_busy_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 busyState;
};

/* 3832 */
typedef __Request__io_service_get_busy_state_t _Xio_service_get_busy_state::__Request;

/* 3833 */
struct __Request__io_service_get_busy_state_t
{
  mach_msg_header_t Head;
};

/* 3834 */
struct _Xio_service_wait_quiet::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_timespec_t wait_time;
  mach_msg_trailer_t trailer;
};

/* 3835 */
typedef __Reply__io_service_wait_quiet_t _Xio_service_wait_quiet::Reply;

/* 3836 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_wait_quiet_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3837 */
typedef __Request__io_service_wait_quiet_t _Xio_service_wait_quiet::__Request;

/* 3838 */
struct __Request__io_service_wait_quiet_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_timespec_t wait_time;
};

/* 3839 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_registry_entry_create_iterator::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  uint32_t_0 options;
  mach_msg_trailer_t trailer;
};

/* 3840 */
typedef __Reply__io_registry_entry_create_iterator_t _Xio_registry_entry_create_iterator::Reply;

/* 3841 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_create_iterator_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t iterator;
};

/* 3842 */
typedef __Request__io_registry_entry_create_iterator_t _Xio_registry_entry_create_iterator::__Request;

/* 3843 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_registry_entry_create_iterator_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  uint32_t_0 options;
};

/* 3844 */
typedef __Request__io_registry_entry_create_iterator_t $<4159297,1>::__Request;

/* 3845 */
struct _Xio_iterator_is_valid::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3846 */
typedef __Reply__io_iterator_is_valid_t _Xio_iterator_is_valid::Reply;

/* 3847 */
struct __Reply__io_iterator_is_valid_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t is_valid;
};

/* 3848 */
typedef __Request__io_iterator_is_valid_t _Xio_iterator_is_valid::__Request;

/* 3849 */
struct __Request__io_iterator_is_valid_t
{
  mach_msg_header_t Head;
};

/* 3850 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_catalog_send_data::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t inData;
  NDR_record_t NDR;
  uint32_t_0 flag;
  mach_msg_type_number_t inDataCnt;
  mach_msg_trailer_t trailer;
};

/* 3851 */
typedef __Reply__io_catalog_send_data_t _Xio_catalog_send_data::Reply;

/* 3852 */
struct __Reply__io_catalog_send_data_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  kern_return_t result;
};

/* 3853 */
typedef __Request__io_catalog_send_data_t _Xio_catalog_send_data::__Request;

/* 3854 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_catalog_send_data_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t inData;
  NDR_record_t NDR;
  uint32_t_0 flag;
  mach_msg_type_number_t inDataCnt;
};

/* 3855 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_catalog_terminate::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 flag;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[128];
  mach_msg_trailer_t trailer;
};

/* 3856 */
typedef __Reply__io_catalog_terminate_t _Xio_catalog_terminate::Reply;

/* 3857 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_catalog_terminate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3858 */
typedef __Request__io_catalog_terminate_t _Xio_catalog_terminate::__Request;

/* 3859 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_catalog_terminate_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 flag;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[128];
};

/* 3860 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_catalog_get_data::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 flag;
  mach_msg_trailer_t trailer;
};

/* 3861 */
typedef __Reply__io_catalog_get_data_t _Xio_catalog_get_data::Reply;

/* 3862 */
struct __Reply__io_catalog_get_data_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t outData;
  NDR_record_t NDR;
  mach_msg_type_number_t outDataCnt;
};

/* 3863 */
typedef __Request__io_catalog_get_data_t _Xio_catalog_get_data::__Request;

/* 3864 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_catalog_get_data_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 flag;
};

/* 3865 */
struct _Xio_catalog_get_gen_count::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3866 */
typedef __Reply__io_catalog_get_gen_count_t _Xio_catalog_get_gen_count::Reply;

/* 3867 */
struct __Reply__io_catalog_get_gen_count_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint32_t_0 genCount;
};

/* 3868 */
typedef __Request__io_catalog_get_gen_count_t _Xio_catalog_get_gen_count::__Request;

/* 3869 */
struct __Request__io_catalog_get_gen_count_t
{
  mach_msg_header_t Head;
};

/* 3870 */
struct _Xio_catalog_module_loaded::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[128];
  mach_msg_trailer_t trailer;
};

/* 3871 */
typedef __Reply__io_catalog_module_loaded_t _Xio_catalog_module_loaded::Reply;

/* 3872 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_catalog_module_loaded_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3873 */
typedef __Request__io_catalog_module_loaded_t _Xio_catalog_module_loaded::__Request;

/* 3874 */
struct __Request__io_catalog_module_loaded_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[128];
};

/* 3875 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_catalog_reset::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 flag;
  mach_msg_trailer_t trailer;
};

/* 3876 */
typedef __Reply__io_catalog_reset_t _Xio_catalog_reset::Reply;

/* 3877 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_catalog_reset_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3878 */
typedef __Request__io_catalog_reset_t _Xio_catalog_reset::__Request;

/* 3879 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_catalog_reset_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 flag;
};

/* 3880 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_request_probe::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 options;
  mach_msg_trailer_t trailer;
};

/* 3881 */
typedef __Reply__io_service_request_probe_t _Xio_service_request_probe::Reply;

/* 3882 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_request_probe_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3883 */
typedef __Request__io_service_request_probe_t _Xio_service_request_probe::__Request;

/* 3884 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_request_probe_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 options;
};

/* 3885 */
struct _Xio_registry_entry_get_name_in_plane::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_trailer_t trailer;
};

/* 3886 */
typedef __Reply__io_registry_entry_get_name_in_plane_t _Xio_registry_entry_get_name_in_plane::Reply;

/* 3887 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_get_name_in_plane_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[128];
};

/* 3888 */
typedef __Request__io_registry_entry_get_name_in_plane_t _Xio_registry_entry_get_name_in_plane::__Request;

/* 3889 */
struct __Request__io_registry_entry_get_name_in_plane_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
};

/* 3890 */
struct _Xio_service_match_property_table::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
  mach_msg_trailer_t trailer;
};

/* 3891 */
typedef __Reply__io_service_match_property_table_t _Xio_service_match_property_table::Reply;

/* 3892 */
struct __Reply__io_service_match_property_table_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t matches;
};

/* 3893 */
typedef __Request__io_service_match_property_table_t _Xio_service_match_property_table::__Request;

/* 3894 */
struct __Request__io_service_match_property_table_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
};

/* 3895 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_async_method_scalarI_scalarO::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t outputCnt;
  mach_msg_trailer_t trailer;
};

/* 3896 */
typedef __Reply__io_async_method_scalarI_scalarO_t _Xio_async_method_scalarI_scalarO::Reply;

/* 3897 */
struct __Reply__io_async_method_scalarI_scalarO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t outputCnt;
  int output[16];
};

/* 3898 */
typedef __Request__io_async_method_scalarI_scalarO_t _Xio_async_method_scalarI_scalarO::__Request;

/* 3899 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_async_method_scalarI_scalarO_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t outputCnt;
};

/* 3900 */
typedef __Request__io_async_method_scalarI_scalarO_t $<4168075,1>::__Request;

/* 3901 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_async_method_scalarI_structureO::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t outputCnt;
  mach_msg_trailer_t trailer;
};

/* 3902 */
typedef __Reply__io_async_method_scalarI_structureO_t _Xio_async_method_scalarI_structureO::Reply;

/* 3903 */
struct __Reply__io_async_method_scalarI_structureO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t outputCnt;
  char output[4096];
};

/* 3904 */
typedef __Request__io_async_method_scalarI_structureO_t _Xio_async_method_scalarI_structureO::__Request;

/* 3905 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_async_method_scalarI_structureO_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t outputCnt;
};

/* 3906 */
typedef __Request__io_async_method_scalarI_structureO_t $<4169025,1>::__Request;

/* 3907 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_async_method_scalarI_structureI::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t inputStructCnt;
  char inputStruct[4096];
  mach_msg_trailer_t trailer;
};

/* 3908 */
typedef __Reply__io_async_method_scalarI_structureI_t _Xio_async_method_scalarI_structureI::Reply;

/* 3909 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_async_method_scalarI_structureI_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3910 */
typedef __Request__io_async_method_scalarI_structureI_t _Xio_async_method_scalarI_structureI::__Request;

/* 3911 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_async_method_scalarI_structureI_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  int input[16];
  mach_msg_type_number_t inputStructCnt;
  char inputStruct[4096];
};

/* 3912 */
typedef __Request__io_async_method_scalarI_structureI_t $<4169991,1>::__Request;

/* 3913 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_async_method_structureI_structureO::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  char input[4096];
  mach_msg_type_number_t outputCnt;
  mach_msg_trailer_t trailer;
};

/* 3914 */
typedef __Reply__io_async_method_structureI_structureO_t _Xio_async_method_structureI_structureO::Reply;

/* 3915 */
struct __Reply__io_async_method_structureI_structureO_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t outputCnt;
  char output[4096];
};

/* 3916 */
typedef __Request__io_async_method_structureI_structureO_t _Xio_async_method_structureI_structureO::__Request;

/* 3917 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_async_method_structureI_structureO_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t inputCnt;
  char input[4096];
  mach_msg_type_number_t outputCnt;
};

/* 3918 */
typedef __Request__io_async_method_structureI_structureO_t $<4170950,1>::__Request;

/* 3919 */
struct _Xio_service_add_notification::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  mach_msg_trailer_t trailer;
};

/* 3920 */
typedef __Reply__io_service_add_notification_t _Xio_service_add_notification::Reply;

/* 3921 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_add_notification_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notification;
};

/* 3922 */
typedef __Request__io_service_add_notification_t _Xio_service_add_notification::__Request;

/* 3923 */
struct __Request__io_service_add_notification_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
};

/* 3924 */
typedef __Request__io_service_add_notification_t $<4171932,1>::__Request;

/* 3925 */
struct _Xio_service_add_interest_notification::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t type_of_interestOffset;
  mach_msg_type_number_t type_of_interestCnt;
  char type_of_interest[128];
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  mach_msg_trailer_t trailer;
};

/* 3926 */
typedef __Reply__io_service_add_interest_notification_t _Xio_service_add_interest_notification::Reply;

/* 3927 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_add_interest_notification_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notification;
};

/* 3928 */
typedef __Request__io_service_add_interest_notification_t _Xio_service_add_interest_notification::__Request;

/* 3929 */
struct __Request__io_service_add_interest_notification_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t type_of_interestOffset;
  mach_msg_type_number_t type_of_interestCnt;
  char type_of_interest[128];
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
};

/* 3930 */
typedef __Request__io_service_add_interest_notification_t $<4173038,1>::__Request;

/* 3931 */
struct _Xio_service_acknowledge_notification::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  natural_t notify_ref;
  natural_t response;
  mach_msg_trailer_t trailer;
};

/* 3932 */
typedef __Reply__io_service_acknowledge_notification_t _Xio_service_acknowledge_notification::Reply;

/* 3933 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_acknowledge_notification_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3934 */
typedef __Request__io_service_acknowledge_notification_t _Xio_service_acknowledge_notification::__Request;

/* 3935 */
struct __Request__io_service_acknowledge_notification_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  natural_t notify_ref;
  natural_t response;
};

/* 3936 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_get_notification_semaphore::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  natural_t notification_type;
  mach_msg_trailer_t trailer;
};

/* 3937 */
typedef __Reply__io_connect_get_notification_semaphore_t _Xio_connect_get_notification_semaphore::Reply;

/* 3938 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_get_notification_semaphore_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t semaphore;
};

/* 3939 */
typedef __Request__io_connect_get_notification_semaphore_t _Xio_connect_get_notification_semaphore::__Request;

/* 3940 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_get_notification_semaphore_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  natural_t notification_type;
};

/* 3941 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_unmap_memory::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t into_task;
  NDR_record_t NDR;
  uint32_t_0 memory_type;
  uint32_t_0 address;
  mach_msg_trailer_t trailer;
};

/* 3942 */
typedef __Reply__io_connect_unmap_memory_t _Xio_connect_unmap_memory::Reply;

/* 3943 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_unmap_memory_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 3944 */
typedef __Request__io_connect_unmap_memory_t _Xio_connect_unmap_memory::__Request;

/* 3945 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_unmap_memory_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t into_task;
  NDR_record_t NDR;
  uint32_t_0 memory_type;
  uint32_t_0 address;
};

/* 3946 */
struct _Xio_registry_entry_get_location_in_plane::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_trailer_t trailer;
};

/* 3947 */
typedef __Reply__io_registry_entry_get_location_in_plane_t _Xio_registry_entry_get_location_in_plane::Reply;

/* 3948 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_get_location_in_plane_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t locationOffset;
  mach_msg_type_number_t locationCnt;
  char location[128];
};

/* 3949 */
typedef __Request__io_registry_entry_get_location_in_plane_t _Xio_registry_entry_get_location_in_plane::__Request;

/* 3950 */
struct __Request__io_registry_entry_get_location_in_plane_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
};

/* 3951 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_registry_entry_get_property_recursively::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_type_number_t property_nameOffset;
  mach_msg_type_number_t property_nameCnt;
  char property_name[128];
  uint32_t_0 options;
  mach_msg_trailer_t trailer;
};

/* 3952 */
typedef __Reply__io_registry_entry_get_property_recursively_t _Xio_registry_entry_get_property_recursively::Reply;

/* 3953 */
struct __Reply__io_registry_entry_get_property_recursively_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
};

/* 3954 */
typedef __Request__io_registry_entry_get_property_recursively_t _Xio_registry_entry_get_property_recursively::__Request;

/* 3955 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_registry_entry_get_property_recursively_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_type_number_t property_nameOffset;
  mach_msg_type_number_t property_nameCnt;
  char property_name[128];
  uint32_t_0 options;
};

/* 3956 */
typedef __Request__io_registry_entry_get_property_recursively_t $<4177506,1>::__Request;

/* 3957 */
struct _Xio_service_get_state::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 3958 */
typedef __Reply__io_service_get_state_t _Xio_service_get_state::Reply;

/* 3959 */
struct __Reply__io_service_get_state_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 state;
  uint32_t_0 busy_state;
  uint64_t_0 accumulated_busy_time;
};

/* 3960 */
typedef __Request__io_service_get_state_t _Xio_service_get_state::__Request;

/* 3961 */
struct __Request__io_service_get_state_t
{
  mach_msg_header_t Head;
};

/* 3962 */
struct _Xio_service_get_matching_services_ool::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t matching;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  mach_msg_trailer_t trailer;
};

/* 3963 */
typedef __Reply__io_service_get_matching_services_ool_t _Xio_service_get_matching_services_ool::Reply;

/* 3964 */
struct __Reply__io_service_get_matching_services_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t existing;
  NDR_record_t NDR;
  kern_return_t result;
};

/* 3965 */
typedef __Request__io_service_get_matching_services_ool_t _Xio_service_get_matching_services_ool::__Request;

/* 3966 */
struct __Request__io_service_get_matching_services_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t matching;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
};

/* 3967 */
struct _Xio_service_match_property_table_ool::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t matching;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  mach_msg_trailer_t trailer;
};

/* 3968 */
typedef __Reply__io_service_match_property_table_ool_t _Xio_service_match_property_table_ool::Reply;

/* 3969 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_match_property_table_ool_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  kern_return_t result;
  boolean_t matches;
};

/* 3970 */
typedef __Request__io_service_match_property_table_ool_t _Xio_service_match_property_table_ool::__Request;

/* 3971 */
struct __Request__io_service_match_property_table_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t matching;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
};

/* 3972 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_add_notification_ool::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t matching;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingCnt;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  mach_msg_trailer_t trailer;
};

/* 3973 */
typedef __Reply__io_service_add_notification_ool_t _Xio_service_add_notification_ool::Reply;

/* 3974 */
struct __Reply__io_service_add_notification_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t notification;
  NDR_record_t NDR;
  kern_return_t result;
};

/* 3975 */
typedef __Request__io_service_add_notification_ool_t _Xio_service_add_notification_ool::__Request;

/* 3976 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_add_notification_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t matching;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingCnt;
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
};

/* 3977 */
typedef __Request__io_service_add_notification_ool_t $<4180773,1>::__Request;

/* 3978 */
struct _Xio_object_get_superclass::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t obj_nameOffset;
  mach_msg_type_number_t obj_nameCnt;
  char obj_name[128];
  mach_msg_trailer_t trailer;
};

/* 3979 */
typedef __Reply__io_object_get_superclass_t _Xio_object_get_superclass::Reply;

/* 3980 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_object_get_superclass_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t class_nameOffset;
  mach_msg_type_number_t class_nameCnt;
  char class_name[128];
};

/* 3981 */
typedef __Request__io_object_get_superclass_t _Xio_object_get_superclass::__Request;

/* 3982 */
struct __Request__io_object_get_superclass_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t obj_nameOffset;
  mach_msg_type_number_t obj_nameCnt;
  char obj_name[128];
};

/* 3983 */
struct _Xio_object_get_bundle_identifier::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t obj_nameOffset;
  mach_msg_type_number_t obj_nameCnt;
  char obj_name[128];
  mach_msg_trailer_t trailer;
};

/* 3984 */
typedef __Reply__io_object_get_bundle_identifier_t _Xio_object_get_bundle_identifier::Reply;

/* 3985 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_object_get_bundle_identifier_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t class_nameOffset;
  mach_msg_type_number_t class_nameCnt;
  char class_name[128];
};

/* 3986 */
typedef __Request__io_object_get_bundle_identifier_t _Xio_object_get_bundle_identifier::__Request;

/* 3987 */
struct __Request__io_object_get_bundle_identifier_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t obj_nameOffset;
  mach_msg_type_number_t obj_nameCnt;
  char obj_name[128];
};

/* 3988 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_open_extended::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t owningTask;
  mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  uint32_t_0 connect_type;
  NDR_record_t ndr;
  mach_msg_type_number_t propertiesCnt;
  mach_msg_trailer_t trailer;
};

/* 3989 */
typedef __Reply__io_service_open_extended_t _Xio_service_open_extended::Reply;

/* 3990 */
struct __Reply__io_service_open_extended_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t connection;
  NDR_record_t NDR;
  kern_return_t result;
};

/* 3991 */
typedef __Request__io_service_open_extended_t _Xio_service_open_extended::__Request;

/* 3992 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_open_extended_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t owningTask;
  mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  uint32_t_0 connect_type;
  NDR_record_t ndr;
  mach_msg_type_number_t propertiesCnt;
};

/* 3993 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_map_memory_into_task::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t into_task;
  NDR_record_t NDR;
  uint32_t_0 memory_type;
  mach_vm_address_t address;
  mach_vm_size_t size;
  uint32_t_0 flags;
  mach_msg_trailer_t trailer;
};

/* 3994 */
typedef __Reply__io_connect_map_memory_into_task_t _Xio_connect_map_memory_into_task::Reply;

/* 3995 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_map_memory_into_task_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_vm_address_t address;
  mach_vm_size_t size;
};

/* 3996 */
typedef __Request__io_connect_map_memory_into_task_t _Xio_connect_map_memory_into_task::__Request;

/* 3997 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_map_memory_into_task_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t into_task;
  NDR_record_t NDR;
  uint32_t_0 memory_type;
  mach_vm_address_t address;
  mach_vm_size_t size;
  uint32_t_0 flags;
};

/* 3998 */
struct _Xio_connect_unmap_memory_from_task::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t from_task;
  NDR_record_t NDR;
  uint32_t_0 memory_type;
  mach_vm_address_t address;
  mach_msg_trailer_t trailer;
};

/* 3999 */
typedef __Reply__io_connect_unmap_memory_from_task_t _Xio_connect_unmap_memory_from_task::Reply;

/* 4000 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_unmap_memory_from_task_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 4001 */
typedef __Request__io_connect_unmap_memory_from_task_t _Xio_connect_unmap_memory_from_task::__Request;

/* 4002 */
struct __Request__io_connect_unmap_memory_from_task_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t from_task;
  NDR_record_t NDR;
  uint32_t_0 memory_type;
  mach_vm_address_t address;
};

/* 4003 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_method::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t scalar_inputCnt;
  io_user_scalar_t scalar_input[16];
  mach_msg_type_number_t inband_inputCnt;
  char inband_input[4096];
  mach_vm_address_t ool_input;
  mach_vm_size_t ool_input_size;
  mach_msg_type_number_t inband_outputCnt;
  mach_msg_type_number_t scalar_outputCnt;
  mach_vm_address_t ool_output;
  mach_vm_size_t ool_output_size;
  mach_msg_trailer_t trailer;
};

/* 4004 */
typedef uint64_t_0 io_user_scalar_t;

/* 4005 */
typedef __Reply__io_connect_method_t _Xio_connect_method::Reply;

/* 4006 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_method_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t inband_outputCnt;
  char inband_output[4096];
  mach_msg_type_number_t scalar_outputCnt;
  io_user_scalar_t scalar_output[16];
  mach_vm_size_t ool_output_size;
};

/* 4007 */
typedef __Request__io_connect_method_t _Xio_connect_method::__Request;

/* 4008 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_method_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t scalar_inputCnt;
  io_user_scalar_t scalar_input[16];
  mach_msg_type_number_t inband_inputCnt;
  char inband_input[4096];
  mach_vm_address_t ool_input;
  mach_vm_size_t ool_input_size;
  mach_msg_type_number_t inband_outputCnt;
  mach_msg_type_number_t scalar_outputCnt;
  mach_vm_address_t ool_output;
  mach_vm_size_t ool_output_size;
};

/* 4009 */
typedef __Request__io_connect_method_t $<4186305,1>::__Request;

/* 4010 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_async_method::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t scalar_inputCnt;
  io_user_scalar_t scalar_input[16];
  mach_msg_type_number_t inband_inputCnt;
  char inband_input[4096];
  mach_vm_address_t ool_input;
  mach_vm_size_t ool_input_size;
  mach_msg_type_number_t inband_outputCnt;
  mach_msg_type_number_t scalar_outputCnt;
  mach_vm_address_t ool_output;
  mach_vm_size_t ool_output_size;
  mach_msg_trailer_t trailer;
};

/* 4011 */
typedef uint64_t_0 io_user_reference_t;

/* 4012 */
typedef __Reply__io_connect_async_method_t _Xio_connect_async_method::Reply;

/* 4013 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_async_method_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  mach_msg_type_number_t inband_outputCnt;
  char inband_output[4096];
  mach_msg_type_number_t scalar_outputCnt;
  io_user_scalar_t scalar_output[16];
  mach_vm_size_t ool_output_size;
};

/* 4014 */
typedef __Request__io_connect_async_method_t _Xio_connect_async_method::__Request;

/* 4015 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_async_method_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
  uint32_t_0 selector;
  mach_msg_type_number_t scalar_inputCnt;
  io_user_scalar_t scalar_input[16];
  mach_msg_type_number_t inband_inputCnt;
  char inband_input[4096];
  mach_vm_address_t ool_input;
  mach_vm_size_t ool_input_size;
  mach_msg_type_number_t inband_outputCnt;
  mach_msg_type_number_t scalar_outputCnt;
  mach_vm_address_t ool_output;
  mach_vm_size_t ool_output_size;
};

/* 4016 */
typedef __Request__io_connect_async_method_t $<4187691,1>::__Request;

/* 4017 */
struct _Xio_connect_set_notification_port_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t port;
  NDR_record_t NDR;
  uint32_t_0 notification_type;
  io_user_reference_t reference;
  mach_msg_trailer_t trailer;
};

/* 4018 */
typedef __Reply__io_connect_set_notification_port_64_t _Xio_connect_set_notification_port_64::Reply;

/* 4019 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_connect_set_notification_port_64_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 4020 */
typedef __Request__io_connect_set_notification_port_64_t _Xio_connect_set_notification_port_64::__Request;

/* 4021 */
struct __Request__io_connect_set_notification_port_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t port;
  NDR_record_t NDR;
  uint32_t_0 notification_type;
  io_user_reference_t reference;
};

/* 4022 */
struct _Xio_service_add_notification_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
  mach_msg_trailer_t trailer;
};

/* 4023 */
typedef __Reply__io_service_add_notification_64_t _Xio_service_add_notification_64::Reply;

/* 4024 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_add_notification_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notification;
};

/* 4025 */
typedef __Request__io_service_add_notification_64_t _Xio_service_add_notification_64::__Request;

/* 4026 */
struct __Request__io_service_add_notification_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
};

/* 4027 */
typedef __Request__io_service_add_notification_64_t $<4189416,1>::__Request;

/* 4028 */
struct _Xio_service_add_interest_notification_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t type_of_interestOffset;
  mach_msg_type_number_t type_of_interestCnt;
  char type_of_interest[128];
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
  mach_msg_trailer_t trailer;
};

/* 4029 */
typedef __Reply__io_service_add_interest_notification_64_t _Xio_service_add_interest_notification_64::Reply;

/* 4030 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_add_interest_notification_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notification;
};

/* 4031 */
typedef __Request__io_service_add_interest_notification_64_t _Xio_service_add_interest_notification_64::__Request;

/* 4032 */
struct __Request__io_service_add_interest_notification_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t type_of_interestOffset;
  mach_msg_type_number_t type_of_interestCnt;
  char type_of_interest[128];
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
};

/* 4033 */
typedef __Request__io_service_add_interest_notification_64_t $<4190527,1>::__Request;

/* 4034 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_add_notification_ool_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t matching;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingCnt;
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
  mach_msg_trailer_t trailer;
};

/* 4035 */
typedef __Reply__io_service_add_notification_ool_64_t _Xio_service_add_notification_ool_64::Reply;

/* 4036 */
struct __Reply__io_service_add_notification_ool_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t notification;
  NDR_record_t NDR;
  kern_return_t result;
};

/* 4037 */
typedef __Request__io_service_add_notification_ool_64_t _Xio_service_add_notification_ool_64::__Request;

/* 4038 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_add_notification_ool_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_ool_descriptor_t matching;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingCnt;
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
};

/* 4039 */
typedef __Request__io_service_add_notification_ool_64_t $<4191586,1>::__Request;

/* 4040 */
struct _Xio_registry_entry_get_registry_entry_id::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 4041 */
typedef __Reply__io_registry_entry_get_registry_entry_id_t _Xio_registry_entry_get_registry_entry_id::Reply;

/* 4042 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_registry_entry_get_registry_entry_id_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint64_t_0 entry_id;
};

/* 4043 */
typedef __Request__io_registry_entry_get_registry_entry_id_t _Xio_registry_entry_get_registry_entry_id::__Request;

/* 4044 */
struct __Request__io_registry_entry_get_registry_entry_id_t
{
  mach_msg_header_t Head;
};

/* 4045 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_connect_method_var_output::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t scalar_inputCnt;
  io_user_scalar_t scalar_input[16];
  mach_msg_type_number_t inband_inputCnt;
  char inband_input[4096];
  mach_vm_address_t ool_input;
  mach_vm_size_t ool_input_size;
  mach_msg_type_number_t inband_outputCnt;
  mach_msg_type_number_t scalar_outputCnt;
  mach_msg_trailer_t trailer;
};

/* 4046 */
typedef __Reply__io_connect_method_var_output_t _Xio_connect_method_var_output::Reply;

/* 4047 */
struct __Reply__io_connect_method_var_output_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t var_output;
  NDR_record_t NDR;
  mach_msg_type_number_t inband_outputCnt;
  char inband_output[4096];
  mach_msg_type_number_t scalar_outputCnt;
  __attribute__((packed)) __attribute__((aligned(1))) io_user_scalar_t scalar_output[16];
  mach_msg_type_number_t var_outputCnt;
};

/* 4048 */
typedef __Request__io_connect_method_var_output_t _Xio_connect_method_var_output::__Request;

/* 4049 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_connect_method_var_output_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint32_t_0 selector;
  mach_msg_type_number_t scalar_inputCnt;
  io_user_scalar_t scalar_input[16];
  mach_msg_type_number_t inband_inputCnt;
  char inband_input[4096];
  mach_vm_address_t ool_input;
  mach_vm_size_t ool_input_size;
  mach_msg_type_number_t inband_outputCnt;
  mach_msg_type_number_t scalar_outputCnt;
};

/* 4050 */
typedef __Request__io_connect_method_var_output_t $<4193654,1>::__Request;

/* 4051 */
struct _Xio_service_get_matching_service::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
  mach_msg_trailer_t trailer;
};

/* 4052 */
typedef __Reply__io_service_get_matching_service_t _Xio_service_get_matching_service::Reply;

/* 4053 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_get_matching_service_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t service;
};

/* 4054 */
typedef __Request__io_service_get_matching_service_t _Xio_service_get_matching_service::__Request;

/* 4055 */
struct __Request__io_service_get_matching_service_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingOffset;
  mach_msg_type_number_t matchingCnt;
  char matching[512];
};

/* 4056 */
struct _Xio_service_get_matching_service_ool::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t matching;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  mach_msg_trailer_t trailer;
};

/* 4057 */
typedef __Reply__io_service_get_matching_service_ool_t _Xio_service_get_matching_service_ool::Reply;

/* 4058 */
struct __Reply__io_service_get_matching_service_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t service;
  NDR_record_t NDR;
  kern_return_t result;
};

/* 4059 */
typedef __Request__io_service_get_matching_service_ool_t _Xio_service_get_matching_service_ool::__Request;

/* 4060 */
struct __Request__io_service_get_matching_service_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t matching;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
};

/* 4061 */
struct _Xio_service_get_authorization_id::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 4062 */
typedef __Reply__io_service_get_authorization_id_t _Xio_service_get_authorization_id::Reply;

/* 4063 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_get_authorization_id_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint64_t_0 authorization_id;
};

/* 4064 */
typedef __Request__io_service_get_authorization_id_t _Xio_service_get_authorization_id::__Request;

/* 4065 */
struct __Request__io_service_get_authorization_id_t
{
  mach_msg_header_t Head;
};

/* 4066 */
struct _Xio_service_set_authorization_id::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint64_t_0 authorization_id;
  mach_msg_trailer_t trailer;
};

/* 4067 */
typedef __Reply__io_service_set_authorization_id_t _Xio_service_set_authorization_id::Reply;

/* 4068 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_set_authorization_id_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
};

/* 4069 */
typedef __Request__io_service_set_authorization_id_t _Xio_service_set_authorization_id::__Request;

/* 4070 */
struct __Request__io_service_set_authorization_id_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  uint64_t_0 authorization_id;
};

/* 4071 */
struct _Xio_server_version::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 4072 */
typedef __Reply__io_server_version_t _Xio_server_version::Reply;

/* 4073 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_server_version_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  uint64_t_0 version;
};

/* 4074 */
typedef __Request__io_server_version_t _Xio_server_version::__Request;

/* 4075 */
struct __Request__io_server_version_t
{
  mach_msg_header_t Head;
};

/* 4076 */
struct _Xio_registry_entry_get_properties_bin::Request
{
  mach_msg_header_t Head;
  mach_msg_trailer_t trailer;
};

/* 4077 */
typedef __Reply__io_registry_entry_get_properties_bin_t _Xio_registry_entry_get_properties_bin::Reply;

/* 4078 */
struct __Reply__io_registry_entry_get_properties_bin_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
};

/* 4079 */
typedef __Request__io_registry_entry_get_properties_bin_t _Xio_registry_entry_get_properties_bin::__Request;

/* 4080 */
struct __Request__io_registry_entry_get_properties_bin_t
{
  mach_msg_header_t Head;
};

/* 4081 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_registry_entry_get_property_bin::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_type_number_t property_nameOffset;
  mach_msg_type_number_t property_nameCnt;
  char property_name[128];
  uint32_t_0 options;
  mach_msg_trailer_t trailer;
};

/* 4082 */
typedef __Reply__io_registry_entry_get_property_bin_t _Xio_registry_entry_get_property_bin::Reply;

/* 4083 */
struct __Reply__io_registry_entry_get_property_bin_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t properties;
  NDR_record_t NDR;
  mach_msg_type_number_t propertiesCnt;
};

/* 4084 */
typedef __Request__io_registry_entry_get_property_bin_t _Xio_registry_entry_get_property_bin::__Request;

/* 4085 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_registry_entry_get_property_bin_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_type_number_t property_nameOffset;
  mach_msg_type_number_t property_nameCnt;
  char property_name[128];
  uint32_t_0 options;
};

/* 4086 */
typedef __Request__io_registry_entry_get_property_bin_t $<4198849,1>::__Request;

/* 4087 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_get_matching_service_bin::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
  mach_msg_trailer_t trailer;
};

/* 4088 */
typedef __Reply__io_service_get_matching_service_bin_t _Xio_service_get_matching_service_bin::Reply;

/* 4089 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_get_matching_service_bin_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t service;
};

/* 4090 */
typedef __Request__io_service_get_matching_service_bin_t _Xio_service_get_matching_service_bin::__Request;

/* 4091 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_get_matching_service_bin_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
};

/* 4092 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_get_matching_services_bin::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
  mach_msg_trailer_t trailer;
};

/* 4093 */
typedef __Reply__io_service_get_matching_services_bin_t _Xio_service_get_matching_services_bin::Reply;

/* 4094 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_get_matching_services_bin_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t existing;
};

/* 4095 */
typedef __Request__io_service_get_matching_services_bin_t _Xio_service_get_matching_services_bin::__Request;

/* 4096 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_get_matching_services_bin_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
};

/* 4097 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_match_property_table_bin::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
  mach_msg_trailer_t trailer;
};

/* 4098 */
typedef __Reply__io_service_match_property_table_bin_t _Xio_service_match_property_table_bin::Reply;

/* 4099 */
struct __Reply__io_service_match_property_table_bin_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t matches;
};

/* 4100 */
typedef __Request__io_service_match_property_table_bin_t _Xio_service_match_property_table_bin::__Request;

/* 4101 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_match_property_table_bin_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
};

/* 4102 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_add_notification_bin::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
  mach_msg_trailer_t trailer;
};

/* 4103 */
typedef __Reply__io_service_add_notification_bin_t _Xio_service_add_notification_bin::Reply;

/* 4104 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_add_notification_bin_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notification;
};

/* 4105 */
typedef __Request__io_service_add_notification_bin_t _Xio_service_add_notification_bin::__Request;

/* 4106 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_add_notification_bin_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
  mach_msg_type_number_t referenceCnt;
  natural_t reference[8];
};

/* 4107 */
typedef __Request__io_service_add_notification_bin_t $<4202198,1>::__Request;

/* 4108 */
struct __attribute__((packed)) __attribute__((aligned(4))) _Xio_service_add_notification_bin_64::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
  mach_msg_trailer_t trailer;
};

/* 4109 */
typedef __Reply__io_service_add_notification_bin_64_t _Xio_service_add_notification_bin_64::Reply;

/* 4110 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Reply__io_service_add_notification_bin_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t notification;
};

/* 4111 */
typedef __Request__io_service_add_notification_bin_64_t _Xio_service_add_notification_bin_64::__Request;

/* 4112 */
struct __attribute__((packed)) __attribute__((aligned(4))) __Request__io_service_add_notification_bin_64_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  mach_msg_port_descriptor_t wake_port;
  NDR_record_t NDR;
  mach_msg_type_number_t notification_typeOffset;
  mach_msg_type_number_t notification_typeCnt;
  char notification_type[128];
  mach_msg_type_number_t matchingCnt;
  char matching[4096];
  mach_msg_type_number_t referenceCnt;
  io_user_reference_t reference[8];
};

/* 4113 */
typedef __Request__io_service_add_notification_bin_64_t $<4203353,1>::__Request;

/* 4114 */
struct _Xio_registry_entry_get_path_ool::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
  mach_msg_trailer_t trailer;
};

/* 4115 */
typedef __Reply__io_registry_entry_get_path_ool_t _Xio_registry_entry_get_path_ool::Reply;

/* 4116 */
struct __Reply__io_registry_entry_get_path_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t path_ool;
  NDR_record_t NDR;
  mach_msg_type_number_t pathOffset;
  mach_msg_type_number_t pathCnt;
  char path[4096];
  mach_msg_type_number_t path_oolCnt;
};

/* 4117 */
typedef __Request__io_registry_entry_get_path_ool_t _Xio_registry_entry_get_path_ool::__Request;

/* 4118 */
struct __Request__io_registry_entry_get_path_ool_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t planeOffset;
  mach_msg_type_number_t planeCnt;
  char plane[128];
};

/* 4119 */
struct _Xio_registry_entry_from_path_ool::Request
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t path_ool;
  NDR_record_t NDR;
  mach_msg_type_number_t pathOffset;
  mach_msg_type_number_t pathCnt;
  char path[4096];
  mach_msg_type_number_t path_oolCnt;
  mach_msg_trailer_t trailer;
};

/* 4120 */
typedef __Reply__io_registry_entry_from_path_ool_t _Xio_registry_entry_from_path_ool::Reply;

/* 4121 */
struct __Reply__io_registry_entry_from_path_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_port_descriptor_t registry_entry;
  NDR_record_t NDR;
  kern_return_t result;
};

/* 4122 */
typedef __Request__io_registry_entry_from_path_ool_t _Xio_registry_entry_from_path_ool::__Request;

/* 4123 */
struct __Request__io_registry_entry_from_path_ool_t
{
  mach_msg_header_t Head;
  mach_msg_body_t msgh_body;
  __attribute__((packed)) __attribute__((aligned(1))) mach_msg_ool_descriptor_t path_ool;
  NDR_record_t NDR;
  mach_msg_type_number_t pathOffset;
  mach_msg_type_number_t pathCnt;
  char path[4096];
  mach_msg_type_number_t path_oolCnt;
};

/* 4124 */
typedef __Request__io_registry_entry_from_path_ool_t $<4205342,1>::__Request;

/* 4125 */
struct _Xio_device_tree_entry_exists_with_name::Request
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[128];
  mach_msg_trailer_t trailer;
};

/* 4126 */
typedef __Reply__io_device_tree_entry_exists_with_name_t _Xio_device_tree_entry_exists_with_name::Reply;

/* 4127 */
struct __Reply__io_device_tree_entry_exists_with_name_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  kern_return_t RetCode;
  boolean_t exists;
};

/* 4128 */
typedef __Request__io_device_tree_entry_exists_with_name_t _Xio_device_tree_entry_exists_with_name::__Request;

/* 4129 */
struct __Request__io_device_tree_entry_exists_with_name_t
{
  mach_msg_header_t Head;
  NDR_record_t NDR;
  mach_msg_type_number_t nameOffset;
  mach_msg_type_number_t nameCnt;
  char name[128];
};

/* 4130 */
typedef __builtin_va_list va_list_121;

/* 4131 */
typedef kmod_info_t *kmod_info_array_t;

/* 4132 */
struct kperf_sample
{
  kperf_thread_info th_info;
  kperf_thread_scheduling th_scheduling;
  kperf_thread_snapshot th_snapshot;
  kperf_thread_dispatch th_dispatch;
  kperf_task_snapshot tk_snapshot;
  callstack kcallstack;
  callstack ucallstack;
  meminfo meminfo;
  kpcdata kpcdata;
};

/* 4133 */
struct kperf_thread_info
{
  uint64_t_0 kpthi_pid;
  uint64_t_0 kpthi_tid;
  uint64_t_0 kpthi_dq_addr;
  uint64_t_0 kpthi_runmode;
};

/* 4134 */
struct __attribute__((aligned(8))) kperf_thread_scheduling
{
  uint64_t_0 kpthsc_user_time;
  uint64_t_0 kpthsc_system_time;
  uint64_t_0 kpthsc_runnable_time;
  unsigned int kpthsc_state;
  uint16_t kpthsc_base_priority;
  uint16_t kpthsc_sched_priority;
  unsigned __int32 kpthsc_effective_qos : 3;
  unsigned __int32 kpthsc_requested_qos : 3;
  unsigned __int32 kpthsc_requested_qos_override : 3;
  unsigned __int32 kpthsc_requested_qos_promote : 3;
  unsigned __int32 kpthsc_requested_qos_ipc_override : 3;
  unsigned __int32 kpthsc_requested_qos_sync_ipc_override : 3;
  unsigned __int32 kpthsc_effective_latency_qos : 3;
};

/* 4135 */
struct __attribute__((aligned(8))) kperf_thread_snapshot
{
  uint64_t_0 kpthsn_last_made_runnable_time;
  int16_t kpthsn_suspend_count;
  uint8_t_0 kpthsn_io_tier;
  uint8_t_0 kpthsn_flags;
};

/* 4136 */
struct kperf_thread_dispatch
{
  uint64_t_0 kpthdi_dq_serialno;
};

/* 4137 */
struct kperf_task_snapshot
{
  uint64_t_0 kptksn_flags;
  uint64_t_0 kptksn_user_time_in_terminated_threads;
  uint64_t_0 kptksn_system_time_in_terminated_threads;
  int kptksn_suspend_count;
  int kptksn_pageins;
};

/* 4138 */
struct callstack
{
  uint32_t_0 flags;
  uint32_t_0 nframes;
  uint64_t_0 frames[128];
};

/* 4139 */
struct meminfo
{
  uint64_t_0 phys_footprint;
  uint64_t_0 purgeable_volatile;
  uint64_t_0 purgeable_volatile_compressed;
};

/* 4140 */
struct kpcdata
{
  int curcpu;
  uint32_t_0 running;
  uint32_t_0 counterc;
  uint64_t_0 counterv[33];
  uint32_t_0 configc;
  uint64_t_0 configv[32];
};

/* 4141 */
typedef __builtin_va_list va_list_122;

/* 4142 */
struct action
{
  uint32_t_0 sample;
  uint32_t_0 ucallstack_depth;
  uint32_t_0 kcallstack_depth;
  uint32_t_0 userdata;
  int pid_filter;
};

/* 4143 */
typedef __builtin_va_list va_list_123;

/* 4144 */
struct kperf_context
{
  int cur_pid;
  thread_t cur_thread;
  task_t cur_task;
  uintptr_t *starting_fp;
  unsigned int trigger_type;
  unsigned int trigger_id;
};

/* 4145 */
typedef __builtin_va_list va_list_124;

/* 4146 */
typedef _cframe_t cframe_t;

/* 4147 */
struct _cframe_t
{
  uint32_t_0 prev;
  uint32_t_0 caller;
  uint32_t_0 args[];
};

/* 4148 */
typedef __builtin_va_list va_list_125;

/* 4149 */
typedef __builtin_va_list va_list_126;

/* 4150 */
typedef __builtin_va_list va_list_127;

/* 4151 */
struct kperf_timer
{
  timer_call tcall;
  uint64_t_0 period;
  unsigned int actionid;
  volatile unsigned int active;
  bitmap_t pending_cpus;
};

/* 4152 */
typedef __builtin_va_list va_list_128;

/* 4153 */
typedef __builtin_va_list va_list_129;

/* 4154 */
struct __attribute__((packed)) __attribute__((aligned(1))) kperf_kdebug_filter
{
  uint64_t_0 types[2];
  uint32_t_0 debugids[32];
  uint8_t_0 n_debugids;
};

/* 4155 */
typedef __builtin_va_list va_list_130;

/* 4156 */
typedef __builtin_va_list va_list_131;

/* 4157 */
typedef void (*kpc_pm_handler_t)(boolean_t);

/* 4158 */
typedef __builtin_va_list va_list_132;

/* 4159 */
struct kpc_config_remote
{
  uint32_t_0 classes;
  kpc_config_t *configv;
  uint64_t_0 pmc_mask;
};

/* 4160 */
typedef uint64_t_0 kpc_config_t;

/* 4161 */
struct kpc_running_remote
{
  uint32_t_0 classes;
  uint64_t_0 cfg_target_mask;
  uint64_t_0 cfg_state_mask;
};

/* 4162 */
typedef void (*mt_pmi_fn)(_Bool, void *);

/* 4163 */
typedef __builtin_va_list va_list_133;

/* 4164 */
typedef __builtin_va_list va_list_134;

/* 4165 */
struct console_ops
{
  void (*putc)(int, int, int);
  int (*getc)(int, int, boolean_t, boolean_t);
};

/* 4166 */
struct $D6EB552F6013146B7048D1D0F190A4A3
{
  char *buffer;
  int len;
  int used;
  char *write_ptr;
  char *read_ptr;
  simple_lock_data_t read_lock;
  simple_lock_data_t write_lock;
};

/* 4167 */
typedef console_buf console_buf_t;

/* 4168 */
struct console_buf
{
  char *buf_base;
  char *buf_end;
  char *buf_ptr;
  char buf[232];
};

/* 4169 */
typedef __builtin_va_list va_list_135;

/* 4170 */
enum vt100state_e : __int32
{
  ESnormal = 0x0,
  ESesc = 0x1,
  ESsquare = 0x2,
  ESgetpars = 0x3,
  ESgotpars = 0x4,
  ESfunckey = 0x5,
  EShash = 0x6,
  ESsetG0 = 0x7,
  ESsetG1 = 0x8,
  ESask = 0x9,
  EScharsize = 0xA,
  ESignore = 0xB,
};

/* 4171 */
struct vc_info
{
  unsigned int v_height;
  unsigned int v_width;
  unsigned int v_depth;
  unsigned int v_rowbytes;
  unsigned __int64 v_baseaddr;
  unsigned int v_type;
  char v_name[32];
  uint64_t_0 v_physaddr;
  unsigned int v_rows;
  unsigned int v_columns;
  unsigned int v_rowscanbytes;
  unsigned int v_scale;
  unsigned int v_rotate;
  unsigned int v_reserved[3];
};

/* 4172 */
typedef vc_progress_element vc_progress_element_0;

/* 4173 */
struct vc_progress_element
{
  unsigned int version;
  unsigned int flags;
  unsigned int time;
  unsigned __int8 count;
  unsigned __int8 res[3];
  int width;
  int height;
  int dx;
  int dy;
  int transparent;
  unsigned int res2[3];
};

/* 4174 */
typedef vc_progress_user_options vc_progress_user_options_0;

/* 4175 */
struct vc_progress_user_options
{
  uint32_t_0 options;
  uint32_t_0 x_pos;
  uint32_t_0 y_pos;
  uint32_t_0 resv[8];
};

/* 4176 */
typedef boot_args boot_args_0;

/* 4177 */
struct boot_args
{
  uint16_t Revision;
  uint16_t Version;
  uint8_t_0 efiMode;
  uint8_t_0 debugMode;
  uint16_t flags;
  char CommandLine[1024];
  uint32_t_0 MemoryMap;
  uint32_t_0 MemoryMapSize;
  uint32_t_0 MemoryMapDescriptorSize;
  uint32_t_0 MemoryMapDescriptorVersion;
  Boot_VideoV1_0 VideoV1;
  uint32_t_0 deviceTreeP;
  uint32_t_0 deviceTreeLength;
  uint32_t_0 kaddr;
  uint32_t_0 ksize;
  uint32_t_0 efiRuntimeServicesPageStart;
  uint32_t_0 efiRuntimeServicesPageCount;
  uint64_t_0 efiRuntimeServicesVirtualPageStart;
  uint32_t_0 efiSystemTable;
  uint32_t_0 kslide;
  uint32_t_0 performanceDataStart;
  uint32_t_0 performanceDataSize;
  uint32_t_0 keyStoreDataStart;
  uint32_t_0 keyStoreDataSize;
  uint64_t_0 bootMemStart;
  uint64_t_0 bootMemSize;
  uint64_t_0 PhysicalMemorySize;
  uint64_t_0 FSBFrequency;
  uint64_t_0 pciConfigSpaceBaseAddress;
  uint32_t_0 pciConfigSpaceStartBusNumber;
  uint32_t_0 pciConfigSpaceEndBusNumber;
  uint32_t_0 csrActiveConfig;
  uint32_t_0 csrCapabilities;
  uint32_t_0 boot_SMC_plimit;
  uint16_t bootProgressMeterStart;
  uint16_t bootProgressMeterEnd;
  Boot_Video_0 Video;
  uint32_t_0 apfsDataStart;
  uint32_t_0 apfsDataSize;
  uint32_t_0 __reserved4[710];
};

/* 4178 */
typedef Boot_VideoV1 Boot_VideoV1_0;

/* 4179 */
struct Boot_VideoV1
{
  uint32_t_0 v_baseAddr;
  uint32_t_0 v_display;
  uint32_t_0 v_rowBytes;
  uint32_t_0 v_width;
  uint32_t_0 v_height;
  uint32_t_0 v_depth;
};

/* 4180 */
typedef Boot_Video Boot_Video_0;

/* 4181 */
struct Boot_Video
{
  uint32_t_0 v_display;
  uint32_t_0 v_rowBytes;
  uint32_t_0 v_width;
  uint32_t_0 v_height;
  uint32_t_0 v_depth;
  uint32_t_0 v_resv[7];
  uint64_t_0 v_baseAddr;
};

/* 4182 */
union $<4588703,1>::$10651F3CF530575B816276E5E21DA5BB
{
  unsigned __int8 *charptr;
  unsigned __int16 *shortptr;
  uint32_t_0 *longptr;
};

/* 4183 */
typedef lzss_image_state lzss_image_state_0;

/* 4184 */
struct lzss_image_state
{
  uint32_t_0 col;
  uint32_t_0 row;
  uint32_t_0 width;
  uint32_t_0 height;
  uint32_t_0 bytes_per_row;
  volatile uint32_t_0 *row_start;
  const uint8_t_0 *clut;
};

/* 4185 */
typedef PE_Video PE_Video_0;

/* 4186 */
struct PE_Video
{
  unsigned __int64 v_baseAddr;
  unsigned __int64 v_rowBytes;
  unsigned __int64 v_width;
  unsigned __int64 v_height;
  unsigned __int64 v_depth;
  unsigned __int64 v_display;
  char v_pixelFormat[64];
  unsigned __int64 v_offset;
  unsigned __int64 v_length;
  unsigned __int8 v_rotate;
  unsigned __int8 v_scale;
  char reserved1[2];
  __int64 reserved2;
};

/* 4187 */
struct __attribute__((aligned(8))) micro_snapshot_buffer
{
  vm_offset_t buffer;
  uint32_t_0 size;
  uint32_t_0 current_position;
  uint32_t_0 end_point;
};

/* 4188 */
enum $3B80CFB07839A9D065089C6FF5C476F4 : __int32
{
  kBootProfileDisabled = 0x0,
  kBootProfileStartTimerAtBoot = 0x1,
  kBootProfileStartTimerAtWake = 0x2,
};

/* 4189 */
enum telemetry_pmi : __int32
{
  TELEMETRY_PMI_NONE = 0x0,
  TELEMETRY_PMI_INSTRS = 0x1,
  TELEMETRY_PMI_CYCLES = 0x2,
};

/* 4190 */
typedef __builtin_va_list va_list_136;

/* 4191 */
struct __attribute__((packed)) __attribute__((aligned(1))) micro_snapshot
{
  uint32_t_0 snapshot_magic;
  uint32_t_0 ms_cpu;
  uint64_t_0 ms_time;
  uint64_t_0 ms_time_microsecs;
  uint8_t_0 ms_flags;
  uint16_t ms_opaque_flags;
};

/* 4192 */
struct __attribute__((packed)) __attribute__((aligned(1))) task_snapshot
{
  uint32_t_0 snapshot_magic;
  int32_t pid;
  uint64_t_0 uniqueid;
  uint64_t_0 user_time_in_terminated_threads;
  uint64_t_0 system_time_in_terminated_threads;
  uint8_t_0 shared_cache_identifier[16];
  uint64_t_0 shared_cache_slide;
  uint32_t_0 nloadinfos;
  int suspend_count;
  int task_size;
  int faults;
  int pageins;
  int cow_faults;
  uint32_t_0 ss_flags;
  uint64_t_0 p_start_sec;
  uint64_t_0 p_start_usec;
  char p_comm[17];
  uint32_t_0 was_throttled;
  uint32_t_0 did_throttle;
  uint32_t_0 latency_qos;
  uint64_t_0 disk_reads_count;
  uint64_t_0 disk_reads_size;
  uint64_t_0 disk_writes_count;
  uint64_t_0 disk_writes_size;
  uint64_t_0 io_priority_count[4];
  uint64_t_0 io_priority_size[4];
  uint64_t_0 paging_count;
  uint64_t_0 paging_size;
  uint64_t_0 non_paging_count;
  uint64_t_0 non_paging_size;
  uint64_t_0 data_count;
  uint64_t_0 data_size;
  uint64_t_0 metadata_count;
  uint64_t_0 metadata_size;
  uint32_t_0 donating_pid_count;
};

/* 4193 */
struct __attribute__((packed)) __attribute__((aligned(4))) thread_snapshot
{
  uint32_t_0 snapshot_magic;
  uint32_t_0 nkern_frames;
  uint32_t_0 nuser_frames;
  uint64_t_0 wait_event;
  uint64_t_0 continuation;
  uint64_t_0 thread_id;
  uint64_t_0 user_time;
  uint64_t_0 system_time;
  int32_t state;
  int32_t priority;
  int32_t sched_pri;
  int32_t sched_flags;
  char ss_flags;
  char ts_qos;
  char ts_rqos;
  char ts_rqos_override;
  char io_tier;
  char _reserved[3];
  uint64_t_0 disk_reads_count;
  uint64_t_0 disk_reads_size;
  uint64_t_0 disk_writes_count;
  uint64_t_0 disk_writes_size;
  uint64_t_0 io_priority_count[4];
  uint64_t_0 io_priority_size[4];
  uint64_t_0 paging_count;
  uint64_t_0 paging_size;
  uint64_t_0 non_paging_count;
  uint64_t_0 non_paging_size;
  uint64_t_0 data_count;
  uint64_t_0 data_size;
  uint64_t_0 metadata_count;
  uint64_t_0 metadata_size;
  uint64_t_0 voucher_identifier;
  uint64_t_0 total_syscalls;
  char pth_name[64];
};

/* 4194 */
struct ccdrbg_info
{
  size_t size;
  int (*init)(const ccdrbg_info *, ccdrbg_state *, size_t, const void *, size_t, const void *, size_t, const void *);
  int (*reseed)(ccdrbg_state *, size_t, const void *, size_t, const void *);
  int (*generate)(ccdrbg_state *, size_t, void *, size_t, const void *);
  void (*done)(ccdrbg_state *);
  const void *custom;
};

/* 4195 */
struct ccdrbg_state;

/* 4196 */
struct ccdrbg_nisthmac_state
{
  const ccdrbg_nisthmac_custom *custom;
  size_t bytesLeft;
  uint64_t_0 reseed_counter;
  size_t vsize;
  size_t keysize;
  uint8_t_0 v[128];
  uint8_t_0 *vptr;
  uint8_t_0 *nextvptr;
  uint8_t_0 key[64];
};

/* 4197 */
struct __attribute__((aligned(8))) ccdrbg_nisthmac_custom
{
  const ccdigest_info *di;
  int strictFIPS;
};

/* 4198 */
struct ccdigest_info
{
  size_t output_size;
  size_t state_size;
  size_t block_size;
  size_t oid_size;
  const unsigned __int8 *oid;
  const void *initial_state;
  void (*compress)(ccdigest_state_t, size_t, const void *);
  void (*final)(const ccdigest_info *, ccdigest_ctx_t, unsigned __int8 *);
};

/* 4199 */
typedef ccdigest_state *ccdigest_state_t;

/* 4200 */
struct ccdigest_state
{
  ccdigest_state::$699324CDE4CC40AFDBFB8D06C3D73393 state;
};

/* 4201 */
union ccdigest_state::$699324CDE4CC40AFDBFB8D06C3D73393
{
  uint8_t_0 u8;
  uint32_t_0 u32;
  uint64_t_0 u64;
  cc_unit ccn;
};

/* 4202 */
typedef ccdigest_ctx *ccdigest_ctx_t;

/* 4203 */
struct cchmac_ctx
{
  uint8_t_0 b[8];
};

/* 4204 */
typedef cchmac_ctx *cchmac_ctx_t;

/* 4205 */
typedef entropy_data entropy_data_t;

/* 4206 */
struct entropy_data
{
  uint32_t_0 *index_ptr;
  uint32_t_0 buffer[16];
};

/* 4207 */
struct $D5D69C92E5A16DAD7F315D439CF08669
{
  cckprng_ctx ctx;
  $D5D69C92E5A16DAD7F315D439CF08669::$792F404FB0AB535302D3C847606E66A1 lock;
};

/* 4208 */
struct cckprng_ctx
{
  PrngRef prng;
  uint64_t_0 bytes_since_entropy;
  uint64_t_0 bytes_generated;
};

/* 4209 */
typedef struct PRNG *PrngRef;

/* 4210 */
struct PRNG;

/* 4211 */
struct $D5D69C92E5A16DAD7F315D439CF08669::$792F404FB0AB535302D3C847606E66A1
{
  lck_grp_t_0 *group;
  lck_attr_t_0 *attrs;
  lck_grp_attr_t_0 *group_attrs;
  lck_mtx_t_0 *mutex;
};

/* 4212 */
struct $3DB6BFC5E2925930BDDB0F88E5E0D756
{
  uint8_t_0 seed[2][16];
  int seedset;
  uint8_t_0 master_drbg_state[264];
  ccdrbg_state *drbg_states[64];
  ccdrbg_info drbg_info;
  const ccdrbg_nisthmac_custom drbg_custom;
};

/* 4213 */
typedef const prng_fns *prng_fns_t;

/* 4214 */
struct prng_fns
{
  int (*init)(cckprng_ctx_t, size_t, const void *);
  int (*reseed)(cckprng_ctx_t, size_t, const void *);
  int (*addentropy)(cckprng_ctx_t, size_t, const void *);
  int (*generate)(cckprng_ctx_t, size_t, void *);
};

/* 4215 */
typedef cckprng_ctx *cckprng_ctx_t;

/* 4216 */
typedef __builtin_va_list va_list_137;

/* 4217 */
typedef __builtin_va_list va_list_138;

/* 4218 */
typedef apple_protect_pager *apple_protect_pager_t;

/* 4219 */
struct apple_protect_pager
{
  memory_object ap_pgr_hdr;
  queue_chain_t pager_queue;
  unsigned int ref_count;
  boolean_t is_ready;
  boolean_t is_mapped;
  vm_object_t backing_object;
  vm_object_offset_t backing_offset;
  vm_object_offset_t crypto_backing_offset;
  vm_object_offset_t crypto_start;
  vm_object_offset_t crypto_end;
  pager_crypt_info *crypt_info;
};

/* 4220 */
typedef pv_hashed_entry *pv_hashed_entry_t;

/* 4221 */
struct pv_hashed_entry
{
  queue_head_t qlink;
  vm_map_offset_t va_and_flags;
  pmap_t pmap;
  ppnum_t ppn;
  pv_hashed_entry *nexth;
};

/* 4222 */
typedef __builtin_va_list va_list_139;

/* 4223 */
typedef pmap_memory_regions pmap_memory_region_t;

/* 4224 */
struct pmap_memory_regions
{
  ppnum_t base;
  ppnum_t alloc_up;
  ppnum_t alloc_down;
  ppnum_t end;
  uint32_t_0 type;
  uint64_t_0 attribute;
};

/* 4225 */
typedef uint64_t_0 pt_entry_t;

/* 4226 */
enum $AC02297522B323F277CA7EAE1DE55862 : __int32
{
  MP_TLB_FLUSH = 0x0,
  MP_KDP = 0x1,
  MP_KDB = 0x2,
  MP_AST = 0x3,
  MP_IDLE = 0x4,
  MP_UNIDLE = 0x5,
  MP_CALL = 0x6,
  MP_CALL_PM = 0x7,
  MP_LAST = 0x8,
};

/* 4227 */
enum $D41B888F238AFA8BEF96EAEF5674FD35 : __int32
{
  SYNC = 0x0,
  ASYNC = 0x1,
  NOSYNC = 0x2,
};

/* 4228 */
enum $1BE9FAF8A6EFD97FB183C256A5ECF02F : __int32
{
  NONE = 0x0,
  SPINLOCK_TIMEOUT = 0x1,
  TLB_FLUSH_TIMEOUT = 0x2,
  CROSSCALL_TIMEOUT = 0x3,
  INTERRUPT_WATCHDOG = 0x4,
};

/* 4229 */
enum pmap_tc_ret_t : __int32
{
  PMAP_TC_SUCCESS = 0x0,
  PMAP_TC_UNKNOWN_FORMAT = 0xFFFFFFFF,
  PMAP_TC_TOO_SMALL_FOR_HEADER = 0xFFFFFFFE,
  PMAP_TC_TOO_SMALL_FOR_ENTRIES = 0xFFFFFFFD,
  PMAP_TC_UNKNOWN_VERSION = 0xFFFFFFFC,
  PMAP_TC_ALREADY_LOADED = 0xFFFFFFFB,
  PMAP_TC_TOO_BIG = 0xFFFFFFFA,
};

/* 4230 */
typedef pv_rooted_entry *pv_rooted_entry_t;

/* 4231 */
struct pv_rooted_entry
{
  queue_head_t qlink;
  vm_map_offset_t va_and_flags;
  pmap_t pmap;
};

/* 4232 */
typedef int *vm_region_recurse_info_t;

/* 4233 */
struct invept::$91926599BEE7C8D52BCD54DD7B60FEE5
{
  uint64_t_0 eptp;
  uint64_t_0 reserved;
};

/* 4234 */
typedef __int8 pmap_legacy_trust_cache[32];

/* 4235 */
struct pmap_image4_trust_cache
{
  const pmap_image4_trust_cache *next;
  const trust_cache_module1 *module;
  size_t img4_len;
  const uint8_t_0 img4[];
};

/* 4236 */
struct trust_cache_module1
{
  uint32_t_0 version;
  uuid_t uuid;
  uint32_t_0 num_entries;
  trust_cache_entry1 entries[];
};

/* 4237 */
struct trust_cache_entry1
{
  uint8_t_0 cdhash[20];
  uint8_t_0 hash_type;
  uint8_t_0 flags;
};

/* 4238 */
enum $8390D09D11FAE66EC93A27C7215F0BE3 : __int32
{
  PMAP_ACTION_IGNORE = 0x0,
  PMAP_ACTION_ASSERT = 0x1,
  PMAP_ACTION_RETRY = 0x2,
  PMAP_ACTION_RETRY_RELOCK = 0x4,
};

/* 4239 */
enum $939B88E5FB568532FDE9C25747946F64 : __int32
{
  ROOT_PRESENT = 0x0,
  ROOT_ABSENT = 0x1,
};

/* 4240 */
enum $EF2EC1535502B1147B62051B4149B6C4 : __int32
{
  PTE_VALID = 0x0,
  PTE_INVALID = 0x1,
  PTE_RSVD = 0x2,
  PTE_SUPERVISOR = 0x4,
  PTE_BITFLIP = 0x8,
  PV_BITFLIP = 0x10,
  PTE_INVALID_CACHEABILITY = 0x20,
};

/* 4241 */
typedef __builtin_va_list va_list_140;

/* 4242 */
typedef __builtin_va_list va_list_141;

/* 4243 */
struct pmap_pagetable_corruption_record_t
{
  pmap_pv_assertion_t incident;
  pmap_pagetable_corruption_t reason;
  pmap_pagetable_corruption_action_t action;
  pmap_t pmap;
  vm_map_offset_t vaddr;
  pt_entry_t pte;
  ppnum_t ppn;
  pmap_t pvpmap;
  vm_map_offset_t pvva;
  uint64_t_0 abstime;
};

/* 4244 */
typedef $939B88E5FB568532FDE9C25747946F64 pmap_pv_assertion_t;

/* 4245 */
typedef $EF2EC1535502B1147B62051B4149B6C4 pmap_pagetable_corruption_t;

/* 4246 */
typedef $8390D09D11FAE66EC93A27C7215F0BE3 pmap_pagetable_corruption_action_t;

/* 4247 */
typedef __builtin_va_list va_list_142;

/* 4248 */
struct pal_apic_table
{
  __int8 gap0[1];
};

/* 4249 */
typedef __builtin_va_list va_list_143;

/* 4250 */
typedef uint64_t_0 pal_cr_t;

/* 4251 */
struct pal_efi_registers
{
  uint64_t_0 rcx;
  uint64_t_0 rdx;
  uint64_t_0 r8;
  uint64_t_0 r9;
  uint64_t_0 rax;
};

/* 4252 */
typedef i386_thread_state x86_thread_state32_t;

/* 4253 */
struct i386_thread_state
{
  unsigned int eax;
  unsigned int ebx;
  unsigned int ecx;
  unsigned int edx;
  unsigned int edi;
  unsigned int esi;
  unsigned int ebp;
  unsigned int esp;
  unsigned int ss;
  unsigned int eflags;
  unsigned int eip;
  unsigned int cs;
  unsigned int ds;
  unsigned int es;
  unsigned int fs;
  unsigned int gs;
};

/* 4254 */
typedef x86_thread_state64 x86_thread_state64_t;

/* 4255 */
struct x86_thread_state64
{
  __uint64_t rax;
  __uint64_t rbx;
  __uint64_t rcx;
  __uint64_t rdx;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rsp;
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rip;
  __uint64_t rflags;
  __uint64_t cs;
  __uint64_t fs;
  __uint64_t gs;
};

/* 4256 */
typedef kern_return_t (*mach_call_t)(void *);

/* 4257 */
typedef __builtin_va_list va_list_144;

/* 4258 */
struct mach_call_args
{
  syscall_arg_t arg1;
  syscall_arg_t arg2;
  syscall_arg_t arg3;
  syscall_arg_t arg4;
  syscall_arg_t arg5;
  syscall_arg_t arg6;
  syscall_arg_t arg7;
  syscall_arg_t arg8;
  syscall_arg_t arg9;
};

/* 4259 */
typedef u_int64_t syscall_arg_t;

/* 4260 */
struct machdep_call_t
{
  machdep_call_routine_t routine;
  int nargs;
  int bsd_style;
};

/* 4261 */
union machdep_call_routine_t
{
  kern_return_t (*args_0)(void);
  kern_return_t (*args_1)(uint32_t_0);
  kern_return_t (*args64_1)(uint64_t_0);
  kern_return_t (*args_2)(uint32_t_0, uint32_t_0);
  kern_return_t (*args64_2)(uint64_t_0, uint64_t_0);
  kern_return_t (*args_3)(uint32_t_0, uint32_t_0, uint32_t_0);
  kern_return_t (*args_4)(uint32_t_0, uint32_t_0, uint32_t_0, uint32_t_0);
  kern_return_t (*args_var)(uint32_t_0, ...);
  int (*args_bsd_3)(uint32_t_0 *, uint32_t_0, uint32_t_0, uint32_t_0);
};

/* 4262 */
typedef __builtin_va_list va_list_145;

/* 4263 */
typedef machine_thread *pcb_t;

/* 4264 */
struct fake_descriptor64
{
  uint64_t_0 offset64;
  unsigned __int32 lim_or_seg : 20;
  unsigned __int32 size_or_IST : 4;
  unsigned __int32 access : 8;
  uint32_t_0 reserved;
};

/* 4265 */
typedef __builtin_va_list va_list_146;

/* 4266 */
typedef cpu_desc_table64 cpu_desc_table64_t;

/* 4267 */
struct cpu_desc_table64
{
  fake_descriptor gdt[19];
  __attribute__((aligned(16))) x86_64_tss ktss;
  __attribute__((aligned(16))) sysenter_stack sstk;
  uint8_t_0 *fstkp;
};

/* 4268 */
struct sysenter_stack
{
  uint64_t_0 sysestack[64];
  uint64_t_0 top;
};

/* 4269 */
struct cpu_fault_stack_t
{
  uint8_t_0 fstk[2048];
};

/* 4270 */
struct cldt_t
{
  real_descriptor pcldts[8192];
};

/* 4271 */
union fix_desc64::$120D1EDF1D1546AF041022D41D7F5E9C
{
  real_gate64 gate;
  real_descriptor64 desc;
};

/* 4272 */
struct real_gate64
{
  unsigned __int32 offset_low16 : 16;
  unsigned __int32 selector16 : 16;
  unsigned __int32 IST : 3;
  unsigned __int32 zeroes5 : 5;
  unsigned __int32 access8 : 8;
  unsigned __int32 offset_high16 : 16;
  uint32_t_0 offset_top32;
  uint32_t_0 reserved32;
};

/* 4273 */
struct real_descriptor64
{
  unsigned __int32 limit_low16 : 16;
  unsigned __int32 base_low16 : 16;
  unsigned __int32 base_med8 : 8;
  unsigned __int32 access8 : 8;
  unsigned __int32 limit_high4 : 4;
  unsigned __int32 granularity4 : 4;
  unsigned __int32 base_high8 : 8;
  uint32_t_0 base_top32;
  uint32_t_0 reserved32;
};

/* 4274 */
typedef sel sel_t;

/* 4275 */
struct sel
{
  unsigned __int16 rpl : 2;
  unsigned __int16 ti : 1;
  unsigned __int16 index : 13;
};

/* 4276 */
typedef __builtin_va_list va_list_147;

/* 4277 */
struct i386_cpu_info_t
{
  char cpuid_vendor[16];
  char cpuid_brand_string[48];
  const char *cpuid_model_string;
  cpu_type_t cpuid_type;
  uint8_t_0 cpuid_family;
  uint8_t_0 cpuid_model;
  uint8_t_0 cpuid_extmodel;
  uint8_t_0 cpuid_extfamily;
  uint8_t_0 cpuid_stepping;
  uint64_t_0 cpuid_features;
  uint64_t_0 cpuid_extfeatures;
  uint32_t_0 cpuid_signature;
  uint8_t_0 cpuid_brand;
  uint8_t_0 cpuid_processor_flag;
  uint32_t_0 cache_size[5];
  uint32_t_0 cache_linesize;
  uint8_t_0 cache_info[64];
  uint32_t_0 cpuid_cores_per_package;
  uint32_t_0 cpuid_logical_per_package;
  uint32_t_0 cache_sharing[5];
  uint32_t_0 cache_partitions[5];
  cpu_type_t cpuid_cpu_type;
  cpu_subtype_t cpuid_cpu_subtype;
  cpuid_mwait_leaf_t cpuid_mwait_leaf;
  cpuid_thermal_leaf_t cpuid_thermal_leaf;
  cpuid_arch_perf_leaf_t cpuid_arch_perf_leaf;
  uint32_t_0 unused[4];
  uint32_t_0 cpuid_cache_linesize;
  uint32_t_0 cpuid_cache_L2_associativity;
  uint32_t_0 cpuid_cache_size;
  uint32_t_0 cpuid_address_bits_physical;
  uint32_t_0 cpuid_address_bits_virtual;
  uint32_t_0 cpuid_microcode_version;
  uint32_t_0 cpuid_tlb[2][2][2];
  uint32_t_0 cpuid_stlb;
  uint32_t_0 core_count;
  uint32_t_0 thread_count;
  uint32_t_0 cpuid_max_basic;
  uint32_t_0 cpuid_max_ext;
  uint32_t_0 cpuid_cpufamily;
  cpuid_mwait_leaf_t *cpuid_mwait_leafp;
  cpuid_thermal_leaf_t *cpuid_thermal_leafp;
  cpuid_arch_perf_leaf_t *cpuid_arch_perf_leafp;
  cpuid_xsave_leaf_t *cpuid_xsave_leafp;
  uint64_t_0 cpuid_leaf7_features;
  cpuid_tsc_leaf_t cpuid_tsc_leaf;
  cpuid_xsave_leaf_t cpuid_xsave_leaf[2];
};

/* 4278 */
struct cpuid_mwait_leaf_t
{
  uint32_t_0 linesize_min;
  uint32_t_0 linesize_max;
  uint32_t_0 extensions;
  uint32_t_0 sub_Cstates;
};

/* 4279 */
struct cpuid_thermal_leaf_t
{
  boolean_t sensor;
  boolean_t dynamic_acceleration;
  boolean_t invariant_APIC_timer;
  boolean_t core_power_limits;
  boolean_t fine_grain_clock_mod;
  boolean_t package_thermal_intr;
  uint32_t_0 thresholds;
  boolean_t ACNT_MCNT;
  boolean_t hardware_feedback;
  boolean_t energy_policy;
};

/* 4280 */
struct __attribute__((aligned(4))) cpuid_arch_perf_leaf_t
{
  uint8_t_0 version;
  uint8_t_0 number;
  uint8_t_0 width;
  uint8_t_0 events_number;
  uint32_t_0 events;
  uint8_t_0 fixed_number;
  uint8_t_0 fixed_width;
};

/* 4281 */
struct cpuid_xsave_leaf_t
{
  uint32_t_0 extended_state[4];
};

/* 4282 */
struct cpuid_tsc_leaf_t
{
  uint32_t_0 numerator;
  uint32_t_0 denominator;
};

/* 4283 */
struct i386_vmm_info_t
{
  char cpuid_vmm_vendor[16];
  uint32_t_0 cpuid_vmm_family;
  uint32_t_0 cpuid_vmm_bus_frequency;
  uint32_t_0 cpuid_vmm_tsc_frequency;
};

/* 4284 */
typedef cpuid_cache_descriptor cpuid_cache_descriptor_t;

/* 4285 */
struct cpuid_cache_descriptor
{
  uint8_t_0 value;
  uint8_t_0 type;
  uint8_t_0 level;
  uint8_t_0 ways;
  uint16_t size;
  uint16_t entries;
};

/* 4286 */
struct table
{
  uint64_t_0 mask;
  const char *name;
};

/* 4287 */
enum cache_type_t : __int32
{
  Lnone = 0x0,
  L1I = 0x1,
  L1D = 0x2,
  L2U = 0x3,
  L3U = 0x4,
  LCACHE_MAX = 0x5,
};

/* 4288 */
typedef x86_pkg x86_pkg_t;

/* 4289 */
typedef __builtin_va_list va_list_148;

/* 4290 */
typedef x86_topology_parameters x86_topology_parameters_t;

/* 4291 */
struct x86_topology_parameters
{
  uint32_t_0 LLCDepth;
  uint32_t_0 nCoresSharingLLC;
  uint32_t_0 nLCPUsSharingLLC;
  uint32_t_0 maxSharingLLC;
  uint32_t_0 nLThreadsPerCore;
  uint32_t_0 nPThreadsPerCore;
  uint32_t_0 nLCoresPerDie;
  uint32_t_0 nPCoresPerDie;
  uint32_t_0 nLDiesPerPackage;
  uint32_t_0 nPDiesPerPackage;
  uint32_t_0 nLThreadsPerDie;
  uint32_t_0 nPThreadsPerDie;
  uint32_t_0 nLThreadsPerPackage;
  uint32_t_0 nPThreadsPerPackage;
  uint32_t_0 nLCoresPerPackage;
  uint32_t_0 nPCoresPerPackage;
  uint32_t_0 nPackages;
  boolean_t stable;
};

/* 4292 */
struct cpu_cache
{
  int level;
  int type;
};

/* 4293 */
typedef x86_die x86_die_t;

/* 4294 */
typedef x86_core x86_core_t;

/* 4295 */
typedef x86_lcpu x86_lcpu_t;

/* 4296 */
typedef x86_affinity_set x86_affinity_set_t;

/* 4297 */
struct __attribute__((aligned(8))) x86_affinity_set
{
  x86_affinity_set *next;
  x86_cpu_cache *cache;
  processor_set_t pset;
  uint32_t_0 num;
};

/* 4298 */
typedef __builtin_va_list va_list_149;

/* 4299 */
typedef __int64 ptrdiff_t;

/* 4300 */
typedef __builtin_va_list va_list_150;

/* 4301 */
typedef __builtin_va_list va_list_151;

/* 4302 */
union x86_ext_thread_state_t
{
  x86_fx_thread_state fx;
  x86_avx_thread_state avx;
  x86_avx512_thread_state avx512;
};

/* 4303 */
struct x86_fx_thread_state
{
  unsigned __int16 fx_control;
  unsigned __int16 fx_status;
  unsigned __int8 fx_tag;
  unsigned __int8 fx_bbz1;
  unsigned __int16 fx_opcode;
  x86_fx_thread_state::$397E1EE9ED77C29554869160EA668EAE _anon_0;
  unsigned int fx_MXCSR;
  unsigned int fx_MXCSR_MASK;
  unsigned __int16 fx_reg_word[8][8];
  unsigned __int16 fx_XMM_reg[8][16];
  unsigned __int8 fx_reserved[80];
  unsigned int fp_valid;
  unsigned int fp_save_layout;
  unsigned __int8 fx_pad[8];
};

/* 4304 */
union x86_fx_thread_state::$397E1EE9ED77C29554869160EA668EAE
{
  x86_fx_thread_state::$397E1EE9ED77C29554869160EA668EAE::$83B4950A469A04DD6F73E54FAD7CEFB8 _anon_0;
  x86_fx_thread_state::$397E1EE9ED77C29554869160EA668EAE::$94E44AA027A6692D407138EC9D9A8B16 _anon_1;
};

/* 4305 */
struct x86_fx_thread_state::$397E1EE9ED77C29554869160EA668EAE::$83B4950A469A04DD6F73E54FAD7CEFB8
{
  unsigned int fx_eip;
  unsigned __int16 fx_cs;
  unsigned __int16 fx_bbz2;
  unsigned int fx_dp;
  unsigned __int16 fx_ds;
  unsigned __int16 fx_bbz3;
};

/* 4306 */
struct x86_fx_thread_state::$397E1EE9ED77C29554869160EA668EAE::$94E44AA027A6692D407138EC9D9A8B16
{
  uint64_t_0 fx_rip;
  uint64_t_0 fx_rdp;
};

/* 4307 */
struct x86_avx_thread_state
{
  x86_fx_thread_state fp;
  xsave_header _xh;
  reg128_t x_YMM_Hi128[16];
};

/* 4308 */
struct xsave_header
{
  uint64_t_0 xstate_bv;
  uint64_t_0 xcomp_bv;
  uint8_t_0 xhrsvd[48];
};

/* 4309 */
struct reg128_t
{
  uint64_t_0 lo64;
  uint64_t_0 hi64;
};

/* 4310 */
struct x86_avx512_thread_state
{
  x86_fx_thread_state fp;
  xsave_header _xh;
  reg128_t x_YMM_Hi128[16];
  uint64_t_0 x_pad[16];
  uint64_t_0 x_BNDREGS[8];
  uint64_t_0 x_BNDCTL[8];
  uint64_t_0 x_Opmask[8];
  reg256_t x_ZMM_Hi256[16];
  reg512_t x_Hi16_ZMM[16];
};

/* 4311 */
struct reg256_t
{
  reg128_t lo128;
  reg128_t hi128;
};

/* 4312 */
struct reg512_t
{
  reg256_t lo256;
  reg256_t hi256;
};

/* 4313 */
enum fp_save_layout_t : __int32
{
  FXSAVE32 = 0x1,
  FXSAVE64 = 0x2,
  XSAVE32 = 0x3,
  XSAVE64 = 0x4,
  FP_UNUSED = 0x5,
};

/* 4314 */
typedef x86_float_state64 x86_float_state64_t;

/* 4315 */
struct x86_float_state64
{
  int fpu_reserved[2];
  fp_control fpu_fcw;
  fp_status fpu_fsw;
  __uint8_t fpu_ftw;
  __uint8_t fpu_rsrv1;
  __uint16_t fpu_fop;
  __uint32_t fpu_ip;
  __uint16_t fpu_cs;
  __uint16_t fpu_rsrv2;
  __uint32_t fpu_dp;
  __uint16_t fpu_ds;
  __uint16_t fpu_rsrv3;
  __uint32_t fpu_mxcsr;
  __uint32_t fpu_mxcsrmask;
  mmst_reg fpu_stmm0;
  mmst_reg fpu_stmm1;
  mmst_reg fpu_stmm2;
  mmst_reg fpu_stmm3;
  mmst_reg fpu_stmm4;
  mmst_reg fpu_stmm5;
  mmst_reg fpu_stmm6;
  mmst_reg fpu_stmm7;
  xmm_reg fpu_xmm0;
  xmm_reg fpu_xmm1;
  xmm_reg fpu_xmm2;
  xmm_reg fpu_xmm3;
  xmm_reg fpu_xmm4;
  xmm_reg fpu_xmm5;
  xmm_reg fpu_xmm6;
  xmm_reg fpu_xmm7;
  xmm_reg fpu_xmm8;
  xmm_reg fpu_xmm9;
  xmm_reg fpu_xmm10;
  xmm_reg fpu_xmm11;
  xmm_reg fpu_xmm12;
  xmm_reg fpu_xmm13;
  xmm_reg fpu_xmm14;
  xmm_reg fpu_xmm15;
  char fpu_rsrv4[96];
  int fpu_reserved1;
};

/* 4316 */
struct fp_control
{
  unsigned __int16 invalid : 1;
  unsigned __int16 denorm : 1;
  unsigned __int16 zdiv : 1;
  unsigned __int16 ovrfl : 1;
  unsigned __int16 undfl : 1;
  unsigned __int16 precis : 1;
  unsigned __int16 : 2;
  unsigned __int16 pc : 2;
  unsigned __int16 rc : 2;
};

/* 4317 */
struct fp_status
{
  unsigned __int16 invalid : 1;
  unsigned __int16 denorm : 1;
  unsigned __int16 zdiv : 1;
  unsigned __int16 ovrfl : 1;
  unsigned __int16 undfl : 1;
  unsigned __int16 precis : 1;
  unsigned __int16 stkflt : 1;
  unsigned __int16 errsumm : 1;
  unsigned __int16 c0 : 1;
  unsigned __int16 c1 : 1;
  unsigned __int16 c2 : 1;
  unsigned __int16 tos : 3;
  unsigned __int16 c3 : 1;
  unsigned __int16 busy : 1;
};

/* 4318 */
struct mmst_reg
{
  char mmst_reg[10];
  char mmst_rsrv[6];
};

/* 4319 */
struct xmm_reg
{
  char xmm_reg[16];
};

/* 4320 */
typedef x86_avx_state64 x86_avx_state64_t;

/* 4321 */
struct x86_avx_state64
{
  int fpu_reserved[2];
  fp_control fpu_fcw;
  fp_status fpu_fsw;
  __uint8_t fpu_ftw;
  __uint8_t fpu_rsrv1;
  __uint16_t fpu_fop;
  __uint32_t fpu_ip;
  __uint16_t fpu_cs;
  __uint16_t fpu_rsrv2;
  __uint32_t fpu_dp;
  __uint16_t fpu_ds;
  __uint16_t fpu_rsrv3;
  __uint32_t fpu_mxcsr;
  __uint32_t fpu_mxcsrmask;
  mmst_reg fpu_stmm0;
  mmst_reg fpu_stmm1;
  mmst_reg fpu_stmm2;
  mmst_reg fpu_stmm3;
  mmst_reg fpu_stmm4;
  mmst_reg fpu_stmm5;
  mmst_reg fpu_stmm6;
  mmst_reg fpu_stmm7;
  xmm_reg fpu_xmm0;
  xmm_reg fpu_xmm1;
  xmm_reg fpu_xmm2;
  xmm_reg fpu_xmm3;
  xmm_reg fpu_xmm4;
  xmm_reg fpu_xmm5;
  xmm_reg fpu_xmm6;
  xmm_reg fpu_xmm7;
  xmm_reg fpu_xmm8;
  xmm_reg fpu_xmm9;
  xmm_reg fpu_xmm10;
  xmm_reg fpu_xmm11;
  xmm_reg fpu_xmm12;
  xmm_reg fpu_xmm13;
  xmm_reg fpu_xmm14;
  xmm_reg fpu_xmm15;
  char fpu_rsrv4[96];
  int fpu_reserved1;
  char avx_reserved1[64];
  xmm_reg fpu_ymmh0;
  xmm_reg fpu_ymmh1;
  xmm_reg fpu_ymmh2;
  xmm_reg fpu_ymmh3;
  xmm_reg fpu_ymmh4;
  xmm_reg fpu_ymmh5;
  xmm_reg fpu_ymmh6;
  xmm_reg fpu_ymmh7;
  xmm_reg fpu_ymmh8;
  xmm_reg fpu_ymmh9;
  xmm_reg fpu_ymmh10;
  xmm_reg fpu_ymmh11;
  xmm_reg fpu_ymmh12;
  xmm_reg fpu_ymmh13;
  xmm_reg fpu_ymmh14;
  xmm_reg fpu_ymmh15;
};

/* 4322 */
union fpu_set_fxstate::$4E764AED11541A38EDBE91F30964D117
{
  thread_state_t ts;
  x86_avx512_state32_t *s32;
  x86_avx512_state64_t *s64;
};

/* 4323 */
typedef i386_avx512_state x86_avx512_state32_t;

/* 4324 */
struct i386_avx512_state
{
  int fpu_reserved[2];
  fp_control fpu_fcw;
  fp_status fpu_fsw;
  __uint8_t fpu_ftw;
  __uint8_t fpu_rsrv1;
  __uint16_t fpu_fop;
  __uint32_t fpu_ip;
  __uint16_t fpu_cs;
  __uint16_t fpu_rsrv2;
  __uint32_t fpu_dp;
  __uint16_t fpu_ds;
  __uint16_t fpu_rsrv3;
  __uint32_t fpu_mxcsr;
  __uint32_t fpu_mxcsrmask;
  mmst_reg fpu_stmm0;
  mmst_reg fpu_stmm1;
  mmst_reg fpu_stmm2;
  mmst_reg fpu_stmm3;
  mmst_reg fpu_stmm4;
  mmst_reg fpu_stmm5;
  mmst_reg fpu_stmm6;
  mmst_reg fpu_stmm7;
  xmm_reg fpu_xmm0;
  xmm_reg fpu_xmm1;
  xmm_reg fpu_xmm2;
  xmm_reg fpu_xmm3;
  xmm_reg fpu_xmm4;
  xmm_reg fpu_xmm5;
  xmm_reg fpu_xmm6;
  xmm_reg fpu_xmm7;
  char fpu_rsrv4[224];
  int fpu_reserved1;
  char avx_reserved1[64];
  xmm_reg fpu_ymmh0;
  xmm_reg fpu_ymmh1;
  xmm_reg fpu_ymmh2;
  xmm_reg fpu_ymmh3;
  xmm_reg fpu_ymmh4;
  xmm_reg fpu_ymmh5;
  xmm_reg fpu_ymmh6;
  xmm_reg fpu_ymmh7;
  opmask_reg fpu_k0;
  opmask_reg fpu_k1;
  opmask_reg fpu_k2;
  opmask_reg fpu_k3;
  opmask_reg fpu_k4;
  opmask_reg fpu_k5;
  opmask_reg fpu_k6;
  opmask_reg fpu_k7;
  ymm_reg fpu_zmmh0;
  ymm_reg fpu_zmmh1;
  ymm_reg fpu_zmmh2;
  ymm_reg fpu_zmmh3;
  ymm_reg fpu_zmmh4;
  ymm_reg fpu_zmmh5;
  ymm_reg fpu_zmmh6;
  ymm_reg fpu_zmmh7;
};

/* 4325 */
struct opmask_reg
{
  char opmask_reg[8];
};

/* 4326 */
struct ymm_reg
{
  char ymm_reg[32];
};

/* 4327 */
typedef x86_avx512_state64 x86_avx512_state64_t;

/* 4328 */
struct x86_avx512_state64
{
  int fpu_reserved[2];
  fp_control fpu_fcw;
  fp_status fpu_fsw;
  __uint8_t fpu_ftw;
  __uint8_t fpu_rsrv1;
  __uint16_t fpu_fop;
  __uint32_t fpu_ip;
  __uint16_t fpu_cs;
  __uint16_t fpu_rsrv2;
  __uint32_t fpu_dp;
  __uint16_t fpu_ds;
  __uint16_t fpu_rsrv3;
  __uint32_t fpu_mxcsr;
  __uint32_t fpu_mxcsrmask;
  mmst_reg fpu_stmm0;
  mmst_reg fpu_stmm1;
  mmst_reg fpu_stmm2;
  mmst_reg fpu_stmm3;
  mmst_reg fpu_stmm4;
  mmst_reg fpu_stmm5;
  mmst_reg fpu_stmm6;
  mmst_reg fpu_stmm7;
  xmm_reg fpu_xmm0;
  xmm_reg fpu_xmm1;
  xmm_reg fpu_xmm2;
  xmm_reg fpu_xmm3;
  xmm_reg fpu_xmm4;
  xmm_reg fpu_xmm5;
  xmm_reg fpu_xmm6;
  xmm_reg fpu_xmm7;
  xmm_reg fpu_xmm8;
  xmm_reg fpu_xmm9;
  xmm_reg fpu_xmm10;
  xmm_reg fpu_xmm11;
  xmm_reg fpu_xmm12;
  xmm_reg fpu_xmm13;
  xmm_reg fpu_xmm14;
  xmm_reg fpu_xmm15;
  char fpu_rsrv4[96];
  int fpu_reserved1;
  char avx_reserved1[64];
  xmm_reg fpu_ymmh0;
  xmm_reg fpu_ymmh1;
  xmm_reg fpu_ymmh2;
  xmm_reg fpu_ymmh3;
  xmm_reg fpu_ymmh4;
  xmm_reg fpu_ymmh5;
  xmm_reg fpu_ymmh6;
  xmm_reg fpu_ymmh7;
  xmm_reg fpu_ymmh8;
  xmm_reg fpu_ymmh9;
  xmm_reg fpu_ymmh10;
  xmm_reg fpu_ymmh11;
  xmm_reg fpu_ymmh12;
  xmm_reg fpu_ymmh13;
  xmm_reg fpu_ymmh14;
  xmm_reg fpu_ymmh15;
  opmask_reg fpu_k0;
  opmask_reg fpu_k1;
  opmask_reg fpu_k2;
  opmask_reg fpu_k3;
  opmask_reg fpu_k4;
  opmask_reg fpu_k5;
  opmask_reg fpu_k6;
  opmask_reg fpu_k7;
  ymm_reg fpu_zmmh0;
  ymm_reg fpu_zmmh1;
  ymm_reg fpu_zmmh2;
  ymm_reg fpu_zmmh3;
  ymm_reg fpu_zmmh4;
  ymm_reg fpu_zmmh5;
  ymm_reg fpu_zmmh6;
  ymm_reg fpu_zmmh7;
  ymm_reg fpu_zmmh8;
  ymm_reg fpu_zmmh9;
  ymm_reg fpu_zmmh10;
  ymm_reg fpu_zmmh11;
  ymm_reg fpu_zmmh12;
  ymm_reg fpu_zmmh13;
  ymm_reg fpu_zmmh14;
  ymm_reg fpu_zmmh15;
  zmm_reg fpu_zmm16;
  zmm_reg fpu_zmm17;
  zmm_reg fpu_zmm18;
  zmm_reg fpu_zmm19;
  zmm_reg fpu_zmm20;
  zmm_reg fpu_zmm21;
  zmm_reg fpu_zmm22;
  zmm_reg fpu_zmm23;
  zmm_reg fpu_zmm24;
  zmm_reg fpu_zmm25;
  zmm_reg fpu_zmm26;
  zmm_reg fpu_zmm27;
  zmm_reg fpu_zmm28;
  zmm_reg fpu_zmm29;
  zmm_reg fpu_zmm30;
  zmm_reg fpu_zmm31;
};

/* 4329 */
struct zmm_reg
{
  char zmm_reg[64];
};

/* 4330 */
union fpu_get_fxstate::$4E764AED11541A38EDBE91F30964D117
{
  thread_state_t ts;
  x86_avx512_state32_t *s32;
  x86_avx512_state64_t *s64;
};

/* 4331 */
enum $C4A67B70ADF2A79A66C7BE0F62F6EDD7 : __int32
{
  ID = 0x2,
  VERSION = 0x3,
  TPR = 0x8,
  APR = 0x9,
  PPR = 0xA,
  EOI = 0xB,
  REMOTE_READ = 0xC,
  LDR = 0xD,
  DFR = 0xE,
  SVR = 0xF,
  ISR_BASE = 0x10,
  TMR_BASE = 0x18,
  IRR_BASE = 0x20,
  ERROR_STATUS = 0x28,
  LVT_CMCI = 0x2F,
  ICR = 0x30,
  ICRD = 0x31,
  LVT_TIMER = 0x32,
  LVT_THERMAL = 0x33,
  LVT_PERFCNT = 0x34,
  LVT_LINT0 = 0x35,
  LVT_LINT1 = 0x36,
  LVT_ERROR = 0x37,
  TIMER_INITIAL_COUNT = 0x38,
  TIMER_CURRENT_COUNT = 0x39,
  TIMER_DIVIDE_CONFIG = 0x3E,
};

/* 4332 */
typedef __builtin_va_list va_list_152;

/* 4333 */
struct $<5116143,1>::$48767757FF0AA5F7DC0246C5C0675FA2
{
  pt_entry_t entries[512];
};

/* 4334 */
struct doublemap_init::$48767757FF0AA5F7DC0246C5C0675FA2
{
  pt_entry_t entries[512];
};

/* 4335 */
struct dysymtab_command_0
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint32_t_0 ilocalsym;
  uint32_t_0 nlocalsym;
  uint32_t_0 iextdefsym;
  uint32_t_0 nextdefsym;
  uint32_t_0 iundefsym;
  uint32_t_0 nundefsym;
  uint32_t_0 tocoff;
  uint32_t_0 ntoc;
  uint32_t_0 modtaboff;
  uint32_t_0 nmodtab;
  uint32_t_0 extrefsymoff;
  uint32_t_0 nextrefsyms;
  uint32_t_0 indirectsymoff;
  uint32_t_0 nindirectsyms;
  uint32_t_0 extreloff;
  uint32_t_0 nextrel;
  uint32_t_0 locreloff;
  uint32_t_0 nlocrel;
};

/* 4336 */
typedef EfiMemoryRange EfiMemoryRange_0;

/* 4337 */
struct EfiMemoryRange
{
  uint32_t_0 Type;
  uint32_t_0 Pad;
  uint64_t_0 PhysicalStart;
  uint64_t_0 VirtualStart;
  uint64_t_0 NumberOfPages;
  uint64_t_0 Attribute;
};

/* 4338 */
typedef __builtin_va_list va_list_153;

/* 4339 */
typedef slock *usimple_lock_t;

/* 4340 */
enum lck_mtx_spinwait_ret_type : __int32
{
  LCK_MTX_SPINWAIT_ACQUIRED = 0x0,
  LCK_MTX_SPINWAIT_SPUN = 0x1,
  LCK_MTX_SPINWAIT_NO_SPIN = 0x2,
};

/* 4341 */
typedef __builtin_va_list va_list_154;

/* 4342 */
typedef unsigned int lck_rw_type_t;

/* 4343 */
typedef lck_mtx_spinwait_ret_type lck_mtx_spinwait_ret_type_t;

/* 4344 */
typedef __builtin_va_list va_list_155;

/* 4345 */
typedef lowglo lowglo_0;

/* 4346 */
struct lowglo
{
  unsigned __int8 lgVerCode[8];
  uint64_t_0 lgZero;
  uint64_t_0 lgStext;
  uint64_t_0 lgRsv018;
  uint64_t_0 lgRsv020;
  uint64_t_0 lgRsv028;
  uint64_t_0 lgVersion;
  uint64_t_0 lgRsv038[280];
  uint64_t_0 lgKmodptr;
  uint64_t_0 lgTransOff;
  uint64_t_0 lgReadIO;
  uint64_t_0 lgDevSlot1;
  uint64_t_0 lgDevSlot2;
  uint64_t_0 lgOSVersion;
  uint64_t_0 lgRebootFlag;
  uint64_t_0 lgManualPktAddr;
  uint64_t_0 lgRsv938[217];
};

/* 4347 */
typedef void (*IOInterruptHandler)(void *, void *, void *, int);

/* 4348 */
typedef __builtin_va_list va_list_156;

/* 4349 */
typedef thread_precedence_policy thread_precedence_policy_data_t;

/* 4350 */
union ia32_mcg_cap_t
{
  ia32_mcg_cap_t::$E5CE9F2C84DB374DA07D3ACA4F3F868C bits;
  uint64_t_0 u64;
};

/* 4351 */
struct ia32_mcg_cap_t::$E5CE9F2C84DB374DA07D3ACA4F3F868C
{
  unsigned __int64 count : 8;
  unsigned __int64 mcg_ctl_p : 1;
  unsigned __int64 mcg_ext_p : 1;
  unsigned __int64 mcg_ext_corr_err_p : 1;
  unsigned __int64 mcg_tes_p : 1;
  unsigned __int64 mcg_ecms : 1;
  unsigned __int64 mcg_reserved2 : 3;
  unsigned __int64 mcg_ext_cnt : 8;
  unsigned __int64 mcg_ser_p : 1;
};

/* 4352 */
enum mca_dump_state_t : __int32
{
  CLEAR = 0x0,
  DUMPING = 0x1,
  DUMPED = 0x2,
};

/* 4353 */
struct mca_mci_bank_t
{
  ia32_mci_ctl_t mca_mci_ctl;
  ia32_mci_status_t mca_mci_status;
  ia32_mci_misc_t mca_mci_misc;
  ia32_mci_addr_t mca_mci_addr;
};

/* 4354 */
typedef uint64_t_0 ia32_mci_ctl_t;

/* 4355 */
union ia32_mci_status_t
{
  ia32_mci_status_t::$864C28CC282F127AC44E9E9AE3E78568 bits;
  ia32_mci_status_t::$A1A8FC78069A10AAD0B99B773580DFFF bits_tes_p;
  uint64_t_0 u64;
};

/* 4356 */
struct ia32_mci_status_t::$864C28CC282F127AC44E9E9AE3E78568
{
  unsigned __int64 mca_error : 16;
  unsigned __int64 model_specific_error : 16;
  unsigned __int64 other_information : 25;
  unsigned __int64 pcc : 1;
  unsigned __int64 addrv : 1;
  unsigned __int64 miscv : 1;
  unsigned __int64 en : 1;
  unsigned __int64 uc : 1;
  unsigned __int64 over : 1;
  unsigned __int64 val : 1;
};

/* 4357 */
struct ia32_mci_status_t::$A1A8FC78069A10AAD0B99B773580DFFF
{
  unsigned __int64 mca_error : 16;
  unsigned __int64 model_specific_error : 16;
  unsigned __int64 other_information : 21;
  unsigned __int64 threshold : 2;
  unsigned __int64 ar : 1;
  unsigned __int64 s : 1;
  unsigned __int64 pcc : 1;
  unsigned __int64 addrv : 1;
  unsigned __int64 miscv : 1;
  unsigned __int64 en : 1;
  unsigned __int64 uc : 1;
  unsigned __int64 over : 1;
  unsigned __int64 val : 1;
};

/* 4358 */
typedef uint64_t_0 ia32_mci_misc_t;

/* 4359 */
typedef uint64_t_0 ia32_mci_addr_t;

/* 4360 */
typedef __builtin_va_list va_list_157;

/* 4361 */
typedef uint64_t_0 ia32_mcg_ctl_t;

/* 4362 */
union ia32_mcg_status_t
{
  ia32_mcg_status_t::$51ACE286081B479F9E39C2BA8B5005C1 bits;
  uint64_t_0 u64;
};

/* 4363 */
struct ia32_mcg_status_t::$51ACE286081B479F9E39C2BA8B5005C1
{
  unsigned __int64 ripv : 1;
  unsigned __int64 eipv : 1;
  unsigned __int64 mcip : 1;
};

/* 4364 */
typedef mca_state mca_state_t;

/* 4365 */
typedef x86_debug_state32 x86_debug_state32_t;

/* 4366 */
struct x86_debug_state32
{
  unsigned int dr0;
  unsigned int dr1;
  unsigned int dr2;
  unsigned int dr3;
  unsigned int dr4;
  unsigned int dr5;
  unsigned int dr6;
  unsigned int dr7;
};

/* 4367 */
typedef x86_debug_state64 x86_debug_state64_t;

/* 4368 */
struct x86_debug_state64
{
  __uint64_t dr0;
  __uint64_t dr1;
  __uint64_t dr2;
  __uint64_t dr3;
  __uint64_t dr4;
  __uint64_t dr5;
  __uint64_t dr6;
  __uint64_t dr7;
};

/* 4369 */
typedef x86_debug_state x86_debug_state_t;

/* 4370 */
struct x86_debug_state
{
  x86_state_hdr_t dsh;
  x86_debug_state::$03DDB3248D641F4CE8E751B0BFF8ECAC uds;
};

/* 4371 */
typedef x86_state_hdr x86_state_hdr_t;

/* 4372 */
struct x86_state_hdr
{
  uint32_t_0 flavor;
  uint32_t_0 count;
};

/* 4373 */
union x86_debug_state::$03DDB3248D641F4CE8E751B0BFF8ECAC
{
  x86_debug_state32_t ds32;
  x86_debug_state64_t ds64;
};

/* 4374 */
typedef __builtin_va_list va_list_158;

/* 4375 */
typedef user_ldt *user_ldt_t;

/* 4376 */
typedef __builtin_va_list va_list_159;

/* 4377 */
enum $569F1C65FD61B61B1F4E40023AA7D959 : __int32
{
  HV_DEBUG_STATE = 0x0,
};

/* 4378 */
typedef x86_float_state x86_float_state_t;

/* 4379 */
struct x86_float_state
{
  x86_state_hdr_t fsh;
  x86_float_state::$DD957D121C776293576CE2D5F1300AB7 ufs;
};

/* 4380 */
union x86_float_state::$DD957D121C776293576CE2D5F1300AB7
{
  x86_float_state32_t fs32;
  x86_float_state64_t fs64;
};

/* 4381 */
typedef i386_float_state x86_float_state32_t;

/* 4382 */
struct i386_float_state
{
  int fpu_reserved[2];
  fp_control fpu_fcw;
  fp_status fpu_fsw;
  __uint8_t fpu_ftw;
  __uint8_t fpu_rsrv1;
  __uint16_t fpu_fop;
  __uint32_t fpu_ip;
  __uint16_t fpu_cs;
  __uint16_t fpu_rsrv2;
  __uint32_t fpu_dp;
  __uint16_t fpu_ds;
  __uint16_t fpu_rsrv3;
  __uint32_t fpu_mxcsr;
  __uint32_t fpu_mxcsrmask;
  mmst_reg fpu_stmm0;
  mmst_reg fpu_stmm1;
  mmst_reg fpu_stmm2;
  mmst_reg fpu_stmm3;
  mmst_reg fpu_stmm4;
  mmst_reg fpu_stmm5;
  mmst_reg fpu_stmm6;
  mmst_reg fpu_stmm7;
  xmm_reg fpu_xmm0;
  xmm_reg fpu_xmm1;
  xmm_reg fpu_xmm2;
  xmm_reg fpu_xmm3;
  xmm_reg fpu_xmm4;
  xmm_reg fpu_xmm5;
  xmm_reg fpu_xmm6;
  xmm_reg fpu_xmm7;
  char fpu_rsrv4[224];
  int fpu_reserved1;
};

/* 4383 */
typedef x86_avx_state x86_avx_state_t;

/* 4384 */
struct x86_avx_state
{
  x86_state_hdr_t ash;
  x86_avx_state::$BED803406366655E931720873C880C30 ufs;
};

/* 4385 */
union x86_avx_state::$BED803406366655E931720873C880C30
{
  x86_avx_state32_t as32;
  x86_avx_state64_t as64;
};

/* 4386 */
typedef i386_avx_state x86_avx_state32_t;

/* 4387 */
struct i386_avx_state
{
  int fpu_reserved[2];
  fp_control fpu_fcw;
  fp_status fpu_fsw;
  __uint8_t fpu_ftw;
  __uint8_t fpu_rsrv1;
  __uint16_t fpu_fop;
  __uint32_t fpu_ip;
  __uint16_t fpu_cs;
  __uint16_t fpu_rsrv2;
  __uint32_t fpu_dp;
  __uint16_t fpu_ds;
  __uint16_t fpu_rsrv3;
  __uint32_t fpu_mxcsr;
  __uint32_t fpu_mxcsrmask;
  mmst_reg fpu_stmm0;
  mmst_reg fpu_stmm1;
  mmst_reg fpu_stmm2;
  mmst_reg fpu_stmm3;
  mmst_reg fpu_stmm4;
  mmst_reg fpu_stmm5;
  mmst_reg fpu_stmm6;
  mmst_reg fpu_stmm7;
  xmm_reg fpu_xmm0;
  xmm_reg fpu_xmm1;
  xmm_reg fpu_xmm2;
  xmm_reg fpu_xmm3;
  xmm_reg fpu_xmm4;
  xmm_reg fpu_xmm5;
  xmm_reg fpu_xmm6;
  xmm_reg fpu_xmm7;
  char fpu_rsrv4[224];
  int fpu_reserved1;
  char avx_reserved1[64];
  xmm_reg fpu_ymmh0;
  xmm_reg fpu_ymmh1;
  xmm_reg fpu_ymmh2;
  xmm_reg fpu_ymmh3;
  xmm_reg fpu_ymmh4;
  xmm_reg fpu_ymmh5;
  xmm_reg fpu_ymmh6;
  xmm_reg fpu_ymmh7;
};

/* 4388 */
typedef x86_thread_state x86_thread_state_t;

/* 4389 */
struct x86_thread_state
{
  x86_state_hdr_t tsh;
  x86_thread_state::$F32FF72FBA307D140BA37AFD55CC83FD uts;
};

/* 4390 */
union x86_thread_state::$F32FF72FBA307D140BA37AFD55CC83FD
{
  x86_thread_state32_t ts32;
  x86_thread_state64_t ts64;
};

/* 4391 */
typedef i386_exception_state x86_exception_state32_t;

/* 4392 */
struct i386_exception_state
{
  __uint16_t trapno;
  __uint16_t cpu;
  __uint32_t err;
  __uint32_t faultvaddr;
};

/* 4393 */
typedef x86_exception_state64 x86_exception_state64_t;

/* 4394 */
struct x86_exception_state64
{
  __uint16_t trapno;
  __uint16_t cpu;
  __uint32_t err;
  __uint64_t faultvaddr;
};

/* 4395 */
typedef x86_exception_state x86_exception_state_t;

/* 4396 */
struct x86_exception_state
{
  x86_state_hdr_t esh;
  x86_exception_state::$325FAF96BA52D6C5D5E9276F7B539B6E ues;
};

/* 4397 */
union x86_exception_state::$325FAF96BA52D6C5D5E9276F7B539B6E
{
  x86_exception_state32_t es32;
  x86_exception_state64_t es64;
};

/* 4398 */
struct x86_act_context64
{
  x86_saved_state64_t ss;
  x86_float_state64_t fs;
  x86_debug_state64_t ds;
};

/* 4399 */
struct x86_act_context32
{
  x86_saved_state32_t ss;
  x86_float_state32_t fs;
  x86_debug_state32_t ds;
};

/* 4400 */
typedef __builtin_va_list va_list_160;

/* 4401 */
typedef __builtin_va_list va_list_161;

/* 4402 */
typedef __builtin_va_list va_list_162;

/* 4403 */
typedef mach_timebase_info *mach_timebase_info_t;

/* 4404 */
struct rtc_timer_t
{
  void (*rtc_config)(void);
  uint64_t_0 (*rtc_set)(uint64_t_0, uint64_t_0);
};

/* 4405 */
enum $61B9A23D6C6932F9704ECC717EE62ABC : __int32
{
  periodic = 0x0,
  one_shot = 0x1,
};

/* 4406 */
enum $FA8FD0B21D6BB671875B26912AA87E56 : __int32
{
  divide_by_1 = 0xB,
  divide_by_2 = 0x0,
  divide_by_4 = 0x1,
  divide_by_8 = 0x2,
  divide_by_16 = 0x3,
  divide_by_32 = 0x8,
  divide_by_64 = 0x9,
  divide_by_128 = 0xA,
};

/* 4407 */
typedef int (*i386_intr_func_t)(x86_saved_state_t *);

/* 4408 */
typedef kern_return_t (*perfCallback)(int, void *, uintptr_t *, int);

/* 4409 */
typedef __builtin_va_list va_list_163;

/* 4410 */
struct recovery
{
  uintptr_t fault_addr;
  uintptr_t recover_addr;
};

/* 4411 */
typedef __builtin_va_list va_list_164;

/* 4412 */
typedef __builtin_va_list va_list_165;

/* 4413 */
typedef diagWork diagWork_0;

/* 4414 */
struct diagWork
{
  unsigned int dgLock;
  unsigned int dgFlags;
  unsigned int dgMisc0;
  unsigned int dgMisc1;
  unsigned int dgMisc2;
  unsigned int dgMisc3;
  unsigned int dgMisc4;
  unsigned int dgMisc5;
};

/* 4415 */
typedef __builtin_va_list va_list_166;

/* 4416 */
struct pkg_energy_statistics_t
{
  uint64_t_0 pkes_version;
  uint64_t_0 pkg_cres[2][7];
  uint64_t_0 pkg_power_unit;
  uint64_t_0 pkg_energy;
  uint64_t_0 pp0_energy;
  uint64_t_0 pp1_energy;
  uint64_t_0 ddr_energy;
  uint64_t_0 llc_flushed_cycles;
  uint64_t_0 ring_ratio_instantaneous;
  uint64_t_0 IA_frequency_clipping_cause;
  uint64_t_0 GT_frequency_clipping_cause;
  uint64_t_0 pkg_idle_exits;
  uint64_t_0 pkg_rtimes[12];
  uint64_t_0 pkg_itimes[12];
  uint64_t_0 mbus_delay_time;
  uint64_t_0 mint_delay_time;
  uint32_t_0 ncpus;
  core_energy_stat_t cest[];
};

/* 4417 */
struct core_energy_stat_t
{
  uint64_t_0 caperf;
  uint64_t_0 cmperf;
  uint64_t_0 ccres[6];
  uint64_t_0 crtimes[12];
  uint64_t_0 citimes[12];
  uint64_t_0 crtime_total;
  uint64_t_0 citime_total;
  uint64_t_0 cpu_idle_exits;
  uint64_t_0 cpu_insns;
  uint64_t_0 cpu_ucc;
  uint64_t_0 cpu_urc;
};

/* 4418 */
struct pmDispatch_t
{
  kern_return_t (*pmCPUStateInit)(void);
  void (*cstateInit)(void);
  uint64_t_0 (*MachineIdle)(uint64_t_0);
  uint64_t_0 (*GetDeadline)(x86_lcpu_t *);
  uint64_t_0 (*SetDeadline)(x86_lcpu_t *, uint64_t_0);
  void (*Deadline)(x86_lcpu_t *);
  boolean_t (*exitIdle)(x86_lcpu_t *);
  void (*markCPURunning)(x86_lcpu_t *);
  int (*pmCPUControl)(uint32_t_0, void *);
  void (*pmCPUHalt)(void);
  uint64_t_0 (*getMaxSnoop)(void);
  void (*setMaxBusDelay)(uint64_t_0);
  uint64_t_0 (*getMaxBusDelay)(void);
  void (*setMaxIntDelay)(uint64_t_0);
  uint64_t_0 (*getMaxIntDelay)(void);
  void (*pmCPUSafeMode)(x86_lcpu_t *, uint32_t_0);
  void (*pmTimerStateSave)(void);
  void (*pmTimerStateRestore)(void);
  kern_return_t (*exitHalt)(x86_lcpu_t *);
  kern_return_t (*exitHaltToOff)(x86_lcpu_t *);
  void (*markAllCPUsOff)(void);
  void (*pmSetRunCount)(uint32_t_0);
  boolean_t (*pmIsCPUUnAvailable)(x86_lcpu_t *);
  int (*pmChooseCPU)(int, int, int);
  int (*pmIPIHandler)(void *);
  void (*pmThreadTellUrgency)(int, uint64_t_0, uint64_t_0);
  void (*pmActiveRTThreads)(boolean_t);
  boolean_t (*pmInterruptPrewakeApplicable)(void);
};

/* 4419 */
typedef __builtin_va_list va_list_167;

/* 4420 */
typedef perfcontrol_event perfcontrol_event_0;

/* 4421 */
struct pmCallBacks_t
{
  uint64_t_0 (*setRTCPop)(uint64_t_0);
  void (*resyncDeadlines)(int);
  void (*initComplete)(void);
  x86_lcpu_t *(*GetLCPU)(int);
  x86_core_t *(*GetCore)(int);
  x86_die_t *(*GetDie)(int);
  x86_pkg_t *(*GetPackage)(int);
  x86_lcpu_t *(*GetMyLCPU)(void);
  x86_core_t *(*GetMyCore)(void);
  x86_die_t *(*GetMyDie)(void);
  x86_pkg_t *(*GetMyPackage)(void);
  x86_pkg_t *(*GetPkgRoot)(void);
  void (*LockCPUTopology)(int);
  boolean_t (*GetHibernate)(int);
  processor_t (*LCPUtoProcessor)(int);
  processor_t (*ThreadBind)(processor_t);
  uint32_t_0 (*GetSavedRunCount)(void);
  void (*pmSendIPI)(int);
  void (*GetNanotimeInfo)(pm_rtc_nanotime_t *);
  int (*ThreadGetUrgency)(uint64_t_0 *, uint64_t_0 *);
  uint32_t_0 (*timerQueueMigrate)(int);
  void (*RTCClockAdjust)(uint64_t_0);
  x86_topology_parameters_t *topoParms;
  boolean_t (*InterruptPending)(void);
  boolean_t (*IsInterrupting)(uint8_t_0);
  void (*InterruptStats)(uint64_t_0 *);
  void (*DisableApicTimer)(void);
};

/* 4422 */
typedef pm_rtc_nanotime pm_rtc_nanotime_t;

/* 4423 */
struct __attribute__((aligned(8))) pm_rtc_nanotime
{
  uint64_t_0 tsc_base;
  uint64_t_0 ns_base;
  uint32_t_0 scale;
  uint32_t_0 shift;
  uint32_t_0 generation;
};

/* 4424 */
typedef OpaqueDTEntry *DTEntry;

/* 4425 */
struct OpaqueDTEntry
{
  uint32_t_0 nProperties;
  uint32_t_0 nChildren;
};

/* 4426 */
typedef tscInfo tscInfo_t;

/* 4427 */
struct __attribute__((aligned(8))) tscInfo
{
  uint64_t_0 busFCvtt2n;
  uint64_t_0 busFCvtn2t;
  uint64_t_0 tscFreq;
  uint64_t_0 tscFCvtt2n;
  uint64_t_0 tscFCvtn2t;
  uint64_t_0 tscGranularity;
  uint64_t_0 bus2tsc;
  uint64_t_0 busFreq;
  uint32_t_0 flex_ratio;
  uint32_t_0 flex_ratio_min;
  uint32_t_0 flex_ratio_max;
};

/* 4428 */
typedef uint32_t_0 commpage_address_t;

/* 4429 */
typedef volatile commpage_time_data commpage_time_data_0;

/* 4430 */
struct commpage_time_data
{
  uint64_t_0 nt_tsc_base;
  uint32_t_0 nt_scale;
  uint32_t_0 nt_shift;
  uint64_t_0 nt_ns_base;
  uint32_t_0 nt_generation;
  uint32_t_0 gtod_generation;
  uint64_t_0 gtod_ns_base;
  uint64_t_0 gtod_sec_base;
};

/* 4431 */
typedef volatile commpage_timeofday_data new_commpage_timeofday_data_t;

/* 4432 */
struct commpage_timeofday_data
{
  uint64_t_0 TimeStamp_tick;
  uint64_t_0 TimeStamp_sec;
  uint64_t_0 TimeStamp_frac;
  uint64_t_0 Ticks_scale;
  uint64_t_0 Ticks_per_sec;
};

/* 4433 */
typedef commpage_descriptor commpage_descriptor_0;

/* 4434 */
struct commpage_descriptor
{
  void *code_address;
  uint32_t_0 code_length;
  uint32_t_0 commpage_address;
};

/* 4435 */
typedef __builtin_va_list va_list_168;

/* 4436 */
enum paniclog_flush_type : __int32
{
  kPaniclogFlushBase = 0x1,
  kPaniclogFlushStackshot = 0x2,
  kPaniclogFlushOtherLog = 0x3,
};

/* 4437 */
typedef EFI_SYSTEM_TABLE_64 EFI_SYSTEM_TABLE_64_0;

/* 4438 */
struct EFI_SYSTEM_TABLE_64
{
  EFI_TABLE_HEADER Hdr;
  EFI_PTR64 FirmwareVendor;
  EFI_UINT32 FirmwareRevision;
  EFI_UINT32 __pad;
  EFI_HANDLE64 ConsoleInHandle;
  EFI_PTR64 ConIn;
  EFI_HANDLE64 ConsoleOutHandle;
  EFI_PTR64 ConOut;
  EFI_HANDLE64 StandardErrorHandle;
  EFI_PTR64 StdErr;
  EFI_PTR64 RuntimeServices;
  EFI_PTR64 BootServices;
  EFI_UINT64 NumberOfTableEntries;
  EFI_PTR64 ConfigurationTable;
};

/* 4439 */
struct EFI_TABLE_HEADER
{
  EFI_UINT64 Signature;
  EFI_UINT32 Revision;
  EFI_UINT32 HeaderSize;
  EFI_UINT32 CRC32;
  EFI_UINT32 Reserved;
};

/* 4440 */
typedef uint64_t_0 EFI_UINT64;

/* 4441 */
typedef uint32_t_0 EFI_UINT32;

/* 4442 */
typedef uint64_t_0 EFI_PTR64;

/* 4443 */
typedef uint64_t_0 EFI_HANDLE64;

/* 4444 */
typedef EFI_SYSTEM_TABLE_32 EFI_SYSTEM_TABLE_32_0;

/* 4445 */
struct EFI_SYSTEM_TABLE_32
{
  EFI_TABLE_HEADER Hdr;
  EFI_PTR32 FirmwareVendor;
  EFI_UINT32 FirmwareRevision;
  EFI_HANDLE32 ConsoleInHandle;
  EFI_PTR32 ConIn;
  EFI_HANDLE32 ConsoleOutHandle;
  EFI_PTR32 ConOut;
  EFI_HANDLE32 StandardErrorHandle;
  EFI_PTR32 StdErr;
  EFI_PTR32 RuntimeServices;
  EFI_PTR32 BootServices;
  EFI_UINT32 NumberOfTableEntries;
  EFI_PTR32 ConfigurationTable;
};

/* 4446 */
typedef uint32_t_0 EFI_PTR32;

/* 4447 */
typedef uint32_t_0 EFI_HANDLE32;

/* 4448 */
typedef __builtin_va_list va_list_169;

/* 4449 */
typedef _cframe_t_0 cframe_t_0;

/* 4450 */
struct _cframe_t_0
{
  _cframe_t_0 *prev;
  uintptr_t caller;
};

/* 4451 */
struct EFI_RUNTIME_SERVICES_64
{
  EFI_TABLE_HEADER Hdr;
  EFI_PTR64 GetTime;
  EFI_PTR64 SetTime;
  EFI_PTR64 GetWakeupTime;
  EFI_PTR64 SetWakeupTime;
  EFI_PTR64 SetVirtualAddressMap;
  EFI_PTR64 ConvertPointer;
  EFI_PTR64 GetVariable;
  EFI_PTR64 GetNextVariableName;
  EFI_PTR64 SetVariable;
  EFI_PTR64 GetNextHighMonotonicCount;
  EFI_PTR64 ResetSystem;
};

/* 4452 */
struct __attribute__((aligned(8))) EFI_RUNTIME_SERVICES_32
{
  EFI_TABLE_HEADER Hdr;
  EFI_PTR32 GetTime;
  EFI_PTR32 SetTime;
  EFI_PTR32 GetWakeupTime;
  EFI_PTR32 SetWakeupTime;
  EFI_PTR32 SetVirtualAddressMap;
  EFI_PTR32 ConvertPointer;
  EFI_PTR32 GetVariable;
  EFI_PTR32 GetNextVariableName;
  EFI_PTR32 SetVariable;
  EFI_PTR32 GetNextHighMonotonicCount;
  EFI_PTR32 ResetSystem;
};

/* 4453 */
struct symtab_command_0
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint32_t_0 symoff;
  uint32_t_0 nsyms;
  uint32_t_0 stroff;
  uint32_t_0 strsize;
};

/* 4454 */
typedef nlist_64 kernel_nlist_t;

/* 4455 */
struct nlist_64
{
  nlist_64::$3327CB88BB5302D382AB13364EA36791 n_un;
  uint8_t_0 n_type;
  uint8_t_0 n_sect;
  uint16_t n_desc;
  uint64_t_0 n_value;
};

/* 4456 */
union nlist_64::$3327CB88BB5302D382AB13364EA36791
{
  uint32_t_0 n_strx;
};

/* 4457 */
typedef paniclog_flush_type paniclog_flush_type_t;

/* 4458 */
struct lapic_ops_table_t
{
  void (*init)(void);
  uint32_t_0 (*read)(lapic_register_t);
  void (*write)(lapic_register_t, uint32_t_0);
  uint64_t_0 (*read_icr)(void);
  void (*write_icr)(uint32_t_0, uint32_t_0);
};

/* 4459 */
typedef $C4A67B70ADF2A79A66C7BE0F62F6EDD7 lapic_register_t;

/* 4460 */
typedef __builtin_va_list va_list_170;

/* 4461 */
typedef uint32_t_0 lapic_timer_count_t;

/* 4462 */
typedef $61B9A23D6C6932F9704ECC717EE62ABC lapic_timer_mode_t;

/* 4463 */
typedef $FA8FD0B21D6BB671875B26912AA87E56 lapic_timer_divide_t;

/* 4464 */
struct debugger_callback;

/* 4465 */
struct processor_start_info_t
{
  int target_cpu;
  int target_lapic;
  int starter_cpu;
};

/* 4466 */
struct mp_call_queue_t
{
  queue_head_t queue;
  simple_lock_data_t lock;
};

/* 4467 */
typedef $1BE9FAF8A6EFD97FB183C256A5ECF02F NMI_reason_t;

/* 4468 */
struct __attribute__((aligned(8))) _kdp_xcpu_call_func
{
  kdp_x86_xcpu_func_t func;
  void *arg0;
  void *arg1;
  volatile __int64 ret;
  volatile uint16_t cpu;
};

/* 4469 */
typedef __int64 (*kdp_x86_xcpu_func_t)(void *, void *, uint16_t);

/* 4470 */
struct mp_call_t
{
  queue_chain_t link;
  void (*func)(void *, void *);
  void *arg0;
  void *arg1;
  cpumask_t *maskp;
};

/* 4471 */
typedef volatile uint64_t_0 cpumask_t;

/* 4472 */
typedef uint32_t_0 cpu_t;

/* 4473 */
typedef __builtin_va_list va_list_171;

/* 4474 */
typedef cpu_warm_data *cpu_warm_data_t;

/* 4475 */
struct __attribute__((aligned(8))) cpu_warm_data
{
  timer_call_t cwd_call;
  uint64_t_0 cwd_deadline;
  int cwd_result;
};

/* 4476 */
typedef $D41B888F238AFA8BEF96EAEF5674FD35 mp_sync_t;

/* 4477 */
typedef $AC02297522B323F277CA7EAE1DE55862 mp_event_t;

/* 4478 */
typedef __builtin_va_list va_list_172;

/* 4479 */
typedef __builtin_va_list va_list_173;

/* 4480 */
typedef acpi_hibernate_callback_data acpi_hibernate_callback_data_t;

/* 4481 */
struct acpi_hibernate_callback_data
{
  acpi_sleep_callback func;
  void *refcon;
};

/* 4482 */
typedef void (*acpi_sleep_callback)(void *);

/* 4483 */
struct $126BB29CD06ADD3A38D2D8EAB73A8A1B
{
  uint64_t_0 MTRRcap;
  uint64_t_0 MTRRdefType;
  mtrr_var_range_t *var_range;
  unsigned int var_count;
  mtrr_fix_range_t fix_range[11];
};

/* 4484 */
typedef mtrr_var_range mtrr_var_range_t;

/* 4485 */
struct __attribute__((aligned(8))) mtrr_var_range
{
  uint64_t_0 base;
  uint64_t_0 mask;
  uint32_t_0 refcnt;
};

/* 4486 */
typedef mtrr_fix_range mtrr_fix_range_t;

/* 4487 */
struct mtrr_fix_range
{
  uint64_t_0 types;
};

/* 4488 */
typedef __builtin_va_list va_list_174;

/* 4489 */
typedef __builtin_va_list va_list_175;

/* 4490 */
typedef __builtin_va_list va_list_176;

/* 4491 */
typedef __builtin_va_list va_list_177;

/* 4492 */
typedef __builtin_va_list va_list_178;

/* 4493 */
struct intel_ucupdate
{
  uint32_t_0 header_version;
  uint32_t_0 update_revision;
  uint32_t_0 date;
  uint32_t_0 processor_signature;
  uint32_t_0 checksum;
  uint32_t_0 loader_revision;
  uint32_t_0 processor_flags;
  uint32_t_0 data_size;
  uint32_t_0 total_size;
  uint32_t_0 reserved0;
  uint32_t_0 reserved1;
  uint32_t_0 reserved2;
  uint32_t_0 data;
};

/* 4494 */
typedef __builtin_va_list va_list_179;

/* 4495 */
typedef __builtin_va_list va_list_180;

/* 4496 */
struct hv_callbacks_t
{
  void (*dispatch)(void *);
  void (*preempt)(void *);
  void (*suspend)(void);
  void (*thread_destroy)(void *);
  void (*task_destroy)(void *);
  void (*volatile_state)(void *, int);
  void (*memory_pressure)(void);
};

/* 4497 */
struct __attribute__((aligned(8))) hv_trap_table_t
{
  const hv_trap_t *traps;
  unsigned int trap_count;
};

/* 4498 */
typedef kern_return_t (*hv_trap_t)(void *, uint64_t_0);

/* 4499 */
enum hv_trap_type_t : __int32
{
  HV_TASK_TRAP = 0x0,
  HV_THREAD_TRAP = 0x1,
};

/* 4500 */
typedef __builtin_va_list va_list_181;

/* 4501 */
typedef $569F1C65FD61B61B1F4E40023AA7D959 hv_volatile_state_t;

/* 4502 */
typedef __builtin_va_list va_list_182;

/* 4503 */
typedef __builtin_va_list va_list_183;

/* 4504 */
struct kpc_get_counters_remote
{
  uint32_t_0 classes;
  uint32_t_0 nb_counters;
  uint32_t_0 buf_stride;
  uint64_t_0 *buf;
};

/* 4505 */
struct __attribute__((aligned(8))) mt_device
{
  const char *mtd_name;
  int (*const mtd_init)(mt_device *);
  int (*const mtd_add)(monotonic_config *, uint32_t_0 *);
  void (*const mtd_reset)(void);
  void (*const mtd_enable)(_Bool);
  int (*const mtd_read)(uint64_t_0, uint64_t_0 *);
  lck_mtx_t_0 mtd_lock;
  uint8_t_0 mtd_nmonitors;
  uint8_t_0 mtd_ncounters;
  _Bool mtd_inuse;
};

/* 4506 */
struct monotonic_config
{
  uint64_t_0 event;
  uint64_t_0 allowed_ctr_mask;
  uint64_t_0 cpu_mask;
};

/* 4507 */
typedef __builtin_va_list va_list_184;

/* 4508 */
typedef mt_device *mt_device_t;

/* 4509 */
struct cstate_table_entry_t
{
  cst_t cst_num;
  cst_hint_t mwait_hint;
  uint32_t_0 cst_enabled;
  uint32_t_0 cst_wakeup_energy;
  uint64_t_0 cst_breakeven_ns;
};

/* 4510 */
enum cst_t : __int32
{
  C1 = 0x64,
  C1E = 0x65,
  C3 = 0x12C,
  C6 = 0x258,
  C7 = 0x2BC,
  C7s = 0x2BD,
  C8 = 0x320,
  C9 = 0x384,
  C10 = 0x3E8,
};

/* 4511 */
enum cst_hint_t : __int32
{
  HSW_C1 = 0x0,
  HSW_C1E = 0x1,
  HSW_C3 = 0x10,
  HSW_C6 = 0x20,
  HSW_C7 = 0x31,
  HSW_C7s = 0x33,
  HSW_C8 = 0x40,
  HSW_C9 = 0x50,
  HSW_C10 = 0x60,
};

/* 4512 */
struct xcpm_cstate_residency_t
{
  uint64_t_0 xcpm_tsc;
  uint64_t_0 xcpm_core_c7;
  uint64_t_0 xcpm_pkg_c2;
  uint64_t_0 xcpm_pkg_c3;
  uint64_t_0 xcpm_pkg_c6;
  uint64_t_0 xcpm_pkg_c7;
  uint64_t_0 xcpm_pkg_c8;
  uint64_t_0 xcpm_pkg_c9;
  uint64_t_0 xcpm_pkg_c10;
};

/* 4513 */
enum $77661CCD943024097D80F71640E9D2F9 : __int32
{
  HSW_S = 0x4,
  HSW_H = 0x8,
  HSW_U = 0x10,
  BDW_H = 0x40,
  BDW_U = 0x80,
  BDW_Y = 0x100,
  SKL_UY = 0x200,
  SKL_S = 0x1000,
  SKL_H = 0x2000,
  SKL_W = 0x4000,
  HSW_ALL = 0x1C,
  BDW_ALL = 0x1C0,
  SKL_ALL = 0x7200,
};

/* 4514 */
typedef __builtin_va_list va_list_185;

/* 4515 */
typedef xcpm_cpu_data xcpm_cpu_data_t;

/* 4516 */
struct __attribute__((aligned(32))) xcpm_cpu_data
{
  volatile uint64_t_0 xcpm_cpu_monitor_lock[8];
  xcpm_cpu_monitor_t xcpm_cpu_monitor;
  uint32_t_0 xcpm_dvfs_transfer_index;
  uint32_t_0 xcpm_cur_multiplier;
  uint32_t_0 xcpm_cpu_init_count;
  uint32_t_0 xcpm_dvfs_base;
  uint32_t_0 xcpm_idle_dvfs_base;
  uint8_t_0 xcpm_cur_epp;
  uint32_t_0 xcpm_cpu_state;
  uint32_t_0 xcpm_intr_state;
  uint32_t_0 xcpm_cpu_qos;
  xcpm_qos_state_t cpu_qos_states[16];
  uint64_t_0 xcpm_qos_times[16];
  uint32_t_0 xcpm_qos_being_charged;
  uint64_t_0 xcpm_qos_charge_tstamp;
  uint64_t_0 xcpm_dvfs_deadline;
  uint64_t_0 xcpm_dvfs_transfer_ttd;
  uint64_t_0 xcpm_idle_ttd;
  uint64_t_0 xcpm_idle_start;
  uint64_t_0 xcpm_idle_duration;
  uint64_t_0 xcpm_active_duration;
  uint64_t_0 xcpm_insn_count;
  uint64_t_0 xcpm_cycle_count;
  int64_t xcpm_insn_delta;
  int64_t xcpm_cycle_delta;
  uint64_t_0 xcpm_cpi_tstamp;
  uint64_t_0 acc_idle;
  uint64_t_0 min_fi;
  uint64_t_0 max_fi;
  uint64_t_0 xcpm_lddelta;
  uint64_t_0 xcpm_stdelta;
  uint64_t_0 xcpm_ld_uops;
  uint64_t_0 xcpm_st_uops;
  uint64_t_0 xcpm_scalability_deferrals;
  uint64_t_0 xcpm_cst_config;
  uint64_t_0 xcpm_fi_ttd;
  uint64_t_0 xcpm_halt_time;
  uint64_t_0 xcpm_online_time;
};

/* 4517 */
struct xcpm_cpu_monitor_t
{
  volatile uint32_t_0 xcpm_cpu_monitor_line[16];
};

/* 4518 */
struct xcpm_qos_state_t
{
  uint32_t_0 qos_fv_index;
  uint64_t_0 qos_ttd;
  uint64_t_0 qos_tstamp;
};

/* 4519 */
typedef __builtin_va_list va_list_186;

/* 4520 */
enum $05F119FD9D7DDEFF0D93455130353EEB : __int32
{
  SLAVE_SIG_BLOCK = 0x0,
  SLAVE_SIG_IDLE = 0x1,
};

/* 4521 */
enum $8B89EBA7D80BD869ADBACBE0E5C0A50C : __int32
{
  XCPM_QOS_NORMAL = 0x0,
  XCPM_QOS_BACKGROUND = 0x1,
  XCPM_QOS_RT = 0x2,
  XCPM_QOS_RT_LONG = 0x3,
  XCPM_QOS_KERNEL = 0x4,
  XCPM_QOS_TTIER0 = 0x5,
  XCPM_QOS_TTIER1 = 0x6,
  XCPM_QOS_TTIER2 = 0x7,
  XCPM_QOS_TTIER3 = 0x8,
  XCPM_QOS_TTIER4 = 0x9,
  XCPM_QOS_TTIER5 = 0xA,
  XCPM_QOS_GRAPHICS_SERVER = 0xB,
  XCPM_QOS_IDLE = 0xC,
  XCPM_QOS_MAX = 0xD,
};

/* 4522 */
struct xcpm_symbolic_frequency_vector_t
{
  uint8_t_0 frequency_specifier;
  xcpm_frequency_specifier_t frequency_specifier_type;
  uint64_t_0 ttd_us;
  xcpm_symbolic_idle_vector_t idle_vector[16];
};

/* 4523 */
enum xcpm_frequency_specifier_t : __int32
{
  XCPM_FREQUENCY_NONE = 0x0,
  XCPM_FREQUENCY_ABSOLUTE = 0x1,
  XCPM_FREQUENCY_NON_TURBO_PERCENT = 0x2,
  XCPM_FREQUENCY_TURBO_PERCENT = 0x3,
  XCPM_FREQUENCY_LPM_PERCENT = 0x4,
  XCPM_FMAX_VMIN = 0x5,
};

/* 4524 */
struct __attribute__((aligned(4))) xcpm_symbolic_idle_vector_t
{
  uint64_t_0 xcpm_idle_duration;
  uint32_t_0 xcpm_next_element;
  uint8_t_0 xcpm_deadline_scale_percent;
};

/* 4525 */
struct xcpm_symbolic_uncore_frequency_vector_t
{
  uint8_t_0 uncore_frequency_specifier;
  xcpm_frequency_specifier_t uncore_frequency_specifier_type;
};

/* 4526 */
struct xcpm_frequency_vector_t
{
  uint32_t_0 xcpm_multiplier;
  uint64_t_0 ttd_us;
  xcpm_idle_vector_t idle_vector[16];
};

/* 4527 */
struct xcpm_idle_vector_t
{
  uint64_t_0 xcpm_idle_duration;
  uint32_t_0 xcpm_next_element;
  uint64_t_0 deadline_scale;
};

/* 4528 */
struct xcpm_qos_entry_t
{
  boolean_t qos_enabled;
  boolean_t qos_filtered;
  uint32_t_0 min_qos_index;
  uint32_t_0 max_qos_index;
  uint32_t_0 qos_scales[32];
  uint8_t_0 qos_epp;
  uint64_t_0 qos_obsoletion_interval;
};

/* 4529 */
struct __attribute__((aligned(8))) xcpm_pstate_entry_t
{
  uint32_t_0 pst_freq;
  uint32_t_0 pst_mul;
  uint32_t_0 pst_v;
  uint64_t_0 pst_sts;
  uint64_t_0 pst_ctl;
  uint32_t_0 pst_max_cores_turbo;
};

/* 4530 */
struct xcpm_pst_metadata_t
{
  xcpm_pstate_entry_t *p_min;
  xcpm_pstate_entry_t *p_maxeff;
  xcpm_pstate_entry_t *p_fmax_vmin;
  xcpm_pstate_entry_t *p_max_non_turbo;
  xcpm_pstate_entry_t *p_max_turbo;
  uint32_t_0 pmin_ratio;
  uint32_t_0 pmaxeff_ratio;
  uint32_t_0 pmnt_ratio;
  uint32_t_0 pfmaxvmin_ratio;
  uint32_t_0 pmaxturbo_ratio;
  uint64_t_0 ctdpn;
  uint64_t_0 pinfo;
};

/* 4531 */
struct __attribute__((aligned(64))) xcpm_pkg_t
{
  volatile uint64_t_0 xcpm_pkg_slock[8];
  uint32_t_0 xcpm_pkg_max;
  uint32_t_0 xcpm_pkg_plimit_max_ratio;
  uint32_t_0 xcpm_pkg_plimit_min_ratio;
  uint32_t_0 xcpm_pkg_max_v;
  uint8_t_0 xcpm_pkg_min_epp;
};

/* 4532 */
typedef xcpm_qos_name xcpm_qos_name_t;

/* 4533 */
struct xcpm_qos_name
{
  xcpm_qos_t id;
  char name[16];
};

/* 4534 */
typedef $8B89EBA7D80BD869ADBACBE0E5C0A50C xcpm_qos_t;

/* 4535 */
typedef __builtin_va_list va_list_187;

/* 4536 */
struct xcpm_config_t
{
  uint32_t_0 xcpm_pkg_hardlimit_max_ratio;
  uint32_t_0 xcpm_pkg_hardlimit_min_ratio;
  uint32_t_0 xcpm_pkg_softlimit_max_ratio;
  uint32_t_0 xcpm_pkg_softlimit_min_ratio;
  uint32_t_0 xcpm_pkg_uiboost_max_ratio;
  uint32_t_0 xcpm_pkg_uiboost_min_ratio;
  uint32_t_0 xcpm_ui_boost_mode;
  uint32_t_0 xcpm_disable_quiesce;
  uint32_t_0 xcpm_use_cpu_energy_cost;
  uint32_t_0 xcpm_disable_idle_self_select;
  uint32_t_0 xcpm_enable_scalability_detection;
  uint32_t_0 xcpm_load_transfer_coefficient;
  uint32_t_0 xcpm_cpi_eval_ratio;
  uint32_t_0 xcpm_cpi_threshold;
  uint32_t_0 xcpm_cpi_demotion_threshold;
  uint32_t_0 xcpm_scalability_eval_us;
  uint32_t_0 xcpm_forced_idle_ratio;
  uint64_t_0 xcpm_forced_idle_period;
  uint32_t_0 xcpm_deep_idle;
  uint32_t_0 xcpm_deep_idle_log;
  uint32_t_0 xcpm_cstate_halt;
  uint64_t_0 xcpm_mid;
  uint64_t_0 xcpm_mbd;
  uint64_t_0 xcpm_ratio_changes;
  uint64_t_0 xcpm_ratio_ratelimit_ns;
  uint64_t_0 xcpm_ratio_change_abstime;
  uint64_t_0 xcpm_tqm_ttd_min;
  uint64_t_0 xcpm_tqm_ttd_max;
  uint64_t_0 xcpm_tqm_ratelimited_ttd_max;
  uint32_t_0 xcpm_ratio_hf;
  uint32_t_0 xcpm_ratio_hf_limit;
  uint32_t_0 xcpm_qos_ratio_hf_limit;
  uint32_t_0 xcpm_ratio_lf;
  uint32_t_0 xcpm_ratio_lf_limit;
  uint32_t_0 xcpm_qos_ratio_lf_limit;
  uint32_t_0 xcpm_ratio_change_limited;
  uint32_t_0 xcpm_qos_ratio_change_limited;
  uint32_t_0 xcpm_qos_ratelimiting_enabled;
  uint32_t_0 xcpm_trace_quiesce;
  uint32_t_0 xcpm_mp_match_enabled;
  uint32_t_0 c8910;
  uint32_t_0 xcpm_qos_txfr;
  uint32_t_0 xcpm_mbd_mode;
  uint32_t_0 xcpm_bootstrap_trace;
  uint64_t_0 xcpm_core_ilat_ns;
  uint64_t_0 c3_lat_default;
  uint64_t_0 c6_lat_default;
  uint64_t_0 c7_lat_default;
  uint64_t_0 c8_lat_default;
  uint64_t_0 c9_lat_default;
  uint64_t_0 c10_lat_default;
  uint64_t_0 xcpm_mbd_applications;
  uint64_t_0 xcpm_mid_applications;
  uint64_t_0 xcpm_mbd_relaxations;
  uint64_t_0 xcpm_mid_relaxations;
  uint64_t_0 xcpm_accrued_plimit_hz;
  uint64_t_0 xcpm_forced_idle_time;
  uint64_t_0 xcpm_rbms_restricted_time;
  uint64_t_0 xcpm_rmid_restricted_time;
  uint64_t_0 xcpm_preidle_spin_tsc;
  uint64_t_0 xcpm_uib_ns;
  uint32_t_0 xcpm_cpu_thermal_level;
  uint32_t_0 xcpm_gpu_thermal_level;
  uint32_t_0 xcpm_io_thermal_level;
  uint32_t_0 xcpm_smc_cpu_thermal_level;
  uint32_t_0 xcpm_smc_gpu_thermal_level;
  uint32_t_0 xcpm_smc_io_thermal_level;
  uint32_t_0 xcpm_min_cpu_thermal_level;
  uint32_t_0 xcpm_min_gpu_thermal_level;
  uint32_t_0 xcpm_min_io_thermal_level;
  uint32_t_0 utility_qos_thermal_threshold;
  uint32_t_0 non_focal_qos_thermal_threshold;
  uint32_t_0 utility_qos_active;
  uint32_t_0 non_focal_qos_active;
  uint32_t_0 xcpm_adaptive_qos_default;
  uint32_t_0 xcpm_adaptive_qos_target;
  uint32_t_0 xcpm_adaptive_qos;
  uint32_t_0 xcpm_ps_battery;
  uint32_t_0 xcpm_ldst_ratio;
  uint32_t_0 xcpm_cpld_threshold;
  uint32_t_0 xcpm_cpst_threshold;
  uint32_t_0 xcpm_cpld_demotion_threshold;
  uint32_t_0 xcpm_cpst_demotion_threshold;
  uint64_t_0 xcpm_scalability_deferrals_max;
  uint64_t_0 xcpm_scalability_aborts;
  uint64_t_0 xcpm_io_cstlim;
  uint64_t_0 xcpm_cstlim_default;
  uint64_t_0 xcpm_io_read_iarrival_ns;
  uint64_t_0 xcpm_io_read_iarrival_disengage_ns;
  uint32_t_0 xcpm_io_controlled;
  uint32_t_0 xcpm_io_read_engage_threshold;
  uint32_t_0 xcpm_io_read_disengage_threshold;
  uint32_t_0 xcpm_io_cst_control_enabled;
  uint32_t_0 xcpm_fi_max_off_us;
  uint32_t_0 xcpm_bootplim;
  uint32_t_0 xcpm_bootpst;
  uint32_t_0 xcpm_vectors_loaded_count;
  uint64_t_0 xcpm_ring_boost_mbd_ns;
  uint32_t_0 xcpm_ring_boost_ratio;
  uint32_t_0 xcpm_ring_boost_enabled;
  uint32_t_0 xcpm_ring_boosted;
  uint32_t_0 xcpm_io_epp_boost;
  uint32_t_0 xcpm_io_epp_boost_enabled;
  uint64_t_0 xcpm_io_epp_boost_ratio_changes;
  uint32_t_0 xcpm_epp_override;
  uint32_t_0 xcpm_init_status;
  uint32_t_0 xcpm_per_core_pstate;
  uint32_t_0 xcpm_keep_vector_during_idle;
  uint64_t_0 xcpm_mid_cstlim;
  uint64_t_0 xcpm_mid_mode;
  uint64_t_0 xcpm_mid_mode_active;
  uint64_t_0 xcpm_io_hints;
  uint64_t_0 xcpm_io_keep_vector_during_idle;
  uint64_t_0 xcpm_io_core_cst_hint_enabled;
  uint64_t_0 xcpm_io_core_cst_limit;
};

/* 4537 */
typedef __builtin_va_list va_list_188;

/* 4538 */
struct xcpm_msr_record_t
{
  uint32_t_0 xcpm_msr_num;
  uint32_t_0 xcpm_msr_applicable_cpus;
  uint32_t_0 *xcpm_msr_flag_p;
  uint64_t_0 xcpm_msr_bits_clear;
  uint64_t_0 xcpm_msr_bits_set;
  uint64_t_0 xcpm_msr_initial_value;
  uint64_t_0 xcpm_msr_rb_value;
};

/* 4539 */
struct xcpm_stats_t
{
  uint64_t_0 xcpm_quiesce_count;
  uint64_t_0 xcpm_quiesce_total;
  uint64_t_0 xcpm_quiesce_max;
  uint32_t_0 xcpm_contention_events;
  uint32_t_0 xcpm_load_transfers;
  uint32_t_0 xcpm_self_selects;
  uint64_t_0 xcpm_io_tstamp;
  uint64_t_0 xcpm_filtered_io_read_count;
  uint32_t_0 xcpm_io_control_engages;
  uint32_t_0 xcpm_io_control_disengages;
};

/* 4540 */
typedef $77661CCD943024097D80F71640E9D2F9 xcpm_cpu_model_t;

/* 4541 */
typedef uint32_t_0 xcpm_init_type_t;

/* 4542 */
enum xcpmio_plm_flavor_t : __int32
{
  PL_SMC_STD = 0x0,
  PL_TOOL_SOFT = 0x1,
  PL_SMC_BOOST = 0x2,
};

/* 4543 */
enum xcpmio_fv_t : __int32
{
  XCPMIO_FV_NONE = 0x0,
  XCPMIO_FV_ABSOLUTE = 0x1,
  XCPMIO_FV_NON_TURBO_PCT = 0x2,
  XCPMIO_FV_TURBO_PCT = 0x3,
  XCPMIO_FV_LPM_PCT = 0x4,
  XCPMIO_FMAX_VMIN = 0x5,
};

/* 4544 */
struct __attribute__((packed)) __attribute__((aligned(1))) xcpmio_cstate_info
{
  uint32_t_0 cst_index;
  char cst_name[5];
  uint32_t_0 cst_enabled;
  uint64_t_0 cst_breakeven_ns;
};

/* 4545 */
struct xcpmio_pstate_limits
{
  uint32_t_0 pst_max_limit;
  uint32_t_0 pst_min_limit;
};

/* 4546 */
typedef xcpmio_forced_idle xcpmio_forced_idle_t;

/* 4547 */
struct xcpmio_forced_idle
{
  uint32_t_0 forced_idle_ratio;
  uint32_t_0 forced_idle_period;
};

/* 4548 */
typedef xcpmio_pstate_table xcpmio_pstate_table_t;

/* 4549 */
struct xcpmio_pstate_table
{
  uint32_t_0 pst_min_freq;
  uint32_t_0 pst_max_turbo_freq;
  uint32_t_0 pst_max_eff_freq;
  uint32_t_0 pst_max_non_turbo_freq;
  uint32_t_0 pst_current_freq;
  uint32_t_0 pst_count;
  xcpmio_pstate_t pstate[64];
};

/* 4550 */
typedef xcpmio_pstate xcpmio_pstate_t;

/* 4551 */
struct xcpmio_pstate
{
  uint32_t_0 pst_id;
  uint32_t_0 pst_freq;
  uint32_t_0 pst_voltage;
  uint32_t_0 pst_max_cores_turbo;
};

/* 4552 */
typedef xcpmio_vectors xcpmio_vectors_t;

/* 4553 */
struct xcpmio_vectors
{
  uint32_t_0 version;
  xcpmio_vector_t vector[32];
  xcpmio_qos_t qos[16];
  xcpmio_var_t vars[16];
};

/* 4554 */
typedef xcpmio_vector xcpmio_vector_t;

/* 4555 */
struct __attribute__((packed)) __attribute__((aligned(4))) xcpmio_vector
{
  uint32_t_0 fv_specifier;
  xcpmio_fv_t fv_type;
  uint32_t_0 fv_mhz;
  uint64_t_0 fv_ttd_us;
  xcpmio_idle_t idle[16];
};

/* 4556 */
struct __attribute__((packed)) __attribute__((aligned(2))) xcpmio_idle_t
{
  uint64_t_0 idle_duration;
  uint8_t_0 idle_next;
  uint8_t_0 idle_scale_percent;
};

/* 4557 */
typedef xcpmio_qos xcpmio_qos_t;

/* 4558 */
struct __attribute__((packed)) __attribute__((aligned(1))) xcpmio_qos
{
  char qos_name[16];
  uint8_t_0 qos_min_index;
  uint8_t_0 qos_max_index;
  uint16_t qos_scales[32];
  uint8_t_0 qos_epp;
};

/* 4559 */
typedef xcpmio_var xcpmio_var_t;

/* 4560 */
struct __attribute__((packed)) __attribute__((aligned(4))) xcpmio_var
{
  char var_name[16];
  uint32_t_0 var_type;
  xcpmio_var::$6BF0F2B5EFF3C83C4E6B491F2A88EFA4 var_value;
};

/* 4561 */
union xcpmio_var::$6BF0F2B5EFF3C83C4E6B491F2A88EFA4
{
  uint64_t_0 uint64;
  char string[16];
};

/* 4562 */
typedef xcpmio_cpu_status xcpmio_cpu_status_t;

/* 4563 */
struct xcpmio_cpu_status
{
  uint32_t_0 sts_voltage;
  uint32_t_0 sts_pkg_freq;
  uint32_t_0 sts_now_freq;
  uint32_t_0 sts_ncpus;
  uint32_t_0 sts_cpu_freq[32];
};

/* 4564 */
typedef xcpmio_limit_stats xcpmio_limit_stats_t;

/* 4565 */
struct xcpmio_limit_stats
{
  uint64_t_0 total_plimit_hz;
  uint64_t_0 total_fi_time_ns;
  uint64_t_0 total_rmbs_time_ns;
};

/* 4566 */
typedef xcpmio_thermal_levels xcpmio_thermal_levels_t;

/* 4567 */
struct xcpmio_thermal_levels
{
  uint8_t_0 cpu_thermal_level;
  uint8_t_0 gpu_thermal_level;
  uint8_t_0 io_thermal_level;
  uint8_t_0 reserved;
};

/* 4568 */
typedef xcpmio_qos_names xcpmio_qos_names_t;

/* 4569 */
struct xcpmio_qos_names
{
  uint32_t_0 xcpm_qos_name_count;
  char xcpm_qos_name[16][16];
};

/* 4570 */
typedef xcpmio_qos_times xcpmio_qos_times_t;

/* 4571 */
struct __attribute__((packed)) __attribute__((aligned(4))) xcpmio_qos_times
{
  uint32_t_0 xcpm_qos_ncpus;
  uint64_t_0 xcpm_qos_time[32][16];
};

/* 4572 */
typedef xcpmio_qos_thermal_thresholds xcpmio_qos_thermal_thresholds_t;

/* 4573 */
struct xcpmio_qos_thermal_thresholds
{
  uint8_t_0 utility_qos_thermal_threshold;
  uint8_t_0 nonfocal_qos_thermal_threshold;
  uint8_t_0 reserved1;
  uint8_t_0 reserved2;
};

/* 4574 */
typedef xcpmio_ws_update xcpmio_ws_update_t;

/* 4575 */
struct xcpmio_ws_update
{
  uint64_t_0 ws_update_flags;
  uint64_t_0 ws_update_deadline_abstime;
  uint32_t_0 ws_update_area_fraction;
  uint32_t_0 ws_target_fps;
  uint32_t_0 ws_current_fps_estimate;
  uint32_t_0 ws_update_num_clients;
  uint32_t_0 ws_update_reserved[4];
};

/* 4576 */
typedef xcpmio_ui_boost_control xcpmio_ui_boost_control_t;

/* 4577 */
struct xcpmio_ui_boost_control
{
  uint32_t_0 xcpm_ui_boost_enable;
};

/* 4578 */
typedef xcpmio_power_source xcpmio_power_source_t;

/* 4579 */
struct xcpmio_power_source
{
  uint32_t_0 xcpm_battery_power_source;
};

/* 4580 */
typedef __builtin_va_list va_list_189;

/* 4581 */
struct __attribute__((aligned(8))) panic_hook
{
  uint32_t_0 magic1;
  queue_chain_t chain;
  thread_t thread;
  panic_hook_fn_t hook_fn;
  uint32_t_0 magic2;
};

/* 4582 */
typedef __builtin_va_list va_list_190;

/* 4583 */
typedef void (*panic_hook_fn_t)(panic_hook_t *);

/* 4584 */
struct panic_hook_t
{
  uint64_t_0 opaque[6];
};

/* 4585 */
typedef panic_phys_range panic_phys_range_t;

/* 4586 */
struct panic_phys_range
{
  uint32_t_0 type;
  uint64_t_0 phys_start;
  uint64_t_0 len;
};

/* 4587 */
typedef void (*mach_bridge_regwrite_timestamp_func_t)(uint64_t_0);

/* 4588 */
enum vtype : __int32
{
  VNON = 0x0,
  VREG = 0x1,
  VDIR = 0x2,
  VBLK = 0x3,
  VCHR = 0x4,
  VLNK = 0x5,
  VSOCK = 0x6,
  VFIFO = 0x7,
  VBAD = 0x8,
  VSTR = 0x9,
  VCPLX = 0xA,
};

/* 4589 */
enum vfs_trigger_callback_op_t : __int32
{
  VTC_REPLACE = 0x0,
  VTC_RELEASE = 0x1,
};

/* 4590 */
enum path_operation : __int32
{
  OP_LOOKUP = 0x0,
  OP_MOUNT = 0x1,
  OP_UNMOUNT = 0x2,
  OP_STATFS = 0x3,
  OP_OPEN = 0x4,
  OP_LINK = 0x5,
  OP_UNLINK = 0x6,
  OP_RENAME = 0x7,
  OP_CHDIR = 0x8,
  OP_CHROOT = 0x9,
  OP_MKNOD = 0xA,
  OP_MKFIFO = 0xB,
  OP_SYMLINK = 0xC,
  OP_ACCESS = 0xD,
  OP_PATHCONF = 0xE,
  OP_READLINK = 0xF,
  OP_GETATTR = 0x10,
  OP_SETATTR = 0x11,
  OP_TRUNCATE = 0x12,
  OP_COPYFILE = 0x13,
  OP_MKDIR = 0x14,
  OP_RMDIR = 0x15,
  OP_REVOKE = 0x16,
  OP_EXCHANGEDATA = 0x17,
  OP_SEARCHFS = 0x18,
  OP_FSCTL = 0x19,
  OP_GETXATTR = 0x1A,
  OP_SETXATTR = 0x1B,
  OP_REMOVEXATTR = 0x1C,
  OP_LISTXATTR = 0x1D,
  OP_MAXOP = 0x1E,
};

/* 4591 */
enum nfs_supported_kerberos_etypes : __int32
{
  NFS_DES3_CBC_SHA1_KD = 0x10,
  NFS_AES128_CTS_HMAC_SHA1_96 = 0x11,
  NFS_AES256_CTS_HMAC_SHA1_96 = 0x12,
};

/* 4592 */
enum $AA37477D91567635C4C6CA10CF45E348 : __int32
{
  NFNON = 0x0,
  NFREG = 0x1,
  NFDIR = 0x2,
  NFBLK = 0x3,
  NFCHR = 0x4,
  NFLNK = 0x5,
  NFSOCK = 0x6,
  NFFIFO = 0x7,
  NFATTRDIR = 0x8,
  NFNAMEDATTR = 0x9,
};

/* 4593 */
struct __attribute__((aligned(8))) nfs_client_id
{
  nfs_client_id::$321C1F1FE2F3451102DAC29F9DB41C8B nci_link;
  char *nci_id;
  int nci_idlen;
};

/* 4594 */
struct nfs_client_id::$321C1F1FE2F3451102DAC29F9DB41C8B
{
  nfs_client_id *tqe_next;
  nfs_client_id **tqe_prev;
};

/* 4595 */
struct sockaddr
{
  __uint8_t sa_len;
  sa_family_t sa_family;
  char sa_data[14];
};

/* 4596 */
typedef __uint8_t sa_family_t;

/* 4597 */
typedef __uint16_t in_port_t;

/* 4598 */
typedef __uint32_t in_addr_t;

/* 4599 */
struct vnode::$247FDC224E2A338331D45C6C2E53A974
{
  vnode *tqe_next;
  vnode **tqe_prev;
};

/* 4600 */
struct vnode::$174C9EE912997FA19B92470DBE7919E6
{
  namecache *tqh_first;
  namecache **tqh_last;
};

/* 4601 */
struct namecache
{
  namecache::$FE8C2434E505FE23E4D4AA75FED04677 nc_entry;
  namecache::$FE8C2434E505FE23E4D4AA75FED04677 nc_child;
  namecache::$AC54DBC37365058402271A82DA20D096 nc_un;
  namecache::$A3D668141AA8E4918936A4291B72CE3C nc_hash;
  vnode_t nc_dvp;
  vnode_t nc_vp;
  unsigned int nc_hashval;
  const char *nc_name;
};

/* 4602 */
struct namecache::$FE8C2434E505FE23E4D4AA75FED04677
{
  namecache *tqe_next;
  namecache **tqe_prev;
};

/* 4603 */
union namecache::$AC54DBC37365058402271A82DA20D096
{
  namecache::$AC54DBC37365058402271A82DA20D096::$A3D668141AA8E4918936A4291B72CE3C nc_link;
  namecache::$AC54DBC37365058402271A82DA20D096::$FE8C2434E505FE23E4D4AA75FED04677 nc_negentry;
};

/* 4604 */
struct namecache::$AC54DBC37365058402271A82DA20D096::$A3D668141AA8E4918936A4291B72CE3C
{
  namecache *le_next;
  namecache **le_prev;
};

/* 4605 */
struct namecache::$AC54DBC37365058402271A82DA20D096::$FE8C2434E505FE23E4D4AA75FED04677
{
  namecache *tqe_next;
  namecache **tqe_prev;
};

/* 4606 */
struct namecache::$A3D668141AA8E4918936A4291B72CE3C
{
  namecache *le_next;
  namecache **le_prev;
};

/* 4607 */
struct vnode::$40FB4DAF873A4E8D045823299B10568B
{
  namecache *lh_first;
};

/* 4608 */
union vnode::$340B5204D89BD86505F81B6C292395C1
{
  mount *vu_mountedhere;
  socket *vu_socket;
  specinfo *vu_specinfo;
  fifoinfo *vu_fifoinfo;
  ubc_info *vu_ubcinfo;
};

/* 4609 */
struct mount
{
  mount::$8E2AE476ECBA7BDC18DDEDC4E5746DE8 mnt_list;
  int32_t mnt_count;
  lck_mtx_t mnt_mlock;
  vfsops *mnt_op;
  vfstable *mnt_vtable;
  vnode *mnt_vnodecovered;
  vnodelst mnt_vnodelist;
  vnodelst mnt_workerqueue;
  vnodelst mnt_newvnodes;
  uint32_t_0 mnt_flag;
  uint32_t_0 mnt_kern_flag;
  uint32_t_0 mnt_compound_ops;
  uint32_t_0 mnt_lflag;
  uint32_t_0 mnt_maxsymlinklen;
  vfsstatfs mnt_vfsstat;
  qaddr_t mnt_data;
  uint32_t_0 mnt_maxreadcnt;
  uint32_t_0 mnt_maxwritecnt;
  uint32_t_0 mnt_segreadcnt;
  uint32_t_0 mnt_segwritecnt;
  uint32_t_0 mnt_maxsegreadsize;
  uint32_t_0 mnt_maxsegwritesize;
  uint32_t_0 mnt_alignmentmask;
  uint32_t_0 mnt_devblocksize;
  uint32_t_0 mnt_ioqueue_depth;
  uint32_t_0 mnt_ioscale;
  uint32_t_0 mnt_ioflags;
  uint32_t_0 mnt_minsaturationbytecount;
  pending_io_t mnt_pending_write_size;
  pending_io_t mnt_pending_read_size;
  timeval mnt_last_write_issued_timestamp;
  timeval mnt_last_write_completed_timestamp;
  int64_t mnt_max_swappin_available;
  lck_rw_t mnt_rwlock;
  lck_mtx_t mnt_renamelock;
  vnode_t mnt_devvp;
  uint32_t_0 mnt_devbsdunit;
  uint64_t_0 mnt_throttle_mask;
  void *mnt_throttle_info;
  int32_t mnt_crossref;
  int32_t mnt_iterref;
  int32_t mnt_numtriggers;
  vfs_trigger_callback_t *mnt_triggercallback;
  void *mnt_triggerdata;
  uid_t mnt_fsowner;
  gid_t mnt_fsgroup;
  label *mnt_mntlabel;
  label *mnt_fslabel;
  vnode_t mnt_realrootvp;
  uint32_t_0 mnt_realrootvp_vid;
  uint32_t_0 mnt_generation;
  int mnt_authcache_ttl;
  char fstypename_override[16];
  uint32_t_0 mnt_iobufinuse;
  void *mnt_disk_conditioner_info;
  lck_mtx_t mnt_iter_lock;
};

/* 4610 */
struct mount::$8E2AE476ECBA7BDC18DDEDC4E5746DE8
{
  mount *tqe_next;
  mount **tqe_prev;
};

/* 4611 */
struct vfsops
{
  int (*vfs_mount)(mount *, vnode_t, user_addr_t, vfs_context_t);
  int (*vfs_start)(mount *, int, vfs_context_t);
  int (*vfs_unmount)(mount *, int, vfs_context_t);
  int (*vfs_root)(mount *, vnode **, vfs_context_t);
  int (*vfs_quotactl)(mount *, int, uid_t, caddr_t, vfs_context_t);
  int (*vfs_getattr)(mount *, vfs_attr *, vfs_context_t);
  int (*vfs_sync)(mount *, int, vfs_context_t);
  int (*vfs_vget)(mount *, ino64_t, vnode **, vfs_context_t);
  int (*vfs_fhtovp)(mount *, int, unsigned __int8 *, vnode **, vfs_context_t);
  int (*vfs_vptofh)(vnode *, int *, unsigned __int8 *, vfs_context_t);
  int (*vfs_init)(vfsconf *);
  int (*vfs_sysctl)(int *, u_int, user_addr_t, size_t_0 *, user_addr_t, size_t_0, vfs_context_t);
  int (*vfs_setattr)(mount *, vfs_attr *, vfs_context_t);
  int (*vfs_ioctl)(mount *, u_long, caddr_t, int, vfs_context_t);
  int (*vfs_vget_snapdir)(mount *, vnode **, vfs_context_t);
  void *vfs_reserved5;
  void *vfs_reserved4;
  void *vfs_reserved3;
  void *vfs_reserved2;
  void *vfs_reserved1;
};

/* 4612 */
typedef vfs_context *vfs_context_t;

/* 4613 */
struct vfs_attr
{
  uint64_t_0 f_supported;
  uint64_t_0 f_active;
  uint64_t_0 f_objcount;
  uint64_t_0 f_filecount;
  uint64_t_0 f_dircount;
  uint64_t_0 f_maxobjcount;
  uint32_t_0 f_bsize;
  __attribute__((packed)) __attribute__((aligned(1))) size_t_0 f_iosize;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_blocks;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_bfree;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_bavail;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_bused;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_files;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_ffree;
  fsid_t f_fsid;
  uid_t f_owner;
  vol_capabilities_attr_t f_capabilities;
  vol_attributes_attr_t f_attributes;
  timespec f_create_time;
  timespec f_modify_time;
  timespec f_access_time;
  timespec f_backup_time;
  uint32_t_0 f_fssubtype;
  __attribute__((packed)) __attribute__((aligned(1))) char *f_vol_name;
  uint16_t f_signature;
  uint16_t f_carbon_fsid;
  uuid_t f_uuid;
  uint64_t_0 f_quota;
  uint64_t_0 f_reserved;
};

/* 4614 */
typedef vol_capabilities_attr vol_capabilities_attr_t;

/* 4615 */
struct vol_capabilities_attr
{
  vol_capabilities_set_t capabilities;
  vol_capabilities_set_t valid;
};

/* 4616 */
typedef u_int32_t vol_capabilities_set_t[4];

/* 4617 */
typedef vol_attributes_attr vol_attributes_attr_t;

/* 4618 */
struct vol_attributes_attr
{
  attribute_set_t validattr;
  attribute_set_t nativeattr;
};

/* 4619 */
typedef attribute_set attribute_set_t;

/* 4620 */
struct attribute_set
{
  attrgroup_t commonattr;
  attrgroup_t volattr;
  attrgroup_t dirattr;
  attrgroup_t fileattr;
  attrgroup_t forkattr;
};

/* 4621 */
typedef u_int32_t attrgroup_t;

/* 4622 */
typedef __darwin_ino64_t ino64_t;

/* 4623 */
typedef __uint64_t __darwin_ino64_t;

/* 4624 */
struct vfsconf
{
  uint32_t_0 vfc_reserved1;
  char vfc_name[15];
  int vfc_typenum;
  int vfc_refcount;
  int vfc_flags;
  uint32_t_0 vfc_reserved2;
  uint32_t_0 vfc_reserved3;
};

/* 4625 */
struct vfstable
{
  vfsops *vfc_vfsops;
  char vfc_name[15];
  int vfc_typenum;
  int vfc_refcount;
  int vfc_flags;
  int (*vfc_mountroot)(mount_t, vnode_t, vfs_context_t);
  vfstable *vfc_next;
  int32_t vfc_reserved1;
  int32_t vfc_reserved2;
  int vfc_vfsflags;
  void *vfc_descptr;
  int vfc_descsize;
  sysctl_oid *vfc_sysctl;
};

/* 4626 */
typedef mount *mount_t;

/* 4627 */
struct kqlist
{
  kqworkloop *slh_first;
};

/* 4628 */
struct kqworkloop
{
  kqueue kqwl_kqueue;
  kqtailq kqwl_queue[8];
  kqrequest kqwl_request;
  lck_mtx_t kqwl_statelock;
  thread_t kqwl_owner;
  uint32_t_0 kqwl_retains;
  kqueue_id_t kqwl_dynamicid;
  uint64_t_0 kqwl_params;
  turnstile *kqwl_turnstile;
  kqworkloop::$478B7CC4B47F882DC941914CB501CFB1 kqwl_hashlink;
};

/* 4629 */
typedef uint64_t_0 kqueue_id_t;

/* 4630 */
struct kqworkloop::$478B7CC4B47F882DC941914CB501CFB1
{
  kqworkloop *sle_next;
};

/* 4631 */
struct vnodelst
{
  vnode *tqh_first;
  vnode **tqh_last;
};

/* 4632 */
struct __attribute__((packed)) __attribute__((aligned(4))) vfsstatfs
{
  uint32_t_0 f_bsize;
  size_t_0 f_iosize;
  uint64_t_0 f_blocks;
  uint64_t_0 f_bfree;
  uint64_t_0 f_bavail;
  uint64_t_0 f_bused;
  uint64_t_0 f_files;
  uint64_t_0 f_ffree;
  fsid_t f_fsid;
  uid_t f_owner;
  uint64_t_0 f_flags;
  char f_fstypename[16];
  char f_mntonname[1024];
  char f_mntfromname[1024];
  uint32_t_0 f_fssubtype;
  void *f_reserved[2];
};

/* 4633 */
typedef quad_t *qaddr_t;

/* 4634 */
typedef int64_t quad_t;

/* 4635 */
typedef uint64_t_0 pending_io_t;

/* 4636 */
typedef void vfs_trigger_callback_t(mount_t, vfs_trigger_callback_op_t, void *, vfs_context_t);

/* 4637 */
struct socket
{
  int so_zone;
  __int16 so_type;
  u_short so_error;
  u_int32_t so_options;
  __int16 so_linger;
  __int16 so_state;
  void *so_pcb;
  protosw *so_proto;
  socket *so_head;
  socket::$9D89CC94B11A0FF876168353A730EE4F so_incomp;
  socket::$9D89CC94B11A0FF876168353A730EE4F so_comp;
  socket::$687715D332D6AF1F0E01B97B6A23A7EC so_list;
  __int16 so_qlen;
  __int16 so_incqlen;
  __int16 so_qlimit;
  __int16 so_timeo;
  pid_t so_pgid;
  u_int32_t so_oobmark;
  sockbuf so_rcv;
  sockbuf so_snd;
  caddr_t so_tpcb;
  void (*so_event)(socket *, void *, u_int32_t);
  void *so_eventarg;
  kauth_cred_t so_cred;
  so_gen_t so_gencnt;
  socket::$1D3E450C18944DBC95A59288B453C62E so_evlist;
  socket::$DAB1A3991A01A82A8AA10B6CC8F36874 so_cache_ent;
  caddr_t so_saved_pcb;
  u_int32_t cache_timestamp;
  pid_t last_pid;
  u_int64_t last_upid;
  mbuf *so_temp;
  mbuf *so_tail;
  socket_filter_entry *so_filt;
  u_int32_t so_flags;
  uint32_t_0 so_upcallusecount;
  int so_usecount;
  int so_retaincnt;
  u_int32_t so_filteruse;
  u_int16_t so_traffic_class;
  int8_t so_netsvctype;
  u_int8_t so_restrictions;
  thread_t so_send_filt_thread;
  void *lock_lr[4];
  void *unlock_lr[4];
  u_int8_t next_lock_lr;
  u_int8_t next_unlock_lr;
  u_int16_t so_pktheadroom;
  u_int32_t so_ifdenied_notifies;
  label *so_label;
  label *so_peerlabel;
  thread_t so_background_thread;
  data_stats so_tc_stats[4];
  klist so_klist;
  msg_state *so_msg_state;
  flow_divert_pcb *so_fd_pcb;
  cfil_info *so_cfil;
  cfil_db *so_cfil_db;
  u_int32_t so_state_change_cnt;
  u_int32_t so_eventmask;
  pid_t e_pid;
  u_int64_t e_upid;
  uuid_t last_uuid;
  uuid_t e_uuid;
  uuid_t so_vuuid;
  int32_t so_policy_gencnt;
  u_int32_t so_flags1;
  u_int64_t so_extended_bk_start;
};

/* 4638 */
struct specinfo
{
  vnode **si_hashchain;
  vnode *si_specnext;
  __int64 si_flags;
  dev_t si_rdev;
  int32_t si_opencount;
  daddr_t si_size;
  daddr64_t si_lastr;
  u_int64_t si_devsize;
  u_int8_t si_initted;
  u_int8_t si_throttleable;
  u_int16_t si_isssd;
  u_int32_t si_devbsdunit;
  u_int64_t si_throttle_mask;
};

/* 4639 */
typedef int32_t daddr_t;

/* 4640 */
typedef int64_t daddr64_t;

/* 4641 */
struct __attribute__((aligned(8))) fifoinfo
{
  unsigned int fi_flags;
  socket *fi_readsock;
  socket *fi_writesock;
  __int64 fi_readers;
  __int64 fi_writers;
  unsigned int fi_count;
};

/* 4642 */
struct ubc_info
{
  memory_object_t ui_pager;
  memory_object_control_t ui_control;
  vnode_t ui_vnode;
  kauth_cred_t ui_ucred;
  off_t ui_size;
  uint32_t_0 ui_flags;
  uint32_t_0 cs_add_gen;
  cl_readahead *cl_rahead;
  cl_writebehind *cl_wbehind;
  timespec cs_mtime;
  cs_blob *cs_blobs;
};

/* 4643 */
struct __attribute__((aligned(8))) cl_readahead
{
  lck_mtx_t cl_lockr;
  daddr64_t cl_lastr;
  daddr64_t cl_maxra;
  int cl_ralen;
};

/* 4644 */
struct cl_writebehind
{
  lck_mtx_t cl_lockw;
  void *cl_scmap;
  off_t cl_last_write;
  off_t cl_seq_written;
  int cl_sparse_pushes;
  int cl_sparse_wait;
  int cl_number;
  cl_wextent cl_clusters[8];
};

/* 4645 */
struct __attribute__((aligned(8))) cl_wextent
{
  daddr64_t b_addr;
  daddr64_t e_addr;
  int io_flags;
};

/* 4646 */
struct __attribute__((aligned(8))) cs_blob
{
  cs_blob *csb_next;
  cpu_type_t csb_cpu_type;
  unsigned int csb_flags;
  off_t csb_base_offset;
  off_t csb_start_offset;
  off_t csb_end_offset;
  vm_size_t csb_mem_size;
  vm_offset_t csb_mem_offset;
  vm_address_t csb_mem_kaddr;
  unsigned __int8 csb_cdhash[20];
  const cs_hash *csb_hashtype;
  vm_size_t csb_hash_pagesize;
  vm_size_t csb_hash_pagemask;
  vm_size_t csb_hash_pageshift;
  vm_size_t csb_hash_firstlevel_pagesize;
  const CS_CodeDirectory *csb_cd;
  const char *csb_teamid;
  const CS_GenericBlob *csb_entitlements_blob;
  void *csb_entitlements;
  unsigned int csb_signer_type;
  unsigned int csb_reconstituted;
  unsigned __int32 csb_platform_binary : 1;
  unsigned __int32 csb_platform_path : 1;
};

/* 4647 */
struct cs_hash
{
  uint8_t_0 cs_type;
  size_t_0 cs_size;
  size_t_0 cs_digest_size;
  cs_md_init cs_init;
  cs_md_update cs_update;
  cs_md_final cs_final;
};

/* 4648 */
typedef __CodeDirectory CS_CodeDirectory;

/* 4649 */
struct __CodeDirectory
{
  uint32_t_0 magic;
  uint32_t_0 length;
  uint32_t_0 version;
  uint32_t_0 flags;
  uint32_t_0 hashOffset;
  uint32_t_0 identOffset;
  uint32_t_0 nSpecialSlots;
  uint32_t_0 nCodeSlots;
  uint32_t_0 codeLimit;
  uint8_t_0 hashSize;
  uint8_t_0 hashType;
  uint8_t_0 platform;
  uint8_t_0 pageSize;
  uint32_t_0 spare2;
  uint32_t_0 scatterOffset;
  uint32_t_0 teamOffset;
  uint32_t_0 spare3;
  uint64_t_0 codeLimit64;
  uint64_t_0 execSegBase;
  uint64_t_0 execSegLimit;
  uint64_t_0 execSegFlags;
  char end_withExecSeg[];
};

/* 4650 */
typedef __SC_GenericBlob CS_GenericBlob;

/* 4651 */
struct __SC_GenericBlob
{
  uint32_t_0 magic;
  uint32_t_0 length;
  char data[];
};

/* 4652 */
struct buflists
{
  buf *lh_first;
};

/* 4653 */
typedef int kauth_action_t;

/* 4654 */
struct lockf
{
  __int16 lf_flags;
  __int16 lf_type;
  __attribute__((packed)) __attribute__((aligned(1))) off_t lf_start;
  __attribute__((packed)) __attribute__((aligned(1))) off_t lf_end;
  __attribute__((packed)) __attribute__((aligned(1))) caddr_t lf_id;
  __attribute__((packed)) __attribute__((aligned(1))) lockf **lf_head;
  __attribute__((packed)) __attribute__((aligned(1))) vnode *lf_vnode;
  __attribute__((packed)) __attribute__((aligned(1))) lockf *lf_next;
  __attribute__((packed)) __attribute__((aligned(1))) locklist lf_blkhd;
  __attribute__((packed)) __attribute__((aligned(1))) lockf::$AE9541CCE25FA246537905960D6C8437 lf_block;
  int lf_boosted;
  proc *lf_owner;
};

/* 4655 */
typedef vnode_resolve *vnode_resolve_t;

/* 4656 */
struct vnode_resolve
{
  lck_mtx_t vr_lock;
  trigger_vnode_resolve_callback_t vr_resolve_func;
  trigger_vnode_unresolve_callback_t vr_unresolve_func;
  trigger_vnode_rearm_callback_t vr_rearm_func;
  trigger_vnode_reclaim_callback_t vr_reclaim_func;
  void *vr_data;
  uint32_t_0 vr_flags;
  uint32_t_0 vr_lastseq;
};

/* 4657 */
typedef resolver_result_t (*trigger_vnode_resolve_callback_t)(vnode_t, const componentname *, path_operation, int, void *, vfs_context_t);

/* 4658 */
typedef uint64_t_0 resolver_result_t;

/* 4659 */
struct __attribute__((aligned(8))) componentname
{
  uint32_t_0 cn_nameiop;
  uint32_t_0 cn_flags;
  vfs_context_t cn_context;
  nameidata *cn_ndp;
  char *cn_pnbuf;
  int cn_pnlen;
  char *cn_nameptr;
  int cn_namelen;
  uint32_t_0 cn_hash;
  uint32_t_0 cn_consume;
};

/* 4660 */
struct nameidata
{
  user_addr_t ni_dirp;
  uio_seg ni_segflg;
  path_operation ni_op;
  vnode *ni_startdir;
  vnode *ni_rootdir;
  vnode *ni_usedvp;
  vnode *ni_vp;
  vnode *ni_dvp;
  u_int ni_pathlen;
  char *ni_next;
  char ni_pathbuf[256];
  u_long ni_loopcnt;
  componentname ni_cnd;
  int32_t ni_flag;
  int ni_ncgeneration;
};

/* 4661 */
typedef resolver_result_t (*trigger_vnode_unresolve_callback_t)(vnode_t, int, void *, vfs_context_t);

/* 4662 */
typedef resolver_result_t (*trigger_vnode_rearm_callback_t)(vnode_t, int, void *, vfs_context_t);

/* 4663 */
typedef void (*trigger_vnode_reclaim_callback_t)(vnode_t, void *);

/* 4664 */
typedef nfsnode *nfsnode_t;

/* 4665 */
struct nfsnode
{
  lck_mtx_t n_lock;
  lck_rw_t n_datalock;
  void *n_datalockowner;
  nfsnode::$6CB660E160D8B9998B00E9F480C461D6 n_hash;
  nfsnode::$6CB660E160D8B9998B00E9F480C461D6 n_monlink;
  u_quad_t n_size;
  u_quad_t n_newsize;
  u_int64_t n_xid;
  nfs_vattr n_vattr;
  time_t n_attrstamp;
  time_t n_aclstamp;
  time_t n_evtstamp;
  uint32_t_0 n_events;
  u_int8_t n_access[4];
  uid_t n_accessuid[3];
  time_t n_accessstamp[3];
  nfsnode::$16073AFDBFBE2531F0AAD5A299D1301C n_un4;
  vnode_t n_parent;
  u_char *n_fhp;
  vnode_t n_vnode;
  mount_t n_mount;
  int n_error;
  nfsnode::$B24AA20BD2838F343A8796F201AE1B37 n_un1;
  nfsnode::$A39EBCAC0A739E1D7EC43D42F7E9F133 n_un2;
  nfsnode::$BAEE181D5574CF84DCE57CB7E108AB7E n_un3;
  uint32_t_0 n_flag;
  u_short n_fhsize;
  u_short n_hflag;
  u_short n_bflag;
  u_short n_mflag;
  u_char n_fh[64];
  uint32_t_0 n_auth;
  nfsbuflists n_cleanblkhd;
  nfsbuflists n_dirtyblkhd;
  nfsnode::$76366A8DED3F47DB3C3CD8A016289A14 n_un5;
  nfsnode::$5C271FA542D74BD059E3834C5B7B5EF5 n_un6;
  int n_bufiterflags;
  nfsnode::$A078A827D43E8F2DB6DA272366CECDCF n_un7;
  lck_mtx_t n_openlock;
  uint32_t_0 n_openflags;
  uint32_t_0 n_openrefcnt;
  nfsnode::$080CEC729352120107CD3A4A63B973F3 n_opens;
  nfsnode::$560D8B04B9F234F873D3703DBF7E3364 n_lock_owners;
  nfs_file_lock_queue n_locks;
  nfs_stateid_0 n_dstateid;
  nfsnode::$7779BDD58BFE221CA777B24A736A8E97 n_dlink;
  nfsnode::$7779BDD58BFE221CA777B24A736A8E97 n_dreturn;
  kauth_ace n_dace;
};

/* 4666 */
struct nfsnode::$6CB660E160D8B9998B00E9F480C461D6
{
  nfsnode *le_next;
  nfsnode **le_prev;
};

/* 4667 */
typedef u_int64_t u_quad_t;

/* 4668 */
struct __attribute__((aligned(8))) nfs_vattr
{
  vtype nva_type;
  uint32_t_0 nva_mode;
  uid_t nva_uid;
  gid_t nva_gid;
  guid_t nva_uuuid;
  guid_t nva_guuid;
  kauth_acl_t nva_acl;
  nfs_specdata_0 nva_rawdev;
  uint32_t_0 nva_flags;
  uint32_t_0 nva_maxlink;
  uint64_t_0 nva_nlink;
  uint64_t_0 nva_fileid;
  nfs_fsid_0 nva_fsid;
  uint64_t_0 nva_size;
  uint64_t_0 nva_bytes;
  uint64_t_0 nva_change;
  int64_t nva_timesec[5];
  int32_t nva_timensec[5];
  uint32_t_0 nva_bitmap[2];
};

/* 4669 */
struct guid_t
{
  unsigned __int8 g_guid[16];
};

/* 4670 */
typedef kauth_acl *kauth_acl_t;

/* 4671 */
struct kauth_acl
{
  u_int32_t acl_entrycount;
  u_int32_t acl_flags;
  kauth_ace acl_ace[1];
};

/* 4672 */
struct kauth_ace
{
  guid_t ace_applicable;
  u_int32_t ace_flags;
  kauth_ace_rights_t ace_rights;
};

/* 4673 */
typedef u_int32_t kauth_ace_rights_t;

/* 4674 */
typedef nfs_specdata nfs_specdata_0;

/* 4675 */
struct nfs_specdata
{
  uint32_t_0 specdata1;
  uint32_t_0 specdata2;
};

/* 4676 */
typedef nfs_fsid nfs_fsid_0;

/* 4677 */
struct nfs_fsid
{
  uint64_t_0 major;
  uint64_t_0 minor;
};

/* 4678 */
union nfsnode::$16073AFDBFBE2531F0AAD5A299D1301C
{
  nfsnode::$16073AFDBFBE2531F0AAD5A299D1301C::$7AD5F8208355B052736815CE724789E2 v3;
  nfsnode::$16073AFDBFBE2531F0AAD5A299D1301C::$6496E905FC8DFFA04CDD9361A7BCCD93 v4;
};

/* 4679 */
struct nfsnode::$16073AFDBFBE2531F0AAD5A299D1301C::$7AD5F8208355B052736815CE724789E2
{
  timespec n3_mtime;
  timespec n3_ncmtime;
};

/* 4680 */
struct nfsnode::$16073AFDBFBE2531F0AAD5A299D1301C::$6496E905FC8DFFA04CDD9361A7BCCD93
{
  uint64_t_0 n4_change;
  uint64_t_0 n4_ncchange;
  u_char *n4_attrdirfh;
  timeval n4_lastio;
};

/* 4681 */
union nfsnode::$B24AA20BD2838F343A8796F201AE1B37
{
  timespec ns_atim;
  timespec nl_rltim;
  daddr64_t nf_lastread;
  uint64_t_0 nd_cookieverf;
};

/* 4682 */
union nfsnode::$A39EBCAC0A739E1D7EC43D42F7E9F133
{
  timespec ns_mtim;
  daddr64_t nf_lastrahead;
  uint64_t_0 nd_eofcookie;
};

/* 4683 */
union nfsnode::$BAEE181D5574CF84DCE57CB7E108AB7E
{
  nfs_sillyrename *nf_silly;
  nfsdmap *nd_cookiecache;
};

/* 4684 */
struct nfs_sillyrename
{
  kauth_cred_t nsr_cred;
  nfsnode *nsr_dnp;
  int nsr_namlen;
  char nsr_name[20];
};

/* 4685 */
struct nfsdmap
{
  int8_t free;
  int8_t mru;
  int8_t next[14];
  nfsdmap::$2A2FDFEB6366A8D4A7C3DA4F2FCCB4AD cookies[14];
};

/* 4686 */
struct nfsdmap::$2A2FDFEB6366A8D4A7C3DA4F2FCCB4AD
{
  uint64_t_0 key;
  uint64_t_0 lbn;
};

/* 4687 */
struct nfsbuflists
{
  nfsbuf *lh_first;
};

/* 4688 */
struct nfsbuf
{
  nfsbuf::$F9516FFC341EC2A01CE9C8CC9274842F nb_hash;
  nfsbuf::$F9516FFC341EC2A01CE9C8CC9274842F nb_vnbufs;
  nfsbuf::$C30A131DF0988285A648176A2D512D4A nb_free;
  volatile uint32_t_0 nb_flags;
  volatile uint32_t_0 nb_lflags;
  volatile uint32_t_0 nb_refs;
  uint32_t_0 nb_bufsize;
  daddr64_t nb_lblkno;
  uint64_t_0 nb_verf;
  int nb_commitlevel;
  time_t nb_timestamp;
  int nb_error;
  u_int32_t nb_valid;
  u_int32_t nb_dirty;
  int nb_validoff;
  int nb_validend;
  int nb_dirtyoff;
  int nb_dirtyend;
  int nb_offio;
  int nb_endio;
  int nb_rpcs;
  caddr_t nb_data;
  nfsnode_t nb_np;
  kauth_cred_t nb_rcred;
  kauth_cred_t nb_wcred;
  void *nb_pagelist;
};

/* 4689 */
struct nfsbuf::$F9516FFC341EC2A01CE9C8CC9274842F
{
  nfsbuf *le_next;
  nfsbuf **le_prev;
};

/* 4690 */
struct nfsbuf::$C30A131DF0988285A648176A2D512D4A
{
  nfsbuf *tqe_next;
  nfsbuf **tqe_prev;
};

/* 4691 */
union nfsnode::$76366A8DED3F47DB3C3CD8A016289A14
{
  int nf_wrbusy;
  uint32_t_0 nd_ncgen;
};

/* 4692 */
union nfsnode::$5C271FA542D74BD059E3834C5B7B5EF5
{
  int nf_needcommitcnt;
  daddr64_t nd_lastdbl;
};

/* 4693 */
union nfsnode::$A078A827D43E8F2DB6DA272366CECDCF
{
  int nf_numoutput;
  int nd_trigseq;
};

/* 4694 */
struct nfsnode::$080CEC729352120107CD3A4A63B973F3
{
  nfs_open_file *tqh_first;
  nfs_open_file **tqh_last;
};

/* 4695 */
struct __attribute__((aligned(8))) nfs_open_file
{
  lck_mtx_t nof_lock;
  nfs_open_file::$8C1CB237D944E5BF3C5C979D106100C3 nof_link;
  nfs_open_file::$8C1CB237D944E5BF3C5C979D106100C3 nof_oolink;
  nfs_open_owner *nof_owner;
  nfsnode_t nof_np;
  nfs_stateid_0 nof_stateid;
  thread_t nof_creator;
  uint32_t_0 nof_opencnt;
  uint16_t nof_flags;
  unsigned __int8 nof_access : 4;
  unsigned __int8 nof_deny : 4;
  unsigned __int8 nof_mmap_access : 4;
  unsigned __int8 nof_mmap_deny : 4;
  uint32_t_0 nof_r;
  uint32_t_0 nof_w;
  uint32_t_0 nof_rw;
  uint32_t_0 nof_r_dw;
  unsigned __int32 nof_w_dw : 2;
  unsigned __int32 nof_rw_dw : 2;
  unsigned __int32 nof_r_drw : 2;
  unsigned __int32 nof_w_drw : 2;
  unsigned __int32 nof_rw_drw : 2;
  unsigned __int32 nof_d_w_dw : 2;
  unsigned __int32 nof_d_rw_dw : 2;
  unsigned __int32 nof_d_r_drw : 2;
  unsigned __int32 nof_d_w_drw : 2;
  unsigned __int32 nof_d_rw_drw : 2;
  uint32_t_0 nof_d_r;
  uint32_t_0 nof_d_w;
  uint32_t_0 nof_d_rw;
  uint32_t_0 nof_d_r_dw;
};

/* 4696 */
struct nfs_open_file::$8C1CB237D944E5BF3C5C979D106100C3
{
  nfs_open_file *tqe_next;
  nfs_open_file **tqe_prev;
};

/* 4697 */
struct nfs_open_owner
{
  nfs_open_owner::$32B18185A99B0479DFBB5048EDACFEBA noo_link;
  lck_mtx_t noo_lock;
  nfsmount *noo_mount;
  uint32_t_0 noo_refcnt;
  uint32_t_0 noo_flags;
  kauth_cred_t noo_cred;
  uint32_t_0 noo_name;
  uint32_t_0 noo_seqid;
  nfs_open_owner::$080CEC729352120107CD3A4A63B973F3 noo_opens;
};

/* 4698 */
struct nfs_open_owner::$32B18185A99B0479DFBB5048EDACFEBA
{
  nfs_open_owner *tqe_next;
  nfs_open_owner **tqe_prev;
};

/* 4699 */
struct nfsmount
{
  lck_mtx_t nm_lock;
  char *nm_args;
  uint32_t_0 nm_mattrs[1];
  uint32_t_0 nm_mflags_mask[1];
  uint32_t_0 nm_mflags[1];
  uint32_t_0 nm_flags[1];
  char *nm_realm;
  char *nm_principal;
  char *nm_sprinc;
  int nm_ref;
  int nm_state;
  int nm_vers;
  uint32_t_0 nm_minor_vers;
  uint32_t_0 nm_min_vers;
  uint32_t_0 nm_max_vers;
  const nfs_funcs *nm_funcs;
  kauth_cred_t nm_mcred;
  mount_t nm_mountp;
  nfsnode_t nm_dnp;
  nfs_fs_locations nm_locations;
  uint32_t_0 nm_numgrps;
  nfsmount::$54DA74D8843EC84FBD9009AD7656655F nm_gsscl;
  uint32_t_0 nm_ncentries;
  int nm_timeo;
  int nm_retry;
  uint32_t_0 nm_rsize;
  uint32_t_0 nm_wsize;
  uint32_t_0 nm_biosize;
  uint32_t_0 nm_readdirsize;
  uint32_t_0 nm_readahead;
  uint32_t_0 nm_acregmin;
  uint32_t_0 nm_acregmax;
  uint32_t_0 nm_acdirmin;
  uint32_t_0 nm_acdirmax;
  uint32_t_0 nm_auth;
  uint32_t_0 nm_writers;
  uint32_t_0 nm_mappers;
  nfs_sec nm_sec;
  nfs_sec nm_servsec;
  nfs_etype nm_etype;
  fhandle_t *nm_fh;
  uint8_t_0 nm_lockmode;
  uint32_t_0 nm_fsattrstamp;
  nfs_fsattr nm_fsattr;
  uint64_t_0 nm_verf;
  nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C nm_un;
  nfsmount::$559A34DC864CC0945A1B5F265717CF27 nm_open_owners;
  uint32_t_0 nm_stateinuse;
  uint32_t_0 nm_stategenid;
  time_t nm_recover_start;
  nfsmount::$4361AAE4843C24879D1596B51C227F32 nm_monlist;
  nfs_reqqhead nm_resendq;
  nfs_reqqhead nm_iodq;
  nfsiod *nm_niod;
  nfsmount::$2AB44C80F1D4837119FC3598F784342A nm_iodlink;
  int nm_asyncwrites;
  uint8_t_0 nm_sofamily;
  uint8_t_0 nm_sotype;
  in_port_t nm_nfsport;
  in_port_t nm_mountport;
  nfs_socket_search *nm_nss;
  nfs_socket *nm_nso;
  sockaddr *nm_saddr;
  u_short nm_sockflags;
  time_t nm_deadto_start;
  time_t nm_reconnect_start;
  int nm_tprintf_initial_delay;
  int nm_tprintf_delay;
  int nm_deadtimeout;
  int nm_curdeadtimeout;
  int nm_srtt[4];
  int nm_sdrtt[4];
  int nm_timeouts;
  int nm_jbreqs;
  int nm_mounterror;
  nfsmount::$2AB44C80F1D4837119FC3598F784342A nm_pokeq;
  thread_t nm_sockthd;
};

/* 4700 */
struct nfs_funcs
{
  int (*nf_mount)(nfsmount *, vfs_context_t, nfsnode_t *);
  int (*nf_update_statfs)(nfsmount *, vfs_context_t);
  int (*nf_getquota)(nfsmount *, vfs_context_t, uid_t, int, dqblk *);
  int (*nf_access_rpc)(nfsnode_t, u_int32_t *, int, vfs_context_t);
  int (*nf_getattr_rpc)(nfsnode_t, mount_t, u_char *, size_t_0, int, vfs_context_t, nfs_vattr *, u_int64_t *);
  int (*nf_setattr_rpc)(nfsnode_t, vnode_attr *, vfs_context_t);
  int (*nf_read_rpc_async)(nfsnode_t, off_t, size_t_0, thread_t, kauth_cred_t, nfsreq_cbinfo *, nfsreq **);
  int (*nf_read_rpc_async_finish)(nfsnode_t, nfsreq *, uio_t, size_t_0 *, int *);
  int (*nf_readlink_rpc)(nfsnode_t, char *, uint32_t_0 *, vfs_context_t);
  int (*nf_write_rpc_async)(nfsnode_t, uio_t, size_t_0, thread_t, kauth_cred_t, int, nfsreq_cbinfo *, nfsreq **);
  int (*nf_write_rpc_async_finish)(nfsnode_t, nfsreq *, int *, size_t_0 *, uint64_t_0 *);
  int (*nf_commit_rpc)(nfsnode_t, uint64_t_0, uint64_t_0, kauth_cred_t, uint64_t_0);
  int (*nf_lookup_rpc_async)(nfsnode_t, char *, int, vfs_context_t, nfsreq **);
  int (*nf_lookup_rpc_async_finish)(nfsnode_t, char *, int, vfs_context_t, nfsreq *, u_int64_t *, fhandle_t *, nfs_vattr *);
  int (*nf_remove_rpc)(nfsnode_t, char *, int, thread_t, kauth_cred_t);
  int (*nf_rename_rpc)(nfsnode_t, char *, int, nfsnode_t, char *, int, vfs_context_t);
  int (*nf_setlock_rpc)(nfsnode_t, nfs_open_file *, nfs_file_lock *, int, int, thread_t, kauth_cred_t);
  int (*nf_unlock_rpc)(nfsnode_t, nfs_lock_owner *, int, uint64_t_0, uint64_t_0, int, thread_t, kauth_cred_t);
  int (*nf_getlock_rpc)(nfsnode_t, nfs_lock_owner *, flock *, uint64_t_0, uint64_t_0, vfs_context_t);
};

/* 4701 */
struct dqblk
{
  u_int64_t dqb_bhardlimit;
  u_int64_t dqb_bsoftlimit;
  u_int64_t dqb_curbytes;
  u_int32_t dqb_ihardlimit;
  u_int32_t dqb_isoftlimit;
  u_int32_t dqb_curinodes;
  u_int32_t dqb_btime;
  u_int32_t dqb_itime;
  u_int32_t dqb_id;
  u_int32_t dqb_spare[4];
};

/* 4702 */
struct vnode_attr
{
  uint64_t_0 va_supported;
  uint64_t_0 va_active;
  int va_vaflags;
  dev_t va_rdev;
  uint64_t_0 va_nlink;
  uint64_t_0 va_total_size;
  uint64_t_0 va_total_alloc;
  uint64_t_0 va_data_size;
  uint64_t_0 va_data_alloc;
  uint32_t_0 va_iosize;
  uid_t va_uid;
  gid_t va_gid;
  mode_t va_mode;
  uint32_t_0 va_flags;
  kauth_acl *va_acl;
  timespec va_create_time;
  timespec va_access_time;
  timespec va_modify_time;
  timespec va_change_time;
  timespec va_backup_time;
  uint64_t_0 va_fileid;
  uint64_t_0 va_linkid;
  uint64_t_0 va_parentid;
  uint32_t_0 va_fsid;
  uint64_t_0 va_filerev;
  uint32_t_0 va_gen;
  uint32_t_0 va_encoding;
  vtype va_type;
  char *va_name;
  guid_t va_uuuid;
  guid_t va_guuid;
  uint64_t_0 va_nchildren;
  uint64_t_0 va_dirlinkcount;
  kauth_acl *va_base_acl;
  timespec va_addedtime;
  uint32_t_0 va_dataprotect_class;
  uint32_t_0 va_dataprotect_flags;
  uint32_t_0 va_document_id;
  uint32_t_0 va_devid;
  uint32_t_0 va_objtype;
  uint32_t_0 va_objtag;
  uint32_t_0 va_user_access;
  uint8_t_0 va_finderinfo[32];
  uint64_t_0 va_rsrc_length;
  uint64_t_0 va_rsrc_alloc;
  fsid_t va_fsid64;
  uint32_t_0 va_write_gencount;
  uint64_t_0 va_private_size;
};

/* 4703 */
typedef __darwin_mode_t mode_t;

/* 4704 */
typedef __uint16_t __darwin_mode_t;

/* 4705 */
struct __attribute__((aligned(8))) nfsreq_cbinfo
{
  void (*rcb_func)(nfsreq *);
  nfsbuf *rcb_bp;
  uint32_t_0 rcb_args[3];
};

/* 4706 */
struct nfsreq
{
  lck_mtx_t r_mtx;
  nfsreq::$06FA2014C955E94AEB62C8FF79243CBF r_chain;
  nfsreq::$06FA2014C955E94AEB62C8FF79243CBF r_achain;
  nfsreq::$06FA2014C955E94AEB62C8FF79243CBF r_rchain;
  nfsreq::$06FA2014C955E94AEB62C8FF79243CBF r_cchain;
  mbuf_t r_mrest;
  mbuf_t r_mhead;
  nfsm_chain r_nmrep;
  nfsnode_t r_np;
  nfsmount *r_nmp;
  uint64_t_0 r_xid;
  uint32_t_0 r_procnum;
  uint32_t_0 r_mreqlen;
  int r_flags;
  int r_lflags;
  int r_refs;
  uint8_t_0 r_delay;
  uint8_t_0 r_retry;
  uint8_t_0 r_rexmit;
  int r_rtt;
  thread_t r_thread;
  kauth_cred_t r_cred;
  time_t r_start;
  time_t r_lastmsg;
  time_t r_resendtime;
  nfs_gss_clnt_ctx *r_gss_ctx;
  nfsreq::$E9521B0B4A25F285BF7153521452C102 r_gss_seqlist;
  uint32_t_0 r_gss_argoff;
  uint32_t_0 r_gss_arglen;
  uint32_t_0 r_auth;
  uint32_t_0 *r_wrongsec;
  int r_error;
  nfsreq_cbinfo r_callback;
  nfsreq_secinfo_args r_secinfo;
};

/* 4707 */
struct nfsreq::$06FA2014C955E94AEB62C8FF79243CBF
{
  nfsreq *tqe_next;
  nfsreq **tqe_prev;
};

/* 4708 */
typedef mbuf *mbuf_t;

/* 4709 */
struct mbuf
{
  m_hdr m_hdr;
  mbuf::$2C696EC64615141E456728712746E961 M_dat;
};

/* 4710 */
struct nfsm_chain
{
  mbuf_t nmc_mhead;
  mbuf_t nmc_mcur;
  caddr_t nmc_ptr;
  uint32_t_0 nmc_left;
  uint32_t_0 nmc_flags;
};

/* 4711 */
struct nfs_gss_clnt_ctx
{
  lck_mtx_t *gss_clnt_mtx;
  thread_t gss_clnt_thread;
  nfs_gss_clnt_ctx::$4046B970329A50A1A17B910E17D53DC5 gss_clnt_entries;
  uint32_t_0 gss_clnt_flags;
  int32_t gss_clnt_refcnt;
  kauth_cred_t gss_clnt_cred;
  uint8_t_0 *gss_clnt_principal;
  uint32_t_0 gss_clnt_prinlen;
  gssd_nametype_0 gss_clnt_prinnt;
  char *gss_clnt_display;
  uint32_t_0 gss_clnt_proc;
  uint32_t_0 gss_clnt_seqnum;
  uint32_t_0 gss_clnt_service;
  uint8_t_0 *gss_clnt_handle;
  uint32_t_0 gss_clnt_handle_len;
  time_t gss_clnt_nctime;
  uint32_t_0 gss_clnt_seqwin;
  uint32_t_0 *gss_clnt_seqbits;
  mach_port_t gss_clnt_mport;
  uint32_t_0 gss_clnt_verflen;
  uint8_t_0 *gss_clnt_verf;
  uint8_t_0 *gss_clnt_svcname;
  uint32_t_0 gss_clnt_svcnamlen;
  gssd_nametype_0 gss_clnt_svcnt;
  gssd_cred gss_clnt_cred_handle;
  gssd_ctx gss_clnt_context;
  gss_ctx_id_t gss_clnt_ctx_id;
  uint8_t_0 *gss_clnt_token;
  uint32_t_0 gss_clnt_tokenlen;
  uint32_t_0 gss_clnt_gssd_flags;
  uint32_t_0 gss_clnt_major;
  uint32_t_0 gss_clnt_minor;
  time_t gss_clnt_ptime;
};

/* 4712 */
struct nfs_gss_clnt_ctx::$4046B970329A50A1A17B910E17D53DC5
{
  nfs_gss_clnt_ctx *tqe_next;
  nfs_gss_clnt_ctx **tqe_prev;
};

/* 4713 */
typedef gss_ctx_id_desc *gss_ctx_id_t;

/* 4714 */
struct gss_ctx_id_desc
{
  lucid_context_0 gss_lucid_ctx;
  crypto_ctx gss_cryptor;
};

/* 4715 */
typedef lucid_context lucid_context_0;

/* 4716 */
struct lucid_context
{
  uint32_t_0 vers;
  uint32_t_0 initiate;
  uint32_t_0 endtime;
  uint64_t_0 send_seq;
  uint64_t_0 recv_seq;
  lucid_protocol_0 key_data;
  lucid_key_0 ctx_key;
};

/* 4717 */
typedef lucid_protocol lucid_protocol_0;

/* 4718 */
struct lucid_protocol
{
  uint32_t_0 proto;
  lucid_protocol::$507C23A513832CA8F7B3EA969C442DBE lucid_protocol_u;
};

/* 4719 */
union lucid_protocol::$507C23A513832CA8F7B3EA969C442DBE
{
  key_data_1964_0 data_1964;
  key_data_4121_0 data_4121;
};

/* 4720 */
typedef key_data_1964 key_data_1964_0;

/* 4721 */
struct key_data_1964
{
  uint32_t_0 sign_alg;
  uint32_t_0 seal_alg;
};

/* 4722 */
typedef key_data_4121 key_data_4121_0;

/* 4723 */
struct key_data_4121
{
  uint32_t_0 acceptor_subkey;
};

/* 4724 */
typedef lucid_key lucid_key_0;

/* 4725 */
struct lucid_key
{
  uint32_t_0 etype;
  lucid_key::$741E81AFB57920509B1A04F8201A2C8F key;
};

/* 4726 */
struct lucid_key::$741E81AFB57920509B1A04F8201A2C8F
{
  uint32_t_0 key_len;
  uint8_t_0 *key_val;
};

/* 4727 */
struct crypto_ctx
{
  uint32_t_0 etype;
  uint32_t_0 mpad;
  uint32_t_0 flags;
  lck_mtx_t *lock;
  lucid_context_t gss_ctx;
  uint32_t_0 keylen;
  void *key;
  const ccdigest_info_0 *di;
  const ccmode_cbc *enc_mode;
  const ccmode_cbc *dec_mode;
  key_schedule ks;
  uint32_t_0 digest_size;
  void *ckey[2];
};

/* 4728 */
typedef lucid_context *lucid_context_t;

/* 4729 */
struct ccdigest_info_0
{
  size_t_0 output_size;
  size_t_0 state_size;
  size_t_0 block_size;
  size_t_0 oid_size;
  const unsigned __int8 *oid;
  const void *initial_state;
  void (*compress)(ccdigest_state_t, size_t_0, const void *);
  void (*final)(const ccdigest_info_0 *, ccdigest_ctx_t, unsigned __int8 *);
};

/* 4730 */
struct ccmode_cbc
{
  size_t_0 size;
  size_t_0 block_size;
  int (*init)(const ccmode_cbc *, cccbc_ctx *, size_t_0, const void *);
  int (*cbc)(const cccbc_ctx *, cccbc_iv *, size_t_0, const void *, void *);
  const void *custom;
};

/* 4731 */
struct cccbc_ctx
{
  uint8_t_0 b[16];
};

/* 4732 */
struct cccbc_iv
{
  uint8_t_0 b[16];
};

/* 4733 */
struct key_schedule
{
  cccbc_ctx *enc;
  cccbc_ctx *dec;
  void *ikey[2];
};

/* 4734 */
struct nfsreq::$E9521B0B4A25F285BF7153521452C102
{
  gss_seq *slh_first;
};

/* 4735 */
struct __attribute__((aligned(8))) gss_seq
{
  gss_seq::$89EC9969534AF356E524B5E211BB8A27 gss_seqnext;
  uint32_t_0 gss_seqnum;
};

/* 4736 */
struct gss_seq::$89EC9969534AF356E524B5E211BB8A27
{
  gss_seq *sle_next;
};

/* 4737 */
struct nfsreq_secinfo_args
{
  nfsnode_t rsia_np;
  const char *rsia_name;
  u_char *rsia_fh;
  uint32_t_0 rsia_namelen;
  uint32_t_0 rsia_fhsize;
};

/* 4738 */
typedef uio *uio_t;

/* 4739 */
typedef fhandle fhandle_t;

/* 4740 */
struct fhandle
{
  unsigned int fh_len;
  unsigned __int8 fh_data[128];
};

/* 4741 */
struct __attribute__((aligned(2))) nfs_file_lock
{
  nfs_file_lock::$D7A2370AB00326D8A719AF47AA6156CC nfl_link;
  nfs_file_lock::$D7A2370AB00326D8A719AF47AA6156CC nfl_lolink;
  nfs_lock_owner *nfl_owner;
  uint64_t_0 nfl_start;
  uint64_t_0 nfl_end;
  uint32_t_0 nfl_blockcnt;
  uint16_t nfl_flags;
  uint8_t_0 nfl_type;
};

/* 4742 */
struct nfs_file_lock::$D7A2370AB00326D8A719AF47AA6156CC
{
  nfs_file_lock *tqe_next;
  nfs_file_lock **tqe_prev;
};

/* 4743 */
struct nfs_lock_owner
{
  lck_mtx_t nlo_lock;
  nfs_lock_owner::$960D4CA0F105392F27AA5EA7D4B30B97 nlo_link;
  nfs_open_owner *nlo_open_owner;
  nfs_file_lock_queue nlo_locks;
  nfs_file_lock nlo_alock;
  timeval nlo_pid_start;
  pid_t nlo_pid;
  uint32_t_0 nlo_refcnt;
  uint32_t_0 nlo_flags;
  uint32_t_0 nlo_name;
  uint32_t_0 nlo_seqid;
  uint32_t_0 nlo_stategenid;
  nfs_stateid_0 nlo_stateid;
};

/* 4744 */
struct nfs_lock_owner::$960D4CA0F105392F27AA5EA7D4B30B97
{
  nfs_lock_owner *tqe_next;
  nfs_lock_owner **tqe_prev;
};

/* 4745 */
struct nfs_file_lock_queue
{
  nfs_file_lock *tqh_first;
  nfs_file_lock **tqh_last;
};

/* 4746 */
typedef nfs_stateid nfs_stateid_0;

/* 4747 */
struct nfs_stateid
{
  uint32_t_0 seqid;
  uint32_t_0 other[3];
};

/* 4748 */
struct flock
{
  off_t l_start;
  off_t l_len;
  pid_t l_pid;
  __int16 l_type;
  __int16 l_whence;
};

/* 4749 */
struct nfs_fs_locations
{
  nfs_fs_path nl_root;
  uint32_t_0 nl_numlocs;
  nfs_location_index nl_current;
  nfs_fs_location **nl_locations;
};

/* 4750 */
struct __attribute__((aligned(8))) nfs_fs_path
{
  char **np_components;
  uint32_t_0 np_compcount;
};

/* 4751 */
struct nfs_location_index
{
  uint8_t_0 nli_flags;
  uint8_t_0 nli_loc;
  uint8_t_0 nli_serv;
  uint8_t_0 nli_addr;
};

/* 4752 */
struct __attribute__((aligned(8))) nfs_fs_location
{
  nfs_fs_server **nl_servers;
  nfs_fs_path nl_path;
  uint32_t_0 nl_servcount;
};

/* 4753 */
struct __attribute__((aligned(8))) nfs_fs_server
{
  char *ns_name;
  char **ns_addresses;
  uint32_t_0 ns_addrcount;
};

/* 4754 */
struct nfsmount::$54DA74D8843EC84FBD9009AD7656655F
{
  nfs_gss_clnt_ctx *tqh_first;
  nfs_gss_clnt_ctx **tqh_last;
};

/* 4755 */
struct nfs_sec
{
  int count;
  uint32_t_0 flavors[5];
};

/* 4756 */
struct nfs_etype
{
  uint32_t_0 count;
  uint32_t_0 selected;
  nfs_supported_kerberos_etypes_0 etypes[3];
};

/* 4757 */
typedef nfs_supported_kerberos_etypes nfs_supported_kerberos_etypes_0;

/* 4758 */
struct nfs_fsattr
{
  uint32_t_0 nfsa_flags;
  uint32_t_0 nfsa_lease;
  uint32_t_0 nfsa_maxname;
  uint32_t_0 nfsa_maxlink;
  uint32_t_0 nfsa_bsize;
  uint32_t_0 nfsa_pad;
  uint64_t_0 nfsa_maxfilesize;
  uint64_t_0 nfsa_maxread;
  uint64_t_0 nfsa_maxwrite;
  uint64_t_0 nfsa_files_avail;
  uint64_t_0 nfsa_files_free;
  uint64_t_0 nfsa_files_total;
  uint64_t_0 nfsa_space_avail;
  uint64_t_0 nfsa_space_free;
  uint64_t_0 nfsa_space_total;
  uint32_t_0 nfsa_supp_attr[2];
  uint32_t_0 nfsa_bitmap[2];
};

/* 4759 */
union nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C
{
  nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$F922607ECE9F26C443FAB02661319D3F v3;
  nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$5B742E8D2B7CB169598FF7DB42492343 v4;
};

/* 4760 */
struct __attribute__((aligned(8))) nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$F922607ECE9F26C443FAB02661319D3F
{
  nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$F922607ECE9F26C443FAB02661319D3F::$2AB44C80F1D4837119FC3598F784342A ldlink;
  int udp_sent;
  int udp_cwnd;
  nfs_reqqhead udp_cwndq;
  sockaddr *rqsaddr;
  uint32_t_0 rqsaddrstamp;
};

/* 4761 */
struct nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$F922607ECE9F26C443FAB02661319D3F::$2AB44C80F1D4837119FC3598F784342A
{
  nfsmount *tqe_next;
  nfsmount **tqe_prev;
};

/* 4762 */
struct nfs_reqqhead
{
  nfsreq *tqh_first;
  nfsreq **tqh_last;
};

/* 4763 */
struct nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$5B742E8D2B7CB169598FF7DB42492343
{
  nfs_client_id *longid;
  uint64_t_0 mounttime;
  uint64_t_0 clientid;
  thread_call_t renew_timer;
  nfs_fsid_0 fsid;
  nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$5B742E8D2B7CB169598FF7DB42492343::$0EC8B0B47FF9C35180D254B4AC8A1057 delegations;
  nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$5B742E8D2B7CB169598FF7DB42492343::$0EC8B0B47FF9C35180D254B4AC8A1057 dreturnq;
  nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$5B742E8D2B7CB169598FF7DB42492343::$2AB44C80F1D4837119FC3598F784342A cblink;
  uint32_t_0 cbid;
  uint32_t_0 cbrefs;
};

/* 4764 */
struct nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$5B742E8D2B7CB169598FF7DB42492343::$0EC8B0B47FF9C35180D254B4AC8A1057
{
  nfsnode *tqh_first;
  nfsnode **tqh_last;
};

/* 4765 */
struct nfsmount::$DB2AEA72E483E06E07F080B6444DBF5C::$5B742E8D2B7CB169598FF7DB42492343::$2AB44C80F1D4837119FC3598F784342A
{
  nfsmount *tqe_next;
  nfsmount **tqe_prev;
};

/* 4766 */
struct nfsmount::$559A34DC864CC0945A1B5F265717CF27
{
  nfs_open_owner *tqh_first;
  nfs_open_owner **tqh_last;
};

/* 4767 */
struct nfsmount::$4361AAE4843C24879D1596B51C227F32
{
  nfsnode *lh_first;
};

/* 4768 */
struct nfsiod
{
  nfsiod::$01732855F529CCD60754A22F3650F630 niod_link;
  nfsmount *niod_nmp;
};

/* 4769 */
struct nfsiod::$01732855F529CCD60754A22F3650F630
{
  nfsiod *tqe_next;
  nfsiod **tqe_prev;
};

/* 4770 */
struct nfsmount::$2AB44C80F1D4837119FC3598F784342A
{
  nfsmount *tqe_next;
  nfsmount **tqe_prev;
};

/* 4771 */
struct __attribute__((aligned(8))) nfs_socket_search
{
  nfs_location_index nss_startloc;
  nfs_location_index nss_nextloc;
  nfssocketlist nss_socklist;
  time_t nss_timestamp;
  time_t nss_last;
  nfs_socket *nss_sock;
  uint8_t_0 nss_sotype;
  uint8_t_0 nss_sockcnt;
  in_port_t nss_port;
  uint32_t_0 nss_protocol;
  uint32_t_0 nss_version;
  uint32_t_0 nss_flags;
  int nss_addrcnt;
  int nss_timeo;
  int nss_error;
};

/* 4772 */
struct nfssocketlist
{
  nfs_socket *tqh_first;
  nfs_socket **tqh_last;
};

/* 4773 */
struct nfs_socket
{
  lck_mtx_t nso_lock;
  nfs_socket::$763F1106616B642B6FA3128E8C5BCD89 nso_link;
  sockaddr *nso_saddr;
  sockaddr *nso_saddr2;
  void *nso_wake;
  time_t nso_timestamp;
  time_t nso_reqtimestamp;
  socket_t nso_so;
  uint8_t_0 nso_sotype;
  uint16_t nso_flags;
  nfs_location_index nso_location;
  uint32_t_0 nso_protocol;
  uint32_t_0 nso_version;
  uint32_t_0 nso_pingxid;
  uint32_t_0 nso_nfs_min_vers;
  uint32_t_0 nso_nfs_max_vers;
  int nso_error;
  nfs_rpc_record_state nso_rrs;
};

/* 4774 */
struct nfs_socket::$763F1106616B642B6FA3128E8C5BCD89
{
  nfs_socket *tqe_next;
  nfs_socket **tqe_prev;
};

/* 4775 */
typedef socket *socket_t;

/* 4776 */
struct __attribute__((aligned(8))) nfs_rpc_record_state
{
  mbuf_t nrrs_m;
  mbuf_t nrrs_mlast;
  uint16_t nrrs_lastfrag;
  uint16_t nrrs_markerleft;
  uint32_t_0 nrrs_fragleft;
  uint32_t_0 nrrs_reclen;
};

/* 4777 */
struct nfs_open_owner::$080CEC729352120107CD3A4A63B973F3
{
  nfs_open_file *tqh_first;
  nfs_open_file **tqh_last;
};

/* 4778 */
struct nfsnode::$560D8B04B9F234F873D3703DBF7E3364
{
  nfs_lock_owner *tqh_first;
  nfs_lock_owner **tqh_last;
};

/* 4779 */
struct nfsnode::$7779BDD58BFE221CA777B24A736A8E97
{
  nfsnode *tqe_next;
  nfsnode **tqe_prev;
};

/* 4780 */
struct ntsid_t
{
  u_int8_t sid_kind;
  u_int8_t sid_authcount;
  u_int8_t sid_authority[6];
  u_int32_t sid_authorities[16];
};

/* 4781 */
typedef ifnet *ifnet_t;

/* 4782 */
struct __attribute__((aligned(8))) ifnet
{
  lck_rw_t if_lock;
  void *if_softc;
  const char *if_name;
  const char *if_xname;
  if_description if_desc;
  ifnet::$564BB46439580B1CF29D77F1FFD3A9E2 if_link;
  ifnet::$564BB46439580B1CF29D77F1FFD3A9E2 if_detaching_link;
  ifnet::$564BB46439580B1CF29D77F1FFD3A9E2 if_ordered_link;
  lck_mtx_t if_ref_lock;
  u_int32_t if_refflags;
  u_int32_t if_refio;
  ifaddrhead if_addrhead;
  ifaddr *if_lladdr;
  u_int32_t if_qosmarking_mode;
  int if_pcount;
  bpf_if *if_bpf;
  u_short if_index;
  __int16 if_unit;
  __int16 if_timer;
  __int16 if_flags;
  u_int32_t if_eflags;
  u_int32_t if_xflags;
  int if_capabilities;
  int if_capenable;
  void *if_linkmib;
  size_t_0 if_linkmiblen;
  if_data_internal if_data;
  ifnet_family_t if_family;
  ifnet_subfamily_t if_subfamily;
  uintptr_t if_family_cookie;
  volatile dlil_input_func if_input_dlil;
  volatile dlil_output_func if_output_dlil;
  volatile ifnet_start_func if_start;
  ifnet_output_func if_output;
  ifnet_pre_enqueue_func if_pre_enqueue;
  ifnet_ctl_func if_output_ctl;
  ifnet_input_poll_func if_input_poll;
  ifnet_ctl_func if_input_ctl;
  ifnet_ioctl_func if_ioctl;
  ifnet_set_bpf_tap if_set_bpf_tap;
  ifnet_detached_func if_free;
  ifnet_demux_func if_demux;
  ifnet_event_func if_event;
  ifnet_framer_func if_framer_legacy;
  ifnet_framer_extended_func if_framer;
  ifnet_add_proto_func if_add_proto;
  ifnet_del_proto_func if_del_proto;
  ifnet_check_multi if_check_multi;
  proto_hash_entry *if_proto_hash;
  void *if_kpi_storage;
  u_int32_t if_flowhash;
  lck_mtx_t if_start_lock;
  u_int32_t if_start_flags;
  u_int32_t if_start_req;
  u_int16_t if_start_active;
  u_int16_t if_start_delayed;
  u_int16_t if_start_delay_qlen;
  u_int16_t if_start_delay_idle;
  u_int64_t if_start_delay_swin;
  u_int32_t if_start_delay_cnt;
  u_int32_t if_start_delay_timeout;
  timespec if_start_cycle;
  thread *if_start_thread;
  ifclassq if_snd;
  u_int32_t if_output_sched_model;
  __attribute__((packed)) __attribute__((aligned(1))) if_bandwidths if_output_bw;
  __attribute__((packed)) __attribute__((aligned(1))) if_bandwidths if_input_bw;
  __attribute__((packed)) __attribute__((aligned(1))) if_latencies if_output_lt;
  __attribute__((packed)) __attribute__((aligned(1))) if_latencies if_input_lt;
  lck_mtx_t if_flt_lock;
  u_int32_t if_flt_busy;
  u_int32_t if_flt_waiters;
  ifnet_filter_head if_flt_head;
  ifmultihead if_multiaddrs;
  u_int32_t if_updatemcasts;
  int if_amcount;
  lck_mtx_t if_addrconfig_lock;
  in_multi *if_allhostsinm;
  lck_mtx_t if_poll_lock;
  u_int16_t if_poll_req;
  u_int16_t if_poll_update;
  u_int32_t if_poll_active;
  timespec if_poll_cycle;
  thread *if_poll_thread;
  dlil_threading_info *if_inp;
  thread_call_t if_dt_tcall;
  ifnet::$FDF1CE6E7EB89D62E9908B60B4ED85D0 if_broadcast;
  pfi_kif *if_pf_kif;
  void (*if_na_finalize)(nexus_netif_adapter *, ifnet *);
  void (*if_na_reap)(nexus_netif_adapter *, ifnet *, uint32_t_0);
  nexus_netif_adapter *if_na;
  if_nexus_netif if_nx_netif;
  if_nexus_multistack if_nx_multistack;
  uint16_t if_tx_headroom;
  uint16_t if_tx_trailer;
  uint32_t_0 if_rx_mit_ival;
  ifnet_start_func if_save_start;
  ifnet_output_func if_save_output;
  uint32_t_0 if_start_waiters;
  lck_mtx_t if_cached_route_lock;
  u_int32_t if_fwd_cacheok;
  route if_fwd_route;
  route if_src_route;
  route_in6 if_src_route6;
  lck_rw_t if_llreach_lock;
  ll_reach_tree if_ll_srcs;
  void *if_bridge;
  u_int32_t if_want_aggressive_drain;
  u_int32_t if_idle_flags;
  u_int32_t if_idle_new_flags;
  u_int32_t if_idle_new_flags_mask;
  u_int32_t if_route_refcnt;
  u_int32_t if_rt_sendts;
  if_traffic_class if_tc;
  igmp_ifinfo *if_igi;
  mld_ifinfo *if_mli;
  tcpstat_local *if_tcp_stat;
  udpstat_local *if_udp_stat;
  ifnet::$84A273D192F849021096946526FA0146 if_log;
  ifnet::$D32B6E0ADB43E1E67C517FE7FE080754 if_delegated;
  uuid_t *if_agentids;
  u_int32_t if_agentcount;
  volatile uint32_t_0 if_low_power_gencnt;
  u_int32_t if_generation;
  u_int32_t if_fg_sendts;
  u_int64_t if_data_threshold;
  int64_t if_sndbyte_total;
  int64_t if_sndbyte_unsent;
  uint32_t_0 if_unsent_data_cnt;
  lck_rw_t if_inetdata_lock;
  void *if_inetdata;
  lck_rw_t if_inet6data_lock;
  void *if_inet6data;
  lck_rw_t if_link_status_lock;
  if_link_status *if_link_status;
  if_interface_state if_interface_state;
  if_tcp_ecn_stat *if_ipv4_stat;
  if_tcp_ecn_stat *if_ipv6_stat;
  ifnet::$D835C1FB80356427E73262EF64749CA4 if_netns_tokens;
  if_lim_perf_stat if_lim_stat;
};

/* 4783 */
struct sockaddr_storage
{
  __uint8_t ss_len;
  sa_family_t ss_family;
  char __ss_pad1[6];
  __int64_t __ss_align;
  char __ss_pad2[112];
};

/* 4784 */
enum classq_pkt_type : __int32
{
  QP_INVALID = 0x0,
  QP_MBUF = 0x1,
  QP_PACKET = 0x2,
};

/* 4785 */
enum mbuf_svc_class_t : __int32
{
  MBUF_SC_UNSPEC = 0xFFFFFFFF,
  MBUF_SC_BK_SYS = 0x80090,
  MBUF_SC_BK = 0x100080,
  MBUF_SC_BE = 0x0,
  MBUF_SC_RD = 0x180010,
  MBUF_SC_OAM = 0x200020,
  MBUF_SC_AV = 0x280120,
  MBUF_SC_RV = 0x300110,
  MBUF_SC_VI = 0x380100,
  MBUF_SC_SIG = 0x380130,
  MBUF_SC_VO = 0x400180,
  MBUF_SC_CTL = 0x480190,
};

/* 4786 */
enum cqrq : __int32
{
  CLASSQRQ_PURGE = 0x1,
  CLASSQRQ_PURGE_SC = 0x2,
  CLASSQRQ_EVENT = 0x3,
  CLASSQRQ_THROTTLE = 0x4,
  CLASSQRQ_STAT_SC = 0x5,
};

/* 4787 */
enum nsoperation : __int32
{
  NS_OPEN = 0x0,
  NS_CREATE = 0x1,
  NS_DELETE = 0x2,
};

/* 4788 */
struct locklist
{
  lockf *tqh_first;
  lockf **tqh_last;
};

/* 4789 */
struct lockf::$AE9541CCE25FA246537905960D6C8437
{
  lockf *tqe_next;
  lockf **tqe_prev;
};

/* 4790 */
struct m_hdr
{
  mbuf *mh_next;
  mbuf *mh_nextpkt;
  caddr_t mh_data;
  int32_t mh_len;
  u_int16_t mh_type;
  u_int16_t mh_flags;
};

/* 4791 */
union mbuf::$2C696EC64615141E456728712746E961
{
  mbuf::$2C696EC64615141E456728712746E961::$DCCCA291F529538310B49A585077D5A7 MH;
  char M_databuf[224];
};

/* 4792 */
struct mbuf::$2C696EC64615141E456728712746E961::$DCCCA291F529538310B49A585077D5A7
{
  pkthdr MH_pkthdr;
  mbuf::$2C696EC64615141E456728712746E961::$DCCCA291F529538310B49A585077D5A7::$2C5C48FD05C12BA0131C107924B5819D MH_dat;
};

/* 4793 */
struct pkthdr
{
  ifnet *rcvif;
  void *pkt_hdr;
  int32_t len;
  u_int32_t csum_flags;
  pkthdr::$DB70B0112810A03E667F269B70096094 _anon_0;
  u_int16_t vlan_tag;
  u_int8_t pkt_proto;
  u_int8_t pkt_flowsrc;
  u_int32_t pkt_flowid;
  u_int32_t pkt_flags;
  u_int32_t pkt_svc;
  u_int32_t pkt_compl_context;
  pkthdr::$B32919F9C1C6E1F98D82B1682E6350D9 _anon_1;
  u_int64_t pkt_timestamp;
  packet_tags tags;
  builtin_mtag builtin_mtag;
  pkthdr::$0BCFCE7B00CAD18A3535E4AE222C00ED pkt_mpriv;
  u_int32_t redzone;
  u_int32_t pkt_compl_callbacks;
};

/* 4794 */
struct if_description
{
  u_int32_t ifd_maxlen;
  u_int32_t ifd_len;
  u_int8_t *ifd_desc;
};

/* 4795 */
struct ifnet::$564BB46439580B1CF29D77F1FFD3A9E2
{
  ifnet *tqe_next;
  ifnet **tqe_prev;
};

/* 4796 */
struct ifaddrhead
{
  ifaddr *tqh_first;
  ifaddr **tqh_last;
};

/* 4797 */
struct ifaddr
{
  lck_mtx_t ifa_lock;
  uint32_t_0 ifa_refcnt;
  uint32_t_0 ifa_debug;
  sockaddr *ifa_addr;
  sockaddr *ifa_dstaddr;
  sockaddr *ifa_netmask;
  ifnet *ifa_ifp;
  ifaddr::$2D630579EF55897F418E7503863E89D3 ifa_link;
  void (*ifa_rtrequest)(int, rtentry *, sockaddr *);
  uint32_t_0 ifa_flags;
  int32_t ifa_metric;
  void (*ifa_free)(ifaddr *);
  void (*ifa_trace)(ifaddr *, int);
  void (*ifa_attached)(ifaddr *);
  void (*ifa_detached)(ifaddr *);
};

/* 4798 */
struct ifaddr::$2D630579EF55897F418E7503863E89D3
{
  ifaddr *tqe_next;
  ifaddr **tqe_prev;
};

/* 4799 */
struct rtentry
{
  radix_node rt_nodes[2];
  lck_mtx_t rt_lock;
  uint32_t_0 rt_refcnt;
  uint32_t_0 rt_flags;
  uint32_t_0 rt_genid;
  sockaddr *rt_gateway;
  ifnet *rt_ifp;
  ifaddr *rt_ifa;
  sockaddr *rt_genmask;
  void *rt_llinfo;
  void (*rt_llinfo_get_ri)(rtentry *, rt_reach_info *);
  void (*rt_llinfo_get_iflri)(rtentry *, ifnet_llreach_info *);
  void (*rt_llinfo_purge)(rtentry *);
  void (*rt_llinfo_free)(void *);
  void (*rt_llinfo_refresh)(rtentry *);
  rt_metrics rt_rmx;
  rtentry *rt_gwroute;
  rtentry *rt_parent;
  nstat_counts *rt_stats;
  void (*rt_if_ref_fn)(ifnet *, int);
  uint32_t_0 *rt_tree_genid;
  uint64_t_0 rt_expire;
  uint64_t_0 base_calendartime;
  uint64_t_0 base_uptime;
  u_int32_t rtt_hist[10];
  u_int32_t rtt_min;
  u_int32_t rtt_expire_ts;
  u_int8_t rtt_index;
  eventhandler_lists_ctxt rt_evhdlr_ctxt;
};

/* 4800 */
struct radix_node
{
  radix_mask *rn_mklist;
  radix_node *rn_parent;
  __int16 rn_bit;
  char rn_bmask;
  u_char rn_flags;
  radix_node::$36AF41D9D1F7952840A3653EEE60DA08 rn_u;
};

/* 4801 */
struct __attribute__((aligned(8))) radix_mask
{
  __int16 rm_bit;
  char rm_unused;
  u_char rm_flags;
  radix_mask *rm_mklist;
  radix_mask::$991BF554B5E2CA40B225E71EE24FA4EE rm_rmu;
  int rm_refs;
};

/* 4802 */
union radix_mask::$991BF554B5E2CA40B225E71EE24FA4EE
{
  caddr_t rmu_mask;
  radix_node *rmu_leaf;
};

/* 4803 */
union radix_node::$36AF41D9D1F7952840A3653EEE60DA08
{
  radix_node::$36AF41D9D1F7952840A3653EEE60DA08::$8F8DB2089B97CA2513C4EB3EF3839BE4 rn_leaf;
  radix_node::$36AF41D9D1F7952840A3653EEE60DA08::$6058C95296F742CFEB47364816B0755A rn_node;
};

/* 4804 */
struct radix_node::$36AF41D9D1F7952840A3653EEE60DA08::$8F8DB2089B97CA2513C4EB3EF3839BE4
{
  caddr_t rn_Key;
  caddr_t rn_Mask;
  radix_node *rn_Dupedkey;
};

/* 4805 */
struct radix_node::$36AF41D9D1F7952840A3653EEE60DA08::$6058C95296F742CFEB47364816B0755A
{
  int rn_Off;
  radix_node *rn_L;
  radix_node *rn_R;
};

/* 4806 */
struct __attribute__((aligned(8))) rt_reach_info
{
  u_int32_t ri_refcnt;
  u_int32_t ri_probes;
  u_int64_t ri_snd_expire;
  u_int64_t ri_rcv_expire;
  int32_t ri_rssi;
  int32_t ri_lqm;
  int32_t ri_npm;
};

/* 4807 */
struct ifnet_llreach_info
{
  u_int32_t iflri_refcnt;
  u_int32_t iflri_probes;
  u_int64_t iflri_snd_expire;
  u_int64_t iflri_rcv_expire;
  u_int64_t iflri_curtime;
  u_int32_t iflri_netproto;
  u_int8_t iflri_addr[64];
  int32_t iflri_rssi;
  int32_t iflri_lqm;
  int32_t iflri_npm;
};

/* 4808 */
struct rt_metrics
{
  u_int32_t rmx_locks;
  u_int32_t rmx_mtu;
  u_int32_t rmx_hopcount;
  int32_t rmx_expire;
  u_int32_t rmx_recvpipe;
  u_int32_t rmx_sendpipe;
  u_int32_t rmx_ssthresh;
  u_int32_t rmx_rtt;
  u_int32_t rmx_rttvar;
  u_int32_t rmx_pksent;
  u_int32_t rmx_state;
  u_int32_t rmx_filler[3];
};

/* 4809 */
struct nstat_counts
{
  u_int64_t nstat_rxpackets;
  u_int64_t nstat_rxbytes;
  u_int64_t nstat_txpackets;
  u_int64_t nstat_txbytes;
  u_int64_t nstat_cell_rxbytes;
  u_int64_t nstat_cell_txbytes;
  u_int64_t nstat_wifi_rxbytes;
  u_int64_t nstat_wifi_txbytes;
  u_int64_t nstat_wired_rxbytes;
  u_int64_t nstat_wired_txbytes;
  u_int32_t nstat_rxduplicatebytes;
  u_int32_t nstat_rxoutoforderbytes;
  u_int32_t nstat_txretransmit;
  u_int32_t nstat_connectattempts;
  u_int32_t nstat_connectsuccesses;
  u_int32_t nstat_min_rtt;
  u_int32_t nstat_avg_rtt;
  u_int32_t nstat_var_rtt;
};

/* 4810 */
struct eventhandler_lists_ctxt
{
  eventhandler_lists_ctxt::$817A15B8BA552D1FD352354A7EF4D7E6 eventhandler_lists;
  int eventhandler_lists_initted;
  lck_mtx_t eventhandler_mutex;
};

/* 4811 */
struct eventhandler_lists_ctxt::$817A15B8BA552D1FD352354A7EF4D7E6
{
  eventhandler_list *tqh_first;
  eventhandler_list **tqh_last;
};

/* 4812 */
struct eventhandler_list
{
  char el_name[32];
  int el_flags;
  u_int el_runcount;
  lck_mtx_t el_lock;
  eventhandler_list::$3811427E473C02ADC38A7EE660E7719A el_link;
  eventhandler_list::$22A4605E777B18F3C05179944CF49888 el_entries;
};

/* 4813 */
struct eventhandler_list::$3811427E473C02ADC38A7EE660E7719A
{
  eventhandler_list *tqe_next;
  eventhandler_list **tqe_prev;
};

/* 4814 */
struct eventhandler_list::$22A4605E777B18F3C05179944CF49888
{
  eventhandler_entry *tqh_first;
  eventhandler_entry **tqh_last;
};

/* 4815 */
struct __attribute__((aligned(8))) eventhandler_entry
{
  eventhandler_entry::$D2896A5F7236EBAA0FE2B8AC2B5FD86F ee_link;
  int ee_priority;
  eventhandler_entry_arg ee_arg;
};

/* 4816 */
struct eventhandler_entry::$D2896A5F7236EBAA0FE2B8AC2B5FD86F
{
  eventhandler_entry *tqe_next;
  eventhandler_entry **tqe_prev;
};

/* 4817 */
struct eventhandler_entry_arg
{
  uuid_t ee_fmc_uuid;
  uuid_t ee_fr_uuid;
};

/* 4818 */
struct bpf_if
{
  bpf_if *bif_next;
  bpf_d *bif_dlist;
  u_int bif_dlt;
  u_int bif_hdrlen;
  u_int bif_exthdrlen;
  ifnet *bif_ifp;
  bpf_send_func bif_send;
  bpf_tap_func bif_tap;
};

/* 4819 */
struct __attribute__((aligned(8))) if_data_internal
{
  u_char ifi_type;
  u_char ifi_typelen;
  u_char ifi_physical;
  u_char ifi_addrlen;
  u_char ifi_hdrlen;
  u_char ifi_recvquota;
  u_char ifi_xmitquota;
  u_char ifi_unused1;
  u_int32_t ifi_mtu;
  u_int32_t ifi_metric;
  u_int32_t ifi_baudrate;
  u_int64_t ifi_ipackets;
  u_int64_t ifi_ierrors;
  u_int64_t ifi_opackets;
  u_int64_t ifi_oerrors;
  u_int64_t ifi_collisions;
  u_int64_t ifi_ibytes;
  u_int64_t ifi_obytes;
  u_int64_t ifi_imcasts;
  u_int64_t ifi_omcasts;
  u_int64_t ifi_iqdrops;
  u_int64_t ifi_noproto;
  u_int32_t ifi_recvtiming;
  u_int32_t ifi_xmittiming;
  u_int64_t ifi_alignerrs;
  u_int64_t ifi_dt_bytes;
  u_int64_t ifi_fpackets;
  u_int64_t ifi_fbytes;
  timeval ifi_lastchange;
  timeval ifi_lastupdown;
  u_int32_t ifi_hwassist;
  u_int32_t ifi_tso_v4_mtu;
  u_int32_t ifi_tso_v6_mtu;
};

/* 4820 */
typedef u_int32_t ifnet_family_t;

/* 4821 */
typedef u_int32_t ifnet_subfamily_t;

/* 4822 */
typedef errno_t (*dlil_input_func)(ifnet_t, mbuf_t, mbuf_t, const ifnet_stat_increment_param *, boolean_t, thread *);

/* 4823 */
typedef int errno_t;

/* 4824 */
struct ifnet_stat_increment_param
{
  u_int32_t packets_in;
  u_int32_t bytes_in;
  u_int32_t errors_in;
  u_int32_t packets_out;
  u_int32_t bytes_out;
  u_int32_t errors_out;
  u_int32_t collisions;
  u_int32_t dropped;
};

/* 4825 */
typedef errno_t (*dlil_output_func)(ifnet_t, mbuf_t);

/* 4826 */
typedef void (*ifnet_start_func)(ifnet_t);

/* 4827 */
typedef errno_t (*ifnet_output_func)(ifnet_t, mbuf_t);

/* 4828 */
typedef errno_t (*ifnet_pre_enqueue_func)(ifnet_t, mbuf_t);

/* 4829 */
typedef errno_t (*ifnet_ctl_func)(ifnet_t, ifnet_ctl_cmd_t, u_int32_t, void *);

/* 4830 */
typedef u_int32_t ifnet_ctl_cmd_t;

/* 4831 */
typedef void (*ifnet_input_poll_func)(ifnet_t, u_int32_t, u_int32_t, mbuf_t *, mbuf_t *, u_int32_t *, u_int32_t *);

/* 4832 */
typedef errno_t (*ifnet_ioctl_func)(ifnet_t, unsigned __int64, void *);

/* 4833 */
typedef errno_t (*ifnet_set_bpf_tap)(ifnet_t, bpf_tap_mode, bpf_packet_func);

/* 4834 */
typedef u_int32_t bpf_tap_mode;

/* 4835 */
typedef errno_t (*bpf_packet_func)(ifnet_t, mbuf_t);

/* 4836 */
typedef void (*ifnet_detached_func)(ifnet_t);

/* 4837 */
typedef errno_t (*ifnet_demux_func)(ifnet_t, mbuf_t, char *, protocol_family_t *);

/* 4838 */
typedef u_int32_t protocol_family_t;

/* 4839 */
typedef void (*ifnet_event_func)(ifnet_t, const kev_msg *);

/* 4840 */
struct kev_msg
{
  u_int32_t vendor_code;
  u_int32_t kev_class;
  u_int32_t kev_subclass;
  u_int32_t event_code;
  kev_d_vectors dv[5];
};

/* 4841 */
struct kev_d_vectors
{
  u_int32_t data_length;
  void *data_ptr;
};

/* 4842 */
typedef errno_t (*ifnet_framer_func)(ifnet_t, mbuf_t *, const sockaddr *, const char *, const char *);

/* 4843 */
typedef errno_t (*ifnet_framer_extended_func)(ifnet_t, mbuf_t *, const sockaddr *, const char *, const char *, u_int32_t *, u_int32_t *);

/* 4844 */
typedef errno_t (*ifnet_add_proto_func)(ifnet_t, protocol_family_t, const ifnet_demux_desc *, u_int32_t);

/* 4845 */
struct __attribute__((aligned(8))) ifnet_demux_desc
{
  u_int32_t type;
  void *data;
  u_int32_t datalen;
};

/* 4846 */
typedef errno_t (*ifnet_del_proto_func)(ifnet_t, protocol_family_t);

/* 4847 */
typedef errno_t (*ifnet_check_multi)(ifnet_t, const sockaddr *);

/* 4848 */
struct proto_hash_entry
{
  if_proto *slh_first;
};

/* 4849 */
struct ifclassq
{
  lck_mtx_t ifcq_lock;
  ifnet *ifcq_ifp;
  u_int32_t ifcq_len;
  u_int32_t ifcq_maxlen;
  pktcntr ifcq_xmitcnt;
  pktcntr ifcq_dropcnt;
  u_int32_t ifcq_type;
  u_int32_t ifcq_flags;
  u_int32_t ifcq_sflags;
  u_int32_t ifcq_target_qdelay;
  u_int32_t ifcq_bytes;
  u_int32_t ifcq_pkt_drop_limit;
  void *ifcq_disc;
  ifclassq_disc_slot ifcq_disc_slots[10];
  ifclassq_enq_func ifcq_enqueue;
  ifclassq_deq_func ifcq_dequeue;
  ifclassq_deq_sc_func ifcq_dequeue_sc;
  ifclassq_deq_multi_func ifcq_dequeue_multi;
  ifclassq_deq_sc_multi_func ifcq_dequeue_sc_multi;
  ifclassq_req_func ifcq_request;
  tb_regulator ifcq_tbr;
};

/* 4850 */
struct pktcntr
{
  u_int64_t packets;
  u_int64_t bytes;
};

/* 4851 */
struct ifclassq_disc_slot
{
  u_int32_t qid;
  void *cl;
};

/* 4852 */
typedef int (*ifclassq_enq_func)(ifclassq *, void *, classq_pkt_type_t, boolean_t *);

/* 4853 */
typedef classq_pkt_type classq_pkt_type_t;

/* 4854 */
typedef void *(*ifclassq_deq_func)(ifclassq *, classq_pkt_type_t *);

/* 4855 */
typedef void *(*ifclassq_deq_sc_func)(ifclassq *, mbuf_svc_class_t, classq_pkt_type_t *);

/* 4856 */
typedef int (*ifclassq_deq_multi_func)(ifclassq *, u_int32_t, u_int32_t, void **, void **, u_int32_t *, u_int32_t *, classq_pkt_type_t *);

/* 4857 */
typedef int (*ifclassq_deq_sc_multi_func)(ifclassq *, mbuf_svc_class_t, u_int32_t, u_int32_t, void **, void **, u_int32_t *, u_int32_t *, classq_pkt_type_t *);

/* 4858 */
typedef int (*ifclassq_req_func)(ifclassq *, cqrq, void *);

/* 4859 */
struct tb_regulator
{
  u_int64_t tbr_rate_raw;
  u_int32_t tbr_percent;
  int64_t tbr_rate;
  int64_t tbr_depth;
  int64_t tbr_token;
  int64_t tbr_filluptime;
  u_int64_t tbr_last;
};

/* 4860 */
struct if_bandwidths
{
  u_int64_t eff_bw;
  u_int64_t max_bw;
};

/* 4861 */
struct if_latencies
{
  u_int64_t eff_lt;
  u_int64_t max_lt;
};

/* 4862 */
struct ifnet_filter_head
{
  ifnet_filter *tqh_first;
  ifnet_filter **tqh_last;
};

/* 4863 */
struct ifnet_filter
{
  ifnet_filter::$25BE8621560369BAA740AA352318E110 filt_next;
  u_int32_t filt_skip;
  u_int32_t filt_flags;
  ifnet_t_0 filt_ifp;
  const char *filt_name;
  void *filt_cookie;
  protocol_family_t filt_protocol;
  iff_input_func filt_input;
  iff_output_func filt_output;
  iff_event_func filt_event;
  iff_ioctl_func filt_ioctl;
  iff_detached_func filt_detached;
};

/* 4864 */
struct ifmultihead
{
  ifmultiaddr *lh_first;
};

/* 4865 */
struct ifmultiaddr
{
  lck_mtx_t ifma_lock;
  u_int32_t ifma_refcount;
  u_int32_t ifma_anoncnt;
  u_int32_t ifma_reqcnt;
  u_int32_t ifma_debug;
  u_int32_t ifma_flags;
  ifmultiaddr::$000F8E456A7B09BC31FD9A4E46533A75 ifma_link;
  sockaddr *ifma_addr;
  ifmultiaddr *ifma_ll;
  ifnet *ifma_ifp;
  void *ifma_protospec;
  void (*ifma_trace)(ifmultiaddr *, int);
};

/* 4866 */
struct ifmultiaddr::$000F8E456A7B09BC31FD9A4E46533A75
{
  ifmultiaddr *le_next;
  ifmultiaddr **le_prev;
};

/* 4867 */
struct in_multi
{
  lck_mtx_t inm_lock;
  u_int32_t inm_refcount;
  u_int32_t inm_reqcnt;
  u_int32_t inm_debug;
  in_multi::$D4CFE2D0DB942BAB4DD74255312443D9 inm_link;
  in_addr inm_addr;
  ifnet *inm_ifp;
  ifmultiaddr *inm_ifma;
  u_int inm_timer;
  u_int inm_state;
  void *inm_rti;
  igmp_ifinfo *inm_igi;
  in_multi::$D7870B5AB9D0D7721386F85C43C856A4 inm_dtle;
  in_multi::$D7870B5AB9D0D7721386F85C43C856A4 inm_nrele;
  u_int32_t inm_nrelecnt;
  ip_msource_tree inm_srcs;
  u_long inm_nsrc;
  ifqueue inm_scq;
  timeval inm_lastgsrtv;
  uint16_t inm_sctimer;
  uint16_t inm_scrv;
  inm_st inm_st[2];
  void (*inm_trace)(in_multi *, int);
};

/* 4868 */
struct in_multi::$D4CFE2D0DB942BAB4DD74255312443D9
{
  in_multi *le_next;
  in_multi **le_prev;
};

/* 4869 */
struct in_addr
{
  in_addr_t s_addr;
};

/* 4870 */
struct igmp_ifinfo
{
  lck_mtx_t igi_lock;
  uint32_t_0 igi_refcnt;
  uint32_t_0 igi_debug;
  igmp_ifinfo::$32B7641A7CA5F9E95D15FBFAA7AE5BFE igi_link;
  ifnet_0 *igi_ifp;
  uint32_t_0 igi_version;
  uint32_t_0 igi_v1_timer;
  uint32_t_0 igi_v2_timer;
  uint32_t_0 igi_v3_timer;
  uint32_t_0 igi_flags;
  uint32_t_0 igi_rv;
  uint32_t_0 igi_qi;
  uint32_t_0 igi_qri;
  uint32_t_0 igi_uri;
  igmp_ifinfo::$07F0ED11DC3379F2F0D30E5B8FAB9116 igi_relinmhead;
  ifqueue igi_gq;
  ifqueue igi_v2q;
};

/* 4871 */
struct in_multi::$D7870B5AB9D0D7721386F85C43C856A4
{
  in_multi *sle_next;
};

/* 4872 */
struct ip_msource_tree
{
  ip_msource *rbh_root;
};

/* 4873 */
struct __attribute__((aligned(4))) ip_msource
{
  ip_msource::$8403FED15581EF441CA720D1E22CFD76 ims_link;
  in_addr_t ims_haddr;
  ims_st ims_st[2];
  uint8_t_0 ims_stp;
};

/* 4874 */
struct ip_msource::$8403FED15581EF441CA720D1E22CFD76
{
  ip_msource *rbe_left;
  ip_msource *rbe_right;
  ip_msource *rbe_parent;
};

/* 4875 */
struct ims_st
{
  uint16_t ex;
  uint16_t in;
};

/* 4876 */
struct __attribute__((aligned(8))) ifqueue
{
  void *ifq_head;
  void *ifq_tail;
  int ifq_len;
  int ifq_maxlen;
  int ifq_drops;
};

/* 4877 */
struct inm_st
{
  uint16_t iss_fmode;
  uint16_t iss_asm;
  uint16_t iss_ex;
  uint16_t iss_in;
  uint16_t iss_rec;
};

/* 4878 */
struct dlil_threading_info
{
  lck_mtx_t input_lck;
  lck_grp_t *lck_grp;
  u_int32_t input_waiting;
  u_int32_t wtot;
  char input_name[32];
  ifnet *ifp;
  class_queue_t rcvq_pkts;
  ifnet_stat_increment_param stats;
  boolean_t net_affinity;
  thread *input_thr;
  thread *wloop_thr;
  thread *poll_thr;
  u_int32_t tag;
  ifnet_model_t mode;
  pktcntr tstats;
  if_rxpoll_stats pstats;
  pktcntr sstats;
  timespec mode_holdtime;
  timespec mode_lasttime;
  timespec sample_holdtime;
  timespec sample_lasttime;
  timespec dbg_lasttime;
  u_int64_t input_mbuf_cnt;
  thread_call_t input_mit_tcall;
};

/* 4879 */
struct ifnet::$FDF1CE6E7EB89D62E9908B60B4ED85D0
{
  u_int32_t length;
  ifnet::$FDF1CE6E7EB89D62E9908B60B4ED85D0::$371C07B2AEE5DA5DD618D3799C332B0D u;
};

/* 4880 */
union ifnet::$FDF1CE6E7EB89D62E9908B60B4ED85D0::$371C07B2AEE5DA5DD618D3799C332B0D
{
  u_char buffer[8];
  u_char *ptr;
};

/* 4881 */
struct pfi_kif
{
  char pfik_name[16];
  pfi_kif::$9CFF3E5F3B6FD023FB2E327F968FB82C pfik_tree;
  u_int64_t pfik_packets[2][2][2];
  u_int64_t pfik_bytes[2][2][2];
  u_int64_t pfik_tzero;
  int pfik_flags;
  void *pfik_ah_cookie;
  ifnet *pfik_ifp;
  int pfik_states;
  int pfik_rules;
  pfi_kif::$B440E05135CB0EC947F0171FCE6D932B pfik_dynaddrs;
};

/* 4882 */
struct nexus_netif_adapter
{
  nexus_adapter nifna_up;
  nexus_adapter nifna_host;
  nx_netif_mit *nifna_tx_mit;
  nx_netif_mit *nifna_rx_mit;
  uint32_t_0 nifna_hwassist;
  uint32_t_0 nifna_capabilities;
  uint32_t_0 nifna_capenable;
  uint64_t_0 nifna_input_rate;
  nx_flowswitch *nifna_fsw;
  sk_nexusadv *nifna_fsw_nxadv;
};

/* 4883 */
struct if_nexus_netif
{
  uuid_t if_nif_provider;
  uuid_t if_nif_instance;
  uuid_t if_nif_attach;
};

/* 4884 */
struct if_nexus_multistack
{
  uuid_t if_ms_provider;
  uuid_t if_ms_instance;
  uuid_t if_ms_device;
  uuid_t if_ms_host;
  uint32_t_0 if_ms_ipaddr_gencnt;
};

/* 4885 */
struct __attribute__((aligned(8))) route
{
  rtentry *ro_rt;
  llentry *ro_lle;
  ifaddr *ro_srcia;
  uint32_t_0 ro_flags;
  sockaddr ro_dst;
};

/* 4886 */
struct llentry
{
  llentry::$0E0446002B852F1C504C53E3DF1EE4CA lle_next;
  llentry::$6EC767EE67944FD767BCC5DE29CB8BAA r_l3addr;
  uint16_t r_flags;
  uint16_t r_skip_req;
  lltable *lle_tbl;
  llentries *lle_head;
  void (*lle_free)(llentry *);
  mbuf *la_hold;
  int la_numheld;
  u_int64_t la_expire;
  uint16_t la_flags;
  uint16_t la_asked;
  uint16_t la_preempt;
  int16_t ln_state;
  uint16_t ln_router;
  time_t ln_ntick;
  time_t lle_remtime;
  time_t lle_hittime;
  int lle_refcnt;
  llentry::$8F80FBD5E9A48D9A12CCF62CF6F396E2 ll_addr;
  llentry::$0E0446002B852F1C504C53E3DF1EE4CA lle_chain;
  thread_call_t lle_timer;
  u_int64_t ln_lastused;
  if_llreach *ln_llreach;
  lck_rw_t lle_lock;
  lck_mtx_t req_mtx;
};

/* 4887 */
struct llentry::$0E0446002B852F1C504C53E3DF1EE4CA
{
  llentry *le_next;
  llentry **le_prev;
};

/* 4888 */
union llentry::$6EC767EE67944FD767BCC5DE29CB8BAA
{
  in_addr addr4;
  in6_addr addr6;
};

/* 4889 */
struct lltable
{
  lltable::$77D1A2B436740C48EC0A5D171A4C14B0 llt_link;
  int llt_af;
  int llt_hsize;
  llentries *lle_head;
  ifnet *llt_ifp;
  llt_lookup_t *llt_lookup;
  llt_alloc_t *llt_alloc_entry;
  llt_delete_t *llt_delete_entry;
  llt_prefix_free_t *llt_prefix_free;
  llt_dump_entry_t *llt_dump_entry;
  llt_hash_t *llt_hash;
  llt_match_prefix_t *llt_match_prefix;
  llt_free_entry_t *llt_free_entry;
  llt_foreach_entry_t *llt_foreach_entry;
  llt_link_entry_t *llt_link_entry;
  llt_unlink_entry_t *llt_unlink_entry;
  llt_fill_sa_entry_t *llt_fill_sa_entry;
  llt_free_tbl_t *llt_free_tbl;
};

/* 4890 */
struct lltable::$77D1A2B436740C48EC0A5D171A4C14B0
{
  lltable *sle_next;
};

/* 4891 */
struct llentries
{
  llentry *lh_first;
};

/* 4892 */
typedef llentry *llt_lookup_t(lltable *, u_int, const sockaddr *);

/* 4893 */
typedef llentry *llt_alloc_t(lltable *, u_int, const sockaddr *);

/* 4894 */
typedef void llt_delete_t(lltable *, llentry *);

/* 4895 */
typedef void llt_prefix_free_t(lltable *, const sockaddr *, const sockaddr *, u_int);

/* 4896 */
typedef int llt_dump_entry_t(lltable *, llentry *, sysctl_req *);

/* 4897 */
typedef uint32_t_0 llt_hash_t(const llentry *, uint32_t_0);

/* 4898 */
typedef int llt_match_prefix_t(const sockaddr *, const sockaddr *, u_int, llentry *);

/* 4899 */
typedef void llt_free_entry_t(lltable *, llentry *);

/* 4900 */
typedef int llt_foreach_entry_t(lltable *, llt_foreach_cb_t *, void *);

/* 4901 */
typedef int llt_foreach_cb_t(lltable *, llentry *, void *);

/* 4902 */
typedef void llt_link_entry_t(lltable *, llentry *);

/* 4903 */
typedef void llt_unlink_entry_t(llentry *);

/* 4904 */
typedef void llt_fill_sa_entry_t(const llentry *, sockaddr *);

/* 4905 */
typedef void llt_free_tbl_t(lltable *);

/* 4906 */
union llentry::$8F80FBD5E9A48D9A12CCF62CF6F396E2
{
  uint64_t_0 mac_aligned;
  uint16_t mac16[3];
};

/* 4907 */
struct __attribute__((aligned(8))) if_llreach
{
  lck_mtx_t lr_lock;
  if_llreach::$11806A929F61427925DD05EDC09C2D34 lr_link;
  ifnet_0 *lr_ifp;
  u_int32_t lr_refcnt;
  u_int32_t lr_reqcnt;
  u_int32_t lr_debug;
  u_int32_t lr_probes;
  u_int64_t lr_basecal;
  u_int64_t lr_baseup;
  u_int64_t lr_lastrcvd;
  u_int32_t lr_basereachable;
  u_int32_t lr_reachable;
  lr_key_s lr_key;
  int32_t lr_rssi;
  int32_t lr_lqm;
  int32_t lr_npm;
};

/* 4908 */
struct route_in6
{
  rtentry *ro_rt;
  llentry *ro_lle;
  ifaddr *ro_srcia;
  uint32_t_0 ro_flags;
  sockaddr_in6 ro_dst;
};

/* 4909 */
struct sockaddr_in6
{
  __uint8_t sin6_len;
  sa_family_t sin6_family;
  in_port_t sin6_port;
  __uint32_t sin6_flowinfo;
  in6_addr sin6_addr;
  __uint32_t sin6_scope_id;
};

/* 4910 */
struct ll_reach_tree
{
  if_llreach *rbh_root;
};

/* 4911 */
struct if_traffic_class
{
  u_int64_t ifi_ibepackets;
  u_int64_t ifi_ibebytes;
  u_int64_t ifi_obepackets;
  u_int64_t ifi_obebytes;
  u_int64_t ifi_ibkpackets;
  u_int64_t ifi_ibkbytes;
  u_int64_t ifi_obkpackets;
  u_int64_t ifi_obkbytes;
  u_int64_t ifi_ivipackets;
  u_int64_t ifi_ivibytes;
  u_int64_t ifi_ovipackets;
  u_int64_t ifi_ovibytes;
  u_int64_t ifi_ivopackets;
  u_int64_t ifi_ivobytes;
  u_int64_t ifi_ovopackets;
  u_int64_t ifi_ovobytes;
  u_int64_t ifi_ipvpackets;
  u_int64_t ifi_ipvbytes;
  u_int64_t ifi_opvpackets;
  u_int64_t ifi_opvbytes;
};

/* 4912 */
struct mld_ifinfo
{
  lck_mtx_t mli_lock;
  uint32_t_0 mli_refcnt;
  uint32_t_0 mli_debug;
  mld_ifinfo::$5F576C549509D0655E6E7A6D9340AFFC mli_link;
  ifnet_0 *mli_ifp;
  uint32_t_0 mli_version;
  uint32_t_0 mli_v1_timer;
  uint32_t_0 mli_v2_timer;
  uint32_t_0 mli_flags;
  uint32_t_0 mli_rv;
  uint32_t_0 mli_qi;
  uint32_t_0 mli_qri;
  uint32_t_0 mli_uri;
  mld_ifinfo::$8EA3F9881ACADACA113B33344BAA5CDA mli_relinmhead;
  ifqueue mli_gq;
  ifqueue mli_v1q;
};

/* 4913 */
struct tcpstat_local
{
  u_int64_t badformat;
  u_int64_t unspecv6;
  u_int64_t synfin;
  u_int64_t badformatipsec;
  u_int64_t noconnnolist;
  u_int64_t noconnlist;
  u_int64_t listbadsyn;
  u_int64_t icmp6unreach;
  u_int64_t deprecate6;
  u_int64_t ooopacket;
  u_int64_t rstinsynrcv;
  u_int64_t dospacket;
  u_int64_t cleanup;
  u_int64_t synwindow;
};

/* 4914 */
struct udpstat_local
{
  u_int64_t port_unreach;
  u_int64_t faithprefix;
  u_int64_t port0;
  u_int64_t badlength;
  u_int64_t badchksum;
  u_int64_t badmcast;
  u_int64_t cleanup;
  u_int64_t badipsec;
};

/* 4915 */
struct ifnet::$84A273D192F849021096946526FA0146
{
  int32_t level;
  u_int32_t flags;
  int32_t category;
  int32_t subcategory;
};

/* 4916 */
struct ifnet::$D32B6E0ADB43E1E67C517FE7FE080754
{
  ifnet *ifp;
  u_int32_t type;
  u_int32_t family;
  u_int32_t subfamily;
  unsigned __int32 expensive : 1;
};

/* 4917 */
struct if_link_status
{
  u_int32_t ifsr_version;
  u_int32_t ifsr_len;
  if_link_status::$88638B00204402A759172EE37B98E1BE ifsr_u;
};

/* 4918 */
union if_link_status::$88638B00204402A759172EE37B98E1BE
{
  if_cellular_status ifsr_cell;
  if_wifi_status ifsr_wifi;
};

/* 4919 */
struct if_cellular_status
{
  if_cellular_status::$2980223CBDB5B5CB8CEE74895F69B5C5 if_cell_u;
};

/* 4920 */
union if_cellular_status::$2980223CBDB5B5CB8CEE74895F69B5C5
{
  if_cellular_status_v1 if_status_v1;
};

/* 4921 */
struct if_cellular_status_v1
{
  u_int32_t valid_bitmask;
  u_int32_t link_quality_metric;
  u_int32_t ul_effective_bandwidth;
  u_int32_t ul_max_bandwidth;
  u_int32_t ul_min_latency;
  u_int32_t ul_effective_latency;
  u_int32_t ul_max_latency;
  u_int32_t ul_retxt_level;
  u_int32_t ul_bytes_lost;
  u_int32_t ul_min_queue_size;
  u_int32_t ul_avg_queue_size;
  u_int32_t ul_max_queue_size;
  u_int32_t dl_effective_bandwidth;
  u_int32_t dl_max_bandwidth;
  u_int32_t config_inactivity_time;
  u_int32_t config_backoff_time;
  u_int16_t mss_recommended;
  u_int16_t reserved_1;
  u_int32_t reserved_2;
  u_int64_t reserved_3;
  u_int64_t reserved_4;
  u_int64_t reserved_5;
  u_int64_t reserved_6;
};

/* 4922 */
struct if_wifi_status
{
  if_wifi_status::$0C3FCA43759B046E5ED8767436A1245D if_wifi_u;
};

/* 4923 */
union if_wifi_status::$0C3FCA43759B046E5ED8767436A1245D
{
  if_wifi_status_v1 if_status_v1;
};

/* 4924 */
struct if_wifi_status_v1
{
  u_int32_t valid_bitmask;
  u_int32_t link_quality_metric;
  u_int32_t ul_effective_bandwidth;
  u_int32_t ul_max_bandwidth;
  u_int32_t ul_min_latency;
  u_int32_t ul_effective_latency;
  u_int32_t ul_max_latency;
  u_int32_t ul_retxt_level;
  u_int32_t ul_bytes_lost;
  u_int32_t ul_error_rate;
  u_int32_t dl_effective_bandwidth;
  u_int32_t dl_max_bandwidth;
  u_int32_t dl_min_latency;
  u_int32_t dl_effective_latency;
  u_int32_t dl_max_latency;
  u_int32_t dl_error_rate;
  u_int32_t config_frequency;
  u_int32_t config_multicast_rate;
  u_int32_t scan_count;
  u_int32_t scan_duration;
  u_int64_t reserved_1;
  u_int64_t reserved_2;
  u_int64_t reserved_3;
  u_int64_t reserved_4;
};

/* 4925 */
struct if_interface_state
{
  u_int8_t valid_bitmask;
  u_int8_t rrc_state;
  int8_t lqm_state;
  u_int8_t interface_availability;
};

/* 4926 */
struct if_tcp_ecn_stat
{
  u_int64_t timestamp;
  u_int64_t ecn_client_setup;
  u_int64_t ecn_server_setup;
  u_int64_t ecn_client_success;
  u_int64_t ecn_server_success;
  u_int64_t ecn_peer_nosupport;
  u_int64_t ecn_syn_lost;
  u_int64_t ecn_synack_lost;
  u_int64_t ecn_recv_ce;
  u_int64_t ecn_recv_ece;
  u_int64_t ecn_conn_recv_ce;
  u_int64_t ecn_conn_recv_ece;
  u_int64_t ecn_conn_plnoce;
  u_int64_t ecn_conn_plce;
  u_int64_t ecn_conn_noplce;
  u_int64_t ecn_fallback_synloss;
  u_int64_t ecn_fallback_reorder;
  u_int64_t ecn_fallback_ce;
  u_int64_t ecn_off_conn;
  u_int64_t ecn_total_conn;
  u_int64_t ecn_fallback_droprst;
  u_int64_t ecn_fallback_droprxmt;
  u_int64_t ecn_fallback_synrst;
  if_tcp_ecn_perf_stat ecn_on;
  if_tcp_ecn_perf_stat ecn_off;
};

/* 4927 */
struct if_tcp_ecn_perf_stat
{
  u_int64_t total_txpkts;
  u_int64_t total_rxmitpkts;
  u_int64_t total_rxpkts;
  u_int64_t total_oopkts;
  u_int64_t total_reorderpkts;
  u_int64_t rtt_avg;
  u_int64_t rtt_var;
  u_int64_t sack_episodes;
  u_int64_t rxmit_drop;
  u_int64_t rst_drop;
  u_int64_t oo_percent;
  u_int64_t reorder_percent;
  u_int64_t rxmit_percent;
};

/* 4928 */
struct ifnet::$D835C1FB80356427E73262EF64749CA4
{
  ns_token *slh_first;
};

/* 4929 */
struct ns_token
{
  ifnet_t nt_ifp;
  ns_token::$94144F569DE4E034BC7886B704988F3A nt_ifp_link;
  ns_token::$94144F569DE4E034BC7886B704988F3A nt_all_link;
  uint32_t_0 nt_state;
  ns_token::$EA1443DE44B6A93871234987818F4977 _anon_0;
  uint8_t_0 nt_addr_len;
  uint8_t_0 nt_proto;
  in_port_t nt_port;
  uint32_t_0 nt_flags;
  ns_flow_info *nt_flow_info;
};

/* 4930 */
struct __attribute__((packed)) __attribute__((aligned(4))) if_lim_perf_stat
{
  u_int64_t lim_dl_max_bandwidth;
  u_int64_t lim_ul_max_bandwidth;
  u_int64_t lim_total_txpkts;
  u_int64_t lim_total_rxpkts;
  u_int64_t lim_total_retxpkts;
  u_int64_t lim_packet_loss_percent;
  u_int64_t lim_total_oopkts;
  u_int64_t lim_packet_ooo_percent;
  u_int64_t lim_rtt_variance;
  u_int64_t lim_rtt_average;
  u_int64_t lim_rtt_min;
  u_int64_t lim_conn_timeouts;
  u_int64_t lim_conn_attempts;
  u_int64_t lim_conn_timeout_percent;
  u_int64_t lim_bk_txpkts;
  unsigned __int64 lim_dl_detected : 1;
  unsigned __int64 lim_ul_detected : 1;
};

/* 4931 */
union pkthdr::$DB70B0112810A03E667F269B70096094
{
  pkthdr::$DB70B0112810A03E667F269B70096094::$8A2742F8CFBE724C2855E5CF72599AE0 _csum_rx;
  pkthdr::$DB70B0112810A03E667F269B70096094::$D3CFA13A732762197E16B05FCFAF57EF _csum_tx;
  u_int32_t csum_data;
};

/* 4932 */
struct pkthdr::$DB70B0112810A03E667F269B70096094::$8A2742F8CFBE724C2855E5CF72599AE0
{
  u_int16_t val;
  u_int16_t start;
};

/* 4933 */
struct pkthdr::$DB70B0112810A03E667F269B70096094::$D3CFA13A732762197E16B05FCFAF57EF
{
  u_int16_t start;
  u_int16_t stuff;
};

/* 4934 */
union pkthdr::$B32919F9C1C6E1F98D82B1682E6350D9
{
  pkthdr::$B32919F9C1C6E1F98D82B1682E6350D9::$790E97CE10DAFD9930D51F8AC1F9A4D9 _pkt_iaif;
  u_int64_t pkt_ifainfo;
  pkthdr::$B32919F9C1C6E1F98D82B1682E6350D9::$8193F9D18AD3617873D530D17818247D _pkt_bsr;
};

/* 4935 */
struct pkthdr::$B32919F9C1C6E1F98D82B1682E6350D9::$790E97CE10DAFD9930D51F8AC1F9A4D9
{
  u_int16_t src;
  u_int16_t src_flags;
  u_int16_t dst;
  u_int16_t dst_flags;
};

/* 4936 */
struct pkthdr::$B32919F9C1C6E1F98D82B1682E6350D9::$8193F9D18AD3617873D530D17818247D
{
  u_int32_t if_data;
  u_int32_t sndbuf_data;
};

/* 4937 */
struct packet_tags
{
  m_tag *slh_first;
};

/* 4938 */
struct m_tag
{
  u_int64_t m_tag_cookie;
  m_tag::$B86A8D36CA048F0AB3F025F303659F89 m_tag_link;
  u_int16_t m_tag_type;
  u_int16_t m_tag_len;
  u_int32_t m_tag_id;
};

/* 4939 */
struct m_tag::$B86A8D36CA048F0AB3F025F303659F89
{
  m_tag *sle_next;
};

/* 4940 */
union builtin_mtag
{
  builtin_mtag::$0E29D0BACE4C240E0D2CC91B24D43242 _net_mtag;
  driver_mtag_ _drv_mtag;
};

/* 4941 */
struct builtin_mtag::$0E29D0BACE4C240E0D2CC91B24D43242
{
  proto_mtag_ _proto_mtag;
  pf_mtag _pf_mtag;
  necp_mtag_ _necp_mtag;
};

/* 4942 */
struct proto_mtag_
{
  proto_mtag_::$36B4FF05EE9C4B63AE6D01CD3645E3BA __pr_u;
};

/* 4943 */
union proto_mtag_::$36B4FF05EE9C4B63AE6D01CD3645E3BA
{
  tcp_mtag tcp;
  udp_mtag udp;
  rawip_mtag rawip;
};

/* 4944 */
struct tcp_mtag
{
  tcp_mtag::$85254C1D4A72A1FB5FBC921FB89B40BE _anon_0;
};

/* 4945 */
union __attribute__((aligned(8))) tcp_mtag::$85254C1D4A72A1FB5FBC921FB89B40BE
{
  tcp_pktinfo tm_tcp;
  mptcp_pktinfo tm_mptcp;
};

/* 4946 */
struct tcp_pktinfo
{
  tcp_pktinfo::$719E35A820301FDAA17B9C89FD601259 __offload;
  tcp_pktinfo::$C1D85487FC5FC01B491FD9B213302D7F __msgattr;
};

/* 4947 */
union tcp_pktinfo::$719E35A820301FDAA17B9C89FD601259
{
  tcp_pktinfo::$719E35A820301FDAA17B9C89FD601259::$B7FE3E9FDBC61BDC16EA7BEE42BC9732 __tx;
  tcp_pktinfo::$719E35A820301FDAA17B9C89FD601259::$AAC0CA4403769A1A0CE1BA420538FCF5 __rx;
};

/* 4948 */
struct tcp_pktinfo::$719E35A820301FDAA17B9C89FD601259::$B7FE3E9FDBC61BDC16EA7BEE42BC9732
{
  u_int32_t segsz;
  u_int32_t start_seq;
  pid_t pid;
  pid_t e_pid;
};

/* 4949 */
struct tcp_pktinfo::$719E35A820301FDAA17B9C89FD601259::$AAC0CA4403769A1A0CE1BA420538FCF5
{
  u_int16_t lro_pktlen;
  u_int8_t lro_npkts;
  u_int8_t lro_timediff;
};

/* 4950 */
union tcp_pktinfo::$C1D85487FC5FC01B491FD9B213302D7F
{
  u_int32_t pri;
  u_int32_t seq;
};

/* 4951 */
struct mptcp_pktinfo
{
  u_int64_t mtpi_dsn;
  u_int32_t mtpi_rel_seq;
  u_int16_t mtpi_length;
  u_int16_t mtpi_csum;
};

/* 4952 */
struct udp_mtag
{
  pid_t _pid;
  pid_t _e_pid;
};

/* 4953 */
struct rawip_mtag
{
  pid_t _pid;
  pid_t _e_pid;
};

/* 4954 */
struct pf_mtag
{
  u_int16_t pftag_flags;
  u_int16_t pftag_rtableid;
  u_int16_t pftag_tag;
  u_int16_t pftag_routed;
};

/* 4955 */
struct necp_mtag_
{
  u_int32_t necp_policy_id;
  u_int32_t necp_skip_policy_id;
  u_int32_t necp_route_rule_id;
  u_int16_t necp_last_interface_index;
  u_int16_t necp_app_id;
};

/* 4956 */
struct __attribute__((aligned(4))) driver_mtag_
{
  uintptr_t _drv_tx_compl_arg;
  uintptr_t _drv_tx_compl_data;
  kern_return_t _drv_tx_status;
  uint16_t _drv_flowid;
};

/* 4957 */
struct pkthdr::$0BCFCE7B00CAD18A3535E4AE222C00ED
{
  pkthdr::$0BCFCE7B00CAD18A3535E4AE222C00ED::$798FE35699F208250220C9EAD20FA02D __mpriv_u;
};

/* 4958 */
union pkthdr::$0BCFCE7B00CAD18A3535E4AE222C00ED::$798FE35699F208250220C9EAD20FA02D
{
  u_int8_t __mpriv8[16];
  u_int16_t __mpriv16[8];
  pkthdr::$0BCFCE7B00CAD18A3535E4AE222C00ED::$798FE35699F208250220C9EAD20FA02D::$55D43B4D48EC3D1F88C35271B7E0B79E __mpriv32[4];
  u_int64_t __mpriv64[2];
};

/* 4959 */
struct pkthdr::$0BCFCE7B00CAD18A3535E4AE222C00ED::$798FE35699F208250220C9EAD20FA02D::$55D43B4D48EC3D1F88C35271B7E0B79E
{
  pkthdr::$0BCFCE7B00CAD18A3535E4AE222C00ED::$798FE35699F208250220C9EAD20FA02D::$55D43B4D48EC3D1F88C35271B7E0B79E::$CDB41CF7C7939055B38E25BCABAFFC18 __mpriv32_u;
};

/* 4960 */
union pkthdr::$0BCFCE7B00CAD18A3535E4AE222C00ED::$798FE35699F208250220C9EAD20FA02D::$55D43B4D48EC3D1F88C35271B7E0B79E::$CDB41CF7C7939055B38E25BCABAFFC18
{
  u_int8_t __val8[4];
  u_int16_t __val16[2];
  u_int32_t __val32;
};

/* 4961 */
union mbuf::$2C696EC64615141E456728712746E961::$DCCCA291F529538310B49A585077D5A7::$2C5C48FD05C12BA0131C107924B5819D
{
  m_ext MH_ext;
  char MH_databuf[80];
};

/* 4962 */
struct m_ext
{
  caddr_t ext_buf;
  m_ext_free_func_t ext_free;
  u_int ext_size;
  caddr_t ext_arg;
  ext_ref *ext_refflags;
};

/* 4963 */
typedef void (*m_ext_free_func_t)(caddr_t, u_int, caddr_t);

/* 4964 */
struct ext_ref
{
  mbuf *paired;
  u_int16_t minref;
  u_int16_t refcnt;
  u_int16_t prefcnt;
  u_int16_t flags;
  u_int32_t priv;
  uintptr_t ext_token;
};

/* 4965 */
struct nfs_dir_buf_header
{
  uint16_t ndbh_flags;
  uint16_t ndbh_count;
  uint32_t_0 ndbh_entry_end;
  uint32_t_0 ndbh_ncgen;
  uint32_t_0 ndbh_pad;
};

/* 4966 */
struct __attribute__((aligned(4))) direntry
{
  __uint64_t d_ino;
  __uint64_t d_seekoff;
  __uint16_t d_reclen;
  __uint16_t d_namlen;
  __uint8_t d_type;
  char d_name[1024];
};

/* 4967 */
struct nfs_dulookup
{
  int du_flags;
  componentname du_cn;
  nfsreq du_req;
  char du_smallname[48];
};

/* 4968 */
struct vnop_getattr_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  vnode_attr *a_vap;
  vfs_context_t a_context;
};

/* 4969 */
struct vnodeop_desc
{
  int vdesc_offset;
  const char *vdesc_name;
  int vdesc_flags;
  int *vdesc_vp_offsets;
  int vdesc_vpp_offset;
  int vdesc_cred_offset;
  int vdesc_proc_offset;
  int vdesc_componentname_offset;
  int vdesc_context_offset;
  caddr_t *vdesc_transports;
};

/* 4970 */
struct kauth_acl_eval
{
  kauth_ace_t ae_acl;
  int ae_count;
  kauth_ace_rights_t ae_requested;
  kauth_ace_rights_t ae_residual;
  int ae_result;
  boolean_t ae_found_deny;
  int ae_options;
  kauth_ace_rights_t ae_exp_gall;
  kauth_ace_rights_t ae_exp_gread;
  kauth_ace_rights_t ae_exp_gwrite;
  kauth_ace_rights_t ae_exp_gexec;
};

/* 4971 */
typedef kauth_ace *kauth_ace_t;

/* 4972 */
struct vnop_access_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  int a_action;
  vfs_context_t a_context;
};

/* 4973 */
struct vnop_mmap_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  int a_fflags;
  vfs_context_t a_context;
};

/* 4974 */
struct vnop_mnomap_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  vfs_context_t a_context;
};

/* 4975 */
struct vnop_advlock_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  caddr_t a_id;
  int a_op;
  flock *a_fl;
  int a_flags;
  vfs_context_t a_context;
  timespec *a_timeout;
};

/* 4976 */
struct vnop_read_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  uio *a_uio;
  int a_ioflag;
  vfs_context_t a_context;
};

/* 4977 */
struct vnop_create_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vnode_attr *a_vap;
  vfs_context_t a_context;
};

/* 4978 */
struct vnop_mknod_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vnode_attr *a_vap;
  vfs_context_t a_context;
};

/* 4979 */
struct vnop_mkdir_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vnode_attr *a_vap;
  vfs_context_t a_context;
};

/* 4980 */
struct vnop_symlink_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vnode_attr *a_vap;
  char *a_target;
  vfs_context_t a_context;
};

/* 4981 */
struct vnop_link_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  vnode_t a_tdvp;
  componentname *a_cnp;
  vfs_context_t a_context;
};

/* 4982 */
struct vnop_rmdir_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t a_vp;
  componentname *a_cnp;
  vfs_context_t a_context;
};

/* 4983 */
struct vnop_remove_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t a_vp;
  componentname *a_cnp;
  int a_flags;
  vfs_context_t a_context;
};

/* 4984 */
struct vnop_getxattr_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  const char *a_name;
  uio_t a_uio;
  size_t_0 *a_size;
  int a_options;
  vfs_context_t a_context;
};

/* 4985 */
struct vnop_setxattr_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  const char *a_name;
  uio_t a_uio;
  int a_options;
  vfs_context_t a_context;
};

/* 4986 */
struct vnop_write_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  uio *a_uio;
  int a_ioflag;
  vfs_context_t a_context;
};

/* 4987 */
struct vnop_removexattr_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  const char *a_name;
  int a_options;
  vfs_context_t a_context;
};

/* 4988 */
struct vnop_listxattr_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  uio_t a_uio;
  size_t_0 *a_size;
  int a_options;
  vfs_context_t a_context;
};

/* 4989 */
struct vnop_getnamedstream_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  vnode_t *a_svpp;
  const char *a_name;
  nsoperation a_operation;
  int a_flags;
  vfs_context_t a_context;
};

/* 4990 */
struct vnop_makenamedstream_args
{
  vnodeop_desc *a_desc;
  vnode_t *a_svpp;
  vnode_t a_vp;
  const char *a_name;
  int a_flags;
  vfs_context_t a_context;
};

/* 4991 */
struct vnop_removenamedstream_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  vnode_t a_svp;
  const char *a_name;
  int a_flags;
  vfs_context_t a_context;
};

/* 4992 */
struct rpc_call
{
  u_int32_t rp_xid;
  int32_t rp_direction;
  u_int32_t rp_rpcvers;
  u_int32_t rp_prog;
  u_int32_t rp_vers;
  u_int32_t rp_proc;
  auth_info rp_auth;
  auth_info rp_verf;
};

/* 4993 */
struct auth_info
{
  u_int32_t rp_atype;
  u_int32_t rp_alen;
};

/* 4994 */
struct krpc_portmap::sdata
{
  u_int32_t prog;
  u_int32_t vers;
  u_int32_t proto;
  u_int32_t port;
};

/* 4995 */
struct krpc_portmap::rdata
{
  u_int16_t pad;
  u_int16_t port;
};

/* 4996 */
struct sockaddr_in
{
  __uint8_t sin_len;
  sa_family_t sin_family;
  in_port_t sin_port;
  in_addr sin_addr;
  char sin_zero[8];
};

/* 4997 */
struct proc_0
{
  proc_0::$60CE14A44854DC025BD173E2D97B9222 p_list;
  void *task;
  proc_0 *p_pptr;
  pid_t p_ppid;
  pid_t p_pgrpid;
  uid_t p_uid;
  gid_t p_gid;
  uid_t p_ruid;
  gid_t p_rgid;
  uid_t p_svuid;
  gid_t p_svgid;
  uint64_t_0 p_uniqueid;
  uint64_t_0 p_puniqueid;
  lck_mtx_t p_mlock;
  pid_t p_pid;
  char p_stat;
  char p_shutdownstate;
  char p_kdebug;
  char p_btrace;
  proc_0::$60CE14A44854DC025BD173E2D97B9222 p_pglist;
  proc_0::$60CE14A44854DC025BD173E2D97B9222 p_sibling;
  proc_0::$0F6F979E8362692E42B9C9C8247CE3DD p_children;
  proc::$2F8731EE5CEE647440942FF11E8E160C p_uthlist;
  proc_0::$60CE14A44854DC025BD173E2D97B9222 p_hash;
  proc_0::$1D3E450C18944DBC95A59288B453C62E p_evlist;
  lck_mtx_t p_fdmlock;
  lck_mtx_t p_ucred_mlock;
  kauth_cred_t p_ucred;
  filedesc *p_fd;
  pstats *p_stats;
  plimit *p_limit;
  sigacts *p_sigacts;
  lck_spin_t p_slock;
  plimit *p_olimit;
  int p_siglist;
  unsigned int p_flag;
  unsigned int p_lflag;
  unsigned int p_listflag;
  unsigned int p_ladvflag;
  int p_refcount;
  int p_childrencnt;
  int p_parentref;
  pid_t p_oppid;
  u_int p_xstat;
  itimerval p_realtimer;
  timeval p_rtime;
  itimerval p_vtimer_user;
  itimerval p_vtimer_prof;
  timeval p_rlim_cpu;
  int p_debugger;
  boolean_t sigwait;
  void *sigwait_thread;
  void *exit_thread;
  void *p_vforkact;
  int p_vforkcnt;
  int p_fpdrainwait;
  pid_t si_pid;
  u_int si_status;
  u_int si_code;
  uid_t si_uid;
  void *vm_shm;
  user_addr_t p_dtrace_argv;
  user_addr_t p_dtrace_envp;
  lck_mtx_t p_dtrace_sprlock;
  uint8_t_0 p_dtrace_stop;
  int p_dtrace_probes;
  u_int p_dtrace_count;
  dtrace_ptss_page *p_dtrace_ptss_pages;
  dtrace_ptss_page_entry *p_dtrace_ptss_free_list;
  dtrace_helpers *p_dtrace_helpers;
  dof_ioctl_data *p_dtrace_lazy_dofs;
  u_int p_argslen;
  int p_argc;
  user_addr_t user_stack;
  vnode *p_textvp;
  off_t p_textoff;
  sigset_t p_sigmask;
  sigset_t p_sigignore;
  sigset_t p_sigcatch;
  u_char p_priority;
  u_char p_resv0;
  char p_nice;
  u_char p_resv1;
  command_t p_comm;
  proc_name_t p_name;
  uint8_t_0 p_xhighbits;
  pid_t p_contproc;
  pgrp *p_pgrp;
  uint32_t_0 p_csflags;
  uint32_t_0 p_pcaction;
  uint8_t_0 p_uuid[16];
  cpu_type_t p_cputype;
  cpu_subtype_t p_cpusubtype;
  int p_aio_total_count;
  int p_aio_active_count;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_activeq;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_doneq;
  klist p_klist;
  rusage_superset *p_ru;
  thread_t p_signalholder;
  thread_t p_transholder;
  int p_sigwaitcnt;
  u_short p_acflag;
  volatile u_short p_vfs_iopolicy;
  user_addr_t p_threadstart;
  user_addr_t p_wqthread;
  int p_pthsize;
  uint32_t_0 p_pth_tsd_offset;
  user_addr_t p_stack_addr_hint;
  workqueue *p_wqptr;
  timeval p_start;
  void *p_rcall;
  int p_ractive;
  int p_idversion;
  void *p_pthhash;
  volatile uint64_t_0 was_throttled;
  volatile uint64_t_0 did_throttle;
  uint64_t_0 p_dispatchqueue_offset;
  uint64_t_0 p_dispatchqueue_serialno_offset;
  uint64_t_0 p_return_to_kernel_offset;
  uint64_t_0 p_mach_thread_self_offset;
  timeval vm_pressure_last_notify_tstamp;
  proc_0::$A840CD7507C70B21D2141DD49A5EDDFC p_memstat_list;
  uint32_t_0 p_memstat_state;
  int32_t p_memstat_effectivepriority;
  int32_t p_memstat_requestedpriority;
  uint32_t_0 p_memstat_dirty;
  uint64_t_0 p_memstat_userdata;
  uint64_t_0 p_memstat_idledeadline;
  uint64_t_0 p_memstat_idle_start;
  uint64_t_0 p_memstat_idle_delta;
  int32_t p_memstat_memlimit;
  int32_t p_memstat_memlimit_active;
  int32_t p_memstat_memlimit_inactive;
  pid_t p_responsible_pid;
  uint32_t_0 p_user_faults;
  os_reason *p_exit_reason;
  uint64_t_0 p_user_data;
};

/* 4998 */
struct proc_0::$60CE14A44854DC025BD173E2D97B9222
{
  proc_0 *le_next;
  proc_0 **le_prev;
};

/* 4999 */
struct proc_0::$0F6F979E8362692E42B9C9C8247CE3DD
{
  proc_0 *lh_first;
};

/* 5000 */
struct proc::$2F8731EE5CEE647440942FF11E8E160C
{
  uthread *tqh_first;
  uthread **tqh_last;
};

/* 5001 */
struct proc_0::$1D3E450C18944DBC95A59288B453C62E
{
  eventqelt *tqh_first;
  eventqelt **tqh_last;
};

/* 5002 */
struct eventqelt::$E1FA208D562111C362654304BB6027AF
{
  eventqelt *tqe_next;
  eventqelt **tqe_prev;
};

/* 5003 */
struct eventreq64
{
  int er_type;
  int er_handle;
  user_addr_t er_data;
  int er_rcnt;
  int er_wcnt;
  int er_ecnt;
  int er_eventbits;
};

/* 5004 */
struct proc_0::$A840CD7507C70B21D2141DD49A5EDDFC
{
  proc_0 *tqe_next;
  proc_0 **tqe_prev;
};

/* 5005 */
struct protosw
{
  protosw::$64C27CCC3A3F312BFFFB09F15ECB9957 pr_entry;
  domain *pr_domain;
  protosw *pr_protosw;
  u_int16_t pr_type;
  u_int16_t pr_protocol;
  u_int32_t pr_flags;
  void (*pr_input)(mbuf *, int);
  int (*pr_output)(mbuf *, socket *);
  void (*pr_ctlinput)(int, sockaddr *, void *, ifnet *);
  int (*pr_ctloutput)(socket *, sockopt *);
  pr_usrreqs *pr_usrreqs;
  void (*pr_init)(protosw *, domain *);
  void (*pr_drain)(void);
  int (*pr_sysctl)(int *, u_int, void *, size_t_0 *, void *, size_t_0);
  int (*pr_lock)(socket *, int, void *);
  int (*pr_unlock)(socket *, int, void *);
  lck_mtx_t *(*pr_getlock)(socket *, int);
  protosw::$CCE26F19DBDD725D9D5747443CBC5977 pr_filter_head;
  protosw_old *pr_old;
};

/* 5006 */
struct socket::$9D89CC94B11A0FF876168353A730EE4F
{
  socket *tqh_first;
  socket **tqh_last;
};

/* 5007 */
struct socket::$687715D332D6AF1F0E01B97B6A23A7EC
{
  socket *tqe_next;
  socket **tqe_prev;
};

/* 5008 */
struct sockbuf
{
  u_int32_t sb_cc;
  u_int32_t sb_hiwat;
  u_int32_t sb_mbcnt;
  u_int32_t sb_mbmax;
  u_int32_t sb_ctl;
  u_int32_t sb_lowat;
  mbuf *sb_mb;
  mbuf *sb_mbtail;
  mbuf *sb_lastrecord;
  socket *sb_so;
  selinfo sb_sel;
  timeval sb_timeo;
  u_int32_t sb_flags;
  u_int32_t sb_idealsize;
  void (*sb_upcall)(socket *, void *, int);
  void *sb_upcallarg;
  u_int32_t sb_wantlock;
  u_int32_t sb_waiters;
  thread_t sb_cfil_thread;
  u_int32_t sb_cfil_refs;
  u_int32_t sb_preconn_hiwat;
};

/* 5009 */
typedef u_quad_t so_gen_t;

/* 5010 */
struct socket::$1D3E450C18944DBC95A59288B453C62E
{
  eventqelt *tqh_first;
  eventqelt **tqh_last;
};

/* 5011 */
struct socket::$DAB1A3991A01A82A8AA10B6CC8F36874
{
  socket *stqe_next;
};

/* 5012 */
struct socket_filter_entry
{
  socket_filter_entry *sfe_next_onsocket;
  socket_filter_entry *sfe_next_onfilter;
  socket_filter_entry *sfe_next_oncleanup;
  socket_filter *sfe_filter;
  socket *sfe_socket;
  void *sfe_cookie;
  uint32_t_0 sfe_flags;
  int32_t sfe_refcount;
};

/* 5013 */
struct data_stats
{
  u_int64_t rxpackets;
  u_int64_t rxbytes;
  u_int64_t txpackets;
  u_int64_t txbytes;
};

/* 5014 */
struct msg_state
{
  msg_priq msg_priq[4];
  u_int32_t msg_serial_bytes;
  u_int32_t msg_uno_bytes;
};

/* 5015 */
struct msg_priq
{
  mbuf *msgq_head;
  mbuf *msgq_tail;
  mbuf *msgq_lastmsg;
  u_int32_t msgq_flags;
  u_int32_t msgq_bytes;
};

/* 5016 */
struct flow_divert_pcb
{
  lck_mtx_t mtx;
  socket_t so;
  flow_divert_pcb::$7352A7C640BE48758D256F362AC3D5A4 rb_link;
  uint32_t_0 hash;
  mbuf_t connect_token;
  sockaddr *local_address;
  sockaddr *remote_address;
  uint32_t_0 flags;
  uint32_t_0 send_window;
  uint32_t_0 sb_size;
  flow_divert_group *group;
  uint32_t_0 control_group_unit;
  int32_t ref_count;
  uint32_t_0 bytes_written_by_app;
  uint32_t_0 bytes_read_by_app;
  uint32_t_0 bytes_sent;
  uint32_t_0 bytes_received;
  uint8_t_0 log_level;
  flow_divert_pcb::$966CA128DF01B7D4483DCAD1B65EE083 tmp_list_entry;
  mbuf_t connect_packet;
  uint8_t_0 *app_data;
  size_t_0 app_data_length;
};

/* 5017 */
struct cfil_info
{
  cfil_info::$82FF11EA697E4763DBF675A70142FBC3 cfi_link;
  socket *cfi_so;
  uint64_t_0 cfi_flags;
  uint64_t_0 cfi_sock_id;
  timeval64 cfi_first_event;
  uint32_t_0 cfi_op_list_ctr;
  uint32_t_0 cfi_op_time[6];
  unsigned __int8 cfi_op_list[6];
  cfi_buf cfi_snd;
  cfi_buf cfi_rcv;
  cfil_entry cfi_entries[2];
  cfil_hash_entry *cfi_hash_entry;
};

/* 5018 */
struct cfil_db
{
  socket *cfdb_so;
  uint32_t_0 cfdb_count;
  cfilhashhead *cfdb_hashbase;
  u_long cfdb_hashmask;
  cfil_hash_entry *cfdb_only_entry;
};

/* 5019 */
struct msghdr
{
  void *msg_name;
  socklen_t msg_namelen;
  iovec *msg_iov;
  int msg_iovlen;
  void *msg_control;
  socklen_t msg_controllen;
  int msg_flags;
};

/* 5020 */
typedef __darwin_socklen_t socklen_t;

/* 5021 */
typedef __uint32_t __darwin_socklen_t;

/* 5022 */
struct iovec
{
  void *iov_base;
  size_t_0 iov_len;
};

/* 5023 */
struct rpc_reply
{
  u_int32_t rp_xid;
  int32_t rp_direction;
  int32_t rp_astatus;
  rpc_reply::$F35D2E9CDD67FE71E84859F854F8DC15 rp_u;
};

/* 5024 */
union rpc_reply::$F35D2E9CDD67FE71E84859F854F8DC15
{
  u_int32_t rpu_errno;
  rpc_reply::$F35D2E9CDD67FE71E84859F854F8DC15::$5AD798C1607F411066F59CD0A54CEA96 rpu_ok;
};

/* 5025 */
struct rpc_reply::$F35D2E9CDD67FE71E84859F854F8DC15::$5AD798C1607F411066F59CD0A54CEA96
{
  auth_info rp_auth;
  u_int32_t rp_rstatus;
};

/* 5026 */
struct nfsbufhashhead
{
  nfsbuf *lh_first;
};

/* 5027 */
struct nfsbuffreehead
{
  nfsbuf *tqh_first;
  nfsbuf **tqh_last;
};

/* 5028 */
struct rpc_string
{
  u_int32_t len;
  u_char data[4];
};

/* 5029 */
struct bp_inaddr
{
  u_int32_t atype;
  int32_t addr[4];
};

/* 5030 */
struct $<6411529,1>::whoami_call
{
  u_int32_t call_prog;
  u_int32_t call_vers;
  u_int32_t call_proc;
  u_int32_t call_arglen;
  bp_inaddr call_ia;
};

/* 5031 */
struct $<6413414,1>::rdata
{
  u_int32_t errno;
  u_char data[68];
};

/* 5032 */
struct nfs_diskless
{
  nfs_dlmount nd_root;
  nfs_dlmount nd_private;
};

/* 5033 */
struct __attribute__((aligned(8))) nfs_dlmount
{
  sockaddr_in ndm_saddr;
  char ndm_host[256];
  char *ndm_path;
  char *ndm_mntfrom;
  u_int32_t ndm_nfsv3;
  u_int32_t ndm_sotype;
  u_int32_t ndm_fhlen;
  u_char ndm_fh[64];
};

/* 5034 */
struct nfs_gss_svc_ctx_hashhead
{
  nfs_gss_svc_ctx *lh_first;
};

/* 5035 */
struct __attribute__((aligned(8))) nfs_gss_svc_ctx
{
  lck_mtx_t *gss_svc_mtx;
  nfs_gss_svc_ctx::$851ADD651B4863FED83686A4EC30D8C7 gss_svc_entries;
  uint32_t_0 gss_svc_handle;
  uint32_t_0 gss_svc_refcnt;
  uint32_t_0 gss_svc_proc;
  uid_t gss_svc_uid;
  gid_t gss_svc_gids[16];
  uint32_t_0 gss_svc_ngroups;
  uint64_t_0 gss_svc_incarnation;
  uint32_t_0 gss_svc_seqmax;
  uint32_t_0 gss_svc_seqwin;
  uint32_t_0 *gss_svc_seqbits;
  gssd_cred gss_svc_cred_handle;
  gssd_ctx gss_svc_context;
  gss_ctx_id_t gss_svc_ctx_id;
  u_char *gss_svc_token;
  uint32_t_0 gss_svc_tokenlen;
  uint32_t_0 gss_svc_major;
  uint32_t_0 gss_svc_minor;
};

/* 5036 */
struct nfs_gss_svc_ctx::$851ADD651B4863FED83686A4EC30D8C7
{
  nfs_gss_svc_ctx *le_next;
  nfs_gss_svc_ctx **le_prev;
};

/* 5037 */
typedef gss_buffer_desc_struct gss_buffer_desc;

/* 5038 */
struct gss_buffer_desc_struct
{
  size_t_0 length;
  void *value;
};

/* 5039 */
typedef uint32_t_0 gss_qop_t;

/* 5040 */
struct nfsrv_descript
{
  u_quad_t nd_time;
  off_t nd_off;
  off_t nd_eoff;
  nfsrv_descript::$31F1C19E1609828734A61F5685B5EF26 nd_hash;
  nfsrv_descript::$31F1C19E1609828734A61F5685B5EF26 nd_tq;
  nfsrv_descript::$F60DA902E6FB625746E5C14388F465F7 nd_coalesce;
  nfsm_chain nd_nmreq;
  mbuf_t nd_mrep;
  mbuf_t nd_nam;
  mbuf_t nd_nam2;
  u_int32_t nd_procnum;
  int nd_stable;
  int nd_vers;
  int nd_len;
  int nd_repstat;
  u_int32_t nd_retxid;
  timeval nd_starttime;
  nfs_filehandle nd_fh;
  uint32_t_0 nd_sec;
  nfs_gss_svc_ctx *nd_gss_context;
  uint32_t_0 nd_gss_seqnum;
  mbuf_t nd_gss_mb;
  kauth_cred_t nd_cr;
};

/* 5041 */
struct nfsrv_descript::$31F1C19E1609828734A61F5685B5EF26
{
  nfsrv_descript *le_next;
  nfsrv_descript **le_prev;
};

/* 5042 */
struct nfsrv_descript::$F60DA902E6FB625746E5C14388F465F7
{
  nfsrv_descript *lh_first;
};

/* 5043 */
struct nfs_filehandle
{
  uint32_t_0 nfh_len;
  nfs_exphandle nfh_xh;
  unsigned __int8 nfh_fid[112];
  unsigned __int8 *nfh_fhp;
};

/* 5044 */
struct nfs_exphandle
{
  uint32_t_0 nxh_version;
  uint32_t_0 nxh_fsid;
  uint32_t_0 nxh_expid;
  uint16_t nxh_flags;
  uint8_t_0 nxh_reserved;
  uint8_t_0 nxh_fidlen;
};

/* 5045 */
struct __attribute__((aligned(8))) user_nfs_gss_principal
{
  uint32_t_0 princlen;
  uint32_t_0 nametype;
  user64_addr_t principal;
  uint32_t_0 flags;
};

/* 5046 */
struct nfsrv_sock
{
  nfsrv_sock::$9421C6EF63EC3E9C4970B31CA9C04890 ns_chain;
  nfsrv_sock::$9421C6EF63EC3E9C4970B31CA9C04890 ns_svcq;
  nfsrv_sock::$9421C6EF63EC3E9C4970B31CA9C04890 ns_wgq;
  nfsrv_uc_arg *ns_ua;
  lck_rw_t ns_rwlock;
  socket_t ns_so;
  mbuf_t ns_nam;
  mbuf_t ns_raw;
  mbuf_t ns_rawend;
  mbuf_t ns_rec;
  mbuf_t ns_recend;
  mbuf_t ns_frag;
  int ns_flag;
  int ns_sotype;
  int ns_cc;
  int ns_reclen;
  int ns_reccnt;
  u_int32_t ns_sref;
  time_t ns_timestamp;
  lck_mtx_t ns_wgmutex;
  u_quad_t ns_wgtime;
  nfsrv_sock::$F60DA902E6FB625746E5C14388F465F7 ns_tq;
  nfsrv_wg_delayhash ns_wdelayhashtbl[16];
};

/* 5047 */
struct nfsrv_sock::$9421C6EF63EC3E9C4970B31CA9C04890
{
  nfsrv_sock *tqe_next;
  nfsrv_sock **tqe_prev;
};

/* 5048 */
struct __attribute__((aligned(8))) nfsrv_uc_arg
{
  nfsrv_uc_arg::$0349784536E7C4E19B93F060938EA36F nua_svcq;
  socket_t nua_so;
  nfsrv_sock *nua_slp;
  int nua_waitflag;
  uint32_t_0 nua_flags;
  uint32_t_0 nua_qi;
};

/* 5049 */
struct nfsrv_sock::$F60DA902E6FB625746E5C14388F465F7
{
  nfsrv_descript *lh_first;
};

/* 5050 */
struct nfsrv_wg_delayhash
{
  nfsrv_descript *lh_first;
};

/* 5051 */
typedef nfs_lock_msg_queue LOCKD_MSG_QUEUE;

/* 5052 */
struct nfs_lock_msg_queue
{
  nfs_lock_msg_request *tqh_first;
  nfs_lock_msg_request **tqh_last;
};

/* 5053 */
struct nfs_lock_msg_request
{
  nfs_lock_msg_request::$E7BF0CA2AC5FC8831B9B38F036E97987 lmr_next;
  int lmr_answered;
  int lmr_errno;
  int lmr_saved_errno;
  LOCKD_MSG lmr_msg;
};

/* 5054 */
struct nfs_lock_msg_request::$E7BF0CA2AC5FC8831B9B38F036E97987
{
  nfs_lock_msg_request *tqe_next;
  nfs_lock_msg_request **tqe_prev;
};

/* 5055 */
typedef nfs_lock_msg LOCKD_MSG;

/* 5056 */
struct nfs_lock_msg
{
  int lm_version;
  int lm_flags;
  u_int64_t lm_xid;
  flock lm_fl;
  sockaddr_storage lm_addr;
  int lm_fh_len;
  xucred lm_cred;
  u_int8_t lm_fh[64];
};

/* 5057 */
struct xucred
{
  u_int cr_version;
  uid_t cr_uid;
  __int16 cr_ngroups;
  gid_t cr_groups[16];
};

/* 5058 */
struct nfs_lockd_mount_list
{
  nfsmount *tqh_first;
  nfsmount **tqh_last;
};

/* 5059 */
struct fileglob::$6F9AD2542AAC309208990354E0BC2E77
{
  fileglob *le_next;
  fileglob **le_prev;
};

/* 5060 */
struct fileops
{
  file_type_t fo_type;
  int (*fo_read)(fileproc *, uio *, int, vfs_context_t);
  int (*fo_write)(fileproc *, uio *, int, vfs_context_t);
  int (*fo_ioctl)(fileproc *, u_long, caddr_t, vfs_context_t);
  int (*fo_select)(fileproc *, int, void *, vfs_context_t);
  int (*fo_close)(fileglob *, vfs_context_t);
  int (*fo_kqfilter)(fileproc *, knote *, kevent_internal_s *, vfs_context_t);
  int (*fo_drain)(fileproc *, vfs_context_t);
};

/* 5061 */
enum file_type_t : __int32
{
  DTYPE_VNODE = 0x1,
  DTYPE_SOCKET = 0x2,
  DTYPE_PSXSHM = 0x3,
  DTYPE_PSXSEM = 0x4,
  DTYPE_KQUEUE = 0x5,
  DTYPE_PIPE = 0x6,
  DTYPE_FSEVENTS = 0x7,
  DTYPE_ATALK = 0x8,
  DTYPE_NETPOLICY = 0x9,
  DTYPE_CHANNEL = 0xA,
  DTYPE_NEXUS = 0xB,
};

/* 5062 */
typedef nfs_lock_msg_request LOCKD_MSG_REQUEST;

/* 5063 */
struct __attribute__((aligned(8))) lockd_ans
{
  int la_version;
  int la_errno;
  u_int64_t la_xid;
  int la_flags;
  pid_t la_pid;
  off_t la_start;
  off_t la_len;
  int la_fh_len;
  u_int8_t la_fh[64];
};

/* 5064 */
struct lockd_notify
{
  int ln_version;
  int ln_flags;
  int ln_pad;
  int ln_addrcount;
  sockaddr_storage ln_addr[1];
};

/* 5065 */
struct nfsnodehashhead
{
  nfsnode *lh_first;
};

/* 5066 */
struct __attribute__((aligned(8))) vnode_fsparam
{
  mount *vnfs_mp;
  vtype vnfs_vtype;
  const char *vnfs_str;
  vnode *vnfs_dvp;
  void *vnfs_fsnode;
  int (**vnfs_vops)(void *);
  int vnfs_markroot;
  int vnfs_marksystem;
  dev_t vnfs_rdev;
  off_t vnfs_filesize;
  componentname *vnfs_cnp;
  uint32_t_0 vnfs_flags;
};

/* 5067 */
struct __attribute__((aligned(8))) vnode_trigger_param
{
  vnode_fsparam vnt_params;
  trigger_vnode_resolve_callback_t vnt_resolve_func;
  trigger_vnode_unresolve_callback_t vnt_unresolve_func;
  trigger_vnode_rearm_callback_t vnt_rearm_func;
  trigger_vnode_reclaim_callback_t vnt_reclaim_func;
  void *vnt_data;
  uint32_t_0 vnt_flags;
};

/* 5068 */
struct vnop_inactive_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  vfs_context_t a_context;
};

/* 5069 */
struct vnop_reclaim_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  vfs_context_t a_context;
};

/* 5070 */
struct nfsrv_export_hashhead
{
  nfs_export *lh_first;
};

/* 5071 */
struct nfs_export
{
  nfs_export::$029B5138670442C6C383FBF99D6CD226 nx_next;
  nfs_export::$029B5138670442C6C383FBF99D6CD226 nx_hash;
  nfs_export *nx_parent;
  uint32_t_0 nx_id;
  uint32_t_0 nx_flags;
  nfs_exportfs *nx_fs;
  char *nx_path;
  nfs_filehandle nx_fh;
  nfs_export_options nx_defopt;
  uint32_t_0 nx_expcnt;
  radix_node_head *nx_rtable[41];
  nfs_export_stat_counters nx_stats;
  nfs_active_user_list nx_user_list;
  timeval nx_exptime;
};

/* 5072 */
struct nfs_export::$029B5138670442C6C383FBF99D6CD226
{
  nfs_export *le_next;
  nfs_export **le_prev;
};

/* 5073 */
struct nfs_exportfs
{
  nfs_exportfs::$953D6DD49ED043437D9CAAA0348F63D1 nxfs_next;
  uint32_t_0 nxfs_id;
  char *nxfs_path;
  nfs_exportfs::$837DAB558D10C3E2C31B4FCBCE7B6FC9 nxfs_exports;
};

/* 5074 */
struct nfs_exportfs::$953D6DD49ED043437D9CAAA0348F63D1
{
  nfs_exportfs *le_next;
  nfs_exportfs **le_prev;
};

/* 5075 */
struct nfs_exportfs::$837DAB558D10C3E2C31B4FCBCE7B6FC9
{
  nfs_export *lh_first;
};

/* 5076 */
struct nfs_export_options
{
  uint32_t_0 nxo_flags;
  kauth_cred_t nxo_cred;
  nfs_sec nxo_sec;
};

/* 5077 */
struct __attribute__((aligned(8))) radix_node_head
{
  radix_node *rnh_treetop;
  int rnh_addrsize;
  int rnh_pktsize;
  radix_node *(*rnh_addaddr)(void *, void *, radix_node_head *, radix_node *);
  radix_node *(*rnh_addpkt)(void *, void *, radix_node_head *, radix_node *);
  radix_node *(*rnh_deladdr)(void *, void *, radix_node_head *);
  radix_node *(*rnh_delpkt)(void *, void *, radix_node_head *);
  radix_node *(*rnh_matchaddr)(void *, radix_node_head *);
  radix_node *(*rnh_matchaddr_args)(void *, radix_node_head *, rn_matchf_t *, void *);
  radix_node *(*rnh_lookup)(void *, void *, radix_node_head *);
  radix_node *(*rnh_lookup_args)(void *, void *, radix_node_head *, rn_matchf_t *, void *);
  radix_node *(*rnh_matchpkt)(void *, radix_node_head *);
  int (*rnh_walktree)(radix_node_head *, walktree_f_t *, void *);
  int (*rnh_walktree_from)(radix_node_head *, void *, void *, walktree_f_t *, void *);
  void (*rnh_close)(radix_node *, radix_node_head *);
  radix_node rnh_nodes[3];
  int rnh_cnt;
};

/* 5078 */
typedef int rn_matchf_t(radix_node *, void *);

/* 5079 */
typedef int walktree_f_t(radix_node *, void *);

/* 5080 */
struct nfs_export_stat_counters
{
  nfsstatcount64 ops;
  nfsstatcount64 bytes_read;
  nfsstatcount64 bytes_written;
};

/* 5081 */
struct nfsstatcount64
{
  uint32_t_0 hi;
  uint32_t_0 lo;
};

/* 5082 */
struct nfs_active_user_list
{
  nfs_user_stat_lru_head user_lru;
  nfs_user_stat_hashtbl_head user_hashtbl[16];
  uint32_t_0 node_count;
  lck_mtx_t user_mutex;
};

/* 5083 */
struct nfs_user_stat_lru_head
{
  nfs_user_stat_node *tqh_first;
  nfs_user_stat_node **tqh_last;
};

/* 5084 */
struct nfs_user_stat_node
{
  nfs_user_stat_node::$94965C1C0E161585124D32C4FC198CEF lru_link;
  nfs_user_stat_node::$4B52FAB29304EF24B74A96C20383208B hash_link;
  uid_t uid;
  sockaddr_storage sock;
  uint64_t_0 ops;
  uint64_t_0 bytes_read;
  uint64_t_0 bytes_written;
  uint32_t_0 tm_start;
  uint32_t_0 tm_last;
};

/* 5085 */
struct nfs_user_stat_node::$94965C1C0E161585124D32C4FC198CEF
{
  nfs_user_stat_node *tqe_next;
  nfs_user_stat_node **tqe_prev;
};

/* 5086 */
struct nfs_user_stat_node::$4B52FAB29304EF24B74A96C20383208B
{
  nfs_user_stat_node *le_next;
  nfs_user_stat_node **le_prev;
};

/* 5087 */
struct nfs_user_stat_hashtbl_head
{
  nfs_user_stat_node *lh_first;
};

/* 5088 */
typedef int (*nfsrv_proc_t)(nfsrv_descript *, nfsrv_sock *, vfs_context_t, mbuf_t *);

/* 5089 */
struct nfsd_head
{
  nfsd *tqh_first;
  nfsd **tqh_last;
};

/* 5090 */
struct nfsd
{
  nfsd::$D5316157F0296F457BE42AA0034B06DB nfsd_chain;
  nfsd::$D5316157F0296F457BE42AA0034B06DB nfsd_queue;
  int nfsd_flag;
  nfsrv_sock *nfsd_slp;
  nfsrv_descript *nfsd_nd;
};

/* 5091 */
struct nfsd::$D5316157F0296F457BE42AA0034B06DB
{
  nfsd *tqe_next;
  nfsd **tqe_prev;
};

/* 5092 */
struct nfsrv_sockhead
{
  nfsrv_sock *tqh_first;
  nfsrv_sock **tqh_last;
};

/* 5093 */
struct nfsrv_expfs_list
{
  nfs_exportfs *lh_first;
};

/* 5094 */
struct nfsrv_fmod_hashhead
{
  nfsrv_fmod *lh_first;
};

/* 5095 */
struct nfsrv_fmod
{
  nfsrv_fmod::$3CF17F250C60FC5B082147114D5F19BB fm_link;
  vnode_t fm_vp;
  vfs_context fm_context;
  uint64_t_0 fm_deadline;
};

/* 5096 */
struct nfsrv_fmod::$3CF17F250C60FC5B082147114D5F19BB
{
  nfsrv_fmod *le_next;
  nfsrv_fmod **le_prev;
};

/* 5097 */
typedef fse_info fse_info_0;

/* 5098 */
struct fse_info
{
  ino64_t ino;
  dev_t dev;
  int32_t mode;
  uid_t uid;
  gid_t gid;
  uint64_t_0 nlink;
};

/* 5099 */
struct protosw::$64C27CCC3A3F312BFFFB09F15ECB9957
{
  protosw *tqe_next;
  protosw **tqe_prev;
};

/* 5100 */
struct domain
{
  int dom_family;
  uint32_t_0 dom_flags;
  uint32_t_0 dom_refs;
  lck_mtx_t *dom_mtx;
  lck_mtx_t dom_mtx_s;
  domain::$47FB2B0DEA88664F1A5A167A75F5058E dom_entry;
  domain::$2E79F0E06AD8FC2AAD87BBFFCFB17C31 dom_protosw;
  void (*dom_init)(domain *);
  int (*dom_externalize)(mbuf *);
  void (*dom_dispose)(mbuf *);
  int (*dom_rtattach)(void **, int);
  int dom_rtoffset;
  int dom_maxrtkey;
  int dom_protohdrlen;
  const char *dom_name;
  domain_old *dom_old;
};

/* 5101 */
struct domain::$47FB2B0DEA88664F1A5A167A75F5058E
{
  domain *tqe_next;
  domain **tqe_prev;
};

/* 5102 */
struct domain::$2E79F0E06AD8FC2AAD87BBFFCFB17C31
{
  protosw *tqh_first;
  protosw **tqh_last;
};

/* 5103 */
struct domain_old
{
  int dom_family;
  __attribute__((packed)) __attribute__((aligned(1))) const char *dom_name;
  __attribute__((packed)) void (*dom_init)(void) __attribute__((aligned(1)));
  __attribute__((packed)) int (*dom_externalize)(mbuf *) __attribute__((aligned(1)));
  __attribute__((packed)) void (*dom_dispose)(mbuf *) __attribute__((aligned(1)));
  __attribute__((packed)) __attribute__((aligned(1))) protosw_old *dom_protosw;
  __attribute__((packed)) __attribute__((aligned(1))) domain_old *dom_next;
  __attribute__((packed)) int (*dom_rtattach)(void **, int) __attribute__((aligned(1)));
  int dom_rtoffset;
  int dom_maxrtkey;
  int dom_protohdrlen;
  int dom_refs;
  __attribute__((packed)) __attribute__((aligned(1))) lck_mtx_t *dom_mtx;
  uint32_t_0 dom_flags;
  uint32_t_0 reserved[2];
};

/* 5104 */
struct protosw_old
{
  __int16 pr_type;
  __attribute__((packed)) __attribute__((aligned(4))) domain *pr_domain;
  __int16 pr_protocol;
  unsigned int pr_flags;
  __attribute__((packed)) void (*pr_input)(mbuf *, int) __attribute__((aligned(1)));
  __attribute__((packed)) int (*pr_output)(mbuf *, socket *) __attribute__((aligned(1)));
  __attribute__((packed)) void (*pr_ctlinput)(int, sockaddr *, void *, ifnet *) __attribute__((aligned(1)));
  __attribute__((packed)) int (*pr_ctloutput)(socket *, sockopt *) __attribute__((aligned(1)));
  __attribute__((packed)) __attribute__((aligned(1))) void *pr_ousrreq;
  __attribute__((packed)) void (*pr_init)(void) __attribute__((aligned(1)));
  __attribute__((packed)) void (*pr_unused)(void) __attribute__((aligned(1)));
  __attribute__((packed)) void (*pr_unused2)(void) __attribute__((aligned(1)));
  __attribute__((packed)) void (*pr_drain)(void) __attribute__((aligned(1)));
  __attribute__((packed)) int (*pr_sysctl)(int *, u_int, void *, size_t_0 *, void *, size_t_0) __attribute__((aligned(1)));
  __attribute__((packed)) __attribute__((aligned(1))) pr_usrreqs_old *pr_usrreqs;
  __attribute__((packed)) int (*pr_lock)(socket *, int, void *) __attribute__((aligned(1)));
  __attribute__((packed)) int (*pr_unlock)(socket *, int, void *) __attribute__((aligned(1)));
  __attribute__((packed)) lck_mtx_t *(*pr_getlock)(socket *, int) __attribute__((aligned(1)));
  __attribute__((packed)) __attribute__((aligned(1))) protosw_old::$CCE26F19DBDD725D9D5747443CBC5977 pr_filter_head;
  __attribute__((packed)) __attribute__((aligned(1))) protosw_old *pr_next;
  u_int32_t reserved[1];
};

/* 5105 */
struct sockopt
{
  sopt_dir sopt_dir;
  int sopt_level;
  int sopt_name;
  user_addr_t sopt_val;
  size_t_0 sopt_valsize;
  proc *sopt_p;
};

/* 5106 */
enum sopt_dir : __int32
{
  SOPT_GET = 0x0,
  SOPT_SET = 0x1,
};

/* 5107 */
struct pr_usrreqs_old
{
  int (*pru_abort)(socket *);
  int (*pru_accept)(socket *, sockaddr **);
  int (*pru_attach)(socket *, int, proc *);
  int (*pru_bind)(socket *, sockaddr *, proc *);
  int (*pru_connect)(socket *, sockaddr *, proc *);
  int (*pru_connect2)(socket *, socket *);
  int (*pru_control)(socket *, u_long, caddr_t, ifnet *, proc *);
  int (*pru_detach)(socket *);
  int (*pru_disconnect)(socket *);
  int (*pru_listen)(socket *, proc *);
  int (*pru_peeraddr)(socket *, sockaddr **);
  int (*pru_rcvd)(socket *, int);
  int (*pru_rcvoob)(socket *, mbuf *, int);
  int (*pru_send)(socket *, int, mbuf *, sockaddr *, mbuf *, proc *);
  int (*pru_sense)(socket *, void *, int);
  int (*pru_shutdown)(socket *);
  int (*pru_sockaddr)(socket *, sockaddr **);
  int (*pru_sosend)(socket *, sockaddr *, uio *, mbuf *, mbuf *, int);
  int (*pru_soreceive)(socket *, sockaddr **, uio *, mbuf **, mbuf **, int *);
  int (*pru_sopoll)(socket *, int, ucred *, void *);
};

/* 5108 */
struct protosw_old::$CCE26F19DBDD725D9D5747443CBC5977
{
  socket_filter *tqh_first;
  socket_filter **tqh_last;
};

/* 5109 */
struct __attribute__((aligned(8))) socket_filter
{
  socket_filter::$29DEED09B8CF87D935AF213D229FE320 sf_protosw_next;
  socket_filter::$29DEED09B8CF87D935AF213D229FE320 sf_global_next;
  socket_filter_entry *sf_entry_head;
  protosw *sf_proto;
  sflt_filter sf_filter;
  u_int32_t sf_refcount;
};

/* 5110 */
struct pr_usrreqs
{
  uint32_t_0 pru_flags;
  int (*pru_abort)(socket *);
  int (*pru_accept)(socket *, sockaddr **);
  int (*pru_attach)(socket *, int, proc *);
  int (*pru_bind)(socket *, sockaddr *, proc *);
  int (*pru_connect)(socket *, sockaddr *, proc *);
  int (*pru_connect2)(socket *, socket *);
  int (*pru_connectx)(socket *, sockaddr *, sockaddr *, proc *, uint32_t_0, sae_associd_t, sae_connid_t *, uint32_t_0, void *, uint32_t_0, uio *, user_ssize_t *);
  int (*pru_control)(socket *, u_long, caddr_t, ifnet *, proc *);
  int (*pru_detach)(socket *);
  int (*pru_disconnect)(socket *);
  int (*pru_disconnectx)(socket *, sae_associd_t, sae_connid_t);
  int (*pru_listen)(socket *, proc *);
  int (*pru_peeraddr)(socket *, sockaddr **);
  int (*pru_rcvd)(socket *, int);
  int (*pru_rcvoob)(socket *, mbuf *, int);
  int (*pru_send)(socket *, int, mbuf *, sockaddr *, mbuf *, proc *);
  int (*pru_send_list)(socket *, int, mbuf *, sockaddr *, mbuf *, proc *);
  int (*pru_sense)(socket *, void *, int);
  int (*pru_shutdown)(socket *);
  int (*pru_sockaddr)(socket *, sockaddr **);
  int (*pru_sopoll)(socket *, int, ucred *, void *);
  int (*pru_soreceive)(socket *, sockaddr **, uio *, mbuf **, mbuf **, int *);
  int (*pru_soreceive_list)(socket *, recv_msg_elem *, u_int, int *);
  int (*pru_sosend)(socket *, sockaddr *, uio *, mbuf *, mbuf *, int);
  int (*pru_sosend_list)(socket *, uio **, u_int, int);
  int (*pru_socheckopt)(socket *, sockopt *);
  int (*pru_preconnect)(socket *);
};

/* 5111 */
typedef __uint32_t sae_associd_t;

/* 5112 */
typedef __uint32_t sae_connid_t;

/* 5113 */
typedef int64_t user_ssize_t;

/* 5114 */
struct recv_msg_elem
{
  uio *uio;
  sockaddr *psa;
  mbuf *controlp;
  int which;
  int flags;
};

/* 5115 */
struct protosw::$CCE26F19DBDD725D9D5747443CBC5977
{
  socket_filter *tqh_first;
  socket_filter **tqh_last;
};

/* 5116 */
struct nfs4_cb_sock_list
{
  nfs_callback_socket *tqh_first;
  nfs_callback_socket **tqh_last;
};

/* 5117 */
struct __attribute__((aligned(8))) nfs_callback_socket
{
  nfs_callback_socket::$D6041ED9D3BBB7D534A4F7AD85D24D0B ncbs_link;
  socket_t ncbs_so;
  sockaddr_storage ncbs_saddr;
  nfs_rpc_record_state ncbs_rrs;
  time_t ncbs_stamp;
  uint32_t_0 ncbs_flags;
};

/* 5118 */
struct nfs_callback_socket::$D6041ED9D3BBB7D534A4F7AD85D24D0B
{
  nfs_callback_socket *tqe_next;
  nfs_callback_socket **tqe_prev;
};

/* 5119 */
struct nfs4_cb_mount_list
{
  nfsmount *tqh_first;
  nfsmount **tqh_last;
};

/* 5120 */
typedef session *tpr_t;

/* 5121 */
struct nfs_request_timer::nfs_mount_pokeq
{
  nfsmount *tqh_first;
  nfsmount **tqh_last;
};

/* 5122 */
typedef void (*sock_upcall)(socket_t, void *, int);

/* 5123 */
struct nfsrv_reqcache_hash
{
  nfsrvcache *lh_first;
};

/* 5124 */
struct __attribute__((aligned(4))) nfsrvcache
{
  nfsrvcache::$D257D9233C0176C98A0506AFDB83AC0B rc_lru;
  nfsrvcache::$029F1CCC66017293304712811048E5B6 rc_hash;
  u_int32_t rc_xid;
  nfsrvcache::$E2B9B46C5895CE76B055225110B338E1 rc_un;
  sa_family_t rc_family;
  nethostaddr rc_haddr;
  u_int32_t rc_proc;
  u_char rc_state;
  u_char rc_flag;
};

/* 5125 */
struct nfsrvcache::$D257D9233C0176C98A0506AFDB83AC0B
{
  nfsrvcache *tqe_next;
  nfsrvcache **tqe_prev;
};

/* 5126 */
struct nfsrvcache::$029F1CCC66017293304712811048E5B6
{
  nfsrvcache *le_next;
  nfsrvcache **le_prev;
};

/* 5127 */
union nfsrvcache::$E2B9B46C5895CE76B055225110B338E1
{
  mbuf_t ru_repmb;
  int ru_repstat;
};

/* 5128 */
union nethostaddr
{
  in_addr_t had_inetaddr;
  in6_addr had_inet6addr;
  mbuf_t had_nam;
};

/* 5129 */
struct nfsrv_reqcache_lru
{
  nfsrvcache *tqh_first;
  nfsrvcache **tqh_last;
};

/* 5130 */
struct nfsstats
{
  uint64_t_0 attrcache_hits;
  uint64_t_0 attrcache_misses;
  uint64_t_0 lookupcache_hits;
  uint64_t_0 lookupcache_misses;
  uint64_t_0 direofcache_hits;
  uint64_t_0 direofcache_misses;
  uint64_t_0 biocache_reads;
  uint64_t_0 read_bios;
  uint64_t_0 read_physios;
  uint64_t_0 biocache_writes;
  uint64_t_0 write_bios;
  uint64_t_0 write_physios;
  uint64_t_0 biocache_readlinks;
  uint64_t_0 readlink_bios;
  uint64_t_0 biocache_readdirs;
  uint64_t_0 readdir_bios;
  uint64_t_0 rpccnt[23];
  uint64_t_0 rpcretries;
  uint64_t_0 srvrpccnt[23];
  uint64_t_0 srvrpc_errs;
  uint64_t_0 srv_errs;
  uint64_t_0 rpcrequests;
  uint64_t_0 rpctimeouts;
  uint64_t_0 rpcunexpected;
  uint64_t_0 rpcinvalid;
  uint64_t_0 srvcache_inproghits;
  uint64_t_0 srvcache_idemdonehits;
  uint64_t_0 srvcache_nonidemdonehits;
  uint64_t_0 srvcache_misses;
  uint64_t_0 srvvop_writes;
  uint64_t_0 pageins;
  uint64_t_0 pageouts;
};

/* 5131 */
enum xdrbuf_type : __int32
{
  XDRBUF_BUFFER = 0x1,
};

/* 5132 */
struct nfs_netopt
{
  radix_node no_rnodes[2];
  nfs_export_options no_opt;
};

/* 5133 */
struct nfsrv_free_netopt_arg
{
  uint32_t_0 *cnt;
  radix_node_head *rnh;
};

/* 5134 */
typedef $AA37477D91567635C4C6CA10CF45E348 nfstype;

/* 5135 */
struct xdrbuf
{
  xdrbuf::$228AFBE5CD1C3ADAABE8A39D84CCF1EB xb_u;
  char *xb_ptr;
  size_t_0 xb_left;
  size_t_0 xb_growsize;
  xdrbuf_type_0 xb_type;
  uint32_t_0 xb_flags;
};

/* 5136 */
union xdrbuf::$228AFBE5CD1C3ADAABE8A39D84CCF1EB
{
  xdrbuf::$228AFBE5CD1C3ADAABE8A39D84CCF1EB::$AB71914F1B036A851C25859819099305 xb_buffer;
};

/* 5137 */
struct xdrbuf::$228AFBE5CD1C3ADAABE8A39D84CCF1EB::$AB71914F1B036A851C25859819099305
{
  char *xbb_base;
  uint32_t_0 xbb_size;
  uint32_t_0 xbb_len;
};

/* 5138 */
typedef xdrbuf_type xdrbuf_type_0;

/* 5139 */
struct user_nfs_export_args
{
  uint32_t_0 nxa_fsid;
  uint32_t_0 nxa_expid;
  user_addr_t nxa_fspath;
  user_addr_t nxa_exppath;
  uint32_t_0 nxa_flags;
  uint32_t_0 nxa_netcount;
  user_addr_t nxa_nets;
};

/* 5140 */
struct nfs_export_net_args
{
  uint32_t_0 nxna_flags;
  xucred nxna_cred;
  sockaddr_storage nxna_addr;
  sockaddr_storage nxna_mask;
  nfs_sec nxna_sec;
};

/* 5141 */
struct mbuf_stat
{
  u_int32_t mbufs;
  u_int32_t clusters;
  u_int32_t clfree;
  u_int32_t drops;
  u_int32_t wait;
  u_int32_t drain;
  u_short mtypes[256];
  u_int32_t mcfail;
  u_int32_t mpfail;
  u_int32_t msize;
  u_int32_t mclbytes;
  u_int32_t minclsize;
  u_int32_t mlen;
  u_int32_t mhlen;
  u_int32_t bigclusters;
  u_int32_t bigclfree;
  u_int32_t bigmclbytes;
};

/* 5142 */
enum idtype_t : __int32
{
  P_ALL = 0x0,
  P_PID = 0x1,
  P_PGID = 0x2,
};

/* 5143 */
typedef __darwin_id_t id_t;

/* 5144 */
typedef __uint32_t __darwin_id_t;

/* 5145 */
struct nfs_testmapid
{
  uint32_t_0 ntm_lookup;
  uint32_t_0 ntm_grpflag;
  uint32_t_0 ntm_id;
  uint32_t_0 pad;
  guid_t ntm_guid;
  char ntm_name[1024];
};

/* 5146 */
struct nfsclnt_args
{
  int flag;
  char flag_r_[4];
  user_addr_t argp;
  char argp_r_[];
};

/* 5147 */
struct getfh_args
{
  user_addr_t fname;
  user_addr_t fhp;
  char fhp_r_[];
};

/* 5148 */
struct fhopen_args
{
  user_addr_t u_fhp;
  int flags;
  char flags_r_[4];
};

/* 5149 */
struct nfssvc_args
{
  int flag;
  char flag_r_[4];
  user_addr_t argp;
  char argp_r_[];
};

/* 5150 */
struct __attribute__((aligned(8))) user_nfsd_args
{
  int sock;
  user_addr_t name;
  int namelen;
};

/* 5151 */
struct nfsd_args
{
  int sock;
  user32_addr_t name;
  int namelen;
};

/* 5152 */
struct nfs_export_args
{
  uint32_t_0 nxa_fsid;
  uint32_t_0 nxa_expid;
  user32_addr_t nxa_fspath;
  user32_addr_t nxa_exppath;
  uint32_t_0 nxa_flags;
  uint32_t_0 nxa_netcount;
  user32_addr_t nxa_nets;
};

/* 5153 */
struct nfsclientidlist
{
  nfs_client_id *tqh_first;
  nfs_client_id **tqh_last;
};

/* 5154 */
struct nfsiodlist
{
  nfsiod *tqh_first;
  nfsiod **tqh_last;
};

/* 5155 */
struct nfsiodmountlist
{
  nfsmount *tqh_first;
  nfsmount **tqh_last;
};

/* 5156 */
enum resolver_status : __int32
{
  RESOLVER_RESOLVED = 0x0,
  RESOLVER_NOCHANGE = 0x1,
  RESOLVER_UNRESOLVED = 0x2,
  RESOLVER_ERROR = 0x3,
  RESOLVER_STOP = 0x4,
};

/* 5157 */
struct nfs_sync_cargs
{
  vfs_context_t ctx;
  int waitfor;
  int error;
};

/* 5158 */
struct netfs_status
{
  u_int32_t ns_status;
  char ns_mountopts[512];
  uint32_t_0 ns_waittime;
  uint32_t_0 ns_threadcount;
  uint64_t_0 ns_threadids[];
};

/* 5159 */
struct user_nfs_args
{
  int version;
  user_addr_t addr;
  int addrlen;
  int sotype;
  int proto;
  user_addr_t fh;
  int fhsize;
  int flags;
  int wsize;
  int rsize;
  int readdirsize;
  int timeo;
  int retrans;
  int maxgrouplist;
  int readahead;
  int leaseterm;
  int deadthresh;
  user_addr_t hostname;
  int acregmin;
  int acregmax;
  int acdirmin;
  int acdirmax;
  uint32_t_0 auth;
  uint32_t_0 deadtimeout;
};

/* 5160 */
struct nfs_args
{
  int version;
  user32_addr_t addr;
  int addrlen;
  int sotype;
  int proto;
  user32_addr_t fh;
  int fhsize;
  int flags;
  int wsize;
  int rsize;
  int readdirsize;
  int timeo;
  int retrans;
  int maxgrouplist;
  int readahead;
  int leaseterm;
  int deadthresh;
  user32_addr_t hostname;
  int acregmin;
  int acregmax;
  int acdirmin;
  int acdirmax;
  uint32_t_0 auth;
  uint32_t_0 deadtimeout;
};

/* 5161 */
union union_vfsidctl
{
  user32_vfsidctl vc32;
  user_vfsidctl vc64;
};

/* 5162 */
struct user32_vfsidctl
{
  int vc_vers;
  fsid_t vc_fsid;
  user32_addr_t vc_ptr;
  user32_size_t vc_len;
  u_int32_t vc_spare[12];
};

/* 5163 */
struct user_vfsidctl
{
  int vc_vers;
  fsid_t vc_fsid;
  user_addr_t vc_ptr;
  user_size_t vc_len;
  u_int32_t vc_spare[12];
};

/* 5164 */
struct vfsquery
{
  u_int32_t vq_flags;
  u_int32_t vq_spare[31];
};

/* 5165 */
struct nfs_export_stat_desc
{
  uint32_t_0 rec_vers;
  uint32_t_0 rec_count;
};

/* 5166 */
struct __attribute__((packed)) __attribute__((aligned(1))) nfs_export_stat_rec
{
  char path[1025];
  uint64_t_0 ops;
  uint64_t_0 bytes_read;
  uint64_t_0 bytes_written;
};

/* 5167 */
struct nfs_user_stat_desc
{
  uint32_t_0 rec_vers;
  uint32_t_0 rec_count;
};

/* 5168 */
struct __attribute__((packed)) __attribute__((aligned(1))) nfs_user_stat_user_rec
{
  u_char rec_type;
  uid_t uid;
  sockaddr_storage sock;
  uint64_t_0 ops;
  uint64_t_0 bytes_read;
  uint64_t_0 bytes_written;
  uint32_t_0 tm_start;
  uint32_t_0 tm_last;
};

/* 5169 */
struct nfs_user_stat_path_rec
{
  u_char rec_type;
  char path[1025];
};

/* 5170 */
typedef posix_cred *posix_cred_t;

/* 5171 */
struct nfs_ephemeral_mount_harvester_info
{
  fsid_t fsid;
  uint32_t_0 mountcount;
};

/* 5172 */
struct vnodeopv_desc
{
  int (***opv_desc_vector_p)(void *);
  vnodeopv_entry_desc *opv_desc_ops;
};

/* 5173 */
struct vnodeopv_entry_desc
{
  vnodeop_desc *opve_op;
  int (*opve_impl)(void *);
};

/* 5174 */
typedef int vnop_t(void *);

/* 5175 */
struct nfs_gss_principal
{
  uint32_t_0 princlen;
  uint32_t_0 nametype;
  user32_addr_t principal;
  uint32_t_0 flags;
};

/* 5176 */
struct vnop_lookup_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vfs_context_t a_context;
};

/* 5177 */
struct vnop_open_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  int a_mode;
  vfs_context_t a_context;
};

/* 5178 */
struct vnop_close_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  int a_fflag;
  vfs_context_t a_context;
};

/* 5179 */
struct vnop_setattr_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  vnode_attr *a_vap;
  vfs_context_t a_context;
};

/* 5180 */
struct vnop_ioctl_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  u_long a_command;
  caddr_t a_data;
  int a_fflag;
  vfs_context_t a_context;
};

/* 5181 */
struct vnop_select_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  int a_which;
  int a_fflags;
  void *a_wql;
  vfs_context_t a_context;
};

/* 5182 */
struct vnop_fsync_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  int a_waitfor;
  vfs_context_t a_context;
};

/* 5183 */
struct vnop_rename_args
{
  vnodeop_desc *a_desc;
  vnode_t a_fdvp;
  vnode_t a_fvp;
  componentname *a_fcnp;
  vnode_t a_tdvp;
  vnode_t a_tvp;
  componentname *a_tcnp;
  vfs_context_t a_context;
};

/* 5184 */
struct vnop_readdir_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  uio *a_uio;
  int a_flags;
  int *a_eofflag;
  int *a_numdirent;
  vfs_context_t a_context;
};

/* 5185 */
struct dirent
{
  ino_t d_ino;
  __uint16_t d_reclen;
  __uint8_t d_type;
  __uint8_t d_namlen;
  char d_name[256];
};

/* 5186 */
typedef __darwin_ino_t ino_t;

/* 5187 */
typedef __uint32_t __darwin_ino_t;

/* 5188 */
struct vnop_readlink_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  uio *a_uio;
  vfs_context_t a_context;
};

/* 5189 */
struct vnop_pathconf_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  int a_name;
  int32_t *a_retval;
  vfs_context_t a_context;
};

/* 5190 */
struct vnop_pagein_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  upl_t a_pl;
  upl_offset_t a_pl_offset;
  off_t a_f_offset;
  size_t_0 a_size;
  int a_flags;
  vfs_context_t a_context;
};

/* 5191 */
struct vnop_pageout_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  upl_t a_pl;
  upl_offset_t a_pl_offset;
  off_t a_f_offset;
  size_t_0 a_size;
  int a_flags;
  vfs_context_t a_context;
};

/* 5192 */
struct vnop_blktooff_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  daddr64_t a_lblkno;
  off_t *a_offset;
};

/* 5193 */
struct vnop_offtoblk_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  off_t a_offset;
  daddr64_t *a_lblkno;
};

/* 5194 */
struct vnop_blockmap_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  off_t a_foffset;
  size_t_0 a_size;
  daddr64_t *a_bpn;
  size_t_0 *a_run;
  void *a_poff;
  int a_flags;
  vfs_context_t a_context;
};

/* 5195 */
struct vnop_monitor_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  uint32_t_0 a_events;
  uint32_t_0 a_flags;
  void *a_handle;
  vfs_context_t a_context;
};

/* 5196 */
struct __attribute__((aligned(8))) nfsrv_uc_queue
{
  lck_mtx_t *ucq_lock;
  nfsrv_uc_q ucq_queue[1];
  thread_t ucq_thd;
  uint32_t_0 ucq_flags;
};

/* 5197 */
struct nfsrv_uc_q
{
  nfsrv_uc_arg *tqh_first;
  nfsrv_uc_arg **tqh_last;
};

/* 5198 */
struct nfsrv_uc_arg::$0349784536E7C4E19B93F060938EA36F
{
  nfsrv_uc_arg *tqe_next;
  nfsrv_uc_arg **tqe_prev;
};

/* 5199 */
typedef gss_cfx_mic_token_desc_struct gss_cfx_mic_token_desc;

/* 5200 */
struct gss_cfx_mic_token_desc_struct
{
  uint8_t_0 TOK_ID[2];
  uint8_t_0 Flags;
  uint8_t_0 Filler[5];
  uint8_t_0 SND_SEQ[8];
};

/* 5201 */
typedef gss_cfx_wrap_token_desc_struct gss_cfx_wrap_token_desc;

/* 5202 */
struct gss_cfx_wrap_token_desc_struct
{
  uint8_t_0 TOK_ID[2];
  uint8_t_0 Flags;
  uint8_t_0 Filler;
  uint8_t_0 EC[2];
  uint8_t_0 RRC[2];
  uint8_t_0 SND_SEQ[8];
};

/* 5203 */
typedef gss_1964_header_desc_struct gss_1964_header_desc;

/* 5204 */
struct gss_1964_header_desc_struct
{
  uint8_t_0 App0;
  uint8_t_0 AppLen[];
};

/* 5205 */
typedef gss_1964_mic_token_desc_struct gss_1964_mic_token_desc;

/* 5206 */
struct gss_1964_mic_token_desc_struct
{
  uint8_t_0 TOK_ID[2];
  uint8_t_0 Sign_Alg[2];
  uint8_t_0 Filler[4];
};

/* 5207 */
typedef gss_1964_wrap_token_desc_struct gss_1964_wrap_token_desc;

/* 5208 */
struct gss_1964_wrap_token_desc_struct
{
  uint8_t_0 TOK_ID[2];
  uint8_t_0 Sign_Alg[2];
  uint8_t_0 Seal_Alg[2];
  uint8_t_0 Filler[2];
};

/* 5209 */
typedef gss_1964_delete_token_desc_struct gss_1964_delete_token_desc;

/* 5210 */
struct gss_1964_delete_token_desc_struct
{
  uint8_t_0 TOK_ID[2];
  uint8_t_0 Sign_Alg[2];
  uint8_t_0 Filler[4];
};

/* 5211 */
typedef gss_1964_token_body_struct gss_1964_token_body_desc;

/* 5212 */
struct gss_1964_token_body_struct
{
  uint8_t_0 OIDType;
  uint8_t_0 OIDLen;
  uint8_t_0 kerb_mech[9];
  gss_1964_tok_type body;
  uint8_t_0 SND_SEQ[8];
  uint8_t_0 Hash[];
};

/* 5213 */
union gss_1964_tok_type
{
  gss_1964_mic_token_desc mic_tok;
  gss_1964_wrap_token_desc wrap_tok;
  gss_1964_delete_token_desc del_tok;
};

/* 5214 */
enum etypes : __int32
{
  DES3_CBC_SHA1_KD = 0x10,
  AES128_CTS_HMAC_SHA1_96 = 0x11,
  AES256_CTS_HMAC_SHA1_96 = 0x12,
};

/* 5215 */
typedef crypt_walker_ctx *crypt_walker_ctx_t;

/* 5216 */
struct crypt_walker_ctx
{
  size_t_0 length;
  const ccmode_cbc *ccmode;
  cccbc_ctx *crypt_ctx;
  cccbc_iv *iv;
};

/* 5217 */
typedef hmac_walker_ctx *hmac_walker_ctx_t;

/* 5218 */
struct hmac_walker_ctx
{
  const ccdigest_info_0 *di;
  cchmac_ctx *hmac_ctx;
};

/* 5219 */
typedef gss_1964_header_desc_struct *gss_1964_header;

/* 5220 */
typedef gss_1964_token_body_struct *gss_1964_token_body;

/* 5221 */
typedef gss_buffer_desc_struct *gss_buffer_t;

/* 5222 */
typedef crypto_ctx *crypto_ctx_t;

/* 5223 */
typedef etypes etypes_0;

/* 5224 */
typedef gss_cfx_mic_token_desc_struct *gss_cfx_mic_token;

/* 5225 */
typedef size_t_0 (*ccpad_func)(const ccmode_cbc *, cccbc_ctx *, cccbc_iv *, size_t_0, const void *, void *);

/* 5226 */
struct __attribute__((aligned(8))) netboot_info
{
  in_addr client_ip;
  in_addr server_ip;
  char *server_name;
  int server_name_length;
  char *mount_point;
  int mount_point_length;
  char *image_path;
  int image_path_length;
  NetBootImageType image_type;
  char *second_image_path;
  int second_image_path_length;
};

/* 5227 */
enum NetBootImageType : __int32
{
  kNetBootImageTypeUnknown = 0x0,
  kNetBootImageTypeNFS = 0x1,
  kNetBootImageTypeHTTP = 0x2,
};

/* 5228 */
struct dhcp
{
  u_char dp_op;
  u_char dp_htype;
  u_char dp_hlen;
  u_char dp_hops;
  u_int32_t dp_xid;
  u_int16_t dp_secs;
  u_int16_t dp_flags;
  in_addr dp_ciaddr;
  in_addr dp_yiaddr;
  in_addr dp_siaddr;
  in_addr dp_giaddr;
  u_char dp_chaddr[16];
  u_char dp_sname[64];
  u_char dp_file[128];
  u_char dp_options[];
};

/* 5229 */
typedef ptrlist_t dhcpol_t;

/* 5230 */
struct ptrlist_t
{
  const void **array;
  int size;
  int count;
};

/* 5231 */
struct ifaliasreq
{
  char ifra_name[16];
  sockaddr ifra_addr;
  sockaddr ifra_broadaddr;
  sockaddr ifra_mask;
};

/* 5232 */
struct ifreq
{
  char ifr_name[16];
  ifreq::$891520DA2192736A6AC4A37D379C865B ifr_ifru;
};

/* 5233 */
union ifreq::$891520DA2192736A6AC4A37D379C865B
{
  sockaddr ifru_addr;
  sockaddr ifru_dstaddr;
  sockaddr ifru_broadaddr;
  __int16 ifru_flags;
  int ifru_metric;
  int ifru_mtu;
  int ifru_phys;
  int ifru_media;
  int ifru_intval;
  caddr_t ifru_data;
  u_int64_t ifru_data64;
  ifdevmtu ifru_devmtu;
  ifkpi ifru_kpi;
  u_int32_t ifru_wake_flags;
  u_int32_t ifru_route_refcnt;
  int ifru_link_quality_metric;
  int ifru_cap[2];
  ifreq::$891520DA2192736A6AC4A37D379C865B::$B868F44439834B2B82145F8317B58217 ifru_opportunistic;
  u_int64_t ifru_eflags;
  ifreq::$891520DA2192736A6AC4A37D379C865B::$49B3A23A8BE4FD3D84F9AAE8E229A417 ifru_log;
  u_int32_t ifru_delegated;
  ifreq::$891520DA2192736A6AC4A37D379C865B::$C8AFB7E82D5134D1DA95697723F1FA7A ifru_type;
  u_int32_t ifru_functional_type;
  u_int32_t ifru_expensive;
  u_int32_t ifru_2kcl;
  ifreq::$891520DA2192736A6AC4A37D379C865B::$F10939F906F7562F774F5E308FBBDCFB ifru_start_delay;
  if_interface_state ifru_interface_state;
  u_int32_t ifru_probe_connectivity;
  u_int32_t ifru_ecn_mode;
  u_int32_t ifru_qosmarking_mode;
  u_int32_t ifru_qosmarking_enabled;
  u_int32_t ifru_disable_output;
  u_int32_t ifru_low_internet;
  int ifru_low_power_mode;
};

/* 5234 */
struct ifdevmtu
{
  int ifdm_current;
  int ifdm_min;
  int ifdm_max;
};

/* 5235 */
struct ifkpi
{
  unsigned int ifk_module_id;
  unsigned int ifk_type;
  ifkpi::$BC56F78500FA90787CCD42820C2C9F51 ifk_data;
};

/* 5236 */
union ifkpi::$BC56F78500FA90787CCD42820C2C9F51
{
  void *ifk_ptr;
  int ifk_value;
  u_int64_t ifk_ptr64;
};

/* 5237 */
struct ifreq::$891520DA2192736A6AC4A37D379C865B::$B868F44439834B2B82145F8317B58217
{
  uint32_t_0 ifo_flags;
  uint32_t_0 ifo_inuse;
};

/* 5238 */
struct ifreq::$891520DA2192736A6AC4A37D379C865B::$49B3A23A8BE4FD3D84F9AAE8E229A417
{
  int32_t ifl_level;
  uint32_t_0 ifl_flags;
  int32_t ifl_category;
  int32_t ifl_subcategory;
};

/* 5239 */
struct ifreq::$891520DA2192736A6AC4A37D379C865B::$C8AFB7E82D5134D1DA95697723F1FA7A
{
  uint32_t_0 ift_type;
  uint32_t_0 ift_family;
  uint32_t_0 ift_subfamily;
};

/* 5240 */
struct ifreq::$891520DA2192736A6AC4A37D379C865B::$F10939F906F7562F774F5E308FBBDCFB
{
  u_int32_t qlen;
  u_int32_t timeout;
};

/* 5241 */
typedef lockstat_probe lockstat_probe_t;

/* 5242 */
struct lockstat_probe
{
  const char *lsp_func;
  const char *lsp_name;
  int lsp_probe;
  dtrace_id_t lsp_id;
  const char *lsp_args;
};

/* 5243 */
typedef lockstat_assembly_probe lockstat_assembly_probe_t;

/* 5244 */
struct lockstat_assembly_probe
{
  int lsap_probe;
  vm_offset_t *lsap_patch_point;
};

/* 5245 */
typedef dtrace_vtime_state dtrace_vtime_state_t;

/* 5246 */
enum dtrace_vtime_state : __int32
{
  DTRACE_VTIME_INACTIVE = 0x0,
  DTRACE_VTIME_ACTIVE = 0x1,
  DTRACE_VTIME_INACTIVE_TNF = 0x2,
  DTRACE_VTIME_ACTIVE_TNF = 0x3,
};

/* 5247 */
struct listhead
{
  dtrace_proc_awaited_entry *lh_first;
};

/* 5248 */
struct dtrace_proc_awaited_entry
{
  dtrace_procdesc *pdesc;
  dtrace_proc_awaited_entry::$31239A13E8283A6A54E6644B2BD39D45 entries;
};

/* 5249 */
struct dtrace_proc_awaited_entry::$31239A13E8283A6A54E6644B2BD39D45
{
  dtrace_proc_awaited_entry *le_next;
  dtrace_proc_awaited_entry **le_prev;
};

/* 5250 */
struct proc_1
{
  proc_1::$3C2733D92276C536C763832EEEBF5B47 p_list;
  void *task;
  proc_1 *p_pptr;
  pid_t p_ppid;
  pid_t p_pgrpid;
  uid_t p_uid;
  gid_t p_gid;
  uid_t p_ruid;
  gid_t p_rgid;
  uid_t p_svuid;
  gid_t p_svgid;
  uint64_t_0 p_uniqueid;
  uint64_t_0 p_puniqueid;
  lck_mtx_t p_mlock;
  pid_t p_pid;
  char p_stat;
  char p_shutdownstate;
  char p_kdebug;
  char p_btrace;
  proc_1::$3C2733D92276C536C763832EEEBF5B47 p_pglist;
  proc_1::$3C2733D92276C536C763832EEEBF5B47 p_sibling;
  proc_1::$D714CAE200545103EB189A77802AE347 p_children;
  proc::$2F8731EE5CEE647440942FF11E8E160C p_uthlist;
  proc_1::$3C2733D92276C536C763832EEEBF5B47 p_hash;
  proc::$1D3E450C18944DBC95A59288B453C62E p_evlist;
  lck_mtx_t p_fdmlock;
  lck_mtx_t p_ucred_mlock;
  kauth_cred_t p_ucred;
  filedesc *p_fd;
  pstats *p_stats;
  plimit *p_limit;
  sigacts *p_sigacts;
  lck_spin_t p_slock;
  plimit *p_olimit;
  int p_siglist;
  unsigned int p_flag;
  unsigned int p_lflag;
  unsigned int p_listflag;
  unsigned int p_ladvflag;
  int p_refcount;
  int p_childrencnt;
  int p_parentref;
  pid_t p_oppid;
  u_int p_xstat;
  itimerval p_realtimer;
  timeval p_rtime;
  itimerval p_vtimer_user;
  itimerval p_vtimer_prof;
  timeval p_rlim_cpu;
  int p_debugger;
  boolean_t sigwait;
  void *sigwait_thread;
  void *exit_thread;
  void *p_vforkact;
  int p_vforkcnt;
  int p_fpdrainwait;
  pid_t si_pid;
  u_int si_status;
  u_int si_code;
  uid_t si_uid;
  void *vm_shm;
  user_addr_t p_dtrace_argv;
  user_addr_t p_dtrace_envp;
  lck_mtx_t p_dtrace_sprlock;
  uint8_t_0 p_dtrace_stop;
  int p_dtrace_probes;
  u_int p_dtrace_count;
  dtrace_ptss_page *p_dtrace_ptss_pages;
  dtrace_ptss_page_entry *p_dtrace_ptss_free_list;
  dtrace_helpers *p_dtrace_helpers;
  dof_ioctl_data *p_dtrace_lazy_dofs;
  u_int p_argslen;
  int p_argc;
  user_addr_t user_stack;
  vnode *p_textvp;
  off_t p_textoff;
  sigset_t p_sigmask;
  sigset_t p_sigignore;
  sigset_t p_sigcatch;
  u_char p_priority;
  u_char p_resv0;
  char p_nice;
  u_char p_resv1;
  command_t p_comm;
  proc_name_t p_name;
  uint8_t_0 p_xhighbits;
  pid_t p_contproc;
  pgrp *p_pgrp;
  uint32_t_0 p_csflags;
  uint32_t_0 p_pcaction;
  uint8_t_0 p_uuid[16];
  cpu_type_t p_cputype;
  cpu_subtype_t p_cpusubtype;
  int p_aio_total_count;
  int p_aio_active_count;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_activeq;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_doneq;
  klist p_klist;
  rusage_superset *p_ru;
  thread_t p_signalholder;
  thread_t p_transholder;
  int p_sigwaitcnt;
  u_short p_acflag;
  volatile u_short p_vfs_iopolicy;
  user_addr_t p_threadstart;
  user_addr_t p_wqthread;
  int p_pthsize;
  uint32_t_0 p_pth_tsd_offset;
  user_addr_t p_stack_addr_hint;
  workqueue *p_wqptr;
  timeval p_start;
  void *p_rcall;
  int p_ractive;
  int p_idversion;
  void *p_pthhash;
  volatile uint64_t_0 was_throttled;
  volatile uint64_t_0 did_throttle;
  uint64_t_0 p_dispatchqueue_offset;
  uint64_t_0 p_dispatchqueue_serialno_offset;
  uint64_t_0 p_return_to_kernel_offset;
  uint64_t_0 p_mach_thread_self_offset;
  timeval vm_pressure_last_notify_tstamp;
  proc_1::$B357E982845708CBAF630BE88C194BB0 p_memstat_list;
  uint32_t_0 p_memstat_state;
  int32_t p_memstat_effectivepriority;
  int32_t p_memstat_requestedpriority;
  uint32_t_0 p_memstat_dirty;
  uint64_t_0 p_memstat_userdata;
  uint64_t_0 p_memstat_idledeadline;
  uint64_t_0 p_memstat_idle_start;
  uint64_t_0 p_memstat_idle_delta;
  int32_t p_memstat_memlimit;
  int32_t p_memstat_memlimit_active;
  int32_t p_memstat_memlimit_inactive;
  pid_t p_responsible_pid;
  uint32_t_0 p_user_faults;
  os_reason *p_exit_reason;
  uint64_t_0 p_user_data;
};

/* 5251 */
struct proc_1::$3C2733D92276C536C763832EEEBF5B47
{
  proc_1 *le_next;
  proc_1 **le_prev;
};

/* 5252 */
struct proc_1::$D714CAE200545103EB189A77802AE347
{
  proc_1 *lh_first;
};

/* 5253 */
struct proc_1::$B357E982845708CBAF630BE88C194BB0
{
  proc_1 *tqe_next;
  proc_1 **tqe_prev;
};

/* 5254 */
struct regs;

/* 5255 */
typedef dtrace_invop_hdlr dtrace_invop_hdlr_t;

/* 5256 */
struct dtrace_invop_hdlr
{
  int (*dtih_func)(uintptr_t, uintptr_t *, uintptr_t);
  dtrace_invop_hdlr *dtih_next;
};

/* 5257 */
typedef dtrace_proc_awaited_entry dtrace_proc_awaited_entry_t;

/* 5258 */
struct timer_call_0
{
  call_entry call_entry;
  simple_lock_data_t_0 lock;
  uint64_t_0 soft_deadline;
  uint32_t_0 flags;
  boolean_t async_dequeue;
  uint64_t_0 ttd;
};

/* 5259 */
typedef usimple_lock_data_t_0 simple_lock_data_t_0;

/* 5260 */
typedef slock_0 usimple_lock_data_t_0;

/* 5261 */
struct slock_0
{
  unsigned __int64 lock_data[10];
};

/* 5262 */
struct wrap_timer_call::$43957F64C386F855ED573ECA52AEADFB
{
  wrap_timer_call *le_next;
  wrap_timer_call **le_prev;
};

/* 5263 */
typedef cpu_core cpu_core_t;

/* 5264 */
struct __attribute__((aligned(4))) cpu_core
{
  uint64_t_0 cpuc_dtrace_illval;
  lck_mtx_t cpuc_pid_lock;
  uint16_t cpuc_dtrace_flags;
  uint64_t_0 cpuc_missing_tos;
  uint8_t_0 cpuc_pad[30];
};

/* 5265 */
typedef wrap_timer_call wrap_timer_call_t;

/* 5266 */
typedef void (*dtrace_xcall_t)(void *);

/* 5267 */
typedef cyclic_id_t *cyclic_id_list_t;

/* 5268 */
typedef wrap_thread_call wrap_thread_call_t;

/* 5269 */
struct wrap_thread_call
{
  thread_call_t TChdl;
  cyc_handler_t hdlr;
  cyc_time_t when;
  uint64_t_0 deadline;
};

/* 5270 */
struct blist_hdl
{
  blist_t blist;
};

/* 5271 */
typedef blist *blist_t;

/* 5272 */
struct __attribute__((aligned(8))) blist
{
  daddr_t bl_blocks;
  daddr_t bl_radix;
  daddr_t bl_skip;
  daddr_t bl_free;
  blmeta_t *bl_root;
  daddr_t bl_rootblks;
};

/* 5273 */
typedef blmeta blmeta_t;

/* 5274 */
struct blmeta
{
  blmeta::$4E07874646A4C85D891F5D37E4EBFF51 u;
  daddr_t bm_bighint;
};

/* 5275 */
union blmeta::$4E07874646A4C85D891F5D37E4EBFF51
{
  daddr_t bmu_avail;
  u_daddr_t bmu_bitmap;
};

/* 5276 */
typedef unsigned int u_daddr_t;

/* 5277 */
struct dtrace_getstackdepth::frame;

/* 5278 */
typedef vm_region_submap_short_info_64 vm_region_submap_short_info_data_64_t;

/* 5279 */
typedef cyc_omni_handler cyc_omni_handler_t;

/* 5280 */
struct cyc_omni_handler
{
  void (*cyo_online)(void *, dtrace_cpu_t *, cyc_handler_t *, cyc_time_t *);
  void (*cyo_offline)(void *, dtrace_cpu_t *, void *);
  void *cyo_arg;
};

/* 5281 */
typedef cyc_list cyc_list_t;

/* 5282 */
struct cyc_list
{
  cyc_omni_handler_t cyl_omni;
  wrap_timer_call_t cyl_wrap_by_cpus[];
};

/* 5283 */
typedef sdt_probe sdt_probe_t;

/* 5284 */
struct sdt_probe
{
  sdt_provider_t *sdp_provider;
  char *sdp_name;
  int sdp_namelen;
  dtrace_id_t sdp_id;
  modctl *sdp_ctl;
  int sdp_loadcnt;
  int sdp_primary;
  sdt_instr_t *sdp_patchpoint;
  sdt_instr_t sdp_patchval;
  sdt_instr_t sdp_savedval;
  sdt_probe *sdp_next;
  sdt_probe *sdp_hashnext;
};

/* 5285 */
typedef sdt_provider sdt_provider_t;

/* 5286 */
struct sdt_provider
{
  const char *sdtp_name;
  const char *sdtp_prefix;
  dtrace_pattr_t *sdtp_attr;
  dtrace_provider_id_t sdtp_id;
};

/* 5287 */
typedef uint8_t_0 sdt_instr_t;

/* 5288 */
struct module
{
  int sdt_nprobes;
  sdt_probedesc_t *sdt_probes;
};

/* 5289 */
typedef sdt_probedesc sdt_probedesc_t;

/* 5290 */
struct sdt_probedesc
{
  char *sdpd_name;
  char *sdpd_func;
  unsigned __int64 sdpd_offset;
  sdt_probedesc *sdpd_next;
};

/* 5291 */
typedef sdt_argdesc sdt_argdesc_t;

/* 5292 */
struct sdt_argdesc
{
  const char *sda_provider;
  const char *sda_name;
  const int sda_ndx;
  const int sda_mapping;
  const char *sda_native;
  const char *sda_xlate;
};

/* 5293 */
typedef systrace_sysent systrace_sysent_t;

/* 5294 */
struct __attribute__((aligned(8))) systrace_sysent
{
  dtrace_id_t stsy_entry;
  dtrace_id_t stsy_return;
  int32_t (*stsy_underlying)(proc *, void *, int *);
  int32_t stsy_return_type;
};

/* 5295 */
typedef machtrace_sysent machtrace_sysent_t;

/* 5296 */
struct __attribute__((aligned(8))) machtrace_sysent
{
  dtrace_id_t stsy_entry;
  dtrace_id_t stsy_return;
  kern_return_t (*stsy_underlying)(void *);
  int32_t stsy_return_type;
};

/* 5297 */
struct sysent
{
  sy_call_t *sy_call;
  sy_munge_t *sy_arg_munge32;
  int32_t sy_return_type;
  int16_t sy_narg;
  uint16_t sy_arg_bytes;
};

/* 5298 */
typedef int32_t sy_call_t(proc *, void *, int *);

/* 5299 */
typedef void sy_munge_t(void *);

/* 5300 */
struct __attribute__((aligned(8))) profile_provide::$C25B66B2D098EE5FD0DBF89D68E1CBA3
{
  const char *prefix;
  int kind;
};

/* 5301 */
struct profile_provide::$E989D0979D09141E488E42C42676927C
{
  const char *name;
  hrtime_t mult;
};

/* 5302 */
typedef profile_probe_percpu profile_probe_percpu_t;

/* 5303 */
struct profile_probe_percpu
{
  hrtime_t profc_expected;
  hrtime_t profc_interval;
  profile_probe_t *profc_probe;
};

/* 5304 */
typedef profile_probe profile_probe_t;

/* 5305 */
struct profile_probe
{
  char prof_name[15];
  dtrace_id_t prof_id;
  int prof_kind;
  hrtime_t prof_interval;
  cyclic_id_t prof_cyclic;
};

/* 5306 */
typedef fasttrap_hash fasttrap_hash_t;

/* 5307 */
struct fasttrap_hash
{
  ulong_t fth_nent;
  ulong_t fth_mask;
  fasttrap_bucket_t *fth_table;
};

/* 5308 */
typedef unsigned __int64 ulong_t;

/* 5309 */
typedef fasttrap_bucket fasttrap_bucket_t;

/* 5310 */
struct fasttrap_bucket
{
  lck_mtx_t ftb_mtx;
  void *ftb_data;
  uint8_t_0 ftb_pad[40];
};

/* 5311 */
typedef fasttrap_tracepoint_spec fasttrap_tracepoint_spec_t;

/* 5312 */
struct fasttrap_tracepoint_spec
{
  pid_t fttps_pid;
  user_addr_t fttps_pc;
};

/* 5313 */
enum fasttrap_provider_type : __int32
{
  DTFTP_PROVIDER_NONE = 0x0,
  DTFTP_PROVIDER_USDT = 0x1,
  DTFTP_PROVIDER_PID = 0x2,
  DTFTP_PROVIDER_OBJC = 0x3,
  DTFTP_PROVIDER_ONESHOT = 0x4,
};

/* 5314 */
enum fasttrap_probe_type : __int32
{
  DTFTP_NONE = 0x0,
  DTFTP_ENTRY = 0x1,
  DTFTP_RETURN = 0x2,
  DTFTP_OFFSETS = 0x3,
  DTFTP_POST_OFFSETS = 0x4,
  DTFTP_IS_ENABLED = 0x5,
};

/* 5315 */
typedef fasttrap_proc fasttrap_proc_t;

/* 5316 */
struct fasttrap_proc
{
  pid_t ftpc_pid;
  uint64_t_0 ftpc_acount;
  uint64_t_0 ftpc_rcount;
  lck_mtx_t ftpc_mtx;
  fasttrap_proc *ftpc_next;
};

/* 5317 */
typedef fasttrap_id_tp fasttrap_id_tp_t;

/* 5318 */
struct fasttrap_id_tp
{
  fasttrap_id_t fit_id;
  fasttrap_tracepoint_t *fit_tp;
};

/* 5319 */
typedef fasttrap_id fasttrap_id_t;

/* 5320 */
struct __attribute__((aligned(8))) fasttrap_id
{
  fasttrap_probe_t *fti_probe;
  fasttrap_id_t *fti_next;
  fasttrap_probe_type_t fti_ptype;
};

/* 5321 */
typedef fasttrap_probe fasttrap_probe_t;

/* 5322 */
struct fasttrap_probe
{
  dtrace_id_t ftp_id;
  pid_t ftp_pid;
  fasttrap_provider_t *ftp_prov;
  user_addr_t ftp_faddr;
  size_t_0 ftp_fsize;
  uint64_t_0 ftp_gen;
  uint64_t_0 ftp_ntps;
  uint8_t_0 *ftp_argmap;
  uint8_t_0 ftp_nargs;
  uint8_t_0 ftp_enabled;
  uint8_t_0 ftp_triggered;
  char *ftp_xtypes;
  char *ftp_ntypes;
  fasttrap_id_tp_t ftp_tps[1];
};

/* 5323 */
typedef fasttrap_provider fasttrap_provider_t;

/* 5324 */
struct fasttrap_provider
{
  pid_t ftp_pid;
  fasttrap_provider_type_t ftp_provider_type;
  char ftp_name[64];
  dtrace_provider_id_t ftp_provid;
  uint_t ftp_marked;
  uint_t ftp_retired;
  lck_mtx_t ftp_mtx;
  lck_mtx_t ftp_cmtx;
  uint64_t_0 ftp_pcount;
  uint64_t_0 ftp_rcount;
  uint64_t_0 ftp_ccount;
  uint64_t_0 ftp_mcount;
  fasttrap_proc_t *ftp_proc;
  fasttrap_provider *ftp_next;
};

/* 5325 */
typedef fasttrap_provider_type fasttrap_provider_type_t;

/* 5326 */
typedef fasttrap_probe_type fasttrap_probe_type_t;

/* 5327 */
typedef fasttrap_tracepoint fasttrap_tracepoint_t;

/* 5328 */
struct fasttrap_tracepoint
{
  fasttrap_proc_t *ftt_proc;
  user_addr_t ftt_pc;
  pid_t ftt_pid;
  fasttrap_machtp_t ftt_mtp;
  fasttrap_id_t *ftt_ids;
  fasttrap_id_t *ftt_retids;
  fasttrap_tracepoint_t *ftt_next;
};

/* 5329 */
typedef fasttrap_machtp fasttrap_machtp_t;

/* 5330 */
struct __attribute__((aligned(8))) fasttrap_machtp
{
  uint8_t_0 ftmt_instr[15];
  uint8_t_0 ftmt_size;
  uint8_t_0 ftmt_ripmode;
  uint8_t_0 ftmt_modrm;
  uint8_t_0 ftmt_type;
  uint8_t_0 ftmt_code;
  uint8_t_0 ftmt_base;
  uint8_t_0 ftmt_index;
  uint8_t_0 ftmt_scale;
  uint8_t_0 ftmt_segment;
  user_addr_t ftmt_dest;
  unsigned __int8 ftmt_installed : 1;
  unsigned __int8 ftmt_retired : 1;
};

/* 5331 */
typedef fasttrap_probe_spec fasttrap_probe_spec_t;

/* 5332 */
struct fasttrap_probe_spec
{
  pid_t ftps_pid;
  fasttrap_provider_type_t ftps_provider_type;
  fasttrap_probe_type_t ftps_probe_type;
  char ftps_func[128];
  char ftps_mod[64];
  uint64_t_0 ftps_pc;
  uint64_t_0 ftps_size;
  uint64_t_0 ftps_noffs;
  uint64_t_0 ftps_offs[1];
};

/* 5333 */
typedef fasttrap_instr_query fasttrap_instr_query_t;

/* 5334 */
struct __attribute__((aligned(4))) fasttrap_instr_query
{
  uint64_t_0 ftiq_pc;
  pid_t ftiq_pid;
  fasttrap_instr_t ftiq_instr;
};

/* 5335 */
typedef uint8_t_0 fasttrap_instr_t;

/* 5336 */
struct grab_pgo_data_args
{
  user_addr_t uuid;
  int flags;
  char flags_r_[4];
  user_addr_t buffer;
  user_ssize_t size;
  char size_r_[];
};

/* 5337 */
struct mremap_encrypted_args
{
  user_addr_t addr;
  user_size_t len;
  uint32_t_0 cryptid;
  char cryptid_r_[4];
  uint32_t_0 cputype;
  char cputype_r_[4];
  uint32_t_0 cpusubtype;
  char cpusubtype_r_[4];
};

/* 5338 */
struct guarded_open_dprotected_np_args
{
  user_addr_t path;
  user_addr_t guard;
  u_int guardflags;
  char guardflags_r_[4];
  int flags;
  char flags_r_[4];
  int dpclass;
  char dpclass_r_[4];
  int dpflags;
  char dpflags_r_[4];
  int mode;
  char mode_r_[4];
};

/* 5339 */
struct linkat_args
{
  int fd1;
  char fd1_r_[4];
  user_addr_t path;
  int fd2;
  char fd2_r_[4];
  user_addr_t link;
  int flag;
  char flag_r_[4];
};

/* 5340 */
struct fchownat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  uid_t uid;
  char uid_r_[4];
  gid_t gid;
  char gid_r_[4];
  int flag;
  char flag_r_[4];
};

/* 5341 */
struct coalition_args
{
  uint32_t_0 operation;
  char operation_r_[4];
  user_addr_t cid;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 5342 */
struct sfi_pidctl_args
{
  uint32_t_0 operation;
  char operation_r_[4];
  pid_t pid;
  char pid_r_[4];
  uint32_t_0 sfi_flags;
  char sfi_flags_r_[4];
  user_addr_t out_sfi_flags;
  char out_sfi_flags_r_[];
};

/* 5343 */
struct sfi_ctl_args
{
  uint32_t_0 operation;
  char operation_r_[4];
  uint32_t_0 sfi_class;
  char sfi_class_r_[4];
  uint64_t_0 time;
  user_addr_t out_time;
  char out_time_r_[];
};

/* 5344 */
struct socket_delegate_args
{
  int domain;
  char domain_r_[4];
  int type;
  char type_r_[4];
  int protocol;
  char protocol_r_[4];
  pid_t epid;
  char epid_r_[4];
};

/* 5345 */
struct disconnectx_args
{
  int s;
  char s_r_[4];
  sae_associd_t aid;
  char aid_r_[4];
  sae_connid_t cid;
  char cid_r_[4];
};

/* 5346 */
struct connectx_args
{
  int socket;
  char socket_r_[4];
  user_addr_t endpoints;
  sae_associd_t associd;
  char associd_r_[4];
  unsigned int flags;
  char flags_r_[4];
  user_addr_t iov;
  unsigned int iovcnt;
  char iovcnt_r_[4];
  user_addr_t len;
  user_addr_t connid;
  char connid_r_[];
};

/* 5347 */
struct change_fdguard_np_args
{
  int fd;
  char fd_r_[4];
  user_addr_t guard;
  u_int guardflags;
  char guardflags_r_[4];
  user_addr_t nguard;
  u_int nguardflags;
  char nguardflags_r_[4];
  user_addr_t fdflagsp;
  char fdflagsp_r_[];
};

/* 5348 */
struct guarded_open_np_args
{
  user_addr_t path;
  user_addr_t guard;
  u_int guardflags;
  char guardflags_r_[4];
  int flags;
  char flags_r_[4];
  int mode;
  char mode_r_[4];
};

/* 5349 */
struct memorystatus_control_args
{
  uint32_t_0 command;
  char command_r_[4];
  int32_t pid;
  char pid_r_[4];
  uint32_t_0 flags;
  char flags_r_[4];
  user_addr_t buffer;
  user_size_t buffersize;
  char buffersize_r_[];
};

/* 5350 */
struct shared_region_map_and_slide_np_args
{
  int fd;
  char fd_r_[4];
  uint32_t_0 count;
  char count_r_[4];
  user_addr_t mappings;
  uint32_t_0 slide;
  char slide_r_[4];
  user_addr_t slide_start;
  uint32_t_0 slide_size;
  char slide_size_r_[4];
};

/* 5351 */
struct __mac_getfsstat_args
{
  user_addr_t buf;
  int bufsize;
  char bufsize_r_[4];
  user_addr_t mac;
  int macsize;
  char macsize_r_[4];
  int flags;
  char flags_r_[4];
};

/* 5352 */
struct __mac_mount_args
{
  user_addr_t type;
  user_addr_t path;
  int flags;
  char flags_r_[4];
  user_addr_t data;
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 5353 */
struct __semwait_signal_nocancel_args
{
  int cond_sem;
  char cond_sem_r_[4];
  int mutex_sem;
  char mutex_sem_r_[4];
  int timeout;
  char timeout_r_[4];
  int relative;
  char relative_r_[4];
  int64_t tv_sec;
  int32_t tv_nsec;
  char tv_nsec_r_[4];
};

/* 5354 */
struct kevent_id_args
{
  uint64_t_0 id;
  user_addr_t changelist;
  int nchanges;
  char nchanges_r_[4];
  user_addr_t eventlist;
  int nevents;
  char nevents_r_[4];
  user_addr_t data_out;
  user_addr_t data_available;
  unsigned int flags;
  char flags_r_[4];
};

/* 5355 */
struct kevent_qos_args
{
  int fd;
  char fd_r_[4];
  user_addr_t changelist;
  int nchanges;
  char nchanges_r_[4];
  user_addr_t eventlist;
  int nevents;
  char nevents_r_[4];
  user_addr_t data_out;
  user_addr_t data_available;
  unsigned int flags;
  char flags_r_[4];
};

/* 5356 */
struct kevent64_args
{
  int fd;
  char fd_r_[4];
  user_addr_t changelist;
  int nchanges;
  char nchanges_r_[4];
  user_addr_t eventlist;
  int nevents;
  char nevents_r_[4];
  unsigned int flags;
  char flags_r_[4];
  user_addr_t timeout;
  char timeout_r_[];
};

/* 5357 */
struct bsdthread_register_args
{
  user_addr_t threadstart;
  user_addr_t wqthread;
  uint32_t_0 flags;
  char flags_r_[4];
  user_addr_t stack_addr_hint;
  user_addr_t targetconc_ptr;
  uint32_t_0 dispatchqueue_offset;
  char dispatchqueue_offset_r_[4];
  uint32_t_0 tsd_offset;
  char tsd_offset_r_[4];
};

/* 5358 */
struct kevent_args
{
  int fd;
  char fd_r_[4];
  user_addr_t changelist;
  int nchanges;
  char nchanges_r_[4];
  user_addr_t eventlist;
  int nevents;
  char nevents_r_[4];
  user_addr_t timeout;
  char timeout_r_[];
};

/* 5359 */
struct bsdthread_terminate_args
{
  user_addr_t stackaddr;
  user_size_t freesize;
  uint32_t_0 port;
  char port_r_[4];
  uint32_t_0 sem;
  char sem_r_[4];
};

/* 5360 */
struct bsdthread_create_args
{
  user_addr_t func;
  user_addr_t func_arg;
  user_addr_t stack;
  user_addr_t pthread;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 5361 */
struct sendfile_args
{
  int fd;
  char fd_r_[4];
  int s;
  char s_r_[4];
  off_t offset;
  user_addr_t nbytes;
  user_addr_t hdtr;
  int flags;
  char flags_r_[4];
};

/* 5362 */
struct proc_info_args
{
  int32_t callnum;
  char callnum_r_[4];
  int32_t pid;
  char pid_r_[4];
  uint32_t_0 flavor;
  char flavor_r_[4];
  uint64_t_0 arg;
  user_addr_t buffer;
  int32_t buffersize;
  char buffersize_r_[4];
};

/* 5363 */
struct __semwait_signal_args
{
  int cond_sem;
  char cond_sem_r_[4];
  int mutex_sem;
  char mutex_sem_r_[4];
  int timeout;
  char timeout_r_[4];
  int relative;
  char relative_r_[4];
  int64_t tv_sec;
  int32_t tv_nsec;
  char tv_nsec_r_[4];
};

/* 5364 */
struct process_policy_args
{
  int scope;
  char scope_r_[4];
  int action;
  char action_r_[4];
  int policy;
  char policy_r_[4];
  int policy_subtype;
  char policy_subtype_r_[4];
  user_addr_t attrp;
  pid_t target_pid;
  char target_pid_r_[4];
  uint64_t_0 target_threadid;
  char target_threadid_r_[];
};

/* 5365 */
struct psynch_cvclrprepost_args
{
  user_addr_t cv;
  uint32_t_0 cvgen;
  char cvgen_r_[4];
  uint32_t_0 cvugen;
  char cvugen_r_[4];
  uint32_t_0 cvsgen;
  char cvsgen_r_[4];
  uint32_t_0 prepocnt;
  char prepocnt_r_[4];
  uint32_t_0 preposeq;
  char preposeq_r_[4];
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 5366 */
struct psynch_cvwait_args
{
  user_addr_t cv;
  uint64_t_0 cvlsgen;
  uint32_t_0 cvugen;
  char cvugen_r_[4];
  user_addr_t mutex;
  uint64_t_0 mugen;
  uint32_t_0 flags;
  char flags_r_[4];
  int64_t sec;
  uint32_t_0 nsec;
  char nsec_r_[4];
};

/* 5367 */
struct psynch_cvsignal_args
{
  user_addr_t cv;
  uint64_t_0 cvlsgen;
  uint32_t_0 cvugen;
  char cvugen_r_[4];
  int thread_port;
  char thread_port_r_[4];
  user_addr_t mutex;
  uint64_t_0 mugen;
  uint64_t_0 tid;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 5368 */
struct psynch_cvbroad_args
{
  user_addr_t cv;
  uint64_t_0 cvlsgen;
  uint64_t_0 cvudgen;
  uint32_t_0 flags;
  char flags_r_[4];
  user_addr_t mutex;
  uint64_t_0 mugen;
  uint64_t_0 tid;
  char tid_r_[];
};

/* 5369 */
struct settid_args
{
  uid_t uid;
  char uid_r_[4];
  gid_t gid;
  char gid_r_[4];
};

/* 5370 */
struct fchmod_extended_args
{
  int fd;
  char fd_r_[4];
  uid_t uid;
  char uid_r_[4];
  gid_t gid;
  char gid_r_[4];
  int mode;
  char mode_r_[4];
  user_addr_t xsecurity;
  char xsecurity_r_[];
};

/* 5371 */
struct open_extended_args
{
  user_addr_t path;
  int flags;
  char flags_r_[4];
  uid_t uid;
  char uid_r_[4];
  gid_t gid;
  char gid_r_[4];
  int mode;
  char mode_r_[4];
  user_addr_t xsecurity;
  char xsecurity_r_[];
};

/* 5372 */
struct sem_open_args
{
  user_addr_t name;
  int oflag;
  char oflag_r_[4];
  int mode;
  char mode_r_[4];
  int value;
  char value_r_[4];
};

/* 5373 */
struct shmsys_args
{
  u_int which;
  char which_r_[4];
  int a2;
  char a2_r_[4];
  int a3;
  char a3_r_[4];
  int a4;
  char a4_r_[4];
};

/* 5374 */
struct ffsctl_args
{
  int fd;
  char fd_r_[4];
  user_ulong_t cmd;
  user_addr_t data;
  u_int options;
  char options_r_[4];
};

/* 5375 */
struct initgroups_args
{
  u_int gidsetsize;
  char gidsetsize_r_[4];
  user_addr_t gidset;
  int gmuid;
  char gmuid_r_[4];
};

/* 5376 */
struct listxattr_args
{
  user_addr_t path;
  user_addr_t namebuf;
  user_size_t bufsize;
  int options;
  char options_r_[4];
};

/* 5377 */
struct copyfile_args
{
  user_addr_t from;
  user_addr_t to;
  int mode;
  char mode_r_[4];
  int flags;
  char flags_r_[4];
};

/* 5378 */
struct searchfs_args
{
  user_addr_t path;
  user_addr_t searchblock;
  user_addr_t nummatches;
  uint32_t_0 scriptcode;
  char scriptcode_r_[4];
  uint32_t_0 options;
  char options_r_[4];
  user_addr_t state;
  char state_r_[];
};

/* 5379 */
struct getdirentriesattr_args
{
  int fd;
  char fd_r_[4];
  user_addr_t alist;
  user_addr_t buffer;
  user_size_t buffersize;
  user_addr_t count;
  user_addr_t basep;
  user_addr_t newstate;
  user_ulong_t options;
  char options_r_[];
};

/* 5380 */
struct open_dprotected_np_args
{
  user_addr_t path;
  int flags;
  char flags_r_[4];
  int class;
  char class_r_[4];
  int dpflags;
  char dpflags_r_[4];
  int mode;
  char mode_r_[4];
};

/* 5381 */
struct sysctl_args
{
  user_addr_t name;
  u_int namelen;
  char namelen_r_[4];
  user_addr_t old;
  user_addr_t oldlenp;
  user_addr_t new;
  user_size_t newlen;
  char newlen_r_[];
};

/* 5382 */
struct mmap_args
{
  user_addr_t addr;
  user_size_t len;
  int prot;
  char prot_r_[4];
  int flags;
  char flags_r_[4];
  int fd;
  char fd_r_[4];
  off_t pos;
  char pos_r_[];
};

/* 5383 */
struct getdirentries_args
{
  int fd;
  char fd_r_[4];
  user_addr_t buf;
  u_int count;
  char count_r_[4];
  user_addr_t basep;
  char basep_r_[];
};

/* 5384 */
struct csops_audittoken_args
{
  pid_t pid;
  char pid_r_[4];
  uint32_t_0 ops;
  char ops_r_[4];
  user_addr_t useraddr;
  user_size_t usersize;
  user_addr_t uaudittoken;
  char uaudittoken_r_[];
};

/* 5385 */
struct mount_args
{
  user_addr_t type;
  user_addr_t path;
  int flags;
  char flags_r_[4];
  user_addr_t data;
  char data_r_[];
};

/* 5386 */
struct getsockopt_args
{
  int s;
  char s_r_[4];
  int level;
  char level_r_[4];
  int name;
  char name_r_[4];
  user_addr_t val;
  user_addr_t avalsize;
  char avalsize_r_[];
};

/* 5387 */
struct setsockopt_args
{
  int s;
  char s_r_[4];
  int level;
  char level_r_[4];
  int name;
  char name_r_[4];
  user_addr_t val;
  socklen_t valsize;
  char valsize_r_[4];
};

/* 5388 */
struct setpriority_args
{
  int which;
  char which_r_[4];
  id_t who;
  char who_r_[4];
  int prio;
  char prio_r_[4];
};

/* 5389 */
struct fclonefileat_args
{
  int src_fd;
  char src_fd_r_[4];
  int dst_dirfd;
  char dst_dirfd_r_[4];
  user_addr_t dst;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 5390 */
struct fs_snapshot_args
{
  uint32_t_0 op;
  char op_r_[4];
  int dirfd;
  char dirfd_r_[4];
  user_addr_t name1;
  user_addr_t name2;
  user_addr_t data;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 5391 */
struct terminate_with_payload_args
{
  int pid;
  char pid_r_[4];
  uint32_t_0 reason_namespace;
  char reason_namespace_r_[4];
  uint64_t_0 reason_code;
  user_addr_t payload;
  uint32_t_0 payload_size;
  char payload_size_r_[4];
  user_addr_t reason_string;
  uint64_t_0 reason_flags;
  char reason_flags_r_[];
};

/* 5392 */
struct setattrlistat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  user_addr_t alist;
  user_addr_t attributeBuffer;
  user_size_t bufferSize;
  uint32_t_0 options;
  char options_r_[4];
};

/* 5393 */
struct ptrace_args
{
  int req;
  char req_r_[4];
  pid_t pid;
  char pid_r_[4];
  user_addr_t addr;
  int data;
  char data_r_[4];
};

/* 5394 */
struct getentropy_args
{
  user_addr_t buffer;
  user_size_t size;
  char size_r_[];
};

/* 5395 */
struct mdev
{
  uint64_t_0 mdBase;
  uint32_t_0 mdSize;
  int mdFlags;
  int mdSecsize;
  int mdBDev;
  int mdCDev;
  void *mdbdevb;
  void *mdcdevb;
};

/* 5396 */
struct __attribute__((aligned(8))) bdevsw
{
  open_close_fcn_t *d_open;
  open_close_fcn_t *d_close;
  strategy_fcn_t *d_strategy;
  ioctl_fcn_t *d_ioctl;
  dump_fcn_t *d_dump;
  psize_fcn_t *d_psize;
  int d_type;
};

/* 5397 */
typedef int dump_fcn_t(void);

/* 5398 */
typedef int psize_fcn_t(dev_t);

/* 5399 */
struct dk_memdev_info_t
{
  boolean_t mi_mdev;
  boolean_t mi_phys;
  uint32_t_0 mi_base;
  uint64_t_0 mi_size;
};

/* 5400 */
struct __attribute__((aligned(16))) cpx
{
  aes_encrypt_ctx cpx_iv_aes_ctx;
  cpx_flags_t cpx_flags;
  uint16_t cpx_max_key_len;
  uint16_t cpx_key_len;
  uint8_t_0 cpx_cached_key[];
};

/* 5401 */
typedef mt_device_0 *mt_device_t_0;

/* 5402 */
struct __attribute__((aligned(8))) mt_device_0
{
  const char *mtd_name;
  int (*const mtd_init)(mt_device_0 *);
  int (*const mtd_add)(monotonic_config *, uint32_t_0 *);
  void (*const mtd_reset)(void);
  void (*const mtd_enable)(_Bool);
  int (*const mtd_read)(uint64_t_0, uint64_t_0 *);
  lck_mtx_t mtd_lock;
  uint8_t_0 mtd_nmonitors;
  uint8_t_0 mtd_ncounters;
  _Bool mtd_inuse;
};

/* 5403 */
union monotonic_ctl_add
{
  monotonic_ctl_add::$8820E11CA3A10B2EAF390E421AF51B7F in;
  monotonic_ctl_add::$D48CF3A65902FF11438FB3F8C4936876 out;
};

/* 5404 */
struct monotonic_ctl_add::$8820E11CA3A10B2EAF390E421AF51B7F
{
  monotonic_config config;
};

/* 5405 */
struct monotonic_ctl_add::$D48CF3A65902FF11438FB3F8C4936876
{
  uint32_t_0 ctr;
};

/* 5406 */
union monotonic_ctl_enable
{
  monotonic_ctl_enable::$B1338441DD5866863C429E552103D2F5 in;
};

/* 5407 */
struct monotonic_ctl_enable::$B1338441DD5866863C429E552103D2F5
{
  _Bool enable;
};

/* 5408 */
union monotonic_ctl_info
{
  monotonic_ctl_info::$EB05540905303BAAD28C623EF3AA4649 out;
};

/* 5409 */
struct monotonic_ctl_info::$EB05540905303BAAD28C623EF3AA4649
{
  unsigned int nmonitors;
  unsigned int ncounters;
};

/* 5410 */
union monotonic_ctl_counts
{
  monotonic_ctl_counts::$FE5DF4E9F77ED8635563B68B6DC6C960 in;
  monotonic_ctl_counts::$D6C02E3F930B07DA6568EF38A557D026 out;
};

/* 5411 */
struct monotonic_ctl_counts::$FE5DF4E9F77ED8635563B68B6DC6C960
{
  uint64_t_0 ctr_mask;
};

/* 5412 */
struct monotonic_ctl_counts::$D6C02E3F930B07DA6568EF38A557D026
{
  uint64_t_0 counts[1];
};

/* 5413 */
struct thread_selfcounts_args
{
  int type;
  char type_r_[4];
  user_addr_t buf;
  user_size_t nbytes;
  char nbytes_r_[];
};

/* 5414 */
struct __attribute__((aligned(8))) getattrlist_attrtab
{
  attrgroup_t attr;
  uint64_t_0 bits;
  ssize_t size;
  kauth_action_t action;
};

/* 5415 */
typedef __darwin_ssize_t ssize_t;

/* 5416 */
typedef __int64 __darwin_ssize_t;

/* 5417 */
struct getvolattrlist_attrtab
{
  attrgroup_t attr;
  uint64_t_0 bits;
  ssize_t size;
};

/* 5418 */
struct __attribute__((aligned(8))) fd_vn_data
{
  lck_mtx_t fv_lock;
  off_t fv_offset;
  void *fv_dircookie;
  caddr_t fv_buf;
  size_t_0 fv_bufsiz;
  size_t_0 fv_bufdone;
  size_t_0 fv_bufallocsiz;
  off_t fv_soff;
  off_t fv_eoff;
  int fv_eofflag;
};

/* 5419 */
typedef kauth_filesec *kauth_filesec_t;

/* 5420 */
struct kauth_filesec
{
  u_int32_t fsec_magic;
  guid_t fsec_owner;
  guid_t fsec_group;
  kauth_acl fsec_acl;
};

/* 5421 */
struct attrlist
{
  u_short bitmapcount;
  u_int16_t reserved;
  attrgroup_t commonattr;
  attrgroup_t volattr;
  attrgroup_t dirattr;
  attrgroup_t fileattr;
  attrgroup_t forkattr;
};

/* 5422 */
struct _attrlist_buf
{
  char *base;
  char *fixedcursor;
  char *varcursor;
  ssize_t allocated;
  ssize_t needed;
  attribute_set_t actual;
  attribute_set_t valid;
};

/* 5423 */
struct user64_timespec
{
  user64_time_t tv_sec;
  user64_long_t tv_nsec;
};

/* 5424 */
typedef __int64_t user64_time_t;

/* 5425 */
typedef __int64_t user64_long_t;

/* 5426 */
struct user32_timespec
{
  user32_time_t tv_sec;
  user32_long_t tv_nsec;
};

/* 5427 */
typedef __int32_t user32_time_t;

/* 5428 */
typedef __int32_t user32_long_t;

/* 5429 */
struct attrreference
{
  int32_t attr_dataoffset;
  u_int32_t attr_length;
};

/* 5430 */
struct fgetattrlist_args
{
  int fd;
  char fd_r_[4];
  user_addr_t alist;
  user_addr_t attributeBuffer;
  user_size_t bufferSize;
  user_ulong_t options;
  char options_r_[];
};

/* 5431 */
struct getattrlist_args
{
  user_addr_t path;
  user_addr_t alist;
  user_addr_t attributeBuffer;
  user_size_t bufferSize;
  user_ulong_t options;
  char options_r_[];
};

/* 5432 */
struct getattrlistat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  user_addr_t alist;
  user_addr_t attributeBuffer;
  user_size_t bufferSize;
  user_ulong_t options;
  char options_r_[];
};

/* 5433 */
struct getattrlistbulk_args
{
  int dirfd;
  char dirfd_r_[4];
  user_addr_t alist;
  user_addr_t attributeBuffer;
  user_size_t bufferSize;
  uint64_t_0 options;
  char options_r_[];
};

/* 5434 */
struct setattrlist_args
{
  user_addr_t path;
  user_addr_t alist;
  user_addr_t attributeBuffer;
  user_size_t bufferSize;
  user_ulong_t options;
  char options_r_[];
};

/* 5435 */
struct fsetattrlist_args
{
  int fd;
  char fd_r_[4];
  user_addr_t alist;
  user_addr_t attributeBuffer;
  user_size_t bufferSize;
  user_ulong_t options;
  char options_r_[];
};

/* 5436 */
struct fs_buffer_cache_gc_callout_t
{
  void (*callout)(int, void *);
  void *context;
};

/* 5437 */
struct meta_zone_entry
{
  zone_t mz_zone;
  vm_size_t mz_size;
  vm_size_t mz_max;
  const char *mz_name;
};

/* 5438 */
struct bufhashhdr
{
  buf *lh_first;
};

/* 5439 */
struct buf::$847C27484AD3EA767C79E1C86C0041EE
{
  buf *le_next;
  buf **le_prev;
};

/* 5440 */
struct buf::$6B678162D55EC20D480A04FC8D26E8CA
{
  buf *tqe_next;
  buf **tqe_prev;
};

/* 5441 */
typedef buf *buf_t;

/* 5442 */
struct bufattr
{
  cpx *ba_cpx;
  uint64_t_0 ba_cp_file_off;
  uint64_t_0 ba_flags;
};

/* 5443 */
struct bufstats
{
  __int64 bufs_incore;
  __int64 bufs_busyincore;
  __int64 bufs_vmhits;
  __int64 bufs_miss;
  __int64 bufs_sleeps;
  __int64 bufs_eblk;
  __int64 bufs_iobufmax;
  __int64 bufs_iobufinuse;
  __int64 bufs_iobufsleeps;
  __int64 bufs_iobufinuse_vdev;
};

/* 5444 */
struct delayqueue
{
  buf *tqh_first;
  buf **tqh_last;
};

/* 5445 */
struct ioqueue
{
  buf *tqh_first;
  buf **tqh_last;
};

/* 5446 */
struct bqueues
{
  buf *tqh_first;
  buf **tqh_last;
};

/* 5447 */
typedef bufattr *bufattr_t;

/* 5448 */
typedef cpx *cpx_t;

/* 5449 */
struct dk_error_description_t
{
  uint64_t_0 options;
  uint64_t_0 reserved;
  uint64_t_0 description_size;
  char *description;
};

/* 5450 */
struct buf_iterate_info_t
{
  int flag;
  buflists *listhead;
};

/* 5451 */
struct vnop_bwrite_args
{
  vnodeop_desc *a_desc;
  buf_t a_bp;
};

/* 5452 */
struct nchashhead
{
  namecache *lh_first;
};

/* 5453 */
struct $174C9EE912997FA19B92470DBE7919E6
{
  namecache *tqh_first;
  namecache **tqh_last;
};

/* 5454 */
struct stringhead
{
  string_t *lh_first;
};

/* 5455 */
struct __attribute__((aligned(8))) string_t
{
  string_t::$73B82BF88B6ACFABC0E96AAA5AAD5D9E hash_chain;
  const char *str;
  uint32_t_0 refcount;
};

/* 5456 */
struct string_t::$73B82BF88B6ACFABC0E96AAA5AAD5D9E
{
  string_t *le_next;
  string_t **le_prev;
};

/* 5457 */
typedef string_t string_t_0;

/* 5458 */
struct cl_direct_read_locks
{
  cl_direct_read_lock *lh_first;
};

/* 5459 */
struct cl_direct_read_lock
{
  cl_direct_read_lock::$2DCD286A2077229BC0F0E7801273B25B chain;
  int32_t ref_count;
  vnode_t vp;
  lck_rw_t rw_lock;
};

/* 5460 */
struct cl_direct_read_lock::$2DCD286A2077229BC0F0E7801273B25B
{
  cl_direct_read_lock *le_next;
  cl_direct_read_lock **le_prev;
};

/* 5461 */
struct clios
{
  lck_mtx_t io_mtxp;
  u_int io_completed;
  u_int io_issued;
  int io_error;
  int io_wanted;
};

/* 5462 */
typedef cl_direct_read_lock cl_direct_read_lock_t;

/* 5463 */
struct vfs_drt_clustermap
{
  u_int32_t scm_magic;
  u_int32_t scm_modulus;
  u_int32_t scm_buckets;
  u_int32_t scm_lastclean;
  u_int32_t scm_iskips;
  vfs_drt_hashentry scm_hashtable[];
};

/* 5464 */
struct vfs_drt_hashentry
{
  u_int64_t dhe_control;
  u_int32_t dhe_bitvector[2];
};

/* 5465 */
struct cl_extent
{
  daddr64_t b_addr;
  daddr64_t e_addr;
};

/* 5466 */
struct fpx_event
{
  uuid_t fe_uuid;
  uint32_t_0 fe_code;
  uint32_t_0 fe_xcpt;
  fpx_event::$91E59568F84BF8EEBDAE077D54D85FB4 fe_link;
};

/* 5467 */
struct fpx_event::$91E59568F84BF8EEBDAE077D54D85FB4
{
  fpx_event *tqe_next;
  fpx_event **tqe_prev;
};

/* 5468 */
union $<7602268,1>::$F17E972038D7E3223D3F4D582B2FE22C
{
  $<7602268,1>::$F17E972038D7E3223D3F4D582B2FE22C::$94932B1B574F523FD02D147CE7397378 u_iovec;
  uio s_uio;
  char uio_buf[72];
};

/* 5469 */
union $<7602268,1>::$F17E972038D7E3223D3F4D582B2FE22C::$94932B1B574F523FD02D147CE7397378
{
  user_iovec s_uiovec;
  kern_iovec s_kiovec;
};

/* 5470 */
struct dqhash
{
  dquot *lh_first;
};

/* 5471 */
struct __attribute__((aligned(8))) dquot
{
  dquot::$AB0F73B76E34067C2AAD1F11F16FBF3A dq_hash;
  dquot::$01EC5590A5B7E1985747BC40217B3D1A dq_freelist;
  u_int16_t dq_flags;
  u_int16_t dq_cnt_unused;
  u_int16_t dq_lflags;
  u_int16_t dq_type;
  u_int32_t dq_id;
  u_int32_t dq_index;
  quotafile *dq_qfile;
  dqblk dq_dqb;
  uint32_t_0 dq_cnt;
};

/* 5472 */
struct dquot::$AB0F73B76E34067C2AAD1F11F16FBF3A
{
  dquot *le_next;
  dquot **le_prev;
};

/* 5473 */
struct dquot::$01EC5590A5B7E1985747BC40217B3D1A
{
  dquot *tqe_next;
  dquot **tqe_prev;
};

/* 5474 */
struct __attribute__((aligned(8))) quotafile
{
  lck_mtx_t qf_lock;
  vnode *qf_vp;
  kauth_cred_t qf_cred;
  int qf_shift;
  int qf_maxentries;
  int qf_entrycnt;
  u_int32_t qf_btime;
  u_int32_t qf_itime;
  char qf_qflags;
  int qf_refcnt;
};

/* 5475 */
struct dqfreelist
{
  dquot *tqh_first;
  dquot **tqh_last;
};

/* 5476 */
struct dqdirtylist
{
  dquot *tqh_first;
  dquot **tqh_last;
};

/* 5477 */
struct user_dqblk
{
  u_int64_t dqb_bhardlimit;
  u_int64_t dqb_bsoftlimit;
  u_int64_t dqb_curbytes;
  u_int32_t dqb_ihardlimit;
  u_int32_t dqb_isoftlimit;
  u_int32_t dqb_curinodes;
  u_int32_t dqb_btime;
  u_int32_t dqb_itime;
  u_int32_t dqb_id;
  u_int32_t dqb_spare[4];
};

/* 5478 */
struct dqfilehdr
{
  u_int32_t dqh_magic;
  u_int32_t dqh_version;
  u_int32_t dqh_maxentries;
  u_int32_t dqh_entrycnt;
  u_int32_t dqh_flags;
  u_int32_t dqh_chktime;
  u_int32_t dqh_btime;
  u_int32_t dqh_itime;
  char dqh_string[16];
  u_int32_t dqh_spare[4];
};

/* 5479 */
struct freelst
{
  vnode *tqh_first;
  vnode **tqh_last;
};

/* 5480 */
struct deadlst
{
  vnode *tqh_first;
  vnode **tqh_last;
};

/* 5481 */
struct async_work_lst
{
  vnode *tqh_first;
  vnode **tqh_last;
};

/* 5482 */
struct ragelst
{
  vnode *tqh_first;
  vnode **tqh_last;
};

/* 5483 */
struct mntlist
{
  mount *tqh_first;
  mount **tqh_last;
};

/* 5484 */
typedef kauth_scope *kauth_scope_t;

/* 5485 */
struct __attribute__((aligned(8))) kauth_scope
{
  kauth_scope::$887E2DB01809C5A2E1B3A83889F88E26 ks_link;
  volatile kauth_local_listener ks_listeners[15];
  const char *ks_identifier;
  kauth_scope_callback_t ks_callback;
  void *ks_idata;
  u_int ks_flags;
};

/* 5486 */
enum dk_apfs_flavour_t : __int32
{
  DK_APFS_ONE_DEVICE = 0x1,
  DK_APFS_FUSION = 0x2,
};

/* 5487 */
enum dir_clone_authorizer_op : __int32
{
  OP_AUTHORIZE = 0x0,
  OP_VATTR_SETUP = 0x1,
  OP_VATTR_CLEANUP = 0x2,
};

/* 5488 */
struct vnode_iterate_panic_hook
{
  panic_hook_t hook;
  mount_t mp;
  vnode *vp;
};

/* 5489 */
struct trigger_unmount_info
{
  vfs_context_t ctx;
  mount_t top_mp;
  vnode_t trigger_vp;
  mount_t trigger_mp;
  uint32_t_0 trigger_vid;
  int flags;
};

/* 5490 */
typedef unsigned int vfs_rename_flags_t;

/* 5491 */
struct _vnode_authorize_context
{
  vnode_t vp;
  vnode_attr *vap;
  vnode_t dvp;
  vnode_attr *dvap;
  vfs_context_t ctx;
  int flags;
  int flags_valid;
};

/* 5492 */
typedef _vnode_authorize_context *vauth_ctx;

/* 5493 */
struct user64_statfs
{
  __int16 f_otype;
  __int16 f_oflags;
  user64_long_t f_bsize;
  user64_long_t f_iosize;
  user64_long_t f_blocks;
  user64_long_t f_bfree;
  user64_long_t f_bavail;
  user64_long_t f_files;
  user64_long_t f_ffree;
  fsid_t f_fsid;
  uid_t f_owner;
  __int16 f_reserved1;
  __int16 f_type;
  user64_long_t f_flags;
  user64_long_t f_reserved2[2];
  char f_fstypename[15];
  char f_mntonname[90];
  char f_mntfromname[90];
  char f_reserved3;
  user64_long_t f_reserved4[4];
};

/* 5494 */
struct user32_statfs
{
  __int16 f_otype;
  __int16 f_oflags;
  user32_long_t f_bsize;
  user32_long_t f_iosize;
  user32_long_t f_blocks;
  user32_long_t f_bfree;
  user32_long_t f_bavail;
  user32_long_t f_files;
  user32_long_t f_ffree;
  fsid_t f_fsid;
  uid_t f_owner;
  __int16 f_reserved1;
  __int16 f_type;
  user32_long_t f_flags;
  user32_long_t f_reserved2[2];
  char f_fstypename[15];
  char f_mntonname[90];
  char f_mntfromname[90];
  char f_reserved3;
  user32_long_t f_reserved4[4];
};

/* 5495 */
struct vnode_trace_paths_context
{
  uint64_t_0 count;
  __int64 path[129];
};

/* 5496 */
struct dk_corestorage_info_t
{
  uint64_t_0 flags;
  uint64_t_0 hotfile_size;
  uint64_t_0 hibernate_minsize;
  uint64_t_0 swapfile_pinning;
  uint64_t_0 padding[4];
};

/* 5497 */
struct unmount_info
{
  int u_errs;
  int u_busy;
};

/* 5498 */
typedef dir_clone_authorizer_op dir_clone_authorizer_op_t;

/* 5499 */
struct __attribute__((aligned(8))) vnode_trigger_info
{
  trigger_vnode_resolve_callback_t vti_resolve_func;
  trigger_vnode_unresolve_callback_t vti_unresolve_func;
  trigger_vnode_rearm_callback_t vti_rearm_func;
  trigger_vnode_reclaim_callback_t vti_reclaim_func;
  void *vti_data;
  uint32_t_0 vti_flags;
};

/* 5500 */
typedef nspace_item_info nspace_item_info_0;

/* 5501 */
struct nspace_item_info
{
  vnode *vp;
  void *arg;
  uint64_t_0 op;
  uint32_t_0 vid;
  uint32_t_0 flags;
  uint32_t_0 token;
  uint32_t_0 refcount;
};

/* 5502 */
struct __attribute__((aligned(8))) nspace_handler_t
{
  uint64_t_0 handler_tid;
  proc *handler_proc;
  int handler_busy;
};

/* 5503 */
struct renameat_internal::$BF13F5CC76168E957B79C3A5FF4701D8
{
  nameidata from_node;
  nameidata to_node;
  vnode_attr fv_attr;
  vnode_attr tv_attr;
};

/* 5504 */
struct $<7782830,1>::$A1DEAD9D20839F73C00262525EAF84EF
{
  nameidata from_node;
  nameidata to_node;
};

/* 5505 */
struct $<7782894,1>::$2A903DBE5659CB01CA30985677B06844
{
  nameidata snapnd;
  nameidata dirnd;
};

/* 5506 */
enum nspace_type_t : __int32
{
  NSPACE_HANDLER_NSPACE = 0x0,
  NSPACE_HANDLER_SNAPSHOT = 0x1,
  NSPACE_HANDLER_COUNT = 0x2,
};

/* 5507 */
enum sync_type_t : __int32
{
  SYNC_ALL = 0x0,
  SYNC_ONLY_RELIABLE_MEDIA = 0x1,
  SYNC_ONLY_UNRELIABLE_MEDIA = 0x2,
};

/* 5508 */
struct open_nocancel_args
{
  user_addr_t path;
  int flags;
  char flags_r_[4];
  int mode;
  char mode_r_[4];
};

/* 5509 */
struct openat_nocancel_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  int flags;
  char flags_r_[4];
  int mode;
  char mode_r_[4];
};

/* 5510 */
struct accessx_descriptor
{
  unsigned int ad_name_offset;
  int ad_flags;
  int ad_pad[2];
};

/* 5511 */
struct fsync_args
{
  int fd;
  char fd_r_[4];
};

/* 5512 */
struct searchstate
{
  uint32_t_0 ss_union_flags;
  uint32_t_0 ss_union_layer;
  u_char ss_fsstate[548];
};

/* 5513 */
typedef attrreference attrreference_t;

/* 5514 */
struct cdirargs
{
  vnode_t olddp;
  vnode_t newdp;
};

/* 5515 */
struct getfsstat_struct
{
  user_addr_t sfsp;
  user_addr_t *mp;
  int count;
  int maxcount;
  int flags;
  int error;
};

/* 5516 */
struct user32_mnt_imgsrc_args
{
  uint32_t_0 mi_height;
  uint32_t_0 mi_flags;
  user32_addr_t mi_devpath;
};

/* 5517 */
struct user64_mnt_imgsrc_args
{
  uint32_t_0 mi_height;
  uint32_t_0 mi_flags;
  user64_addr_t mi_devpath;
};

/* 5518 */
typedef fileproc *(*fp_allocfn_t)(void *);

/* 5519 */
struct stat64
{
  dev_t st_dev;
  mode_t st_mode;
  nlink_t st_nlink;
  __darwin_ino64_t st_ino;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  timespec st_atimespec;
  timespec st_mtimespec;
  timespec st_ctimespec;
  timespec st_birthtimespec;
  off_t st_size;
  blkcnt_t st_blocks;
  blksize_t st_blksize;
  __uint32_t st_flags;
  __uint32_t st_gen;
  __int32_t st_lspare;
  __int64_t st_qspare[2];
};

/* 5520 */
typedef __uint16_t nlink_t;

/* 5521 */
typedef __darwin_blkcnt_t blkcnt_t;

/* 5522 */
typedef __int64_t __darwin_blkcnt_t;

/* 5523 */
typedef __darwin_blksize_t blksize_t;

/* 5524 */
typedef __int32_t __darwin_blksize_t;

/* 5525 */
struct __attribute__((packed)) __attribute__((aligned(4))) user32_stat64
{
  dev_t st_dev;
  mode_t st_mode;
  nlink_t st_nlink;
  ino64_t st_ino;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  user32_timespec st_atimespec;
  user32_timespec st_mtimespec;
  user32_timespec st_ctimespec;
  user32_timespec st_birthtimespec;
  off_t st_size;
  blkcnt_t st_blocks;
  blksize_t st_blksize;
  __uint32_t st_flags;
  __uint32_t st_gen;
  __uint32_t st_lspare;
  __int64_t st_qspare[2];
};

/* 5526 */
struct stat
{
  dev_t st_dev;
  ino_t st_ino;
  mode_t st_mode;
  nlink_t st_nlink;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  timespec st_atimespec;
  timespec st_mtimespec;
  timespec st_ctimespec;
  off_t st_size;
  blkcnt_t st_blocks;
  blksize_t st_blksize;
  __uint32_t st_flags;
  __uint32_t st_gen;
  __int32_t st_lspare;
  __int64_t st_qspare[2];
};

/* 5527 */
struct user32_stat
{
  dev_t st_dev;
  ino_t st_ino;
  mode_t st_mode;
  nlink_t st_nlink;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  user32_timespec st_atimespec;
  user32_timespec st_mtimespec;
  user32_timespec st_ctimespec;
  off_t st_size;
  blkcnt_t st_blocks;
  blksize_t st_blksize;
  __uint32_t st_flags;
  __uint32_t st_gen;
  __int32_t st_lspare;
  __int64_t st_qspare[2];
};

/* 5528 */
struct user64_stat64
{
  dev_t st_dev;
  mode_t st_mode;
  nlink_t st_nlink;
  ino64_t st_ino;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  user64_timespec st_atimespec;
  user64_timespec st_mtimespec;
  user64_timespec st_ctimespec;
  user64_timespec st_birthtimespec;
  off_t st_size;
  blkcnt_t st_blocks;
  blksize_t st_blksize;
  __uint32_t st_flags;
  __uint32_t st_gen;
  __uint32_t st_lspare;
  __int64_t st_qspare[2];
};

/* 5529 */
struct user64_stat
{
  dev_t st_dev;
  ino_t st_ino;
  mode_t st_mode;
  nlink_t st_nlink;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  user64_timespec st_atimespec;
  user64_timespec st_mtimespec;
  user64_timespec st_ctimespec;
  off_t st_size;
  blkcnt_t st_blocks;
  blksize_t st_blksize;
  __uint32_t st_flags;
  __uint32_t st_gen;
  __int32_t st_lspare;
  __int64_t st_qspare[2];
};

/* 5530 */
union fstatat_internal::$780A56AAFB9D57B9D4F03874896A25B4
{
  stat sb;
  stat64 sb64;
};

/* 5531 */
union fstatat_internal::$0EA60586FE88ADE112369BB55B1F4C16
{
  user64_stat user64_sb;
  user32_stat user32_sb;
  user64_stat64 user64_sb64;
  user32_stat64 user32_sb64;
};

/* 5532 */
typedef namespace_handler_data namespace_handler_data_0;

/* 5533 */
struct namespace_handler_data
{
  user_addr_t token;
  user_addr_t flags;
  user_addr_t fdptr;
  user_addr_t infoptr;
  user_addr_t objid;
  user_addr_t reserved1;
  user_addr_t reserved2;
  user_addr_t reserved3;
};

/* 5534 */
struct fs_snapshot_mount_args
{
  mount_t sm_mp;
  componentname *sm_cnp;
};

/* 5535 */
struct fs_snapshot_root_args
{
  componentname *sr_cnp;
};

/* 5536 */
struct fs_snapshot_revert_args
{
  componentname *sr_cnp;
};

/* 5537 */
struct sync_args
{
  int32_t dummy;
};

/* 5538 */
struct user_mac
{
  user_size_t m_buflen;
  user_addr_t m_string;
};

/* 5539 */
struct user64_mac
{
  uint64_t_0 m_buflen;
  uint64_t_0 m_string;
};

/* 5540 */
struct user32_mac
{
  uint32_t_0 m_buflen;
  uint32_t_0 m_string;
};

/* 5541 */
struct fmount_args
{
  user_addr_t type;
  int fd;
  char fd_r_[4];
  int flags;
  char flags_r_[4];
  user_addr_t data;
  char data_r_[];
};

/* 5542 */
struct unmount_args
{
  user_addr_t path;
  int flags;
  char flags_r_[4];
};

/* 5543 */
struct quotactl_args
{
  user_addr_t path;
  int cmd;
  char cmd_r_[4];
  int uid;
  char uid_r_[4];
  user_addr_t arg;
  char arg_r_[];
};

/* 5544 */
struct statfs_args
{
  user_addr_t path;
  user_addr_t buf;
  char buf_r_[];
};

/* 5545 */
struct fstatfs_args
{
  int fd;
  char fd_r_[4];
  user_addr_t buf;
  char buf_r_[];
};

/* 5546 */
struct statfs64_args
{
  user_addr_t path;
  user_addr_t buf;
  char buf_r_[];
};

/* 5547 */
struct statfs64
{
  uint32_t_0 f_bsize;
  int32_t f_iosize;
  uint64_t_0 f_blocks;
  uint64_t_0 f_bfree;
  uint64_t_0 f_bavail;
  uint64_t_0 f_files;
  uint64_t_0 f_ffree;
  fsid_t f_fsid;
  uid_t f_owner;
  uint32_t_0 f_type;
  uint32_t_0 f_flags;
  uint32_t_0 f_fssubtype;
  char f_fstypename[16];
  char f_mntonname[1024];
  char f_mntfromname[1024];
  uint32_t_0 f_reserved[8];
};

/* 5548 */
struct fstatfs64_args
{
  int fd;
  char fd_r_[4];
  user_addr_t buf;
  char buf_r_[];
};

/* 5549 */
struct getfsstat_args
{
  user_addr_t buf;
  int bufsize;
  char bufsize_r_[4];
  int flags;
  char flags_r_[4];
};

/* 5550 */
struct getfsstat64_args
{
  user_addr_t buf;
  int bufsize;
  char bufsize_r_[4];
  int flags;
  char flags_r_[4];
};

/* 5551 */
struct fchdir_args
{
  int fd;
  char fd_r_[4];
};

/* 5552 */
struct __pthread_fchdir_args
{
  int fd;
  char fd_r_[4];
};

/* 5553 */
struct chdir_args
{
  user_addr_t path;
  char path_r_[];
};

/* 5554 */
struct __pthread_chdir_args
{
  user_addr_t path;
  char path_r_[];
};

/* 5555 */
struct chroot_args
{
  user_addr_t path;
  char path_r_[];
};

/* 5556 */
struct open_args
{
  user_addr_t path;
  int flags;
  char flags_r_[4];
  int mode;
  char mode_r_[4];
};

/* 5557 */
struct openat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  int flags;
  char flags_r_[4];
  int mode;
  char mode_r_[4];
};

/* 5558 */
struct openbyid_np_args
{
  user_addr_t fsid;
  user_addr_t objid;
  int oflags;
  char oflags_r_[4];
};

/* 5559 */
struct mknod_args
{
  user_addr_t path;
  int mode;
  char mode_r_[4];
  int dev;
  char dev_r_[4];
};

/* 5560 */
struct mkfifo_extended_args
{
  user_addr_t path;
  uid_t uid;
  char uid_r_[4];
  gid_t gid;
  char gid_r_[4];
  int mode;
  char mode_r_[4];
  user_addr_t xsecurity;
  char xsecurity_r_[];
};

/* 5561 */
struct mkfifo_args
{
  user_addr_t path;
  int mode;
  char mode_r_[4];
};

/* 5562 */
struct link_args
{
  user_addr_t path;
  user_addr_t link;
  char link_r_[];
};

/* 5563 */
struct symlink_args
{
  user_addr_t path;
  user_addr_t link;
  char link_r_[];
};

/* 5564 */
struct symlinkat_args
{
  user_addr_t path1;
  int fd;
  char fd_r_[4];
  user_addr_t path2;
  char path2_r_[];
};

/* 5565 */
struct undelete_args
{
  user_addr_t path;
  char path_r_[];
};

/* 5566 */
struct delete_args
{
  user_addr_t path;
  char path_r_[];
};

/* 5567 */
struct unlink_args
{
  user_addr_t path;
  char path_r_[];
};

/* 5568 */
struct unlinkat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  int flag;
  char flag_r_[4];
};

/* 5569 */
struct lseek_args
{
  int fd;
  char fd_r_[4];
  off_t offset;
  int whence;
  char whence_r_[4];
};

/* 5570 */
struct access_extended_args
{
  user_addr_t entries;
  user_size_t size;
  user_addr_t results;
  uid_t uid;
  char uid_r_[4];
};

/* 5571 */
struct access_args
{
  user_addr_t path;
  int flags;
  char flags_r_[4];
};

/* 5572 */
struct faccessat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  int amode;
  char amode_r_[4];
  int flag;
  char flag_r_[4];
};

/* 5573 */
struct stat_extended_args
{
  user_addr_t path;
  user_addr_t ub;
  user_addr_t xsecurity;
  user_addr_t xsecurity_size;
  char xsecurity_size_r_[];
};

/* 5574 */
struct stat_args
{
  user_addr_t path;
  user_addr_t ub;
  char ub_r_[];
};

/* 5575 */
struct stat64_args
{
  user_addr_t path;
  user_addr_t ub;
  char ub_r_[];
};

/* 5576 */
struct stat64_extended_args
{
  user_addr_t path;
  user_addr_t ub;
  user_addr_t xsecurity;
  user_addr_t xsecurity_size;
  char xsecurity_size_r_[];
};

/* 5577 */
struct lstat_extended_args
{
  user_addr_t path;
  user_addr_t ub;
  user_addr_t xsecurity;
  user_addr_t xsecurity_size;
  char xsecurity_size_r_[];
};

/* 5578 */
struct lstat_args
{
  user_addr_t path;
  user_addr_t ub;
  char ub_r_[];
};

/* 5579 */
struct lstat64_args
{
  user_addr_t path;
  user_addr_t ub;
  char ub_r_[];
};

/* 5580 */
struct lstat64_extended_args
{
  user_addr_t path;
  user_addr_t ub;
  user_addr_t xsecurity;
  user_addr_t xsecurity_size;
  char xsecurity_size_r_[];
};

/* 5581 */
struct fstatat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  user_addr_t ub;
  int flag;
  char flag_r_[4];
};

/* 5582 */
struct fstatat64_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  user_addr_t ub;
  int flag;
  char flag_r_[4];
};

/* 5583 */
struct pathconf_args
{
  user_addr_t path;
  int name;
  char name_r_[4];
};

/* 5584 */
struct readlink_args
{
  user_addr_t path;
  user_addr_t buf;
  int count;
  char count_r_[4];
};

/* 5585 */
struct readlinkat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  user_addr_t buf;
  user_size_t bufsize;
  char bufsize_r_[];
};

/* 5586 */
struct chflags_args
{
  user_addr_t path;
  int flags;
  char flags_r_[4];
};

/* 5587 */
struct fchflags_args
{
  int fd;
  char fd_r_[4];
  int flags;
  char flags_r_[4];
};

/* 5588 */
struct chmod_extended_args
{
  user_addr_t path;
  uid_t uid;
  char uid_r_[4];
  gid_t gid;
  char gid_r_[4];
  int mode;
  char mode_r_[4];
  user_addr_t xsecurity;
  char xsecurity_r_[];
};

/* 5589 */
struct chmod_args
{
  user_addr_t path;
  int mode;
  char mode_r_[4];
};

/* 5590 */
struct fchmodat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  int mode;
  char mode_r_[4];
  int flag;
  char flag_r_[4];
};

/* 5591 */
struct fchmod_args
{
  int fd;
  char fd_r_[4];
  int mode;
  char mode_r_[4];
};

/* 5592 */
struct chown_args
{
  user_addr_t path;
  int uid;
  char uid_r_[4];
  int gid;
  char gid_r_[4];
};

/* 5593 */
struct lchown_args
{
  user_addr_t path;
  uid_t owner;
  char owner_r_[4];
  gid_t group;
  char group_r_[4];
};

/* 5594 */
struct fchown_args
{
  int fd;
  char fd_r_[4];
  int uid;
  char uid_r_[4];
  int gid;
  char gid_r_[4];
};

/* 5595 */
struct utimes_args
{
  user_addr_t path;
  user_addr_t tptr;
  char tptr_r_[];
};

/* 5596 */
struct __attribute__((aligned(8))) user64_timeval
{
  user64_time_t tv_sec;
  __int32_t tv_usec;
};

/* 5597 */
struct user32_timeval
{
  user32_time_t tv_sec;
  __int32_t tv_usec;
};

/* 5598 */
struct futimes_args
{
  int fd;
  char fd_r_[4];
  user_addr_t tptr;
  char tptr_r_[];
};

/* 5599 */
struct truncate_args
{
  user_addr_t path;
  off_t length;
  char length_r_[];
};

/* 5600 */
struct ftruncate_args
{
  int fd;
  char fd_r_[4];
  off_t length;
  char length_r_[];
};

/* 5601 */
struct fsync_nocancel_args
{
  int fd;
  char fd_r_[4];
};

/* 5602 */
struct fdatasync_args
{
  int fd;
  char fd_r_[4];
};

/* 5603 */
struct clonefileat_args
{
  int src_dirfd;
  char src_dirfd_r_[4];
  user_addr_t src;
  int dst_dirfd;
  char dst_dirfd_r_[4];
  user_addr_t dst;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 5604 */
struct rename_args
{
  user_addr_t from;
  user_addr_t to;
  char to_r_[];
};

/* 5605 */
struct renameatx_np_args
{
  int fromfd;
  char fromfd_r_[4];
  user_addr_t from;
  int tofd;
  char tofd_r_[4];
  user_addr_t to;
  u_int flags;
  char flags_r_[4];
};

/* 5606 */
struct renameat_args
{
  int fromfd;
  char fromfd_r_[4];
  user_addr_t from;
  int tofd;
  char tofd_r_[4];
  user_addr_t to;
  char to_r_[];
};

/* 5607 */
struct mkdir_extended_args
{
  user_addr_t path;
  uid_t uid;
  char uid_r_[4];
  gid_t gid;
  char gid_r_[4];
  int mode;
  char mode_r_[4];
  user_addr_t xsecurity;
  char xsecurity_r_[];
};

/* 5608 */
struct mkdir_args
{
  user_addr_t path;
  int mode;
  char mode_r_[4];
};

/* 5609 */
struct mkdirat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t path;
  int mode;
  char mode_r_[4];
};

/* 5610 */
struct rmdir_args
{
  user_addr_t path;
  char path_r_[];
};

/* 5611 */
struct getdirentries64_args
{
  int fd;
  char fd_r_[4];
  user_addr_t buf;
  user_size_t bufsize;
  user_addr_t position;
  char position_r_[];
};

/* 5612 */
struct umask_extended_args
{
  int newmask;
  char newmask_r_[4];
  user_addr_t xsecurity;
  char xsecurity_r_[];
};

/* 5613 */
struct umask_args
{
  int newmask;
  char newmask_r_[4];
};

/* 5614 */
struct revoke_args
{
  user_addr_t path;
  char path_r_[];
};

/* 5615 */
struct exchangedata_args
{
  user_addr_t path1;
  user_addr_t path2;
  user_ulong_t options;
  char options_r_[];
};

/* 5616 */
struct user64_fssearchblock
{
  user64_addr_t returnattrs;
  user64_addr_t returnbuffer;
  user64_size_t returnbuffersize;
  user64_ulong_t maxmatches;
  user64_timeval timelimit;
  user64_addr_t searchparams1;
  user64_size_t sizeofsearchparams1;
  user64_addr_t searchparams2;
  user64_size_t sizeofsearchparams2;
  attrlist searchattrs;
};

/* 5617 */
typedef __uint64_t user64_ulong_t;

/* 5618 */
struct user32_fssearchblock
{
  user32_addr_t returnattrs;
  user32_addr_t returnbuffer;
  user32_size_t returnbuffersize;
  user32_ulong_t maxmatches;
  user32_timeval timelimit;
  user32_addr_t searchparams1;
  user32_size_t sizeofsearchparams1;
  user32_addr_t searchparams2;
  user32_size_t sizeofsearchparams2;
  attrlist searchattrs;
};

/* 5619 */
typedef __uint32_t user32_ulong_t;

/* 5620 */
struct fsctl_args
{
  user_addr_t path;
  user_ulong_t cmd;
  user_addr_t data;
  u_int options;
  char options_r_[4];
};

/* 5621 */
struct getxattr_args
{
  user_addr_t path;
  user_addr_t attrname;
  user_addr_t value;
  user_size_t size;
  uint32_t_0 position;
  char position_r_[4];
  int options;
  char options_r_[4];
};

/* 5622 */
struct fgetxattr_args
{
  int fd;
  char fd_r_[4];
  user_addr_t attrname;
  user_addr_t value;
  user_size_t size;
  uint32_t_0 position;
  char position_r_[4];
  int options;
  char options_r_[4];
};

/* 5623 */
struct setxattr_args
{
  user_addr_t path;
  user_addr_t attrname;
  user_addr_t value;
  user_size_t size;
  uint32_t_0 position;
  char position_r_[4];
  int options;
  char options_r_[4];
};

/* 5624 */
struct fsetxattr_args
{
  int fd;
  char fd_r_[4];
  user_addr_t attrname;
  user_addr_t value;
  user_size_t size;
  uint32_t_0 position;
  char position_r_[4];
  int options;
  char options_r_[4];
};

/* 5625 */
struct removexattr_args
{
  user_addr_t path;
  user_addr_t attrname;
  int options;
  char options_r_[4];
};

/* 5626 */
struct fremovexattr_args
{
  int fd;
  char fd_r_[4];
  user_addr_t attrname;
  int options;
  char options_r_[4];
};

/* 5627 */
struct flistxattr_args
{
  int fd;
  char fd_r_[4];
  user_addr_t namebuf;
  user_size_t bufsize;
  int options;
  char options_r_[4];
};

/* 5628 */
struct fsgetpath_args
{
  user_addr_t buf;
  user_size_t bufsize;
  user_addr_t fsid;
  uint64_t_0 objid;
  char objid_r_[];
};

/* 5629 */
struct vfs_purge_args
{
  int32_t dummy;
};

/* 5630 */
struct vnop_revoke_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  int a_flags;
  vfs_context_t a_context;
};

/* 5631 */
struct vnop_readdirattr_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  attrlist *a_alist;
  uio *a_uio;
  uint32_t_0 a_maxcount;
  uint32_t_0 a_options;
  uint32_t_0 *a_newstate;
  int *a_eofflag;
  uint32_t_0 *a_actualcount;
  vfs_context_t a_context;
};

/* 5632 */
struct vnop_allocate_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  off_t a_length;
  u_int32_t a_flags;
  off_t *a_bytesallocated;
  off_t a_offset;
  vfs_context_t a_context;
};

/* 5633 */
struct vnop_searchfs_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  void *a_searchparams1;
  void *a_searchparams2;
  attrlist *a_searchattrs;
  uint32_t_0 a_maxmatches;
  timeval *a_timelimit;
  attrlist *a_returnattrs;
  uint32_t_0 *a_nummatches;
  uint32_t_0 a_scriptcode;
  uint32_t_0 a_options;
  uio *a_uio;
  searchstate *a_searchstate;
  vfs_context_t a_context;
};

/* 5634 */
struct vnop_whiteout_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  componentname *a_cnp;
  int a_flags;
  vfs_context_t a_context;
};

/* 5635 */
struct vnop_exchange_args
{
  vnodeop_desc *a_desc;
  vnode_t a_fvp;
  vnode_t a_tvp;
  int a_options;
  vfs_context_t a_context;
};

/* 5636 */
struct vnop_strategy_args
{
  vnodeop_desc *a_desc;
  buf *a_bp;
};

/* 5637 */
struct vnop_copyfile_args
{
  vnodeop_desc *a_desc;
  vnode_t a_fvp;
  vnode_t a_tdvp;
  vnode_t a_tvp;
  componentname *a_tcnp;
  int a_mode;
  int a_flags;
  vfs_context_t a_context;
};

/* 5638 */
struct unicode_mappings16
{
  u_int16_t _key;
  u_int16_t _value;
};

/* 5639 */
struct unicode_mappings32
{
  u_int32_t _key;
  u_int32_t _value;
};

/* 5640 */
typedef attr_entry attr_entry_t;

/* 5641 */
struct attr_entry
{
  u_int32_t offset;
  u_int32_t length;
  u_int16_t flags;
  u_int8_t namelen;
  u_int8_t name[1];
};

/* 5642 */
typedef attr_header attr_header_t;

/* 5643 */
struct attr_header
{
  apple_double_header_t appledouble;
  u_int32_t magic;
  u_int32_t debug_tag;
  u_int32_t total_size;
  u_int32_t data_start;
  u_int32_t data_length;
  u_int32_t reserved[3];
  u_int16_t flags;
  u_int16_t num_attrs;
};

/* 5644 */
typedef apple_double_header apple_double_header_t;

/* 5645 */
struct apple_double_header
{
  u_int32_t magic;
  u_int32_t version;
  u_int32_t filler[4];
  u_int16_t numEntries;
  __attribute__((packed)) __attribute__((aligned(1))) apple_double_entry_t entries[2];
  u_int8_t finfo[32];
  u_int8_t pad[2];
};

/* 5646 */
typedef apple_double_entry apple_double_entry_t;

/* 5647 */
struct apple_double_entry
{
  u_int32_t type;
  u_int32_t offset;
  u_int32_t length;
};

/* 5648 */
typedef rsrcfork_header rsrcfork_header_t;

/* 5649 */
struct __attribute__((packed)) __attribute__((aligned(2))) rsrcfork_header
{
  u_int32_t fh_DataOffset;
  u_int32_t fh_MapOffset;
  u_int32_t fh_DataLength;
  u_int32_t fh_MapLength;
  u_int8_t systemData[112];
  u_int8_t appData[128];
  u_int32_t mh_DataOffset;
  u_int32_t mh_MapOffset;
  u_int32_t mh_DataLength;
  u_int32_t mh_MapLength;
  u_int32_t mh_Next;
  u_int16_t mh_RefNum;
  u_int8_t mh_Attr;
  u_int8_t mh_InMemoryAttr;
  u_int16_t mh_Types;
  u_int16_t mh_Names;
  u_int16_t typeCount;
};

/* 5650 */
typedef attr_info attr_info_t;

/* 5651 */
struct __attribute__((aligned(8))) attr_info
{
  vfs_context_t context;
  vnode_t filevp;
  size_t_0 filesize;
  size_t_0 iosize;
  u_int8_t *rawdata;
  size_t_0 rawsize;
  apple_double_header_t *filehdr;
  apple_double_entry_t *finderinfo;
  apple_double_entry_t *rsrcfork;
  attr_header_t *attrhdr;
  attr_entry_t *attr_entry;
  u_int8_t readonly;
  u_int8_t emptyfinderinfo;
};

/* 5652 */
struct vfs_fsentry
{
  vfsops *vfe_vfsops;
  int vfe_vopcnt;
  vnodeopv_desc **vfe_opvdescs;
  int vfe_fstypenum;
  char vfe_fsname[15];
  uint32_t_0 vfe_flags;
  void *vfe_reserv[2];
};

/* 5653 */
typedef int (*PFI)(void *);

/* 5654 */
struct vnop_getattrlistbulk_args
{
  vnodeop_desc *a_desc;
  vnode_t a_vp;
  attrlist *a_alist;
  vnode_attr *a_vap;
  uio *a_uio;
  void *a_private;
  uint64_t_0 a_options;
  int32_t *a_eofflag;
  int32_t *a_actualcount;
  vfs_context_t a_context;
};

/* 5655 */
typedef uint32_t_0 compound_vnop_id_t;

/* 5656 */
struct vnop_renamex_args
{
  vnodeop_desc *a_desc;
  vnode_t a_fdvp;
  vnode_t a_fvp;
  componentname *a_fcnp;
  vnode_t a_tdvp;
  vnode_t a_tvp;
  componentname *a_tcnp;
  vnode_attr *a_vap;
  vfs_rename_flags_t a_flags;
  vfs_context_t a_context;
};

/* 5657 */
struct vnop_setlabel_args
{
  vnodeop_desc *a_desc;
  vnode *a_vp;
  label *a_vl;
  vfs_context_t a_context;
};

/* 5658 */
struct vfsioattr
{
  u_int32_t io_maxreadcnt;
  u_int32_t io_maxwritecnt;
  u_int32_t io_segreadcnt;
  u_int32_t io_segwritecnt;
  u_int32_t io_maxsegreadsize;
  u_int32_t io_maxsegwritesize;
  u_int32_t io_devblocksize;
  u_int32_t io_flags;
  vfsioattr::$414DF51ACD7ECE23E926D67B48B4232C _anon_0;
};

/* 5659 */
union vfsioattr::$414DF51ACD7ECE23E926D67B48B4232C
{
  int64_t io_max_swappin_available;
  void *io_reserved[2];
};

/* 5660 */
typedef vfstable *vfstable_t;

/* 5661 */
struct vnop_compound_open_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  int a_fmode;
  componentname *a_cnp;
  vnode_attr *a_vap;
  uint32_t_0 a_flags;
  uint32_t_0 *a_status;
  vfs_context_t a_context;
  int (*a_open_create_authorizer)(vnode_t, componentname *, vnode_attr *, vfs_context_t, void *);
  int (*a_open_existing_authorizer)(vnode_t, componentname *, int, vfs_context_t, void *);
  void *a_reserved;
};

/* 5662 */
struct vnop_compound_remove_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vnode_attr *a_vap;
  uint32_t_0 a_flags;
  vfs_context_t a_context;
  int (*a_remove_authorizer)(vnode_t, vnode_t, componentname *, vfs_context_t, void *);
  void *a_reserved;
};

/* 5663 */
struct vnop_compound_rename_args
{
  vnodeop_desc *a_desc;
  vnode_t a_fdvp;
  vnode_t *a_fvpp;
  componentname *a_fcnp;
  vnode_attr *a_fvap;
  vnode_t a_tdvp;
  vnode_t *a_tvpp;
  componentname *a_tcnp;
  vnode_attr *a_tvap;
  uint32_t_0 a_flags;
  vfs_context_t a_context;
  int (*a_rename_authorizer)(vnode_t, vnode_t, componentname *, vnode_t, vnode_t, componentname *, vfs_context_t, void *);
  void *a_reserved;
};

/* 5664 */
struct vnop_compound_mkdir_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vnode_attr *a_vap;
  uint32_t_0 a_flags;
  vfs_context_t a_context;
  void *a_reserved;
};

/* 5665 */
struct vnop_compound_rmdir_args
{
  vnodeop_desc *a_desc;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vnode_attr *a_vap;
  uint32_t_0 a_flags;
  vfs_context_t a_context;
  int (*a_rmdir_authorizer)(vnode_t, vnode_t, componentname *, vfs_context_t, void *);
  void *a_reserved;
};

/* 5666 */
struct vnop_clonefile_args
{
  vnodeop_desc *a_desc;
  vnode_t a_fvp;
  vnode_t a_dvp;
  vnode_t *a_vpp;
  componentname *a_cnp;
  vnode_attr *a_vap;
  uint32_t_0 a_flags;
  vfs_context_t a_context;
  int (*a_dir_clone_authorizer)(vnode_attr *, kauth_action_t, vnode_attr *, vnode_t, mount_t, dir_clone_authorizer_op_t, uint32_t_0, vfs_context_t, void *);
  void *a_reserved;
};

/* 5667 */
struct vnop_kqfilt_add_args
{
  vnodeop_desc *a_desc;
  vnode *a_vp;
  knote *a_kn;
  vfs_context_t a_context;
};

/* 5668 */
struct vnop_kqfilt_remove_args
{
  vnodeop_desc *a_desc;
  vnode *a_vp;
  uintptr_t a_ident;
  vfs_context_t a_context;
};

/* 5669 */
struct kfse_list
{
  kfs_event *lh_first;
};

/* 5670 */
struct kfs_event
{
  kfs_event::$010B7DDFF66448F7D7035B78267CB49F kevent_list;
  int16_t type;
  u_int16_t flags;
  u_int16_t len;
  int32_t refcount;
  pid_t pid;
  uint64_t_0 abstime;
  ino64_t ino;
  dev_t dev;
  int32_t mode;
  uid_t uid;
  gid_t gid;
  const char *str;
  kfs_event *dest;
};

/* 5671 */
struct kfs_event::$010B7DDFF66448F7D7035B78267CB49F
{
  kfs_event *le_next;
  kfs_event **le_prev;
};

/* 5672 */
typedef fs_event_watcher fs_event_watcher_0;

/* 5673 */
struct __attribute__((aligned(4))) fs_event_watcher
{
  int8_t *event_list;
  int32_t num_events;
  dev_t *devices_not_to_watch;
  uint32_t_0 num_devices;
  int32_t flags;
  kfs_event_0 **event_queue;
  int32_t eventq_size;
  int32_t num_readers;
  int32_t rd;
  int32_t wr;
  int32_t blockers;
  int32_t my_id;
  uint32_t_0 num_dropped;
  uint64_t_0 max_event_id;
  fsevent_handle *fseh;
  pid_t pid;
  char proc_name[33];
};

/* 5674 */
typedef kfs_event kfs_event_0;

/* 5675 */
struct fsevent_handle
{
  UInt32 flags;
  SInt32 active;
  fs_event_watcher_0 *watcher;
  klist knotes;
  selinfo si;
};

/* 5676 */
typedef fsevent_clone_args32 fsevent_clone_args32_0;

/* 5677 */
struct fsevent_clone_args32
{
  user32_addr_t event_list;
  int32_t num_events;
  int32_t event_queue_depth;
  user32_addr_t fd;
};

/* 5678 */
typedef fsevent_clone_args64 fsevent_clone_args64_0;

/* 5679 */
struct fsevent_clone_args64
{
  user64_addr_t event_list;
  int32_t num_events;
  int32_t event_queue_depth;
  user64_addr_t fd;
};

/* 5680 */
typedef fsevent_handle fsevent_handle_0;

/* 5681 */
typedef fsevent_dev_filter_args32 fsevent_dev_filter_args32_0;

/* 5682 */
struct fsevent_dev_filter_args32
{
  uint32_t_0 num_devices;
  user32_addr_t devices;
};

/* 5683 */
typedef fsevent_dev_filter_args64 fsevent_dev_filter_args64_0;

/* 5684 */
struct __attribute__((packed)) __attribute__((aligned(4))) fsevent_dev_filter_args64
{
  uint32_t_0 num_devices;
  user64_addr_t devices;
};

/* 5685 */
typedef uint32_t_0 cp_key_os_version_t;

/* 5686 */
struct aes_encrypt_ctx
{
  cccbc_ctx ctx[18];
};

/* 5687 */
typedef uint32_t_0 cpx_flags_t;

/* 5688 */
struct cp_lock_vfs_callback_arg
{
  cp_lock_state_t state;
  int valid_uuid;
  uuid_t volume_uuid;
};

/* 5689 */
typedef unsigned __int8 cp_lock_state_t;

/* 5690 */
typedef sha1_ctxt SHA1_CTX;

/* 5691 */
struct __attribute__((aligned(8))) sha1_ctxt
{
  sha1_ctxt::$A01CE9150C838406A0B57815ABE5AEAB h;
  sha1_ctxt::$DCF25A7769259DE8700A0B1469FCAC12 c;
  sha1_ctxt::$9FE90C0FA1EEEEC2E41664332BE6F08F m;
  u_int8_t count;
};

/* 5692 */
union sha1_ctxt::$A01CE9150C838406A0B57815ABE5AEAB
{
  u_int8_t b8[20];
  u_int32_t b32[5];
};

/* 5693 */
union sha1_ctxt::$DCF25A7769259DE8700A0B1469FCAC12
{
  u_int8_t b8[8];
  u_int32_t b32[2];
  u_int64_t b64[1];
};

/* 5694 */
union sha1_ctxt::$9FE90C0FA1EEEEC2E41664332BE6F08F
{
  u_int8_t b8[64];
  u_int32_t b32[16];
};

/* 5695 */
typedef int cp_key_store_action_t;

/* 5696 */
struct _disk_conditioner_info_t
{
  disk_conditioner_info_0 dcinfo;
  saved_mount_fields mnt_fields;
  daddr64_t last_blkno;
  timeval last_io_timestamp;
};

/* 5697 */
typedef disk_conditioner_info disk_conditioner_info_0;

/* 5698 */
struct disk_conditioner_info
{
  int enabled;
  uint64_t_0 access_time_usec;
  uint64_t_0 read_throughput_mbps;
  uint64_t_0 write_throughput_mbps;
  int is_ssd;
  uint32_t_0 ioqueue_depth;
  uint32_t_0 maxreadcnt;
  uint32_t_0 maxwritecnt;
  uint32_t_0 segreadcnt;
  uint32_t_0 segwritecnt;
};

/* 5699 */
struct saved_mount_fields
{
  uint32_t_0 mnt_maxreadcnt;
  uint32_t_0 mnt_maxwritecnt;
  uint32_t_0 mnt_segreadcnt;
  uint32_t_0 mnt_segwritecnt;
  uint32_t_0 mnt_ioqueue_depth;
  uint32_t_0 mnt_ioscale;
};

/* 5700 */
struct fdhashhead
{
  fdescnode *lh_first;
};

/* 5701 */
struct __attribute__((aligned(8))) fdescnode
{
  fdescnode::$B862D88BCEEA171E88C75576AE77BF53 fd_hash;
  vnode *fd_vnode;
  fdntype fd_type;
  __int64 fd_fd;
  const char *fd_link;
  int fd_ix;
};

/* 5702 */
struct fdescnode::$B862D88BCEEA171E88C75576AE77BF53
{
  fdescnode *le_next;
  fdescnode **le_prev;
};

/* 5703 */
enum fdntype : __int32
{
  Fdesc = 0x0,
};

/* 5704 */
enum $BF00221854376C5C13AB1869E360BA45 : __int32
{
  DEV_DIR = 0x0,
  DEV_BDEV = 0x1,
  DEV_CDEV = 0x2,
  DEV_SLNK = 0x3,
  DEV_DEVFD = 0x4,
};

/* 5705 */
typedef devnode devnode_t;

/* 5706 */
struct devnode
{
  devfstype_t dn_type;
  int dn_refcount;
  u_short dn_mode;
  uid_t dn_uid;
  gid_t dn_gid;
  timespec dn_atime;
  timespec dn_mtime;
  timespec dn_ctime;
  int (***dn_ops)(void *);
  int dn_links;
  devfsmount *dn_dvm;
  vnode *dn_vn;
  int dn_len;
  devdirent_t *dn_linklist;
  devnode_t *dn_nextsibling;
  devnode_t **dn_prevsiblingp;
  devnode_type_t dn_typeinfo;
  int dn_change;
  int dn_update;
  int dn_access;
  int dn_lflags;
  ino_t dn_ino;
  int (*dn_clone)(dev_t, int);
  label *dn_label;
};

/* 5707 */
typedef $BF00221854376C5C13AB1869E360BA45 devfstype_t;

/* 5708 */
struct devfsmount
{
  mount *mount;
  devdirent_t *plane_root;
};

/* 5709 */
typedef devdirent devdirent_t;

/* 5710 */
struct devdirent
{
  char de_name[32];
  devnode_t *de_dnp;
  devnode_t *de_parent;
  devdirent_t *de_next;
  devdirent_t **de_prevp;
  devdirent_t *de_nextlink;
  devdirent_t **de_prevlinkp;
};

/* 5711 */
typedef devnode_type devnode_type_t;

/* 5712 */
union devnode_type
{
  dev_t dev;
  devnode_type::$CA64C6FF8CDE0427C66EF87C3FDF1492 Dir;
  devnode_type::$1C67C5EB951C6A713A2D7566340C3A29 Slnk;
};

/* 5713 */
struct __attribute__((aligned(8))) devnode_type::$CA64C6FF8CDE0427C66EF87C3FDF1492
{
  devdirent_t *dirlist;
  devdirent_t **dirlast;
  devnode_t *parent;
  devdirent_t *myname;
  int entrycount;
};

/* 5714 */
struct __attribute__((aligned(8))) devnode_type::$1C67C5EB951C6A713A2D7566340C3A29
{
  char *name;
  int namelen;
};

/* 5715 */
struct __attribute__((aligned(8))) _throttle_io_info_t
{
  lck_mtx_t throttle_lock;
  timeval throttle_last_write_timestamp;
  timeval throttle_min_timer_deadline;
  timeval throttle_window_start_timestamp[4];
  timeval throttle_last_IO_timestamp[4];
  pid_t throttle_last_IO_pid[4];
  timeval throttle_start_IO_period_timestamp[4];
  int32_t throttle_inflight_count[4];
  _throttle_io_info_t::$2F8731EE5CEE647440942FF11E8E160C throttle_uthlist[4];
  int throttle_next_wake_level;
  thread_call_t throttle_timer_call;
  int32_t throttle_timer_ref;
  int32_t throttle_timer_active;
  int32_t throttle_io_count;
  int32_t throttle_io_count_begin;
  int *throttle_io_periods;
  uint32_t_0 throttle_io_period_num;
  int32_t throttle_refcnt;
  int32_t throttle_alloc;
  int32_t throttle_disabled;
  int32_t throttle_is_fusion_with_priority;
};

/* 5716 */
struct _throttle_io_info_t::$2F8731EE5CEE647440942FF11E8E160C
{
  uthread *tqh_first;
  uthread **tqh_last;
};

/* 5717 */
typedef int spec_strategy::strategy_fcn_ret_t(buf *);

/* 5718 */
typedef __throttle_info_handle *throttle_info_handle_t;

/* 5719 */
struct __throttle_info_handle;

/* 5720 */
struct devfs_stats
{
  int nodes;
  int entries;
  int mounts;
  int stringspace;
};

/* 5721 */
typedef devfs_vnode_event *devfs_vnode_event_t;

/* 5722 */
struct devfs_vnode_event
{
  vnode_t dve_vp;
  uint32_t_0 dve_vid;
  uint32_t_0 dve_events;
};

/* 5723 */
typedef devfs_event_log *devfs_event_log_t;

/* 5724 */
struct devfs_event_log
{
  size_t_0 del_max;
  size_t_0 del_used;
  devfs_vnode_event_t del_entries;
};

/* 5725 */
struct decmpfs_registration
{
  int decmpfs_registration;
  decmpfs_validate_compressed_file_func validate;
  decmpfs_adjust_fetch_region_func adjust_fetch;
  decmpfs_fetch_uncompressed_data_func fetch;
  decmpfs_free_compressed_data_func free_data;
  decmpfs_get_decompression_flags_func get_flags;
};

/* 5726 */
typedef int (*decmpfs_validate_compressed_file_func)(vnode_t, vfs_context_t, decmpfs_header *);

/* 5727 */
struct __attribute__((packed)) __attribute__((aligned(4))) decmpfs_header
{
  uint32_t_0 attr_size;
  uint32_t_0 compression_magic;
  uint32_t_0 compression_type;
  uint64_t_0 uncompressed_size;
  unsigned __int8 attr_bytes[];
};

/* 5728 */
typedef void (*decmpfs_adjust_fetch_region_func)(vnode_t, vfs_context_t, decmpfs_header *, off_t *, user_ssize_t *);

/* 5729 */
typedef int (*decmpfs_fetch_uncompressed_data_func)(vnode_t, vfs_context_t, decmpfs_header *, off_t, user_ssize_t, int, decmpfs_vector *, uint64_t_0 *);

/* 5730 */
struct decmpfs_vector
{
  void *buf;
  user_ssize_t size;
};

/* 5731 */
typedef int (*decmpfs_free_compressed_data_func)(vnode_t, vfs_context_t, decmpfs_header *);

/* 5732 */
typedef uint64_t_0 (*decmpfs_get_decompression_flags_func)(vnode_t, vfs_context_t, decmpfs_header *);

/* 5733 */
typedef decmpfs_cnode decmpfs_cnode_0;

/* 5734 */
struct decmpfs_cnode
{
  uint8_t_0 cmp_state;
  uint8_t_0 cmp_minimal_xattr;
  uint32_t_0 cmp_type;
  uint32_t_0 lockcount;
  void *lockowner;
  uint64_t_0 uncompressed_size;
  uint64_t_0 decompression_flags;
  lck_rw_t compressed_data_lock;
};

/* 5735 */
struct bpf_d
{
  bpf_d *bd_next;
  caddr_t bd_sbuf;
  caddr_t bd_hbuf;
  caddr_t bd_fbuf;
  int bd_slen;
  int bd_hlen;
  u_int32_t bd_scnt;
  u_int32_t bd_hcnt;
  int bd_bufsize;
  int bd_hbuf_read;
  int bd_headdrop;
  bpf_if *bd_bif;
  u_int32_t bd_rtout;
  bpf_insn *bd_filter;
  u_int32_t bd_rcount;
  u_int32_t bd_dcount;
  u_char bd_promisc;
  u_char bd_state;
  u_char bd_immediate;
  int bd_async;
  int bd_sig;
  pid_t bd_sigio;
  u_char bd_pad;
  selinfo bd_sel;
  int bd_hdrcmplt;
  int bd_seesent;
  int bd_oflags;
  thread_call_t bd_thread_call;
  int bd_traffic_class;
  int bd_flags;
  int bd_refcnt;
  void *bd_ref_lr[4];
  void *bd_unref_lr[4];
  int bd_next_ref_lr;
  int bd_next_unref_lr;
  proc_0 *bd_opened_by;
  uuid_t bd_uuid;
};

/* 5736 */
struct bpf_insn
{
  u_short code;
  u_char jt;
  u_char jf;
  bpf_u_int32 k;
};

/* 5737 */
typedef u_int32_t bpf_u_int32;

/* 5738 */
typedef _class_queue_ class_queue_t;

/* 5739 */
struct __attribute__((aligned(8))) _class_queue_
{
  _class_queue_::$1B92DBB074205102EEC9B05C11EE245E __pktq_u;
  u_int32_t qlen;
  u_int32_t qlim;
  u_int64_t qsize;
  classq_type_t qtype;
  classq_state_t qstate;
  classq_pkt_type_t qptype;
};

/* 5740 */
union _class_queue_::$1B92DBB074205102EEC9B05C11EE245E
{
  mq_head __mbufq;
  kq_head __kpktq;
};

/* 5741 */
struct mq_head
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 5742 */
struct kq_head
{
  __kern_packet *kq_first;
  __kern_packet **kq_last;
};

/* 5743 */
struct __kern_packet
{
  __kern_quantum pkt_qum;
  __packet pkt_com;
  __flow pkt_flow;
  uint32_t_0 pkt_kflags;
  uint32_t_0 pkt_policy_id;
  __kern_packet::$20AA0C26CBAF55DA3384D904DA8EA36E _anon_0;
  __kern_packet *pkt_nextpkt;
  mbuf *pkt_mbuf;
  uint64_t_0 pkt_timestamp;
  __kern_packet::$25E19527D540B5919B576C3DFE1FAD16 _anon_1;
  flowadv_idx_t pkt_flowsrc_fidx;
  uint32_t_0 pkt_flowsrc_type;
  uint32_t_0 pkt_classq_hash;
  uint32_t_0 pkt_classq_flags;
  __kern_packet::$CD2EFEC1811EC185E601ACA1F78A4B06 __tx_compl_data;
  uint32_t_0 pkt_compl_callbacks;
  u_int32_t pkt_compl_context;
  const uint16_t pkt_bufs_max;
  const uint16_t pkt_bufs_cnt;
  __kern_buflet pkt_bufs[1];
};

/* 5744 */
struct __kern_quantum
{
  __quantum qum_com;
  __kern_quantum::$8937B0AA4D4B2948CBB7832C9F7B2CE6 qum_upp_link;
  const kern_pbufpool *qum_pp;
  const __user_quantum *qum_user;
  const obj_idx_t qum_idx;
  const __kern_slot_desc *qum_ksd;
  const nexus_meta_type_t qum_type;
  const nexus_meta_subtype_t qum_subtype;
  __kern_buflet qum_buf[1];
};

/* 5745 */
struct __quantum
{
  __quantum::$C56DC61673DA32CE1E72450AD1D58C57 __flow_id_u;
  uint16_t __nm_off;
  uint16_t __flags;
  uint32_t_0 __len;
  const obj_idx_t __idx;
  uint32_t_0 __pad;
};

/* 5746 */
union __quantum::$C56DC61673DA32CE1E72450AD1D58C57
{
  uuid_t __uuid;
  uint8_t_0 __val8[16];
  uint16_t __val16[8];
  uint32_t_0 __val32[4];
  uint64_t_0 __val64[2];
};

/* 5747 */
typedef uint32_t_0 obj_idx_t;

/* 5748 */
struct __kern_quantum::$8937B0AA4D4B2948CBB7832C9F7B2CE6
{
  __kern_quantum *sle_next;
};

/* 5749 */
struct kern_pbufpool
{
  lck_mtx_t pp_lock;
  uint32_t_0 pp_refcnt;
  uint32_t_0 pp_flags;
  uint32_t_0 pp_max_frags;
  uint32_t_0 pp_buflet_size;
  skmem_cache *pp_mdk_cache;
  skmem_cache *pp_buf_cache;
  skmem_region *pp_mdu_region;
  skmem_region *pp_mdk_region;
  skmem_region *pp_buf_region;
  void *pp_ctx;
  nexus_meta_type_t pp_md_type;
  nexus_meta_subtype_t pp_md_subtype;
  uint32_t_0 pp_midx_start;
  uint32_t_0 pp_bidx_start;
  pbufpool_name_t pp_name;
  pbuf_seg_ctor_fn_t pp_pbuf_seg_ctor;
  pbuf_seg_dtor_fn_t pp_pbuf_seg_dtor;
};

/* 5750 */
struct skmem_cache
{
  uint64_t_0 skm_alloc_fail;
  uint64_t_0 skm_bufinuse;
  uint64_t_0 skm_bufmax;
  uint64_t_0 skm_rescale;
  uint64_t_0 skm_sl_create;
  uint64_t_0 skm_sl_destroy;
  uint64_t_0 skm_sl_alloc;
  uint64_t_0 skm_sl_free;
  uint64_t_0 skm_depot_contention;
  uint64_t_0 skm_depot_contention_prev;
  skmem_cache::$87E332E0E7A24E30D2E98A3E03D29CCD skm_link;
  char skm_name[64];
  size_t_0 skm_bufsize;
  size_t_0 skm_align;
  uint32_t_0 skm_mode;
  skmem_ctor_fn_t skm_ctor;
  skmem_dtor_fn_t skm_dtor;
  skmem_reclaim_fn_t skm_reclaim;
  void *skm_private;
  skmem_region *skm_region;
  lck_mtx_t skm_sl_lock;
  size_t_0 skm_chunksize;
  size_t_0 skm_objsize;
  size_t_0 skm_slabsize;
  size_t_0 skm_hash_initial;
  size_t_0 skm_hash_limit;
  size_t_0 skm_hash_shift;
  size_t_0 skm_hash_mask;
  skmem_bufctl_bkt *skm_hash_table;
  skmem_cache::$B13567E7FD4CF7DFF11D25C7888DB37E skm_sl_partial;
  skmem_cache::$B13567E7FD4CF7DFF11D25C7888DB37E skm_sl_empty;
  lck_mtx_t skm_dp_lock;
  skmem_magtype *skm_magtype;
  skmem_maglist skm_full;
  skmem_maglist skm_empty;
  skmem_cpu_cache skm_cpu_cache[1];
};

/* 5751 */
struct skmem_cache::$87E332E0E7A24E30D2E98A3E03D29CCD
{
  skmem_cache *tqe_next;
  skmem_cache **tqe_prev;
};

/* 5752 */
typedef int (*skmem_ctor_fn_t)(skmem_obj_info *, skmem_obj_info *, void *, uint32_t_0);

/* 5753 */
struct skmem_obj_info
{
  void *oi_addr;
  size_t_0 oi_size;
  obj_idx_t oi_idx_reg;
  obj_idx_t oi_idx_seg;
  sksegment *oi_seg;
};

/* 5754 */
struct __attribute__((aligned(8))) sksegment
{
  sksegment::$EBE6DE46E237A09E457B36AC0691AFF9 sg_link;
  skmem_region *sg_region;
  IOSKMemoryBufferRef sg_md;
  mach_vm_address_t sg_start;
  mach_vm_address_t sg_end;
  uint32_t_0 sg_index;
  sksegment_type_t sg_type;
  sksegment_state_t sg_state;
};

/* 5755 */
struct sksegment::$EBE6DE46E237A09E457B36AC0691AFF9
{
  sksegment *tqe_next;
  sksegment **tqe_prev;
};

/* 5756 */
struct skmem_region
{
  lck_mtx_t skr_lock;
  uint32_t_0 skr_refcnt;
  uint64_t_0 skr_meminuse;
  uint64_t_0 skr_w_meminuse;
  uint64_t_0 skr_memtotal;
  uint64_t_0 skr_seginuse;
  uint64_t_0 skr_rescale;
  uint64_t_0 skr_alloc;
  uint64_t_0 skr_free;
  skmem_region_params skr_params;
  skmem_region::$313A7D7CEDB22462C6BF56A8B70BBDE2 skr_link;
  char skr_name[64];
  uuid_t skr_uuid;
  IOSKMemoryBufferSpec skr_bufspec;
  IOSKRegionSpec skr_regspec;
  IOSKRegionRef skr_reg;
  uint32_t_0 skr_mode;
  size_t_0 skr_size;
  void *skr_private;
  sksegment_ctor_fn_t skr_seg_ctor;
  sksegment_dtor_fn_t skr_seg_dtor;
  sksegment **skr_seg_lut;
  size_t_0 skr_seg_objs;
  bitmap_t *skr_seg_bmap;
  size_t_0 skr_seg_bmap_len;
  size_t_0 skr_seg_free_cnt;
  size_t_0 skr_hash_initial;
  size_t_0 skr_hash_limit;
  size_t_0 skr_hash_shift;
  size_t_0 skr_hash_mask;
  sksegment_bkt *skr_hash_table;
  segfreehead skr_seg_free;
  uint32_t_0 skr_seg_waiters;
  skmem_region *skr_mirror;
};

/* 5757 */
struct skmem_region_params
{
  const char *srp_name;
  skmem_region_id_t srp_id;
  uint32_t_0 srp_cflags;
  size_t_0 srp_r_seg_size;
  size_t_0 srp_c_seg_size;
  size_t_0 srp_seg_cnt;
  size_t_0 srp_r_obj_size;
  size_t_0 srp_r_obj_cnt;
  size_t_0 srp_c_obj_size;
  size_t_0 srp_c_obj_cnt;
  nexus_meta_type_t srp_md_type;
  nexus_meta_subtype_t srp_md_subtype;
  size_t_0 srp_max_frags;
};

/* 5758 */
enum skmem_region_id_t : __int32
{
  SKMEM_REGION_SCHEMA = 0x0,
  SKMEM_REGION_RING = 0x1,
  SKMEM_REGION_BUF = 0x2,
  SKMEM_REGION_MDU = 0x3,
  SKMEM_REGION_USD = 0x4,
  SKMEM_REGION_USTATS = 0x5,
  SKMEM_REGION_FLOWADV = 0x6,
  SKMEM_REGION_NEXUSADV = 0x7,
  SKMEM_REGION_SYSCTLS = 0x8,
  SKMEM_REGION_MDK = 0x9,
  SKMEM_REGION_KSD = 0xA,
  SKMEM_REGION_KSTATS = 0xB,
  SKMEM_REGIONS = 0xC,
};

/* 5759 */
enum nexus_meta_type_t : __int32
{
  NEXUS_META_TYPE_INVALID = 0x0,
  NEXUS_META_TYPE_QUANTUM = 0x1,
  NEXUS_META_TYPE_PACKET = 0x2,
  NEXUS_META_TYPE_RESERVED = 0x3,
  NEXUS_META_TYPE_MAX = 0x3,
};

/* 5760 */
enum nexus_meta_subtype_t : __int32
{
  NEXUS_META_SUBTYPE_INVALID = 0x0,
  NEXUS_META_SUBTYPE_PAYLOAD = 0x1,
  NEXUS_META_SUBTYPE_RAW = 0x2,
  NEXUS_META_SUBTYPE_RESERVED = 0x3,
  NEXUS_META_SUBTYPE_MAX = 0x3,
};

/* 5761 */
struct skmem_region::$313A7D7CEDB22462C6BF56A8B70BBDE2
{
  skmem_region *tqe_next;
  skmem_region **tqe_prev;
};

/* 5762 */
struct IOSKMemoryBufferSpec
{
  boolean_t writable;
  boolean_t purgeable;
};

/* 5763 */
struct IOSKRegionSpec
{
  boolean_t noRedirect;
};

/* 5764 */
typedef IOSKRegion *IOSKRegionRef;

/* 5765 */
struct __cppobj IOSKRegion : OSObject:96
{
  IOSKRegionSpec fSpec;
  IOLock *fRegionLock;
  OSData *fArenaData;
  IOSKRegion::Segment *fSegments;
  IOSKCount fSegmentCount;
  IOSKSize fSegmentSize;
};

/* 5766 */
typedef void (*sksegment_ctor_fn_t)(sksegment *, IOSKMemoryBufferRef, void *);

/* 5767 */
typedef IOSKMemoryRef IOSKMemoryBufferRef;

/* 5768 */
typedef IOMemoryDescriptor *IOSKMemoryRef;

/* 5769 */
struct __cppobj __attribute__((aligned(8))) IOMemoryDescriptor : OSObject
{
  IOMemoryDescriptorReserved *reserved;
  OSSet *_mappings;
  IOOptionBits _flags;
  IOMemoryReference *_memRef;
  vm_tag_t _kernelTag;
  vm_tag_t _userTag;
  int16_t _dmaReferences;
  uint16_t _internalFlags;
  kern_allocation_name_t _mapName;
  uintptr_t __iomd_reserved3;
  uintptr_t __iomd_reserved4;
  IOByteCount _length;
  IOOptionBits _tag;
};

/* 5770 */
typedef void (*sksegment_dtor_fn_t)(sksegment *, IOSKMemoryBufferRef, void *);

/* 5771 */
struct sksegment_bkt
{
  sksegment_bkt::$47D6BAFED8E9504763C63702E5687C8D sgb_head;
};

/* 5772 */
struct sksegment_bkt::$47D6BAFED8E9504763C63702E5687C8D
{
  sksegment *tqh_first;
  sksegment **tqh_last;
};

/* 5773 */
struct segfreehead
{
  sksegment *tqh_first;
  sksegment **tqh_last;
};

/* 5774 */
enum sksegment_type_t : __int32
{
  SKSEG_TYPE_INVALID = 0x0,
  SKSEG_TYPE_ALLOC = 0x1,
  SKSEG_TYPE_FREE = 0x2,
  SKSEG_TYPE_DESTROYED = 0x3,
};

/* 5775 */
enum sksegment_state_t : __int32
{
  SKSEG_STATE_INVALID = 0x0,
  SKSEG_STATE_DETACHED = 0x1,
  SKSEG_STATE_MAPPED = 0x2,
  SKSEG_STATE_MAPPED_WIRED = 0x3,
  SKSEG_STATE_MAPPED_PERSISTENT = 0x4,
};

/* 5776 */
typedef void (*skmem_dtor_fn_t)(void *, void *);

/* 5777 */
typedef void (*skmem_reclaim_fn_t)(void *);

/* 5778 */
struct skmem_bufctl_bkt
{
  skmem_bufctl_bkt::$4EB751CA0CA782A9B4AAE8CA83053255 bcb_head;
};

/* 5779 */
struct skmem_bufctl_bkt::$4EB751CA0CA782A9B4AAE8CA83053255
{
  skmem_bufctl *slh_first;
};

/* 5780 */
struct __attribute__((aligned(8))) skmem_bufctl
{
  skmem_bufctl::$2C3CEE6268418EB1CB0180DAD16792BD bc_link;
  void *bc_addr;
  void *bc_addrm;
  skmem_slab *bc_slab;
  uint32_t_0 bc_idx;
};

/* 5781 */
struct skmem_bufctl::$2C3CEE6268418EB1CB0180DAD16792BD
{
  skmem_bufctl *sle_next;
};

/* 5782 */
struct skmem_slab
{
  skmem_slab::$49AA32C7B4D1EA8EFA2DE1647FFCFA9F sl_link;
  skmem_cache *sl_cache;
  void *sl_base;
  void *sl_basem;
  sksegment *sl_seg;
  sksegment *sl_segm;
  skmem_slab::$4EB751CA0CA782A9B4AAE8CA83053255 sl_head;
  uint32_t_0 sl_refcnt;
  uint32_t_0 sl_chunks;
};

/* 5783 */
struct skmem_slab::$49AA32C7B4D1EA8EFA2DE1647FFCFA9F
{
  skmem_slab *tqe_next;
  skmem_slab **tqe_prev;
};

/* 5784 */
struct skmem_slab::$4EB751CA0CA782A9B4AAE8CA83053255
{
  skmem_bufctl *slh_first;
};

/* 5785 */
struct skmem_cache::$B13567E7FD4CF7DFF11D25C7888DB37E
{
  skmem_slab *tqh_first;
  skmem_slab **tqh_last;
};

/* 5786 */
struct skmem_magtype
{
  int mt_magsize;
  int mt_align;
  size_t_0 mt_minbuf;
  size_t_0 mt_maxbuf;
  mcache *mt_cache;
  char mt_cname[64];
};

/* 5787 */
struct mcache
{
  mcache::$97BFBB8DD2826FAA0858EA0DAE76D89E mc_list;
  char mc_name[32];
  zone *mc_slab_zone;
  mcache_allocfn_t mc_slab_alloc;
  mcache_freefn_t mc_slab_free;
  mcache_auditfn_t mc_slab_audit;
  mcache_logfn_t mc_slab_log;
  mcache_notifyfn_t mc_slab_notify;
  void *mc_private;
  size_t_0 mc_bufsize;
  size_t_0 mc_align;
  u_int32_t mc_flags;
  u_int32_t mc_purge_cnt;
  u_int32_t mc_enable_cnt;
  u_int32_t mc_waiter_cnt;
  u_int32_t mc_wretry_cnt;
  u_int32_t mc_nwretry_cnt;
  u_int32_t mc_nwfail_cnt;
  lck_mtx_t mc_sync_lock;
  lck_attr_t *mc_sync_lock_attr;
  lck_grp_t *mc_sync_lock_grp;
  lck_grp_attr_t *mc_sync_lock_grp_attr;
  lck_attr_t *mc_cpu_lock_attr;
  lck_grp_t *mc_cpu_lock_grp;
  lck_grp_attr_t *mc_cpu_lock_grp_attr;
  lck_mtx_t mc_bkt_lock;
  lck_attr_t *mc_bkt_lock_attr;
  lck_grp_t *mc_bkt_lock_grp;
  lck_grp_attr_t *mc_bkt_lock_grp_attr;
  mcache_bkttype_t *cache_bkttype;
  mcache_bktlist_t mc_full;
  mcache_bktlist_t mc_empty;
  size_t_0 mc_chunksize;
  u_int32_t mc_bkt_contention;
  u_int32_t mc_bkt_contention_prev;
  mcache_cpu_t mc_cpu[1];
};

/* 5788 */
struct mcache::$97BFBB8DD2826FAA0858EA0DAE76D89E
{
  mcache *le_next;
  mcache **le_prev;
};

/* 5789 */
typedef unsigned int (*mcache_allocfn_t)(void *, mcache_obj_t ***, unsigned int, int);

/* 5790 */
typedef mcache_obj mcache_obj_t;

/* 5791 */
struct mcache_obj
{
  mcache_obj *obj_next;
};

/* 5792 */
typedef void (*mcache_freefn_t)(void *, mcache_obj_t *, boolean_t);

/* 5793 */
typedef void (*mcache_auditfn_t)(void *, mcache_obj_t *, boolean_t);

/* 5794 */
typedef void (*mcache_logfn_t)(u_int32_t, mcache_obj_t *, boolean_t);

/* 5795 */
typedef void (*mcache_notifyfn_t)(void *, u_int32_t);

/* 5796 */
typedef mcache_bkttype mcache_bkttype_t;

/* 5797 */
struct mcache_bkttype
{
  int bt_bktsize;
  size_t_0 bt_minbuf;
  size_t_0 bt_maxbuf;
  mcache *bt_cache;
};

/* 5798 */
typedef mcache_bktlist mcache_bktlist_t;

/* 5799 */
struct mcache_bktlist
{
  mcache_bkt_t *bl_list;
  u_int32_t bl_total;
  u_int32_t bl_min;
  u_int32_t bl_reaplimit;
  u_int64_t bl_alloc;
};

/* 5800 */
typedef mcache_bkt mcache_bkt_t;

/* 5801 */
struct mcache_bkt
{
  void *bkt_next;
  void *bkt_obj[1];
};

/* 5802 */
typedef mcache_cpu mcache_cpu_t;

/* 5803 */
struct __attribute__((aligned(128))) mcache_cpu
{
  lck_mtx_t cc_lock;
  mcache_bkt_t *cc_filled;
  mcache_bkt_t *cc_pfilled;
  u_int64_t cc_alloc;
  u_int64_t cc_free;
  int cc_objs;
  int cc_pobjs;
  int cc_bktsize;
};

/* 5804 */
struct skmem_maglist
{
  skmem_maglist::$F6050935AFC39B50C328D675A0135D87 ml_list;
  uint32_t_0 ml_total;
  uint32_t_0 ml_min;
  uint32_t_0 ml_reaplimit;
  uint64_t_0 ml_alloc;
};

/* 5805 */
struct skmem_maglist::$F6050935AFC39B50C328D675A0135D87
{
  skmem_mag *slh_first;
};

/* 5806 */
struct skmem_mag
{
  skmem_mag::$201B649ED67E831D61E546712481FC91 mg_link;
  void *mg_round[1];
};

/* 5807 */
struct skmem_mag::$201B649ED67E831D61E546712481FC91
{
  skmem_mag *sle_next;
};

/* 5808 */
struct __attribute__((aligned(128))) skmem_cpu_cache
{
  lck_mtx_t cp_lock;
  skmem_mag *cp_loaded;
  skmem_mag *cp_ploaded;
  uint64_t_0 cp_alloc;
  uint64_t_0 cp_free;
  int cp_rounds;
  int cp_prounds;
  int cp_magsize;
};

/* 5809 */
typedef uint8_t_0 pbufpool_name_t[64];

/* 5810 */
typedef void (*pbuf_seg_ctor_fn_t)(const kern_pbufpool_t, const kern_segment_t, const IOSKMemoryDescriptor);

/* 5811 */
typedef kern_pbufpool *kern_pbufpool_t;

/* 5812 */
typedef sksegment *kern_segment_t;

/* 5813 */
typedef IOSKMemoryRef IOSKMemoryDescriptor;

/* 5814 */
typedef void (*pbuf_seg_dtor_fn_t)(const kern_pbufpool_t, const kern_segment_t, const IOSKMemoryDescriptor);

/* 5815 */
struct __user_quantum
{
  __quantum qum_com;
  __user_buflet qum_buf[1];
};

/* 5816 */
struct __user_buflet
{
  __buflet buf_com;
};

/* 5817 */
struct __attribute__((aligned(8))) __buflet
{
  const mach_vm_address_t __addr;
  const obj_idx_t __idx;
  const uint16_t __dlim;
  uint16_t __dlen;
  uint16_t __doff;
  uint16_t __pad;
};

/* 5818 */
struct __kern_slot_desc
{
  __kern_slot_desc::$9F7784CBE26DDBE1E37CAB909033EB05 _anon_0;
};

/* 5819 */
union __kern_slot_desc::$9F7784CBE26DDBE1E37CAB909033EB05
{
  __kern_quantum *sd_qum;
  __kern_packet *sd_pkt;
  void *sd_md;
};

/* 5820 */
struct __kern_buflet
{
  __buflet buf_com;
  const kern_packet_t buf_ph;
  const mach_vm_offset_t buf_roff;
  const obj_idx_t buf_idx_seg;
  const sksegment *buf_seg;
};

/* 5821 */
typedef uint64_t_0 kern_packet_t;

/* 5822 */
struct __packet
{
  uint16_t __link_flags;
  uint16_t __hdr_l2_off;
  uint32_t_0 __payload_flags;
  uint16_t __hdr_l3_off;
  uint16_t __hdr_l4_off;
  uint32_t_0 __csum_flags;
  __packet::$E4324572D6431B78D846BE95834BB2D0 _anon_0;
  uint32_t_0 __svc_class;
};

/* 5823 */
union __packet::$E4324572D6431B78D846BE95834BB2D0
{
  __packet::$E4324572D6431B78D846BE95834BB2D0::$A62A73D2937B373254B47F50C826559D __csum_rx;
  __packet::$E4324572D6431B78D846BE95834BB2D0::$3D3125FEB18FFD5D69AE988786D2D802 __csum_tx;
  uint32_t_0 __csum_data;
};

/* 5824 */
struct __packet::$E4324572D6431B78D846BE95834BB2D0::$A62A73D2937B373254B47F50C826559D
{
  uint16_t __csum_start_off;
  uint16_t __csum_value;
};

/* 5825 */
struct __packet::$E4324572D6431B78D846BE95834BB2D0::$3D3125FEB18FFD5D69AE988786D2D802
{
  uint16_t __csum_start_off;
  uint16_t __csum_stuff_off;
};

/* 5826 */
struct __attribute__((aligned(16))) __flow
{
  __flow::$9BA720ABA5F6A13E873A2F626CE19936 flow_l2;
  __flow::$C28C7AA74C0E0E77079B5EB3F558A4DC flow_l3;
  __flow::$C2F90DB138611A8F5CACB96990126A27 flow_l4;
  uint32_t_0 _ulen;
};

/* 5827 */
union __flow::$9BA720ABA5F6A13E873A2F626CE19936
{
  uint8_t_0 _l2_buf[16];
  __flow::$9BA720ABA5F6A13E873A2F626CE19936::$24771037464E0054EB21F329A752E40E _l2_eth;
};

/* 5828 */
struct __flow::$9BA720ABA5F6A13E873A2F626CE19936::$24771037464E0054EB21F329A752E40E
{
  uint8_t_0 _src[6];
  uint8_t_0 _dst[6];
  uint16_t _type;
  uint16_t _vlan_tci;
};

/* 5829 */
struct __flow::$C28C7AA74C0E0E77079B5EB3F558A4DC
{
  __flow::$C28C7AA74C0E0E77079B5EB3F558A4DC::$0D91BE7E100398E6A38DABEFECE33CC7 _anon_0;
  uint8_t_0 _l3_ip_ver;
  uint8_t_0 _l3_proto;
  uint8_t_0 _l3_hlen;
  uint8_t_0 _l3_pad[5];
  mach_vm_address_t _l3_ptr;
};

/* 5830 */
union __flow::$C28C7AA74C0E0E77079B5EB3F558A4DC::$0D91BE7E100398E6A38DABEFECE33CC7
{
  __flow_l3_ipv4_addrs _l3_ipv4;
  __flow_l3_ipv6_addrs _l3_ipv6;
};

/* 5831 */
struct __flow_l3_ipv4_addrs
{
  in_addr _src;
  in_addr _dst;
};

/* 5832 */
struct __flow_l3_ipv6_addrs
{
  in6_addr _src;
  in6_addr _dst;
};

/* 5833 */
struct __flow::$C2F90DB138611A8F5CACB96990126A27
{
  __flow::$C2F90DB138611A8F5CACB96990126A27::$7E840BF40B27689D09198238082D5C4B _anon_0;
  uint8_t_0 _l4_hlen;
  uint8_t_0 _l4_pad[7];
  mach_vm_address_t _l4_ptr;
};

/* 5834 */
union __flow::$C2F90DB138611A8F5CACB96990126A27::$7E840BF40B27689D09198238082D5C4B
{
  __flow_l4_tcp _l4_tcp;
  __flow_l4_udp _l4_udp;
  __flow_l4_esp _l4_esp;
};

/* 5835 */
struct __flow_l4_tcp
{
  in_port_t _src;
  in_port_t _dst;
  uint32_t_0 _seq;
  uint32_t_0 _ack;
  __flow_l4_tcp::$F0D59F0FC38237CC7E770C3F09D8CDFD _anon_0;
};

/* 5836 */
union __flow_l4_tcp::$F0D59F0FC38237CC7E770C3F09D8CDFD
{
  __flow_l4_tcp::$F0D59F0FC38237CC7E770C3F09D8CDFD::$57269FAB4652630569581F396F53A25F _anon_0;
  uint32_t_0 _ofw;
};

/* 5837 */
struct __flow_l4_tcp::$F0D59F0FC38237CC7E770C3F09D8CDFD::$57269FAB4652630569581F396F53A25F
{
  unsigned __int8 _tcp_res : 4;
  unsigned __int8 _off : 4;
  uint8_t_0 _flags;
  uint16_t _win;
};

/* 5838 */
struct __flow_l4_udp
{
  in_port_t _src;
  in_port_t _dst;
  uint32_t_0 _ls;
};

/* 5839 */
struct __flow_l4_esp
{
  uint32_t_0 _spi;
};

/* 5840 */
union __kern_packet::$20AA0C26CBAF55DA3384D904DA8EA36E
{
  uint64_t_0 pkt_euuid_64[2];
  uint32_t_0 pkt_euuid_32[4];
  uuid_t pkt_euuid;
};

/* 5841 */
union __kern_packet::$25E19527D540B5919B576C3DFE1FAD16
{
  uint64_t_0 pkt_flowsrc_id_64[2];
  uint32_t_0 pkt_flowsrc_id_32[4];
  uuid_t pkt_flowsrc_id;
};

/* 5842 */
typedef uint32_t_0 flowadv_idx_t;

/* 5843 */
struct __attribute__((aligned(8))) __kern_packet::$CD2EFEC1811EC185E601ACA1F78A4B06
{
  uintptr_t _cb_arg;
  uintptr_t _cb_data;
  uint32_t_0 _tx_status;
};

/* 5844 */
typedef classq_type classq_type_t;

/* 5845 */
enum classq_type : __int32
{
  Q_DROPHEAD = 0x0,
  Q_DROPTAIL = 0x1,
  Q_SFB = 0x2,
};

/* 5846 */
typedef classq_state classq_state_t;

/* 5847 */
enum classq_state : __int32
{
  QS_RUNNING = 0x0,
  QS_SUSPENDED = 0x1,
};

/* 5848 */
typedef u_int32_t ifnet_model_t;

/* 5849 */
struct if_rxpoll_stats
{
  u_int32_t ifi_poll_off_req;
  u_int32_t ifi_poll_off_err;
  u_int32_t ifi_poll_on_req;
  u_int32_t ifi_poll_on_err;
  u_int32_t ifi_poll_wakeups_avg;
  u_int32_t ifi_poll_wakeups_lowat;
  u_int32_t ifi_poll_wakeups_hiwat;
  __attribute__((packed)) __attribute__((aligned(1))) u_int64_t ifi_poll_packets;
  u_int32_t ifi_poll_packets_avg;
  u_int32_t ifi_poll_packets_min;
  u_int32_t ifi_poll_packets_max;
  u_int32_t ifi_poll_packets_lowat;
  u_int32_t ifi_poll_packets_hiwat;
  u_int64_t ifi_poll_bytes;
  u_int32_t ifi_poll_bytes_avg;
  u_int32_t ifi_poll_bytes_min;
  u_int32_t ifi_poll_bytes_max;
  u_int32_t ifi_poll_bytes_lowat;
  u_int32_t ifi_poll_bytes_hiwat;
  u_int32_t ifi_poll_packets_limit;
  u_int64_t ifi_poll_interval_time;
};

/* 5850 */
struct pfi_kif::$9CFF3E5F3B6FD023FB2E327F968FB82C
{
  pfi_kif *rbe_left;
  pfi_kif *rbe_right;
  pfi_kif *rbe_parent;
};

/* 5851 */
struct pfi_kif::$B440E05135CB0EC947F0171FCE6D932B
{
  pfi_dynaddr *tqh_first;
  pfi_dynaddr **tqh_last;
};

/* 5852 */
struct __attribute__((aligned(4))) pfi_dynaddr
{
  pfi_dynaddr::$3D00953648E4D81B989AB11A1A3421A1 entry;
  pf_addr pfid_addr4;
  pf_addr pfid_mask4;
  pf_addr pfid_addr6;
  pf_addr pfid_mask6;
  pfr_ktable *pfid_kt;
  pfi_kif *pfid_kif;
  void *pfid_hook_cookie;
  int pfid_net;
  int pfid_acnt4;
  int pfid_acnt6;
  sa_family_t pfid_af;
  u_int8_t pfid_iflags;
};

/* 5853 */
struct pfi_dynaddr::$3D00953648E4D81B989AB11A1A3421A1
{
  pfi_dynaddr *tqe_next;
  pfi_dynaddr **tqe_prev;
};

/* 5854 */
struct pf_addr
{
  pf_addr::$B33CBF109C51EBB50B99E2C59265D6C3 pfa;
};

/* 5855 */
union pf_addr::$B33CBF109C51EBB50B99E2C59265D6C3
{
  in_addr _v4addr;
  in6_addr _v6addr;
  u_int8_t _addr8[16];
  u_int16_t _addr16[8];
  u_int32_t _addr32[4];
};

/* 5856 */
struct __attribute__((aligned(8))) pfr_ktable
{
  pfr_tstats pfrkt_ts;
  pfr_ktable::$7AADAFFAF92270EB6281BE8B96E5C62F pfrkt_tree;
  pfr_ktable::$BC265FBB86433B4C45B37E02F46FDB4E pfrkt_workq;
  radix_node_head *pfrkt_ip4;
  radix_node_head *pfrkt_ip6;
  pfr_ktable *pfrkt_shadow;
  pfr_ktable *pfrkt_root;
  pf_ruleset *pfrkt_rs;
  u_int64_t pfrkt_larg;
  u_int32_t pfrkt_nflags;
};

/* 5857 */
struct __attribute__((aligned(8))) pfr_tstats
{
  pfr_table pfrts_t;
  u_int64_t pfrts_packets[2][3];
  u_int64_t pfrts_bytes[2][3];
  u_int64_t pfrts_match;
  u_int64_t pfrts_nomatch;
  u_int64_t pfrts_tzero;
  int pfrts_cnt;
  int pfrts_refcnt[2];
};

/* 5858 */
struct __attribute__((aligned(4))) pfr_table
{
  char pfrt_anchor[1024];
  char pfrt_name[32];
  u_int32_t pfrt_flags;
  u_int8_t pfrt_fback;
};

/* 5859 */
struct pfr_ktable::$7AADAFFAF92270EB6281BE8B96E5C62F
{
  pfr_ktable *rbe_left;
  pfr_ktable *rbe_right;
  pfr_ktable *rbe_parent;
};

/* 5860 */
struct pfr_ktable::$BC265FBB86433B4C45B37E02F46FDB4E
{
  pfr_ktable *sle_next;
};

/* 5861 */
struct __attribute__((aligned(8))) pf_ruleset
{
  pf_ruleset::$6ABA2CA3FE5DFA24D9DD85B251E0922C rules[6];
  pf_anchor *anchor;
  u_int32_t tticket;
  int tables;
  int topen;
};

/* 5862 */
struct pf_ruleset::$6ABA2CA3FE5DFA24D9DD85B251E0922C
{
  pf_rulequeue queues[2];
  pf_ruleset::$6ABA2CA3FE5DFA24D9DD85B251E0922C::$76967D7AA767963142C08267DC4FC18A active;
  pf_ruleset::$6ABA2CA3FE5DFA24D9DD85B251E0922C::$76967D7AA767963142C08267DC4FC18A inactive;
};

/* 5863 */
struct pf_rulequeue
{
  pf_rule *tqh_first;
  pf_rule **tqh_last;
};

/* 5864 */
struct pf_rule
{
  pf_rule_addr src;
  pf_rule_addr dst;
  pf_rule_ptr skip[8];
  char label[64];
  char ifname[16];
  char qname[64];
  char pqname[64];
  char tagname[64];
  char match_tagname[64];
  char overload_tblname[32];
  pf_rule::$5527C7B22F0ED41879DA0804C2AB9068 entries;
  pf_pool rpool;
  u_int64_t evaluations;
  u_int64_t packets[2];
  u_int64_t bytes[2];
  u_int64_t ticket;
  char owner[64];
  u_int32_t priority;
  pfi_kif *kif;
  pf_anchor *anchor;
  pfr_ktable *overload_tbl;
  pf_osfp_t os_fingerprint;
  unsigned int rtableid;
  u_int32_t timeout[26];
  u_int32_t states;
  u_int32_t max_states;
  u_int32_t src_nodes;
  u_int32_t max_src_nodes;
  u_int32_t max_src_states;
  u_int32_t max_src_conn;
  pf_rule::$A20C0F9FB99F5FF52E7EE59B25D96EDB max_src_conn_rate;
  u_int32_t qid;
  u_int32_t pqid;
  u_int32_t rt_listid;
  u_int32_t nr;
  u_int32_t prob;
  uid_t cuid;
  pid_t cpid;
  u_int16_t return_icmp;
  u_int16_t return_icmp6;
  u_int16_t max_mss;
  u_int16_t tag;
  u_int16_t match_tag;
  pf_rule_uid uid;
  pf_rule_gid gid;
  u_int32_t rule_flag;
  u_int8_t action;
  u_int8_t direction;
  u_int8_t log;
  u_int8_t logif;
  u_int8_t quick;
  u_int8_t ifnot;
  u_int8_t match_tag_not;
  u_int8_t natpass;
  u_int8_t keep_state;
  sa_family_t af;
  u_int8_t proto;
  u_int8_t type;
  u_int8_t code;
  u_int8_t flags;
  u_int8_t flagset;
  u_int8_t min_ttl;
  u_int8_t allow_opts;
  u_int8_t rt;
  u_int8_t return_ttl;
  u_int8_t tos;
  u_int8_t anchor_relative;
  u_int8_t anchor_wildcard;
  u_int8_t flush;
  u_int8_t proto_variant;
  u_int8_t extfilter;
  u_int8_t extmap;
  u_int32_t dnpipe;
  u_int32_t dntype;
};

/* 5865 */
struct __attribute__((aligned(8))) pf_rule_addr
{
  pf_addr_wrap addr;
  pf_rule_xport xport;
  u_int8_t neg;
};

/* 5866 */
struct __attribute__((aligned(8))) pf_addr_wrap
{
  pf_addr_wrap::$E1621D099DA5F5CC2C4457CA6FC19E03 v;
  pf_addr_wrap::$D7B6AF81A391B2F84C83F6C8BF1561D9 p;
  u_int8_t type;
  u_int8_t iflags;
};

/* 5867 */
union pf_addr_wrap::$E1621D099DA5F5CC2C4457CA6FC19E03
{
  pf_addr_wrap::$E1621D099DA5F5CC2C4457CA6FC19E03::$2B3361CC2192E0978756D1DF53006138 a;
  char ifname[16];
  char tblname[32];
  char rtlabelname[32];
  u_int32_t rtlabel;
};

/* 5868 */
struct pf_addr_wrap::$E1621D099DA5F5CC2C4457CA6FC19E03::$2B3361CC2192E0978756D1DF53006138
{
  pf_addr addr;
  pf_addr mask;
};

/* 5869 */
union pf_addr_wrap::$D7B6AF81A391B2F84C83F6C8BF1561D9
{
  pfi_dynaddr *dyn;
  pfr_ktable *tbl;
  int dyncnt;
  int tblcnt;
};

/* 5870 */
union __attribute__((aligned(4))) pf_rule_xport
{
  pf_port_range range;
  u_int16_t call_id;
  u_int32_t spi;
};

/* 5871 */
struct __attribute__((aligned(2))) pf_port_range
{
  u_int16_t port[2];
  u_int8_t op;
};

/* 5872 */
union pf_rule_ptr
{
  pf_rule *ptr;
  u_int32_t nr;
};

/* 5873 */
struct pf_rule::$5527C7B22F0ED41879DA0804C2AB9068
{
  pf_rule *tqe_next;
  pf_rule **tqe_prev;
};

/* 5874 */
struct __attribute__((aligned(8))) pf_pool
{
  pf_palist list;
  pf_pooladdr *cur;
  pf_poolhashkey key;
  pf_addr counter;
  int tblidx;
  u_int16_t proxy_port[2];
  u_int8_t port_op;
  u_int8_t opts;
  sa_family_t af;
};

/* 5875 */
struct pf_palist
{
  pf_pooladdr *tqh_first;
  pf_pooladdr **tqh_last;
};

/* 5876 */
struct pf_pooladdr
{
  pf_addr_wrap addr;
  pf_pooladdr::$8D61EF7F94F07C174F33A2E8176572C8 entries;
  char ifname[16];
  pfi_kif *kif;
};

/* 5877 */
struct pf_pooladdr::$8D61EF7F94F07C174F33A2E8176572C8
{
  pf_pooladdr *tqe_next;
  pf_pooladdr **tqe_prev;
};

/* 5878 */
struct pf_poolhashkey
{
  pf_poolhashkey::$5A368881E562EEA6327F70D9AA449499 pfk;
};

/* 5879 */
union pf_poolhashkey::$5A368881E562EEA6327F70D9AA449499
{
  u_int8_t key8[16];
  u_int16_t key16[8];
  u_int32_t key32[4];
};

/* 5880 */
struct pf_anchor
{
  pf_anchor::$5E8E0FCDC89F0C11127BB219E5DD453A entry_global;
  pf_anchor::$5E8E0FCDC89F0C11127BB219E5DD453A entry_node;
  pf_anchor *parent;
  pf_anchor_node children;
  char name[64];
  char path[1024];
  pf_ruleset ruleset;
  int refcnt;
  int match;
  char owner[64];
};

/* 5881 */
struct pf_anchor::$5E8E0FCDC89F0C11127BB219E5DD453A
{
  pf_anchor *rbe_left;
  pf_anchor *rbe_right;
  pf_anchor *rbe_parent;
};

/* 5882 */
struct pf_anchor_node
{
  pf_anchor *rbh_root;
};

/* 5883 */
typedef u_int32_t pf_osfp_t;

/* 5884 */
struct pf_rule::$A20C0F9FB99F5FF52E7EE59B25D96EDB
{
  u_int32_t limit;
  u_int32_t seconds;
};

/* 5885 */
struct pf_rule_uid
{
  uid_t uid[2];
  u_int8_t op;
  u_int8_t _pad[3];
};

/* 5886 */
struct pf_rule_gid
{
  uid_t gid[2];
  u_int8_t op;
  u_int8_t _pad[3];
};

/* 5887 */
struct __attribute__((aligned(8))) pf_ruleset::$6ABA2CA3FE5DFA24D9DD85B251E0922C::$76967D7AA767963142C08267DC4FC18A
{
  pf_rulequeue *ptr;
  pf_rule **ptr_array;
  u_int32_t rcount;
  u_int32_t ticket;
  int open;
};

/* 5888 */
typedef errno_t (*bpf_send_func)(ifnet_t, u_int32_t, mbuf_t);

/* 5889 */
typedef errno_t (*bpf_tap_func)(ifnet_t, u_int32_t, bpf_tap_mode);

/* 5890 */
struct bpf_hdr_ext
{
  timeval32 bh_tstamp;
  bpf_u_int32 bh_caplen;
  bpf_u_int32 bh_datalen;
  u_short bh_hdrlen;
  u_short bh_flags;
  pid_t bh_pid;
  char bh_comm[17];
  u_char _bh_pad2[1];
  u_char bh_pktflags;
  u_char bh_proto;
  bpf_u_int32 bh_svc;
  bpf_u_int32 bh_flowid;
  bpf_u_int32 bh_unsent_bytes;
  bpf_u_int32 bh_unsent_snd;
};

/* 5891 */
struct timeval32
{
  __int32_t tv_sec;
  __int32_t tv_usec;
};

/* 5892 */
struct pktap_header
{
  uint32_t_0 pth_length;
  uint32_t_0 pth_type_next;
  uint32_t_0 pth_dlt;
  char pth_ifname[24];
  uint32_t_0 pth_flags;
  uint32_t_0 pth_protocol_family;
  uint32_t_0 pth_frame_pre_length;
  uint32_t_0 pth_frame_post_length;
  pid_t pth_pid;
  char pth_comm[17];
  uint32_t_0 pth_svc;
  uint16_t pth_iftype;
  uint16_t pth_ifunit;
  pid_t pth_epid;
  char pth_ecomm[17];
  uint32_t_0 pth_flowid;
  uint32_t_0 pth_ipproto;
  timeval32 pth_tstamp;
  uuid_t pth_uuid;
  uuid_t pth_euuid;
};

/* 5893 */
struct __attribute__((aligned(4))) bpf_hdr
{
  timeval32 bh_tstamp;
  bpf_u_int32 bh_caplen;
  bpf_u_int32 bh_datalen;
  u_short bh_hdrlen;
};

/* 5894 */
typedef os_log_s *os_log_t;

/* 5895 */
struct os_log_s
{
  int a;
};

/* 5896 */
struct pktap_v2_hdr
{
  uint8_t_0 pth_length;
  uint8_t_0 pth_uuid_offset;
  uint8_t_0 pth_e_uuid_offset;
  uint8_t_0 pth_ifname_offset;
  uint8_t_0 pth_comm_offset;
  uint8_t_0 pth_e_comm_offset;
  uint16_t pth_dlt;
  uint16_t pth_frame_pre_length;
  uint16_t pth_frame_post_length;
  uint16_t pth_iftype;
  uint16_t pth_ipproto;
  uint32_t_0 pth_protocol_family;
  uint32_t_0 pth_svc;
  uint32_t_0 pth_flowid;
  pid_t pth_pid;
  pid_t pth_e_pid;
  uint32_t_0 pth_flags;
};

/* 5897 */
struct ether_header
{
  u_char ether_dhost[6];
  u_char ether_shost[6];
  u_short ether_type;
};

/* 5898 */
struct bpf_packet
{
  int bpfp_type;
  void *bpfp_header;
  size_t_0 bpfp_header_length;
  bpf_packet::$143B90F90196422B75DD35E79F1D06E7 bpfp_u;
  size_t_0 bpfp_total_length;
};

/* 5899 */
union bpf_packet::$143B90F90196422B75DD35E79F1D06E7
{
  mbuf *bpfpu_mbuf;
  void *bpfpu_ptr;
  kern_packet_t bpfpu_pkt;
};

/* 5900 */
struct __attribute__((packed)) __attribute__((aligned(4))) bpf_dltlist
{
  u_int32_t bfl_len;
  bpf_dltlist::$4BAF638FCC272477561A74B276E947B6 bfl_u;
};

/* 5901 */
union bpf_dltlist::$4BAF638FCC272477561A74B276E947B6
{
  u_int32_t *bflu_list;
  u_int64_t bflu_pad;
};

/* 5902 */
struct ip
{
  unsigned __int32 ip_hl : 4;
  unsigned __int32 ip_v : 4;
  u_char ip_tos;
  u_short ip_len;
  u_short ip_id;
  u_short ip_off;
  u_char ip_ttl;
  u_char ip_p;
  u_short ip_sum;
  in_addr ip_src;
  in_addr ip_dst;
};

/* 5903 */
struct ip6_hdr
{
  ip6_hdr::$0C759B23B3E14957941D70AD9A803CCA ip6_ctlun;
  in6_addr ip6_src;
  in6_addr ip6_dst;
};

/* 5904 */
union ip6_hdr::$0C759B23B3E14957941D70AD9A803CCA
{
  ip6_hdrctl ip6_un1;
  u_int8_t ip6_un2_vfc;
};

/* 5905 */
struct ip6_hdrctl
{
  u_int32_t ip6_un1_flow;
  u_int16_t ip6_un1_plen;
  u_int8_t ip6_un1_nxt;
  u_int8_t ip6_un1_hlim;
};

/* 5906 */
typedef __kern_buflet *kern_buflet_t;

/* 5907 */
struct tcphdr
{
  unsigned __int16 th_sport;
  unsigned __int16 th_dport;
  tcp_seq th_seq;
  tcp_seq th_ack;
  unsigned __int32 th_x2 : 4;
  unsigned __int32 th_off : 4;
  unsigned __int8 th_flags;
  unsigned __int16 th_win;
  unsigned __int16 th_sum;
  unsigned __int16 th_urp;
};

/* 5908 */
typedef __uint32_t tcp_seq;

/* 5909 */
struct udphdr
{
  u_short uh_sport;
  u_short uh_dport;
  u_short uh_ulen;
  u_short uh_sum;
};

/* 5910 */
struct so_procinfo
{
  pid_t spi_pid;
  pid_t spi_epid;
  uuid_t spi_uuid;
  uuid_t spi_euuid;
  int spi_delegated;
};

/* 5911 */
struct bpf_program64
{
  u_int bf_len;
  user64_addr_t bf_insns;
};

/* 5912 */
struct bpf_program32
{
  u_int bf_len;
  user32_addr_t bf_insns;
};

/* 5913 */
struct bpf_stat
{
  u_int bs_recv;
  u_int bs_drop;
};

/* 5914 */
struct bpf_version
{
  u_short bv_major;
  u_short bv_minor;
};

/* 5915 */
struct bpf_setup_args
{
  uuid_t bsa_uuid;
  char bsa_ifname[16];
};

/* 5916 */
struct pktap_header_buffer
{
  pktap_header pkth;
  pktap_header_extra extra;
};

/* 5917 */
union pktap_header_extra
{
  uint8_t_0 llhdr[16];
  uint32_t_0 proto;
};

/* 5918 */
struct bridge_hostfilter_stats
{
  uint64_t_0 brhf_bad_ether_type;
  uint64_t_0 brhf_bad_ether_srchw_addr;
  uint64_t_0 brhf_ether_too_small;
  uint64_t_0 brhf_ether_pullup_failed;
  uint64_t_0 brhf_arp_ok;
  uint64_t_0 brhf_arp_too_small;
  uint64_t_0 brhf_arp_pullup_failed;
  uint64_t_0 brhf_arp_bad_hw_type;
  uint64_t_0 brhf_arp_bad_pro_type;
  uint64_t_0 brhf_arp_bad_hw_len;
  uint64_t_0 brhf_arp_bad_pro_len;
  uint64_t_0 brhf_arp_bad_op;
  uint64_t_0 brhf_arp_bad_sha;
  uint64_t_0 brhf_arp_bad_spa;
  uint64_t_0 brhf_ip_ok;
  uint64_t_0 brhf_ip_too_small;
  uint64_t_0 brhf_ip_pullup_failed;
  uint64_t_0 brhf_ip_bad_srcaddr;
  uint64_t_0 brhf_ip_bad_proto;
  uint64_t_0 brhf_dhcp_too_small;
  uint64_t_0 brhf_dhcp_bad_op;
  uint64_t_0 brhf_dhcp_bad_htype;
  uint64_t_0 brhf_dhcp_bad_hlen;
  uint64_t_0 brhf_dhcp_bad_chaddr;
  uint64_t_0 brhf_dhcp_bad_ciaddr;
};

/* 5919 */
struct $FB060F43D4D2B59E81BCE87D34FB12EE
{
  bridge_softc *lh_first;
};

/* 5920 */
struct __attribute__((aligned(8))) bridge_softc
{
  ifnet *sc_ifp;
  u_int32_t sc_flags;
  bridge_softc::$00C210A76F73D81D9D9042E3814CEF08 sc_u;
  bridge_softc::$414F2830A8C6F1D40E58E5D1FDC2CB1F sc_list;
  lck_mtx_t sc_mtx;
  void *sc_cv;
  uint32_t_0 sc_brtmax;
  uint32_t_0 sc_brtcnt;
  uint32_t_0 sc_brttimeout;
  uint32_t_0 sc_iflist_ref;
  uint32_t_0 sc_iflist_xcnt;
  bridge_softc::$372065CD1B908D4271271F3023446B87 sc_iflist;
  uint32_t_0 sc_brtexceeded;
  uint32_t_0 sc_filter_flags;
  ifnet *sc_ifaddr;
  u_char sc_defaddr[6];
  char sc_if_xname[16];
  void *lock_lr[4];
  int next_lock_lr;
  void *unlock_lr[4];
  int next_unlock_lr;
};

/* 5921 */
struct nexus_adapter
{
  volatile uint32_t_0 na_flags;
  nexus_adapter_type_t na_type;
  uint32_t_0 na_channels;
  ch_selinfo na_si[4];
  int na_si_users[4];
  uint64_t_0 na_ch_mit_ival;
  uint64_t_0 na_work_ts;
  uint32_t_0 na_num_rx_rings;
  uint32_t_0 na_num_tx_rings;
  uint32_t_0 na_num_allocator_ring_pairs;
  uint32_t_0 na_num_tx_slots;
  uint32_t_0 na_num_rx_slots;
  uint32_t_0 na_num_allocator_slots;
  __kern_channel_ring *na_tx_rings;
  __kern_channel_ring *na_rx_rings;
  __kern_channel_ring *na_alloc_rings;
  __kern_channel_ring *na_free_rings;
  void *na_tailroom;
  volatile uint32_t_0 na_refcount;
  skmem_arena *na_arena;
  skmem_region_params na_arena_buf_params;
  skmem_region_params na_arena_mdk_params;
  const nexus_meta_type_t na_md_type;
  const nexus_meta_subtype_t na_md_subtype;
  const nexus_stats_type_t na_stats_type;
  const uint32_t_0 na_flowadv_max;
  kern_nexus *na_nx;
  kern_nexus_domain_provider *na_nxdom_prov;
  slot_ctx *na_slot_ctxs;
  kern_packet_t *na_scratch;
  char na_name[64];
  uuid_t na_uuid;
  int (*na_activate)(nexus_adapter *, na_activate_mode_t);
  int (*na_special)(nexus_adapter *, kern_channel *, chreq *, nxspec_cmd_t);
  int (*na_txsync)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  int (*na_rxsync)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  int (*na_notify)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  int (*na_config)(nexus_adapter *, uint32_t_0 *, uint32_t_0 *, uint32_t_0 *, uint32_t_0 *);
  int (*na_krings_create)(nexus_adapter *, kern_channel *);
  void (*na_krings_delete)(nexus_adapter *, kern_channel *, boolean_t);
  void (*na_dtor)(nexus_adapter *);
  void (*na_free)(nexus_adapter *);
  void (*na_kr_get_mem_info)(__kern_channel_ring *, channel_ring_mem_info_t);
  nexus_vp_adapter *na_wvp;
  nexus_netif_adapter *na_nif;
  void *na_private;
  ifnet *na_ifp;
  uint8_t_0 na_kring_svc_lut[10];
  nexus_upipe_adapter **na_pipes;
  uint32_t_0 na_next_pipe;
  uint32_t_0 na_max_pipes;
};

/* 5922 */
enum nexus_adapter_type_t : __int32
{
  NA_INVALID = 0x0,
  NA_PSEUDO = 0x1,
  NA_USER_PIPE = 0x2,
  NA_KERNEL_PIPE = 0x3,
  NA_MONITOR = 0x4,
  NA_NETIF_DEV = 0x5,
  NA_NETIF_HOST = 0x6,
  NA_NETIF_COMPAT_DEV = 0x7,
  NA_NETIF_COMPAT_HOST = 0x8,
  NA_FLOWSWITCH_VP = 0x9,
  NA_FLOWSWITCH_VP_WRAP = 0xA,
};

/* 5923 */
struct ch_selinfo
{
  lck_mtx_t csi_lock;
  selinfo csi_si;
  uint32_t_0 csi_flags;
  uint32_t_0 csi_pending;
  uint64_t_0 csi_eff_interval;
  uint64_t_0 csi_interval;
  thread_call_t csi_tcall;
};

/* 5924 */
struct __attribute__((aligned(128))) __kern_channel_ring
{
  __user_channel_ring *ckr_ring;
  uint32_t_0 ckr_flags;
  slot_idx_t ckr_num_slots;
  const slot_idx_t ckr_lim;
  txrx ckr_tx;
  volatile slot_idx_t ckr_khead;
  volatile slot_idx_t ckr_ktail;
  volatile slot_idx_t ckr_khead_pre;
  volatile slot_idx_t ckr_rhead;
  volatile slot_idx_t ckr_rtail;
  volatile uint32_t_0 ckr_alloc_ws;
  ch_selinfo ckr_si;
  uint32_t_0 ckr_transfer_decay;
  nexus_adapter *ckr_na;
  kern_pbufpool *ckr_pp;
  uint32_t_0 ckr_users;
  __slot_desc *ckr_usds;
  __slot_desc *ckr_ksds;
  __slot_desc *ckr_ksds_last;
  void *ckr_ctx;
  slot_ctx *ckr_slot_ctxs;
  uint32_t_0 ckr_slot_ctxs_set;
  uint64_t_0 *ckr_scratch;
  lck_mtx_t ckr_qlock;
  lck_grp_t *ckr_qlock_group;
  lck_spin_t ckr_slock;
  lck_grp_t *ckr_slock_group;
  uint32_t_0 ckr_busy;
  thread *ckr_owner;
  uint32_t_0 ckr_want;
  uint32_t_0 ckr_state;
  int (*ckr_na_sync)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  int (*volatile ckr_na_notify)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  int (*ckr_user_pkt_pool_sync)(kern_channel *, __kern_channel_ring *, proc_0 *, int);
  uint32_t_0 ckr_ring_id;
  char ckr_name[64];
  int64_t ckr_tbr_token;
  int64_t ckr_tbr_depth;
  uint64_t_0 ckr_tbr_last;
  boolean_t ckr_rate_limited;
  channel_ring_error_stats ckr_err_stats;
  channel_ring_stats ckr_stats;
  uint64_t_0 ckr_accumulated_bytes;
  uint64_t_0 ckr_accumulated_slots;
  uint64_t_0 ckr_accumulate_start;
  channel_ring_user_stats ckr_usr_stats;
  uint64_t_0 ckr_user_accumulated_bytes;
  uint64_t_0 ckr_user_accumulated_slots;
  uint64_t_0 ckr_user_accumulated_syncs;
  uint64_t_0 ckr_user_accumulate_start;
  uint64_t_0 ckr_ready_bytes;
  uint64_t_0 ckr_ready_slots;
  uint64_t_0 ckr_sync_time;
  __kern_channel_ring *ckr_pipe;
  __user_channel_ring *ckr_save_ring;
  mbuf **ckr_tx_pool;
  nx_mbq ckr_rx_queue;
  int (*ckr_netif_save_notify)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  void (*ckr_netif_mit_stats)(__kern_channel_ring *, uint64_t_0, uint64_t_0);
  nx_netif_mit *ckr_mit;
  kern_packet_svc_class_t ckr_svc;
  volatile uint32_t_0 ckr_pending_intr;
  volatile uint32_t_0 ckr_pending_doorbell;
  int (*ckr_wrap_save_notify)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  uint32_t_0 *ckr_leases;
  slot_idx_t ckr_klease;
  slot_idx_t ckr_lease_idx;
  __kern_channel_ring **ckr_monitors;
  uint32_t_0 ckr_max_monitors;
  uint32_t_0 ckr_n_monitors;
  int (*ckr_mon_sync)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  int (*ckr_mon_notify)(__kern_channel_ring *, proc_0 *, uint32_t_0);
  uint32_t_0 ckr_mon_tail;
  uint32_t_0 ckr_mon_pos;
};

/* 5925 */
struct __attribute__((aligned(8))) __user_channel_ring
{
  volatile slot_idx_t ring_head;
  const volatile slot_idx_t ring_tail;
  const volatile slot_idx_t ring_khead;
  const uint32_t_0 ring_num_slots;
  const uint32_t_0 ring_buf_size;
  const uint32_t_0 ring_md_size;
  const uint16_t ring_id;
  const uint16_t ring_kind;
  const mach_vm_offset_t ring_buf_base;
  const mach_vm_offset_t ring_md_base;
  const mach_vm_offset_t ring_sd_base;
  const volatile uint64_t_0 ring_sync_time;
  const volatile uint64_t_0 ring_notify_time;
  const volatile uint32_t_0 ring_alloc_ws;
};

/* 5926 */
typedef uint32_t_0 slot_idx_t;

/* 5927 */
enum txrx : __int32
{
  NR_RX = 0x0,
  NR_TX = 0x1,
  NR_TXRX = 0x2,
  NR_A = 0x2,
  NR_F = 0x3,
  NR_TXRXAF = 0x4,
};

/* 5928 */
struct __slot_desc
{
  __slot_desc::$5F6FDE1B0982A615C17C15856532C259 _anon_0;
};

/* 5929 */
union __slot_desc::$5F6FDE1B0982A615C17C15856532C259
{
  __user_slot_desc _sd_user;
  uint64_t_0 _sd_private[1];
};

/* 5930 */
struct __user_slot_desc
{
  obj_idx_t sd_md_idx;
  uint16_t sd_flags;
  uint16_t sd_len;
};

/* 5931 */
struct slot_ctx
{
  mach_vm_address_t slot_ctx_arg;
};

/* 5932 */
struct __attribute__((aligned(64))) kern_channel
{
  lck_mtx_t ch_lock;
  nexus_adapter *ch_na;
  kern_nexus *ch_nexus;
  uint32_t_0 ch_refcnt;
  volatile uint32_t_0 ch_flags;
  kern_channel::$B45336BBD85B8C5E5CC7C1687BE1A843 ch_link;
  ch_info ch_info;
  void *ch_ctx;
  int ch_fd;
  pid_t ch_pid;
  char ch_name[32];
  __user_channel_schema *ch_schema;
  mach_vm_offset_t ch_schema_offset;
  ring_id_t ch_first[4];
  ring_id_t ch_last[4];
  skmem_arena_mmap_info ch_mmap;
  ch_selinfo *ch_si[4];
  __kern_channel_upp_bkt *ch_upp_hash_table;
  uint32_t_0 ch_upp_alloced;
};

/* 5933 */
struct kern_nexus
{
  uint32_t_0 nx_refcnt;
  volatile uint32_t_0 nx_flags;
  void *nx_ctx;
  kern_nexus_provider *nx_prov;
  uint64_t_0 nx_id;
  uuid_t nx_uuid;
  kern_nexus::$4EEF04BC88A3897A495F26E3B3E4E4CE nx_prov_link;
  kern_nexus::$F43C291197C5EBE4A0F490CD4F05C78E nx_link;
  kern_nexus::$16CD9E6905590D123251BB99A9D15945 nx_ch_head;
  uint32_t_0 nx_ch_count;
  kern_nexus::$16CD9E6905590D123251BB99A9D15945 nx_ch_nonxref_head;
  void *nx_arg;
  kern_pbufpool *nx_tx_pp;
  kern_pbufpool *nx_rx_pp;
  kern_nexus_advisory nx_adv;
};

/* 5934 */
struct __attribute__((aligned(64))) kern_nexus_provider
{
  uint32_t_0 nxprov_refcnt;
  uint32_t_0 nxprov_flags;
  kern_nexus_provider::$90AB34B06AF433CD0CA87B8A3531B82B nxprov_link;
  kern_nexus_provider::$683436BBF303B4D178D90A83C692BC80 nxprov_nx_head;
  uint32_t_0 nxprov_nx_count;
  nxctl *nxprov_ctl;
  uuid_t nxprov_uuid;
  kern_nexus_domain_provider *nxprov_dom_prov;
  kern_nexus_provider_init nxprov_ext;
  nxprov_params nxprov_params;
  skmem_region_params nxprov_region_params[12];
};

/* 5935 */
struct kern_nexus_provider::$90AB34B06AF433CD0CA87B8A3531B82B
{
  kern_nexus_provider *stqe_next;
};

/* 5936 */
struct kern_nexus_provider::$683436BBF303B4D178D90A83C692BC80
{
  kern_nexus *stqh_first;
  kern_nexus **stqh_last;
};

/* 5937 */
struct nxctl
{
  lck_mtx_t nxctl_lock;
  uint32_t_0 nxctl_refcnt;
  uint32_t_0 nxctl_flags;
  uuid_t nxctl_uuid;
  uuid_t nxctl_proc_uuid;
  uint64_t_0 nxctl_proc_uniqueid;
  nxctl::$C4CBA58965DBA340D74377635C95FEC0 nxctl_link;
  fileproc *nxctl_fp;
  kauth_cred_t nxctl_cred;
};

/* 5938 */
struct nxctl::$C4CBA58965DBA340D74377635C95FEC0
{
  nxctl *stqe_next;
};

/* 5939 */
struct kern_nexus_domain_provider
{
  kern_nexus_domain_provider::$3F679457E68C9C1A545DE1FF04D86214 nxdom_prov_link;
  kern_nexus_domain_provider::$3F679457E68C9C1A545DE1FF04D86214 nxdom_prov_detaching_link;
  char nxdom_prov_name[64];
  uuid_t nxdom_prov_uuid;
  uint64_t_0 nxdom_prov_gencnt;
  uint32_t_0 nxdom_prov_refcnt;
  uint32_t_0 nxdom_prov_flags;
  nxdom *nxdom_prov_dom;
  kern_nexus_domain_provider_init nxdom_prov_ext;
  nxdom_prov_cb nxdom_prov_cb;
};

/* 5940 */
struct kern_nexus_domain_provider::$3F679457E68C9C1A545DE1FF04D86214
{
  kern_nexus_domain_provider *stqe_next;
};

/* 5941 */
struct nxdom
{
  nxdom::$A219AC3AB4FC7B4F53356D908ACDF403 nxdom_link;
  nxdom::$CFBE631746A5C2203B85038967CFC87E nxdom_prov_head;
  kern_nexus_domain_provider *nxdom_prov_default;
  nexus_type_t nxdom_type;
  nexus_meta_type_t nxdom_md_type;
  nexus_meta_subtype_t nxdom_md_subtype;
  uint32_t_0 nxdom_flags;
  nxp_bounds nxdom_ports;
  nxp_bounds nxdom_tx_rings;
  nxp_bounds nxdom_rx_rings;
  nxp_bounds nxdom_tx_slots;
  nxp_bounds nxdom_rx_slots;
  nxp_bounds nxdom_buf_size;
  nxp_bounds nxdom_meta_size;
  nxp_bounds nxdom_stats_size;
  nxp_bounds nxdom_pipes;
  nxp_bounds nxdom_extensions;
  nxp_bounds nxdom_mhints;
  nxp_bounds nxdom_flowadv_max;
  nxp_bounds nxdom_nexusadv_size;
  nxp_bounds nxdom_capabilities;
  nxp_bounds nxdom_qmap;
  skmem_region_params nxdom_region_params[12];
  const char *nxdom_name;
  void (*nxdom_init)(nxdom *);
  void (*nxdom_terminate)(nxdom *);
  void (*nxdom_fini)(nxdom *);
  int (*nxdom_find_port)(kern_nexus *, boolean_t, nexus_port_t *);
  boolean_t (*nxdom_port_is_reserved)(kern_nexus *, nexus_port_t);
  int (*nxdom_bind_port)(kern_nexus *, nexus_port_t *, nxbind *);
  int (*nxdom_unbind_port)(kern_nexus *, nexus_port_t);
  int (*nxdom_connect)(kern_nexus_domain_provider *, kern_nexus *, kern_channel *, chreq *, kern_channel *, nxbind *, proc_0 *);
  void (*nxdom_disconnect)(kern_nexus_domain_provider *, kern_nexus *, kern_channel *);
  void (*nxdom_defunct)(kern_nexus_domain_provider *, kern_nexus *, kern_channel *, proc_0 *);
  void (*nxdom_defunct_finalize)(kern_nexus_domain_provider *, kern_nexus *, kern_channel *, boolean_t);
};

/* 5942 */
struct nxdom::$A219AC3AB4FC7B4F53356D908ACDF403
{
  nxdom *stqe_next;
};

/* 5943 */
struct nxdom::$CFBE631746A5C2203B85038967CFC87E
{
  kern_nexus_domain_provider *stqh_first;
  kern_nexus_domain_provider **stqh_last;
};

/* 5944 */
enum nexus_type_t : __int32
{
  NEXUS_TYPE_USER_PIPE = 0x0,
  NEXUS_TYPE_KERNEL_PIPE = 0x1,
  NEXUS_TYPE_NET_IF = 0x2,
  NEXUS_TYPE_FLOW_SWITCH = 0x3,
  NEXUS_TYPE_MONITOR = 0x4,
  NEXUS_TYPE_UNDEFINED = 0xFFFFFFFF,
};

/* 5945 */
struct nxp_bounds
{
  uint32_t_0 nb_def;
  uint32_t_0 nb_min;
  uint32_t_0 nb_max;
};

/* 5946 */
typedef uint32_t_0 nexus_port_t;

/* 5947 */
struct nxbind
{
  uint32_t_0 nxb_flags;
  pid_t nxb_pid;
  uint64_t_0 nxb_uniqueid;
  uuid_t nxb_exec_uuid;
  uint32_t_0 nxb_key_len;
  void *nxb_key;
};

/* 5948 */
struct chreq
{
  char cr_name[64];
  uuid_t cr_spec_uuid;
  ch_ev_thresh cr_tx_lowat;
  ch_ev_thresh cr_rx_lowat;
  nexus_port_t cr_port;
  uint32_t_0 cr_mode;
  uint32_t_0 cr_pipe_id;
  ring_id_t cr_ring_id;
  ring_set_t cr_ring_set;
  ch_endpoint_t cr_real_endpoint;
  ch_endpoint_t cr_endpoint;
  mach_vm_size_t cr_memsize;
  mach_vm_offset_t cr_memoffset;
};

/* 5949 */
struct ch_ev_thresh
{
  channel_threshold_unit_t cet_unit;
  uint32_t_0 cet_value;
};

/* 5950 */
enum channel_threshold_unit_t : __int32
{
  CHANNEL_THRESHOLD_UNIT_SLOTS = 0x0,
  CHANNEL_THRESHOLD_UNIT_BYTES = 0x1,
};

/* 5951 */
typedef uint32_t_0 ring_id_t;

/* 5952 */
enum ring_set_t : __int32
{
  RING_SET_ALL = 0x0,
  RING_SET_DEFAULT = 0x0,
};

/* 5953 */
enum ch_endpoint_t : __int32
{
  CH_ENDPOINT_NULL = 0x0,
  CH_ENDPOINT_USER_PIPE_MASTER = 0x1,
  CH_ENDPOINT_USER_PIPE_SLAVE = 0x2,
  CH_ENDPOINT_KERNEL_PIPE = 0x3,
  CH_ENDPOINT_NET_IF = 0x4,
  CH_ENDPOINT_FLOW_SWITCH = 0x5,
};

/* 5954 */
struct kern_nexus_domain_provider_init
{
  uint32_t_0 nxdpi_version;
  uint32_t_0 nxdpi_flags;
  nxdom_prov_init_fn_t nxdpi_init;
  nxdom_prov_fini_fn_t nxdpi_fini;
};

/* 5955 */
typedef errno_t (*nxdom_prov_init_fn_t)(kern_nexus_domain_provider_t);

/* 5956 */
typedef kern_nexus_domain_provider *kern_nexus_domain_provider_t;

/* 5957 */
typedef void (*nxdom_prov_fini_fn_t)(kern_nexus_domain_provider_t);

/* 5958 */
struct nxdom_prov_cb
{
  int (*dp_cb_init)(kern_nexus_domain_provider *);
  void (*dp_cb_fini)(kern_nexus_domain_provider *);
  int (*dp_cb_params)(kern_nexus_domain_provider *, const uint32_t_0, const nxprov_params *, nxprov_params *, skmem_region_params *);
  int (*dp_cb_mem_new)(kern_nexus_domain_provider *, kern_nexus *, nexus_adapter *);
  int (*dp_cb_config)(kern_nexus_domain_provider *, kern_nexus *, nx_cfg_req *, int, proc_0 *, kauth_cred_t);
  int (*dp_cb_nx_ctor)(kern_nexus *);
  void (*dp_cb_nx_dtor)(kern_nexus *);
  int (*dp_cb_nx_mem_info)(kern_nexus *, kern_pbufpool **, kern_pbufpool **);
  size_t_0 (*dp_cb_nx_mib_get)(kern_nexus *, nexus_mib_filter *, void *, size_t_0, proc_0 *);
  int (*dp_cb_nx_stop)(kern_nexus *);
};

/* 5959 */
struct __attribute__((aligned(64))) nxprov_params
{
  nexus_name_t nxp_name;
  uint32_t_0 nxp_namelen;
  nexus_type_t nxp_type;
  nexus_meta_type_t nxp_md_type;
  nexus_meta_subtype_t nxp_md_subtype;
  uint32_t_0 nxp_flags;
  uint32_t_0 nxp_format;
  uint32_t_0 nxp_tx_rings;
  uint32_t_0 nxp_rx_rings;
  uint32_t_0 nxp_tx_slots;
  uint32_t_0 nxp_rx_slots;
  uint32_t_0 nxp_buf_size;
  uint32_t_0 nxp_meta_size;
  uint32_t_0 nxp_stats_size;
  uint32_t_0 nxp_pipes;
  nexus_extension_t nxp_extensions;
  uint32_t_0 nxp_mhints;
  uint32_t_0 nxp_ifindex;
  uint32_t_0 nxp_flowadv_max;
  nexus_qmap_type_t nxp_qmap;
  uint32_t_0 nxp_capabilities;
  uint32_t_0 nxp_nexusadv_size;
};

/* 5960 */
typedef uint8_t_0 nexus_name_t[64];

/* 5961 */
enum nexus_extension_t : __int32
{
  NEXUS_EXTENSION_FSW_TYPE_LEARNING_BRIDGE = 0x0,
  NEXUS_EXTENSION_FSW_TYPE_MULTISTACK = 0x1,
  NEXUS_EXTENSION_FSW_TYPE_MAXTYPE = 0x1,
};

/* 5962 */
enum nexus_qmap_type_t : __int32
{
  NEXUS_QMAP_TYPE_INVALID = 0x0,
  NEXUS_QMAP_TYPE_DEFAULT = 0x1,
  NEXUS_QMAP_TYPE_WMM = 0x2,
};

/* 5963 */
struct nx_cfg_req
{
  uuid_t nc_nx_uuid;
  nxcfg_cmd_t nc_cmd;
  uint32_t_0 nc_req_len;
  user_addr_t nc_req;
};

/* 5964 */
enum nxcfg_cmd_t : __int32
{
  NXCFG_CMD_ATTACH = 0x0,
  NXCFG_CMD_DETACH = 0x1,
  NXCFG_CMD_FLOW_BIND = 0x14,
  NXCFG_CMD_FLOW_UNBIND = 0x15,
  NXCFG_CMD_FLOW_CONNECT = 0x16,
  NXCFG_CMD_FLOW_DISCONNECT = 0x17,
};

/* 5965 */
struct __attribute__((aligned(8))) nexus_mib_filter
{
  nexus_mib_t nmf_type;
  uint64_t_0 nmf_bitmap;
  uuid_t nmf_nx_uuid;
  uuid_t nmf_flow_id;
  pid_t nmf_pid;
};

/* 5966 */
typedef uint32_t_0 nexus_mib_t;

/* 5967 */
struct kern_nexus_provider_init
{
  uint32_t_0 nxpi_version;
  uint32_t_0 nxpi_flags;
  nxprov_pre_connect_fn_t nxpi_pre_connect;
  nxprov_connected_fn_t nxpi_connected;
  nxprov_pre_disconnect_fn_t nxpi_pre_disconnect;
  nxprov_disconnected_fn_t nxpi_disconnected;
  nxprov_ring_init_fn_t nxpi_ring_init;
  nxprov_ring_fini_fn_t nxpi_ring_fini;
  nxprov_slot_init_fn_t nxpi_slot_init;
  nxprov_slot_fini_fn_t nxpi_slot_fini;
  nxprov_sync_tx_fn_t nxpi_sync_tx;
  nxprov_sync_rx_fn_t nxpi_sync_rx;
  nxprov_tx_doorbell_fn_t nxpi_tx_doorbell;
};

/* 5968 */
typedef errno_t (*nxprov_pre_connect_fn_t)(kern_nexus_provider_t, proc_t_0, kern_nexus_t, nexus_port_t, kern_channel_t, void **);

/* 5969 */
typedef kern_nexus_provider *kern_nexus_provider_t;

/* 5970 */
typedef proc_0 *proc_t_0;

/* 5971 */
typedef kern_nexus *kern_nexus_t;

/* 5972 */
typedef kern_channel *kern_channel_t;

/* 5973 */
typedef errno_t (*nxprov_connected_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_t);

/* 5974 */
typedef void (*nxprov_pre_disconnect_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_t);

/* 5975 */
typedef void (*nxprov_disconnected_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_t);

/* 5976 */
typedef errno_t (*nxprov_ring_init_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_t, kern_channel_ring_t, boolean_t, void **);

/* 5977 */
typedef __kern_channel_ring *kern_channel_ring_t;

/* 5978 */
typedef void (*nxprov_ring_fini_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_ring_t);

/* 5979 */
typedef errno_t (*nxprov_slot_init_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_ring_t, kern_channel_slot_t, uint32_t_0, kern_slot_prop **, void **);

/* 5980 */
typedef __slot_desc *kern_channel_slot_t;

/* 5981 */
struct kern_slot_prop
{
  uint32_t_0 _sp_pad[16];
};

/* 5982 */
typedef void (*nxprov_slot_fini_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_ring_t, kern_channel_slot_t, uint32_t_0);

/* 5983 */
typedef errno_t (*nxprov_sync_tx_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_ring_t, uint32_t_0);

/* 5984 */
typedef errno_t (*nxprov_sync_rx_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_ring_t, uint32_t_0);

/* 5985 */
typedef errno_t (*nxprov_tx_doorbell_fn_t)(kern_nexus_provider_t, kern_nexus_t, kern_channel_ring_t, uint32_t_0);

/* 5986 */
struct kern_nexus::$4EEF04BC88A3897A495F26E3B3E4E4CE
{
  kern_nexus *stqe_next;
};

/* 5987 */
struct kern_nexus::$F43C291197C5EBE4A0F490CD4F05C78E
{
  kern_nexus *rbe_left;
  kern_nexus *rbe_right;
  kern_nexus *rbe_parent;
};

/* 5988 */
struct kern_nexus::$16CD9E6905590D123251BB99A9D15945
{
  kern_channel *stqh_first;
  kern_channel **stqh_last;
};

/* 5989 */
struct kern_nexus_advisory
{
  skmem_region *nxv_reg;
  sk_nexusadv *nxv_adv;
};

/* 5990 */
struct sk_nexusadv
{
  uint64_t_0 nxadv_ver;
  uint64_t_0 nxadv_fg_sendts;
  uint64_t_0 nxadv_rt_sendts;
};

/* 5991 */
struct kern_channel::$B45336BBD85B8C5E5CC7C1687BE1A843
{
  kern_channel *stqe_next;
};

/* 5992 */
struct __attribute__((aligned(64))) ch_info
{
  ch_info::$FD12C826C0F1A0E3F31848DD8AF02E6F _anon_0;
  uint32_t_0 cinfo_ch_mode;
  ring_id_t cinfo_ch_ring_id;
  nxprov_params cinfo_nxprov_params;
  uuid_t cinfo_nx_uuid;
  nexus_port_t cinfo_nx_port;
  uint32_t_0 __cinfo_pad;
  mach_vm_size_t cinfo_mem_map_size;
  mach_vm_address_t cinfo_mem_base;
  mach_vm_offset_t cinfo_schema_offset;
  ring_id_t cinfo_first_tx_ring;
  ring_id_t cinfo_last_tx_ring;
  ring_id_t cinfo_first_rx_ring;
  ring_id_t cinfo_last_rx_ring;
  ch_ev_thresh cinfo_tx_lowat;
  ch_ev_thresh cinfo_rx_lowat;
};

/* 5993 */
union ch_info::$FD12C826C0F1A0E3F31848DD8AF02E6F
{
  uint64_t_0 cinfo_ch_id_64[2];
  uint32_t_0 cinfo_ch_id_32[4];
  uuid_t cinfo_ch_id;
};

/* 5994 */
struct __user_channel_schema
{
  const uint32_t_0 csm_ver;
  const volatile uint32_t_0 csm_flags;
  const char csm_kern_name[256];
  const uuid_t csm_kern_uuid;
  const uint32_t_0 csm_tx_rings;
  const uint32_t_0 csm_rx_rings;
  const uint32_t_0 csm_allocator_ring_pairs;
  const uint32_t_0 csm_flowadv_max;
  const mach_vm_offset_t csm_flowadv_ofs;
  const uint64_t_0 csm_md_redzone_cookie;
  const nexus_meta_type_t csm_md_type;
  const nexus_meta_subtype_t csm_md_subtype;
  const mach_vm_offset_t csm_stats_ofs;
  const nexus_stats_type_t csm_stats_type;
  const mach_vm_offset_t csm_nexusadv_ofs;
  __user_channel_schema::$AADCE48EB7E6C8E582CD05FA279CB0A1 csm_ring_ofs[];
};

/* 5995 */
enum nexus_stats_type_t : __int32
{
  NEXUS_STATS_TYPE_INVALID = 0x0,
  NEXUS_STATS_TYPE_FSW_MS = 0x1,
  NEXUS_STATS_TYPE_CHAN_ERRORS = 0x2,
};

/* 5996 */
struct __user_channel_schema::$AADCE48EB7E6C8E582CD05FA279CB0A1
{
  const mach_vm_offset_t ring_off;
  const mach_vm_offset_t sd_off;
};

/* 5997 */
struct __attribute__((aligned(8))) skmem_arena_mmap_info
{
  skmem_arena_mmap_info::$27596B0A51BB64A43836085F2966BF65 ami_link;
  skmem_arena *ami_arena;
  IOSKMapperRef ami_mapref;
  task_t ami_maptask;
  mach_vm_address_t ami_mapaddr;
  mach_vm_size_t ami_mapsize;
  boolean_t ami_redirect;
};

/* 5998 */
struct skmem_arena_mmap_info::$27596B0A51BB64A43836085F2966BF65
{
  skmem_arena_mmap_info *sle_next;
};

/* 5999 */
struct skmem_arena
{
  lck_mtx_t ar_lock;
  uint32_t_0 ar_refcnt;
  skmem_arena::$6894605CE8B2100CC9559F36B16805E1 ar_link;
  char ar_name[64];
  skmem_arena_type_t ar_type;
  uint32_t_0 ar_flags;
  size_t_0 ar_zsize;
  zone *ar_zone;
  IOSKArenaRef ar_ar;
  skmem_region *ar_regions[12];
  mach_vm_size_t ar_mapsize;
  uint32_t_0 ar_mapcnt;
  uint32_t_0 ar_maprdrcnt;
  skmem_arena::$741C7E7A4371AA328EA3B4BCFC36F8F6 ar_map_head;
};

/* 6000 */
struct skmem_arena::$6894605CE8B2100CC9559F36B16805E1
{
  skmem_arena *tqe_next;
  skmem_arena **tqe_prev;
};

/* 6001 */
enum skmem_arena_type_t : __int32
{
  SKMEM_ARENA_TYPE_NEXUS = 0x0,
  SKMEM_ARENA_TYPE_NECP = 0x1,
  SKMEM_ARENA_TYPE_SYSTEM = 0x2,
};

/* 6002 */
typedef IOSKArena *IOSKArenaRef;

/* 6003 */
struct __cppobj __attribute__((aligned(8))) IOSKArena : OSObject
{
  IOLock *fArenaLock;
  OSSet *fMappers;
  OSArray *fRegions;
  IOSKSize fArenaSize;
};

/* 6004 */
struct skmem_arena::$741C7E7A4371AA328EA3B4BCFC36F8F6
{
  skmem_arena_mmap_info *slh_first;
};

/* 6005 */
typedef IOSKMapper *IOSKMapperRef;

/* 6006 */
struct __cppobj __attribute__((aligned(8))) IOSKMapper : OSObject
{
  task_t fTask;
  vm_map_t fTaskMap;
  IOSKArena *fArena;
  OSArray *fSubMaps;
  mach_vm_address_t fMapAddr;
  mach_vm_size_t fMapSize;
  bool fRedirected;
};

/* 6007 */
struct __kern_channel_upp_bkt
{
  __kern_channel_upp_bkt::$1A68E359CB28E0A1A85C84CF510D3039 upp_head;
};

/* 6008 */
struct __kern_channel_upp_bkt::$1A68E359CB28E0A1A85C84CF510D3039
{
  __kern_quantum *slh_first;
};

/* 6009 */
struct channel_ring_error_stats
{
  uint64_t_0 cres_slots_with_corrupted_data;
  uint64_t_0 cres_slots_with_modified_length;
  uint64_t_0 cres_slots_with_too_large_length;
  uint32_t_0 cres_pkt_alloc_failures;
  uint32_t_0 __cres_reserved[1];
};

/* 6010 */
struct channel_ring_stats
{
  uint64_t_0 crs_total_slots_transferred;
  uint64_t_0 crs_total_bytes_transferred;
  uint64_t_0 crs_number_of_transfers;
  uint32_t_0 crs_min_slots_transferred;
  uint32_t_0 crs_max_slots_transferred;
  uint32_t_0 crs_slots_per_second;
  uint32_t_0 crs_slots_per_second_ma;
  uint64_t_0 crs_bytes_per_second;
  uint64_t_0 crs_bytes_per_second_ma;
  uint32_t_0 __crs_reserved[2];
};

/* 6011 */
struct channel_ring_user_stats
{
  uint64_t_0 crsu_total_slots_transferred;
  uint64_t_0 crsu_total_bytes_transferred;
  uint64_t_0 crsu_number_of_syncs;
  uint32_t_0 crsu_min_slots_transferred;
  uint32_t_0 crsu_max_slots_transferred;
  uint32_t_0 crsu_slots_per_sync;
  uint32_t_0 crsu_slots_per_sync_ma;
  uint64_t_0 crsu_bytes_per_sync;
  uint64_t_0 crsu_bytes_per_sync_ma;
  uint32_t_0 __crsu_reserved[2];
};

/* 6012 */
struct nx_mbq
{
  lck_mtx_t nx_mbq_lock;
  class_queue_t nx_mbq_q;
  lck_grp_t *nx_mbq_grp;
  __kern_channel_ring *nx_mbq_kring;
};

/* 6013 */
struct nx_netif_mit
{
  lck_spin_t mit_lock;
  volatile __kern_channel_ring *mit_ckr;
  uint32_t_0 mit_flags;
  uint32_t_0 mit_requests;
  uint64_t_0 mit_interval;
  uint64_t_0 mit_ad_interval;
  uint32_t_0 mit_cfg_idx_max;
  uint32_t_0 mit_cfg_idx;
  const mit_cfg_tbl *mit_cfg;
  mit_mode_t mit_mode;
  uint32_t_0 mit_packets_avg;
  uint32_t_0 mit_packets_min;
  uint32_t_0 mit_packets_max;
  uint32_t_0 mit_bytes_avg;
  uint32_t_0 mit_bytes_min;
  uint32_t_0 mit_bytes_max;
  pktcntr mit_sstats;
  timespec mit_mode_holdtime;
  timespec mit_mode_lasttime;
  timespec mit_sample_time;
  timespec mit_sample_lasttime;
  thread *mit_thread;
  char mit_name[64];
  const ifnet *mit_netif_ifp;
  mit_cfg_tbl mit_tbl[4];
};

/* 6014 */
struct mit_cfg_tbl
{
  uint32_t_0 cfg_plowat;
  uint32_t_0 cfg_phiwat;
  uint32_t_0 cfg_blowat;
  uint32_t_0 cfg_bhiwat;
  uint64_t_0 cfg_ival;
};

/* 6015 */
enum mit_mode_t : __int32
{
  MIT_MODE_STATIC = 0x0,
  MIT_MODE_DYNAMIC = 0x1,
};

/* 6016 */
enum kern_packet_svc_class_t : __int32
{
  KPKT_SC_UNSPEC = 0xFFFFFFFF,
  KPKT_SC_BK_SYS = 0x80090,
  KPKT_SC_BK = 0x100080,
  KPKT_SC_BE = 0x0,
  KPKT_SC_RD = 0x180010,
  KPKT_SC_OAM = 0x200020,
  KPKT_SC_AV = 0x280120,
  KPKT_SC_RV = 0x300110,
  KPKT_SC_VI = 0x380100,
  KPKT_SC_SIG = 0x380130,
  KPKT_SC_VO = 0x400180,
  KPKT_SC_CTL = 0x480190,
};

/* 6017 */
enum na_activate_mode_t : __int32
{
  NA_ACTIVATE_MODE_ON = 0x0,
  NA_ACTIVATE_MODE_DEFUNCT = 0x1,
  NA_ACTIVATE_MODE_OFF = 0x2,
};

/* 6018 */
enum nxspec_cmd_t : __int32
{
  NXSPEC_CMD_CONNECT = 0x0,
  NXSPEC_CMD_DISCONNECT = 0x1,
  NXSPEC_CMD_START = 0x2,
  NXSPEC_CMD_STOP = 0x3,
};

/* 6019 */
typedef $9C068F0ADF26FF026B2BD1D4337967CD *channel_ring_mem_info_t;

/* 6020 */
struct $9C068F0ADF26FF026B2BD1D4337967CD
{
  uint64_t_0 crmi_buf_mem_total;
  uint64_t_0 crmi_buf_mem_inuse;
};

/* 6021 */
struct nexus_vp_adapter
{
  nexus_adapter vpna_up;
  nx_flowswitch *vpna_fsw;
  nexus_port_t vpna_nx_port;
  boolean_t vpna_retry;
  boolean_t vpna_pid_bound;
  boolean_t vpna_defunct;
  pid_t vpna_pid;
  void *vpna_ft[8];
  uint64_t_0 vpna_last_smac;
};

/* 6022 */
struct nexus_upipe_adapter
{
  nexus_adapter pna_up;
  uint32_t_0 pna_id;
  ch_endpoint_t pna_role;
  nexus_adapter *pna_parent;
  nexus_upipe_adapter *pna_peer;
  boolean_t pna_peer_ref;
  uint32_t_0 pna_parent_slot;
};

/* 6023 */
struct nx_flowswitch
{
  lck_rw_t fsw_lock;
  nexus_extension_t fsw_extension;
  uint32_t_0 fsw_tx_rings;
  uint32_t_0 fsw_rx_rings;
  nx_port_info *fsw_ports;
  bitmap_t *fsw_ports_bmap;
  uint32_t_0 fsw_active_ports;
  uint32_t_0 fsw_num_ports;
  nx_flowswitch::$0EBC757CBED77F29662A0CCDE3233072 fsw_wrap_head;
  nexus_fsw_ops fsw_ops;
  void *fsw_ops_private;
  kern_nexus *fsw_nx;
  fsw_stats fsw_stats;
};

/* 6024 */
union bridge_softc::$00C210A76F73D81D9D9042E3814CEF08
{
  bridge_bsd scu_bsd;
  bridge_nx scu_nx;
};

/* 6025 */
struct bridge_bsd
{
  _bridge_rtnode_list *bb_rthash;
  _bridge_rtnode_list bb_rtlist;
  uint32_t_0 bb_rthash_key;
  uint32_t_0 bb_rthash_size;
  bridge_delayed_call bb_aging_timer;
  bridge_delayed_call bb_resize_call;
  bridge_bsd::$372065CD1B908D4271271F3023446B87 bb_spanlist;
  bstp_state bb_stp;
  bpf_packet_func bb_bpf_input;
  bpf_packet_func bb_bpf_output;
};

/* 6026 */
struct _bridge_rtnode_list
{
  bridge_rtnode *lh_first;
};

/* 6027 */
struct __attribute__((aligned(8))) bridge_rtnode
{
  bridge_rtnode::$EB75CDB78D9232E7FD3ED4F98E643386 brt_hash;
  bridge_rtnode::$EB75CDB78D9232E7FD3ED4F98E643386 brt_list;
  bridge_iflist *brt_dst;
  unsigned __int64 brt_expire;
  uint8_t_0 brt_flags;
  uint8_t_0 brt_addr[6];
  uint16_t brt_vlan;
};

/* 6028 */
struct bridge_rtnode::$EB75CDB78D9232E7FD3ED4F98E643386
{
  bridge_rtnode *le_next;
  bridge_rtnode **le_prev;
};

/* 6029 */
struct __attribute__((aligned(4))) bridge_iflist
{
  bridge_iflist::$42DFD6D3FEFA998012CC99CE69E39493 bif_next;
  ifnet *bif_ifp;
  bstp_port bif_stp;
  uint32_t_0 bif_ifflags;
  int bif_savedcaps;
  uint32_t_0 bif_addrmax;
  uint32_t_0 bif_addrcnt;
  uint32_t_0 bif_addrexceeded;
  interface_filter_t bif_iff_ref;
  bridge_softc *bif_sc;
  uint32_t_0 bif_flags;
  in_addr bif_hf_ipsrc;
  uint8_t_0 bif_hf_hwsrc[6];
  uuid_t bif_flowswitch;
};

/* 6030 */
struct bridge_iflist::$42DFD6D3FEFA998012CC99CE69E39493
{
  bridge_iflist *tqe_next;
  bridge_iflist **tqe_prev;
};

/* 6031 */
struct __attribute__((aligned(8))) bstp_port
{
  bstp_port::$1E794F6295B704069E09FE9BC5C2A3DE bp_next;
  ifnet *bp_ifp;
  bstp_state *bp_bs;
  uint8_t_0 bp_active;
  uint8_t_0 bp_protover;
  uint32_t_0 bp_flags;
  uint32_t_0 bp_path_cost;
  uint16_t bp_port_msg_age;
  uint16_t bp_port_max_age;
  uint16_t bp_port_fdelay;
  uint16_t bp_port_htime;
  uint16_t bp_desg_msg_age;
  uint16_t bp_desg_max_age;
  uint16_t bp_desg_fdelay;
  uint16_t bp_desg_htime;
  bstp_timer bp_edge_delay_timer;
  bstp_timer bp_forward_delay_timer;
  bstp_timer bp_hello_timer;
  bstp_timer bp_message_age_timer;
  bstp_timer bp_migrate_delay_timer;
  bstp_timer bp_recent_backup_timer;
  bstp_timer bp_recent_root_timer;
  bstp_timer bp_tc_timer;
  bstp_config_unit bp_msg_cu;
  bstp_pri_vector bp_desg_pv;
  bstp_pri_vector bp_port_pv;
  uint16_t bp_port_id;
  uint8_t_0 bp_state;
  uint8_t_0 bp_tcstate;
  uint8_t_0 bp_role;
  uint8_t_0 bp_infois;
  uint8_t_0 bp_tc_ack;
  uint8_t_0 bp_tc_prop;
  uint8_t_0 bp_fdbflush;
  uint8_t_0 bp_priority;
  uint8_t_0 bp_ptp_link;
  uint8_t_0 bp_agree;
  uint8_t_0 bp_agreed;
  uint8_t_0 bp_sync;
  uint8_t_0 bp_synced;
  uint8_t_0 bp_proposing;
  uint8_t_0 bp_proposed;
  uint8_t_0 bp_operedge;
  uint8_t_0 bp_reroot;
  uint8_t_0 bp_rcvdtc;
  uint8_t_0 bp_rcvdtca;
  uint8_t_0 bp_rcvdtcn;
  uint32_t_0 bp_forward_transitions;
  uint8_t_0 bp_txcount;
  bstp_task bp_statetask;
  bstp_task bp_rtagetask;
  uint32_t_0 bp_if_link_state;
};

/* 6032 */
struct bstp_port::$1E794F6295B704069E09FE9BC5C2A3DE
{
  bstp_port *le_next;
  bstp_port **le_prev;
};

/* 6033 */
struct bstp_state
{
  bstp_state::$13CAD9AFE7C93655C564803C0261757F bs_list;
  uint8_t_0 bs_running;
  lck_mtx_t *bs_mtx;
  bstp_pri_vector bs_bridge_pv;
  bstp_pri_vector bs_root_pv;
  bstp_port *bs_root_port;
  uint8_t_0 bs_protover;
  uint16_t bs_migration_delay;
  uint16_t bs_edge_delay;
  uint16_t bs_bridge_max_age;
  uint16_t bs_bridge_fdelay;
  uint16_t bs_bridge_htime;
  uint16_t bs_root_msg_age;
  uint16_t bs_root_max_age;
  uint16_t bs_root_fdelay;
  uint16_t bs_root_htime;
  uint16_t bs_hold_time;
  uint16_t bs_bridge_priority;
  uint8_t_0 bs_txholdcount;
  uint8_t_0 bs_allsynced;
  bstp_timer bs_link_timer;
  timeval bs_last_tc_time;
  bstp_state::$CFA222D8EAA94A35BEF72A604953373C bs_bplist;
  bstp_state_cb_t bs_state_cb;
  bstp_rtage_cb_t bs_rtage_cb;
};

/* 6034 */
struct bstp_state::$13CAD9AFE7C93655C564803C0261757F
{
  bstp_state *le_next;
  bstp_state **le_prev;
};

/* 6035 */
struct __attribute__((aligned(8))) bstp_pri_vector
{
  uint64_t_0 pv_root_id;
  uint32_t_0 pv_cost;
  uint64_t_0 pv_dbridge_id;
  uint16_t pv_dport_id;
  uint16_t pv_port_id;
};

/* 6036 */
struct bstp_timer
{
  int active;
  int latched;
  int value;
};

/* 6037 */
struct bstp_state::$CFA222D8EAA94A35BEF72A604953373C
{
  bstp_port *lh_first;
};

/* 6038 */
typedef void (*bstp_state_cb_t)(ifnet *, int);

/* 6039 */
typedef void (*bstp_rtage_cb_t)(ifnet *, int);

/* 6040 */
struct bstp_config_unit
{
  bstp_pri_vector cu_pv;
  uint16_t cu_message_age;
  uint16_t cu_max_age;
  uint16_t cu_forward_delay;
  uint16_t cu_hello_time;
  uint8_t_0 cu_message_type;
  uint8_t_0 cu_topology_change_ack;
  uint8_t_0 cu_topology_change;
  uint8_t_0 cu_proposal;
  uint8_t_0 cu_agree;
  uint8_t_0 cu_learning;
  uint8_t_0 cu_forwarding;
  uint8_t_0 cu_role;
};

/* 6041 */
struct bstp_task
{
  bstp_task::$F97A7F323FF501162C3603B220C5766E bt_next;
  int bt_count;
  bstp_task_func_t *bt_func;
  void *bt_context;
};

/* 6042 */
struct bstp_task::$F97A7F323FF501162C3603B220C5766E
{
  bstp_task *tqe_next;
  bstp_task **tqe_prev;
};

/* 6043 */
typedef void bstp_task_func_t(void *, int);

/* 6044 */
typedef ifnet_filter *interface_filter_t;

/* 6045 */
struct bridge_delayed_call
{
  bridge_softc *bdc_sc;
  bridge_delayed_func_t bdc_func;
  timespec bdc_ts;
  u_int32_t bdc_flags;
  thread_call_t bdc_thread_call;
};

/* 6046 */
typedef void (*bridge_delayed_func_t)(bridge_softc *);

/* 6047 */
struct bridge_bsd::$372065CD1B908D4271271F3023446B87
{
  bridge_iflist *tqh_first;
  bridge_iflist **tqh_last;
};

/* 6048 */
struct bridge_nx
{
  uuid_t if_provider;
  uuid_t if_instance;
  uuid_t if_attach;
  uuid_t bridge_provider;
  uuid_t bridge_instance;
  uuid_t ms_provider;
  uuid_t ms_instance;
  uuid_t ms_device;
  uuid_t ms_host;
};

/* 6049 */
struct bridge_softc::$414F2830A8C6F1D40E58E5D1FDC2CB1F
{
  bridge_softc *le_next;
  bridge_softc **le_prev;
};

/* 6050 */
struct bridge_softc::$372065CD1B908D4271271F3023446B87
{
  bridge_iflist *tqh_first;
  bridge_iflist **tqh_last;
};

/* 6051 */
struct if_clone
{
  if_clone::$F0C225C045EEDE3148C2EC85A7D899CC ifc_list;
  lck_mtx_t ifc_mutex;
  const char *ifc_name;
  size_t_0 ifc_namelen;
  u_int32_t ifc_minifs;
  u_int32_t ifc_maxunit;
  unsigned __int8 *ifc_units;
  u_int32_t ifc_bmlen;
  u_int32_t ifc_zone_max_elem;
  u_int32_t ifc_softc_size;
  zone *ifc_zone;
  int (*ifc_create)(if_clone *, u_int32_t, void *);
  int (*ifc_destroy)(ifnet *);
};

/* 6052 */
struct if_clone::$F0C225C045EEDE3148C2EC85A7D899CC
{
  if_clone *le_next;
  if_clone **le_prev;
};

/* 6053 */
struct bridge_control
{
  int (*bc_func)(bridge_softc *, void *);
  unsigned int bc_argsize;
  unsigned int bc_flags;
};

/* 6054 */
enum $661FB4391FF4515D5D476DF0CEEBB7E4 : __int32
{
  NEXUS_ATTR_TX_RINGS = 0x0,
  NEXUS_ATTR_RX_RINGS = 0x1,
  NEXUS_ATTR_TX_SLOTS = 0x2,
  NEXUS_ATTR_RX_SLOTS = 0x3,
  NEXUS_ATTR_SLOT_BUF_SIZE = 0x4,
  NEXUS_ATTR_SLOT_META_SIZE = 0x5,
  NEXUS_ATTR_ANONYMOUS = 0x6,
  NEXUS_ATTR_MHINTS = 0x7,
  NEXUS_ATTR_PIPES = 0x8,
  NEXUS_ATTR_EXTENSIONS = 0x9,
  NEXUS_ATTR_IFINDEX = 0xA,
  NEXUS_ATTR_STATS_SIZE = 0xB,
  NEXUS_ATTR_FLOWADV_MAX = 0xC,
  NEXUS_ATTR_QMAP = 0xD,
  NEXUS_ATTR_CHECKSUM_OFFLOAD = 0xE,
  NEXUS_ATTR_USER_PACKET_POOL = 0xF,
  NEXUS_ATTR_ADV_SIZE = 0x10,
  NEXUS_ATTR_USER_CHANNEL = 0x11,
};

/* 6055 */
struct sockaddr_dl
{
  u_char sdl_len;
  u_char sdl_family;
  u_short sdl_index;
  u_char sdl_type;
  u_char sdl_nlen;
  u_char sdl_alen;
  u_char sdl_slen;
  char sdl_data[12];
};

/* 6056 */
struct __attribute__((packed)) __attribute__((aligned(4))) ifmediareq
{
  char ifm_name[16];
  int ifm_current;
  int ifm_mask;
  int ifm_status;
  int ifm_active;
  int ifm_count;
  int *ifm_ulist;
};

/* 6057 */
struct ifdrv32
{
  char ifd_name[16];
  u_int32_t ifd_cmd;
  u_int32_t ifd_len;
  user32_addr_t ifd_data;
};

/* 6058 */
struct ifdrv64
{
  char ifd_name[16];
  u_int64_t ifd_cmd;
  u_int64_t ifd_len;
  user64_addr_t ifd_data;
};

/* 6059 */
struct ether_arp
{
  arphdr ea_hdr;
  u_char arp_sha[6];
  u_char arp_spa[4];
  u_char arp_tha[6];
  u_char arp_tpa[4];
};

/* 6060 */
struct arphdr
{
  u_short ar_hrd;
  u_short ar_pro;
  u_char ar_hln;
  u_char ar_pln;
  u_short ar_op;
};

/* 6061 */
struct ifnet_init_eparams
{
  u_int32_t ver;
  u_int32_t len;
  u_int32_t flags;
  const void *uniqueid;
  u_int32_t uniqueid_len;
  const char *name;
  u_int32_t unit;
  ifnet_family_t family;
  u_int32_t type;
  u_int32_t sndq_maxlen;
  ifnet_output_func output;
  ifnet_pre_enqueue_func pre_enqueue;
  ifnet_start_func start;
  ifnet_ctl_func output_ctl;
  u_int32_t output_sched_model;
  u_int32_t output_target_qdelay;
  u_int64_t output_bw;
  u_int64_t output_bw_max;
  u_int64_t output_lt;
  u_int64_t output_lt_max;
  u_int16_t start_delay_qlen;
  u_int16_t start_delay_timeout;
  u_int32_t _reserved[3];
  ifnet_input_poll_func input_poll;
  ifnet_ctl_func input_ctl;
  u_int32_t rcvq_maxlen;
  u_int32_t __reserved;
  u_int64_t input_bw;
  u_int64_t input_bw_max;
  u_int64_t input_lt;
  u_int64_t input_lt_max;
  u_int64_t ___reserved[2];
  ifnet_demux_func demux;
  ifnet_add_proto_func add_proto;
  ifnet_del_proto_func del_proto;
  ifnet_check_multi check_multi;
  ifnet_framer_func framer;
  void *softc;
  ifnet_ioctl_func ioctl;
  ifnet_set_bpf_tap set_bpf_tap;
  ifnet_detached_func detach;
  ifnet_event_func event;
  const void *broadcast_addr;
  u_int32_t broadcast_len;
  ifnet_framer_extended_func framer_extended;
  ifnet_subfamily_t subfamily;
  u_int16_t tx_headroom;
  u_int16_t tx_trailer;
  u_int32_t rx_mit_ival;
  u_int32_t ____reserved;
  u_int64_t _____reserved[1];
};

/* 6062 */
typedef bridge_nx *bridge_nx_t;

/* 6063 */
typedef nexus_controller *nexus_controller_t;

/* 6064 */
struct nexus_controller
{
  nxctl *ncd_nxctl;
};

/* 6065 */
struct kern_nexus_net_init
{
  uint32_t_0 nxneti_version;
  uint32_t_0 nxneti_flags;
  ifnet_init_eparams *nxneti_eparams;
  sockaddr_dl *nxneti_lladdr;
  nxnet_prepare_fn_t nxneti_prepare;
  kern_pbufpool_t nxneti_tx_pbufpool;
  kern_pbufpool_t nxneti_rx_pbufpool;
};

/* 6066 */
typedef errno_t (*nxnet_prepare_fn_t)(kern_nexus_t, ifnet_t);

/* 6067 */
struct bridge_link_event::$702627CCEF8AD049C7FD7503AB5786E6
{
  kern_event_msg header;
  u_int32_t unit;
  char if_name[16];
};

/* 6068 */
struct kern_event_msg
{
  u_int32_t total_size;
  u_int32_t vendor_code;
  u_int32_t kev_class;
  u_int32_t kev_subclass;
  u_int32_t id;
  u_int32_t event_code;
  u_int32_t event_data[1];
};

/* 6069 */
union bridge_ioctl::$65CF23D0E9FDCFA0A6763AE72BDC6BFA
{
  ifbreq ifbreq;
  ifbifconf32 ifbifconf;
  ifbareq32 ifbareq;
  ifbaconf32 ifbaconf;
  ifbrparam ifbrparam;
  ifbropreq32 ifbropreq;
};

/* 6070 */
struct ifbreq
{
  char ifbr_ifsname[16];
  uint32_t_0 ifbr_ifsflags;
  uint32_t_0 ifbr_stpflags;
  uint32_t_0 ifbr_path_cost;
  uint8_t_0 ifbr_portno;
  uint8_t_0 ifbr_priority;
  uint8_t_0 ifbr_proto;
  uint8_t_0 ifbr_role;
  uint8_t_0 ifbr_state;
  uint32_t_0 ifbr_addrcnt;
  uint32_t_0 ifbr_addrmax;
  uint32_t_0 ifbr_addrexceeded;
  uint8_t_0 pad[32];
};

/* 6071 */
struct ifbifconf32
{
  uint32_t_0 ifbic_len;
  ifbifconf32::$CCFC73F6CC37565A7FE9440AB2711A83 ifbic_ifbicu;
};

/* 6072 */
union ifbifconf32::$CCFC73F6CC37565A7FE9440AB2711A83
{
  user32_addr_t ifbicu_buf;
  user32_addr_t ifbicu_req;
};

/* 6073 */
struct __attribute__((aligned(4))) ifbareq32
{
  char ifba_ifsname[16];
  uint32_t_0 ifba_expire;
  uint8_t_0 ifba_flags;
  uint8_t_0 ifba_dst[6];
  uint16_t ifba_vlan;
};

/* 6074 */
struct ifbaconf32
{
  uint32_t_0 ifbac_len;
  ifbaconf32::$9FF5C761F43FB3B307314E2A035B7A7F ifbac_ifbacu;
};

/* 6075 */
union ifbaconf32::$9FF5C761F43FB3B307314E2A035B7A7F
{
  user32_addr_t ifbacu_buf;
  user32_addr_t ifbacu_req;
};

/* 6076 */
struct ifbrparam
{
  ifbrparam::$B5B56EE8AB64AFD4D18430F57E0D9F02 ifbrp_ifbrpu;
};

/* 6077 */
union ifbrparam::$B5B56EE8AB64AFD4D18430F57E0D9F02
{
  uint32_t_0 ifbrpu_int32;
  uint16_t ifbrpu_int16;
  uint8_t_0 ifbrpu_int8;
};

/* 6078 */
struct ifbropreq32
{
  uint8_t_0 ifbop_holdcount;
  uint8_t_0 ifbop_maxage;
  uint8_t_0 ifbop_hellotime;
  uint8_t_0 ifbop_fwddelay;
  uint8_t_0 ifbop_protocol;
  uint16_t ifbop_priority;
  uint16_t ifbop_root_port;
  uint32_t_0 ifbop_root_path_cost;
  uint64_t_0 ifbop_bridgeid;
  uint64_t_0 ifbop_designated_root;
  uint64_t_0 ifbop_designated_bridge;
  timeval ifbop_last_tc_time;
};

/* 6079 */
union bridge_ioctl::$FF53D03DC1C3D34DE0A7ACE8C5E10ECC
{
  ifbreq ifbreq;
  ifbifconf64 ifbifconf;
  ifbareq64 ifbareq;
  ifbaconf64 ifbaconf;
  ifbrparam ifbrparam;
  ifbropreq64 ifbropreq;
};

/* 6080 */
struct __attribute__((packed)) __attribute__((aligned(4))) ifbifconf64
{
  uint32_t_0 ifbic_len;
  ifbifconf64::$82317041C4971778C949116777A2A9BB ifbic_ifbicu;
};

/* 6081 */
union ifbifconf64::$82317041C4971778C949116777A2A9BB
{
  user64_addr_t ifbicu_buf;
  user64_addr_t ifbicu_req;
};

/* 6082 */
struct __attribute__((packed)) __attribute__((aligned(4))) ifbareq64
{
  char ifba_ifsname[16];
  uint64_t_0 ifba_expire;
  uint8_t_0 ifba_flags;
  uint8_t_0 ifba_dst[6];
  __attribute__((aligned(2))) uint16_t ifba_vlan;
};

/* 6083 */
struct __attribute__((packed)) __attribute__((aligned(4))) ifbaconf64
{
  uint32_t_0 ifbac_len;
  ifbaconf64::$D5322B874660731C13823F201C4C13BD ifbac_ifbacu;
};

/* 6084 */
union ifbaconf64::$D5322B874660731C13823F201C4C13BD
{
  user64_addr_t ifbacu_buf;
  user64_addr_t ifbacu_req;
};

/* 6085 */
struct ifbropreq64
{
  uint8_t_0 ifbop_holdcount;
  uint8_t_0 ifbop_maxage;
  uint8_t_0 ifbop_hellotime;
  uint8_t_0 ifbop_fwddelay;
  uint8_t_0 ifbop_protocol;
  uint16_t ifbop_priority;
  uint16_t ifbop_root_port;
  uint32_t_0 ifbop_root_path_cost;
  uint64_t_0 ifbop_bridgeid;
  uint64_t_0 ifbop_designated_root;
  uint64_t_0 ifbop_designated_bridge;
  timeval ifbop_last_tc_time;
};

/* 6086 */
struct ifnet_attach_proto_param
{
  ifnet_demux_desc *demux_array;
  u_int32_t demux_count;
  proto_media_input input;
  proto_media_preout pre_output;
  proto_media_event event;
  proto_media_ioctl ioctl;
  proto_media_detached detached;
  proto_media_resolve_multi resolve;
  proto_media_send_arp send_arp;
};

/* 6087 */
typedef errno_t (*proto_media_input)(ifnet_t, protocol_family_t, mbuf_t, char *);

/* 6088 */
typedef errno_t (*proto_media_preout)(ifnet_t, protocol_family_t, mbuf_t *, const sockaddr *, void *, char *, char *);

/* 6089 */
typedef void (*proto_media_event)(ifnet_t, protocol_family_t, const kev_msg *);

/* 6090 */
typedef errno_t (*proto_media_ioctl)(ifnet_t, protocol_family_t, unsigned __int64, void *);

/* 6091 */
typedef errno_t (*proto_media_detached)(ifnet_t, protocol_family_t);

/* 6092 */
typedef errno_t (*proto_media_resolve_multi)(ifnet_t, const sockaddr *, sockaddr_dl *, size_t_0);

/* 6093 */
typedef errno_t (*proto_media_send_arp)(ifnet_t, u_short, const sockaddr_dl *, const sockaddr *, const sockaddr_dl *, const sockaddr *);

/* 6094 */
struct ip_0
{
  u_char ip_vhl;
  u_char ip_tos;
  u_short ip_len;
  u_short ip_id;
  u_short ip_off;
  u_char ip_ttl;
  u_char ip_p;
  u_short ip_sum;
  in_addr ip_src;
  in_addr ip_dst;
};

/* 6095 */
typedef nexus_attr *nexus_attr_t;

/* 6096 */
struct nexus_attr
{
  uint64_t_0 nxa_requested;
  uint64_t_0 nxa_tx_rings;
  uint64_t_0 nxa_rx_rings;
  uint64_t_0 nxa_tx_slots;
  uint64_t_0 nxa_rx_slots;
  uint64_t_0 nxa_buf_size;
  uint64_t_0 nxa_meta_size;
  uint64_t_0 nxa_stats_size;
  uint64_t_0 nxa_anonymous;
  uint64_t_0 nxa_pipes;
  uint64_t_0 nxa_extensions;
  uint64_t_0 nxa_mhints;
  uint64_t_0 nxa_ifindex;
  uint64_t_0 nxa_flowadv_max;
  uint64_t_0 nxa_qmap;
  uint64_t_0 nxa_checksum_offload;
  uint64_t_0 nxa_user_packet_pool;
  uint64_t_0 nxa_nexusadv_size;
  uint64_t_0 nxa_user_channel;
};

/* 6097 */
struct kern_nexus_init
{
  uint32_t_0 nxi_version;
  uint32_t_0 nxi_flags;
  kern_pbufpool_t nxi_tx_pbufpool;
  kern_pbufpool_t nxi_rx_pbufpool;
};

/* 6098 */
struct iff_filter
{
  void *iff_cookie;
  const char *iff_name;
  protocol_family_t iff_protocol;
  iff_input_func iff_input;
  iff_output_func iff_output;
  iff_event_func iff_event;
  iff_ioctl_func iff_ioctl;
  iff_detached_func iff_detached;
};

/* 6099 */
typedef errno_t (*iff_input_func)(void *, ifnet_t, protocol_family_t, mbuf_t *, char **);

/* 6100 */
typedef errno_t (*iff_output_func)(void *, ifnet_t, protocol_family_t, mbuf_t *);

/* 6101 */
typedef void (*iff_event_func)(void *, ifnet_t, protocol_family_t, const kev_msg *);

/* 6102 */
typedef errno_t (*iff_ioctl_func)(void *, ifnet_t, protocol_family_t, unsigned __int64, void *);

/* 6103 */
typedef void (*iff_detached_func)(void *, ifnet_t);

/* 6104 */
struct __attribute__((packed)) __attribute__((aligned(4))) ifbpstpconf64
{
  uint32_t_0 ifbpstp_len;
  ifbpstpconf64::$F7DC1E448CD0D6BCC43551696745CECA ifbpstp_ifbpstpu;
};

/* 6105 */
union ifbpstpconf64::$F7DC1E448CD0D6BCC43551696745CECA
{
  user64_addr_t ifbpstpu_buf;
  user64_addr_t ifbpstpu_req;
};

/* 6106 */
struct ifbpstpreq
{
  uint8_t_0 ifbp_portno;
  uint32_t_0 ifbp_fwd_trans;
  uint32_t_0 ifbp_design_cost;
  uint32_t_0 ifbp_design_port;
  uint64_t_0 ifbp_design_bridge;
  uint64_t_0 ifbp_design_root;
};

/* 6107 */
struct ifbrhostfilter
{
  uint32_t_0 ifbrhf_flags;
  char ifbrhf_ifsname[16];
  uint8_t_0 ifbrhf_hwsrca[6];
  uint32_t_0 ifbrhf_ipsrc;
};

/* 6108 */
struct flowadv
{
  int32_t code;
};

/* 6109 */
struct ifbpstpconf32
{
  uint32_t_0 ifbpstp_len;
  ifbpstpconf32::$E42FE121033A02A1C7DC6DE5E2F41D13 ifbpstp_ifbpstpu;
};

/* 6110 */
union ifbpstpconf32::$E42FE121033A02A1C7DC6DE5E2F41D13
{
  user32_addr_t ifbpstpu_buf;
  user32_addr_t ifbpstpu_req;
};

/* 6111 */
struct ifnethead
{
  ifnet *tqh_first;
  ifnet **tqh_last;
};

/* 6112 */
struct $1AA7D60261A092C3C0D7432C5898F7E6
{
  if_clone *lh_first;
};

/* 6113 */
struct $3FDAB772C96AC50199EADA5D3E358379
{
  ifmultiaddr_dbg *tqh_first;
  ifmultiaddr_dbg **tqh_last;
};

/* 6114 */
struct ifmultiaddr_dbg
{
  ifmultiaddr ifma;
  u_int16_t ifma_refhold_cnt;
  u_int16_t ifma_refrele_cnt;
  ctrace_t ifma_refhold[32];
  ctrace_t ifma_refrele[32];
  ifmultiaddr_dbg::$70C0A3A9B180081747A040035E338D35 ifma_trash_link;
};

/* 6115 */
typedef ctrace ctrace_t;

/* 6116 */
struct ctrace
{
  void *th;
  void *pc[8];
};

/* 6117 */
struct ifmultiaddr_dbg::$70C0A3A9B180081747A040035E338D35
{
  ifmultiaddr_dbg *tqe_next;
  ifmultiaddr_dbg **tqe_prev;
};

/* 6118 */
enum cqev : __int32
{
  CLASSQ_EV_INIT = 0x0,
  CLASSQ_EV_LINK_BANDWIDTH = 0x1,
  CLASSQ_EV_LINK_LATENCY = 0x2,
  CLASSQ_EV_LINK_MTU = 0x3,
  CLASSQ_EV_LINK_UP = 0x4,
  CLASSQ_EV_LINK_DOWN = 0x5,
};

/* 6119 */
enum intf_event_code_t : __int32
{
  INTF_EVENT_CODE_CREATED = 0x0,
  INTF_EVENT_CODE_REMOVED = 0x1,
  INTF_EVENT_CODE_STATUS_UPDATE = 0x2,
  INTF_EVENT_CODE_IPADDR_ATTACHED = 0x3,
  INTF_EVENT_CODE_IPADDR_DETACHED = 0x4,
  INTF_EVENT_CODE_LLADDR_UPDATE = 0x5,
  INTF_EVENT_CODE_MTU_CHANGED = 0x6,
  INTF_EVENT_CODE_LOW_POWER_UPDATE = 0x7,
};

/* 6120 */
struct if_descreq
{
  char ifdr_name[16];
  u_int32_t ifdr_len;
  u_int8_t ifdr_desc[128];
};

/* 6121 */
struct if_linkparamsreq
{
  char iflpr_name[16];
  u_int32_t iflpr_flags;
  u_int32_t iflpr_output_sched;
  u_int64_t iflpr_output_tbr_rate;
  u_int32_t iflpr_output_tbr_percent;
  u_int64_t iflpr_input_tbr_rate;
  if_bandwidths iflpr_output_bw;
  if_bandwidths iflpr_input_bw;
  if_latencies iflpr_output_lt;
  if_latencies iflpr_input_lt;
};

/* 6122 */
struct __attribute__((aligned(8))) if_qstatsreq
{
  char ifqr_name[16];
  u_int32_t ifqr_slot;
  void *ifqr_buf;
  int ifqr_len;
};

/* 6123 */
struct if_throttlereq
{
  char ifthr_name[16];
  u_int32_t ifthr_level;
};

/* 6124 */
struct if_agentidreq
{
  char ifar_name[16];
  uuid_t ifar_uuid;
};

/* 6125 */
struct if_nsreq
{
  char ifnsr_name[16];
  u_int8_t ifnsr_family;
  u_int8_t ifnsr_len;
  u_int16_t ifnsr_flags;
  u_int8_t ifnsr_data[20];
};

/* 6126 */
struct if_nexusreq
{
  char ifnr_name[16];
  uint64_t_0 ifnr_flags;
  uuid_t ifnr_netif;
  uuid_t ifnr_multistack;
  uint64_t_0 ifnr_reserved[5];
};

/* 6127 */
struct intf_event_nwk_wq_entry
{
  nwk_wq_entry nwk_wqe;
  intf_event intf_ev_arg;
};

/* 6128 */
struct nwk_wq_entry
{
  void (*func)(void *);
  void *arg;
  boolean_t is_arg_managed;
  nwk_wq_entry::$1298A31D7B87923540F75E374C28F986 nwk_wq_link;
};

/* 6129 */
struct nwk_wq_entry::$1298A31D7B87923540F75E374C28F986
{
  nwk_wq_entry *tqe_next;
  nwk_wq_entry **tqe_prev;
};

/* 6130 */
struct intf_event
{
  ifnet *ifp;
  sockaddr_in_4_6 addr;
  uint32_t_0 intf_event_code;
};

/* 6131 */
union sockaddr_in_4_6
{
  sockaddr sa;
  sockaddr_in sin;
  sockaddr_in6 sin6;
};

/* 6132 */
struct osockaddr
{
  __uint16_t sa_family;
  char sa_data[14];
};

/* 6133 */
struct if_order
{
  u_int32_t ifo_count;
  u_int32_t ifo_reserved;
  mach_vm_address_t ifo_ordered_indices;
};

/* 6134 */
struct if_nat64req
{
  char ifnat64_name[16];
  ipv6_prefix ifnat64_prefixes[4];
};

/* 6135 */
struct ipv6_prefix
{
  in6_addr ipv6_prefix;
  uint32_t_0 prefix_len;
};

/* 6136 */
struct if_clat46req
{
  char ifclat46_name[16];
  if_ipv6_address ifclat46_addr;
};

/* 6137 */
struct if_ipv6_address
{
  in6_addr v6_address;
  uint32_t_0 v6_prefixlen;
};

/* 6138 */
struct eventhandler_entry_ifnet_event
{
  eventhandler_entry ee;
  ifnet_event_fn eh_func;
};

/* 6139 */
typedef void (*ifnet_event_fn)(eventhandler_entry_arg, ifnet *, sockaddr *, intf_event_code_t);

/* 6140 */
union ifioctl_netagent::$BC84725EB307027D8A0174100940ABF4
{
  if_agentidsreq32 s32;
  if_agentidsreq64 s64;
};

/* 6141 */
struct if_agentidsreq32
{
  char ifar_name[16];
  u_int32_t ifar_count;
  user32_addr_t ifar_uuids;
};

/* 6142 */
struct if_agentidsreq64
{
  char ifar_name[16];
  u_int32_t ifar_count;
  user64_addr_t ifar_uuids;
};

/* 6143 */
union ifconf::$315AB6B24ACE25468E6AD2C74B10B44C
{
  sockaddr sa;
  sockaddr_dl sdl;
  uint8_t_0 buf[256];
};

/* 6144 */
struct if_data64
{
  u_char ifi_type;
  u_char ifi_typelen;
  u_char ifi_physical;
  u_char ifi_addrlen;
  u_char ifi_hdrlen;
  u_char ifi_recvquota;
  u_char ifi_xmitquota;
  u_char ifi_unused1;
  u_int32_t ifi_mtu;
  u_int32_t ifi_metric;
  u_int64_t ifi_baudrate;
  u_int64_t ifi_ipackets;
  u_int64_t ifi_ierrors;
  u_int64_t ifi_opackets;
  u_int64_t ifi_oerrors;
  u_int64_t ifi_collisions;
  u_int64_t ifi_ibytes;
  u_int64_t ifi_obytes;
  u_int64_t ifi_imcasts;
  u_int64_t ifi_omcasts;
  u_int64_t ifi_iqdrops;
  u_int64_t ifi_noproto;
  u_int32_t ifi_recvtiming;
  u_int32_t ifi_xmittiming;
  timeval32 ifi_lastchange;
};

/* 6145 */
struct if_data_extended
{
  u_int64_t ifi_alignerrs;
  u_int64_t ifi_dt_bytes;
  u_int64_t ifi_fpackets;
  u_int64_t ifi_fbytes;
  u_int64_t reserved[12];
};

/* 6146 */
struct in_ifaddr
{
  ifaddr ia_ifa;
  u_int32_t ia_net;
  u_int32_t ia_netmask;
  u_int32_t ia_subnet;
  u_int32_t ia_subnetmask;
  in_addr ia_netbroadcast;
  in_ifaddr::$8BEBED574027BA2D88D26F99BBD0E6B2 ia_link;
  sockaddr_in ia_addr;
  sockaddr_in ia_dstaddr;
  sockaddr_in ia_sockmask;
  in_ifaddr::$8BEBED574027BA2D88D26F99BBD0E6B2 ia_hash;
};

/* 6147 */
struct in_ifaddr::$8BEBED574027BA2D88D26F99BBD0E6B2
{
  in_ifaddr *tqe_next;
  in_ifaddr **tqe_prev;
};

/* 6148 */
struct in6_ifaddr
{
  ifaddr ia_ifa;
  sockaddr_in6 ia_addr;
  sockaddr_in6 ia_net;
  sockaddr_in6 ia_dstaddr;
  sockaddr_in6 ia_prefixmask;
  u_int32_t ia_plen;
  in6_ifaddr *ia_next;
  int ia6_flags;
  in6_addrlifetime_i ia6_lifetime;
  u_int64_t ia6_createtime;
  u_int64_t ia6_updatetime;
  nd_prefix *ia6_ndpr;
  in6_ifaddr::$2CFC614C21C9EBED6F49ACF0482D2F5F ia6_memberships;
};

/* 6149 */
struct in6_addrlifetime_i
{
  u_int64_t ia6ti_expire;
  u_int64_t ia6ti_preferred;
  u_int32_t ia6ti_vltime;
  u_int32_t ia6ti_pltime;
  u_int64_t ia6ti_base_calendartime;
  u_int64_t ia6ti_base_uptime;
};

/* 6150 */
struct nd_prefix
{
  lck_mtx_t ndpr_lock;
  u_int32_t ndpr_refcount;
  u_int32_t ndpr_debug;
  ifnet *ndpr_ifp;
  rtentry *ndpr_rt;
  nd_prefix::$38B2ACA8FEC72B5094A7C074E2396125 ndpr_entry;
  sockaddr_in6 ndpr_prefix;
  in6_addr ndpr_mask;
  in6_addr ndpr_addr;
  u_int32_t ndpr_vltime;
  u_int32_t ndpr_pltime;
  u_int64_t ndpr_preferred;
  u_int64_t ndpr_expire;
  u_int64_t ndpr_lastupdate;
  u_int64_t ndpr_base_calendartime;
  u_int64_t ndpr_base_uptime;
  prf_ra ndpr_flags;
  unsigned int ndpr_genid;
  u_int32_t ndpr_stateflags;
  pr_rtrhead ndpr_advrtrs;
  u_char ndpr_plen;
  int ndpr_addrcnt;
  u_int32_t ndpr_allmulti_cnt;
  u_int32_t ndpr_prproxy_sols_cnt;
  prproxy_sols_tree ndpr_prproxy_sols;
  void (*ndpr_trace)(nd_prefix *, int);
};

/* 6151 */
struct nd_prefix::$38B2ACA8FEC72B5094A7C074E2396125
{
  nd_prefix *le_next;
  nd_prefix **le_prev;
};

/* 6152 */
struct prf_ra
{
  unsigned __int8 onlink : 1;
  unsigned __int8 autonomous : 1;
  unsigned __int8 reserved : 6;
};

/* 6153 */
struct pr_rtrhead
{
  nd_pfxrouter *lh_first;
};

/* 6154 */
struct nd_pfxrouter
{
  nd_pfxrouter::$EB064983678C5A5AF79F2409E96842DD pfr_entry;
  nd_defrouter *router;
};

/* 6155 */
struct nd_pfxrouter::$EB064983678C5A5AF79F2409E96842DD
{
  nd_pfxrouter *le_next;
  nd_pfxrouter **le_prev;
};

/* 6156 */
struct nd_defrouter
{
  lck_mtx_t nddr_lock;
  nd_defrouter::$C41D1A88BD11BB03235AD91AC12A6346 dr_entry;
  in6_addr rtaddr;
  u_int32_t nddr_refcount;
  u_int32_t nddr_debug;
  u_int64_t expire;
  u_int64_t base_calendartime;
  u_int64_t base_uptime;
  u_char flags;
  u_char stateflags;
  u_short rtlifetime;
  int err;
  ifnet *ifp;
  in6_addr rtaddr_mapped;
  void (*nddr_trace)(nd_defrouter *, int);
};

/* 6157 */
struct nd_defrouter::$C41D1A88BD11BB03235AD91AC12A6346
{
  nd_defrouter *tqe_next;
  nd_defrouter **tqe_prev;
};

/* 6158 */
struct prproxy_sols_tree
{
  nd6_prproxy_soltgt *rbh_root;
};

/* 6159 */
struct nd6_prproxy_soltgt
{
  nd6_prproxy_soltgt::$72AA8E7FE869FCABA6DC4B07D23496A6 soltgt_link;
  soltgt_key_s soltgt_key;
  u_int64_t soltgt_expire;
  u_int32_t soltgt_cnt;
  nd6_prproxy_soltgt::$5A20F3534B337548D409574BCD0B9A4D soltgt_q;
};

/* 6160 */
struct in6_ifaddr::$2CFC614C21C9EBED6F49ACF0482D2F5F
{
  in6_multi_mship *lh_first;
};

/* 6161 */
struct in6_multi_mship
{
  in6_multi *i6mm_maddr;
  in6_multi_mship::$589F91320EC076BBAAC43B7C607EDBD7 i6mm_chain;
};

/* 6162 */
struct in6_multi
{
  lck_mtx_t in6m_lock;
  u_int32_t in6m_refcount;
  u_int32_t in6m_reqcnt;
  u_int32_t in6m_debug;
  in6_multi::$A814D281E5B192FE3B0FB9069FC684E2 in6m_entry;
  in6_addr in6m_addr;
  ifnet *in6m_ifp;
  ifmultiaddr *in6m_ifma;
  u_int in6m_state;
  u_int in6m_timer;
  mld_ifinfo *in6m_mli;
  in6_multi::$92E3B75F92706F9767BC849F1732F884 in6m_dtle;
  in6_multi::$92E3B75F92706F9767BC849F1732F884 in6m_nrele;
  u_int32_t in6m_nrelecnt;
  ip6_msource_tree in6m_srcs;
  u_long in6m_nsrc;
  ifqueue in6m_scq;
  timeval in6m_lastgsrtv;
  uint16_t in6m_sctimer;
  uint16_t in6m_scrv;
  in6m_st in6m_st[2];
  void (*in6m_trace)(in6_multi *, int);
};

/* 6163 */
struct in6_multi::$A814D281E5B192FE3B0FB9069FC684E2
{
  in6_multi *le_next;
  in6_multi **le_prev;
};

/* 6164 */
struct in6_multi::$92E3B75F92706F9767BC849F1732F884
{
  in6_multi *sle_next;
};

/* 6165 */
struct ip6_msource_tree
{
  ip6_msource *rbh_root;
};

/* 6166 */
struct __attribute__((aligned(8))) ip6_msource
{
  ip6_msource::$E7B61889CCA5FA064F8FDDDD3A55B40A im6s_link;
  in6_addr im6s_addr;
  im6s_st im6s_st[2];
  uint8_t_0 im6s_stp;
};

/* 6167 */
struct ip6_msource::$E7B61889CCA5FA064F8FDDDD3A55B40A
{
  ip6_msource *rbe_left;
  ip6_msource *rbe_right;
  ip6_msource *rbe_parent;
};

/* 6168 */
struct im6s_st
{
  uint16_t ex;
  uint16_t in;
};

/* 6169 */
struct in6m_st
{
  uint16_t iss_fmode;
  uint16_t iss_asm;
  uint16_t iss_ex;
  uint16_t iss_in;
  uint16_t iss_rec;
};

/* 6170 */
struct in6_multi_mship::$589F91320EC076BBAAC43B7C607EDBD7
{
  in6_multi_mship *le_next;
  in6_multi_mship **le_prev;
};

/* 6171 */
typedef cqrq_purge_sc cqrq_purge_sc_t;

/* 6172 */
struct cqrq_purge_sc
{
  mbuf_svc_class_t sc;
  u_int32_t flow;
  u_int32_t packets;
  u_int32_t bytes;
};

/* 6173 */
struct sockopt_0
{
  sopt_dir sopt_dir;
  int sopt_level;
  int sopt_name;
  user_addr_t sopt_val;
  size_t_0 sopt_valsize;
  proc_0 *sopt_p;
};

/* 6174 */
struct ifstat
{
  char ifs_name[16];
  char ascii[801];
};

/* 6175 */
struct ifconf32
{
  int ifc_len;
  ifconf32::$439CFEB38966552D4DDA6B1C7D2FDC34 ifc_ifcu;
};

/* 6176 */
struct ifconf32::$439CFEB38966552D4DDA6B1C7D2FDC34
{
  user32_addr_t ifcu_req;
};

/* 6177 */
struct __attribute__((packed)) __attribute__((aligned(4))) ifconf64
{
  int ifc_len;
  ifconf64::$31545708A4A114C07A6B4EC058CF1973 ifc_ifcu;
};

/* 6178 */
struct ifconf64::$31545708A4A114C07A6B4EC058CF1973
{
  user64_addr_t ifcu_req;
};

/* 6179 */
struct if_clonereq32
{
  int ifcr_total;
  int ifcr_count;
  user32_addr_t ifcru_buffer;
};

/* 6180 */
struct if_clonereq64
{
  int ifcr_total;
  int ifcr_count;
  user64_addr_t ifcru_buffer;
};

/* 6181 */
struct net_event_data
{
  u_int32_t if_family;
  u_int32_t if_unit;
  char if_name[16];
};

/* 6182 */
struct tb_profile
{
  u_int64_t rate;
  u_int32_t percent;
  u_int32_t depth;
};

/* 6183 */
struct if_protolistreq32
{
  char ifpl_name[16];
  u_int32_t ifpl_count;
  u_int32_t ifpl_reserved;
  user32_addr_t ifpl_list;
};

/* 6184 */
struct if_protolistreq64
{
  char ifpl_name[16];
  u_int32_t ifpl_count;
  u_int32_t ifpl_reserved;
  user64_addr_t ifpl_list;
};

/* 6185 */
struct if_data
{
  u_char ifi_type;
  u_char ifi_typelen;
  u_char ifi_physical;
  u_char ifi_addrlen;
  u_char ifi_hdrlen;
  u_char ifi_recvquota;
  u_char ifi_xmitquota;
  u_char ifi_unused1;
  u_int32_t ifi_mtu;
  u_int32_t ifi_metric;
  u_int32_t ifi_baudrate;
  u_int32_t ifi_ipackets;
  u_int32_t ifi_ierrors;
  u_int32_t ifi_opackets;
  u_int32_t ifi_oerrors;
  u_int32_t ifi_collisions;
  u_int32_t ifi_ibytes;
  u_int32_t ifi_obytes;
  u_int32_t ifi_imcasts;
  u_int32_t ifi_omcasts;
  u_int32_t ifi_iqdrops;
  u_int32_t ifi_noproto;
  u_int32_t ifi_recvtiming;
  u_int32_t ifi_xmittiming;
  timeval32 ifi_lastchange;
  u_int32_t ifi_unused2;
  u_int32_t ifi_hwassist;
  u_int32_t ifi_reserved1;
  u_int32_t ifi_reserved2;
};

/* 6186 */
struct if_packet_stats
{
  u_int64_t ifi_tcp_badformat;
  u_int64_t ifi_tcp_unspecv6;
  u_int64_t ifi_tcp_synfin;
  u_int64_t ifi_tcp_badformatipsec;
  u_int64_t ifi_tcp_noconnnolist;
  u_int64_t ifi_tcp_noconnlist;
  u_int64_t ifi_tcp_listbadsyn;
  u_int64_t ifi_tcp_icmp6unreach;
  u_int64_t ifi_tcp_deprecate6;
  u_int64_t ifi_tcp_rstinsynrcv;
  u_int64_t ifi_tcp_ooopacket;
  u_int64_t ifi_tcp_dospacket;
  u_int64_t ifi_tcp_cleanup;
  u_int64_t ifi_tcp_synwindow;
  u_int64_t reserved[6];
  u_int64_t ifi_udp_port_unreach;
  u_int64_t ifi_udp_faithprefix;
  u_int64_t ifi_udp_port0;
  u_int64_t ifi_udp_badlength;
  u_int64_t ifi_udp_badchksum;
  u_int64_t ifi_udp_badmcast;
  u_int64_t ifi_udp_cleanup;
  u_int64_t ifi_udp_badipsec;
  u_int64_t _reserved[4];
};

/* 6187 */
struct init_list_entry
{
  init_list_entry *next;
  net_init_func_ptr func;
};

/* 6188 */
typedef void (*net_init_func_ptr)(void);

/* 6189 */
struct __attribute__((aligned(8))) ifnet_0
{
  lck_rw_t if_lock;
  void *if_softc;
  const char *if_name;
  const char *if_xname;
  if_description if_desc;
  ifnet_0::$02E4001F8B213A2F10BAE799DF0E5DFC if_link;
  ifnet_0::$02E4001F8B213A2F10BAE799DF0E5DFC if_detaching_link;
  ifnet_0::$02E4001F8B213A2F10BAE799DF0E5DFC if_ordered_link;
  lck_mtx_t if_ref_lock;
  u_int32_t if_refflags;
  u_int32_t if_refio;
  ifaddrhead if_addrhead;
  ifaddr *if_lladdr;
  u_int32_t if_qosmarking_mode;
  int if_pcount;
  bpf_if *if_bpf;
  u_short if_index;
  __int16 if_unit;
  __int16 if_timer;
  __int16 if_flags;
  u_int32_t if_eflags;
  u_int32_t if_xflags;
  int if_capabilities;
  int if_capenable;
  void *if_linkmib;
  size_t if_linkmiblen;
  if_data_internal if_data;
  ifnet_family_t if_family;
  ifnet_subfamily_t if_subfamily;
  uintptr_t if_family_cookie;
  volatile dlil_input_func if_input_dlil;
  volatile dlil_output_func if_output_dlil;
  volatile ifnet_start_func if_start;
  ifnet_output_func if_output;
  ifnet_pre_enqueue_func if_pre_enqueue;
  ifnet_ctl_func if_output_ctl;
  ifnet_input_poll_func if_input_poll;
  ifnet_ctl_func if_input_ctl;
  ifnet_ioctl_func if_ioctl;
  ifnet_set_bpf_tap if_set_bpf_tap;
  ifnet_detached_func if_free;
  ifnet_demux_func if_demux;
  ifnet_event_func if_event;
  ifnet_framer_func if_framer_legacy;
  ifnet_framer_extended_func if_framer;
  ifnet_add_proto_func if_add_proto;
  ifnet_del_proto_func if_del_proto;
  ifnet_check_multi if_check_multi;
  proto_hash_entry *if_proto_hash;
  void *if_kpi_storage;
  u_int32_t if_flowhash;
  lck_mtx_t if_start_lock;
  u_int32_t if_start_flags;
  u_int32_t if_start_req;
  u_int16_t if_start_active;
  u_int16_t if_start_delayed;
  u_int16_t if_start_delay_qlen;
  u_int16_t if_start_delay_idle;
  u_int64_t if_start_delay_swin;
  u_int32_t if_start_delay_cnt;
  u_int32_t if_start_delay_timeout;
  timespec if_start_cycle;
  thread *if_start_thread;
  ifclassq if_snd;
  u_int32_t if_output_sched_model;
  __attribute__((packed)) __attribute__((aligned(1))) if_bandwidths if_output_bw;
  __attribute__((packed)) __attribute__((aligned(1))) if_bandwidths if_input_bw;
  __attribute__((packed)) __attribute__((aligned(1))) if_latencies if_output_lt;
  __attribute__((packed)) __attribute__((aligned(1))) if_latencies if_input_lt;
  lck_mtx_t if_flt_lock;
  u_int32_t if_flt_busy;
  u_int32_t if_flt_waiters;
  ifnet_filter_head if_flt_head;
  ifmultihead if_multiaddrs;
  u_int32_t if_updatemcasts;
  int if_amcount;
  lck_mtx_t if_addrconfig_lock;
  in_multi *if_allhostsinm;
  lck_mtx_t if_poll_lock;
  u_int16_t if_poll_req;
  u_int16_t if_poll_update;
  u_int32_t if_poll_active;
  timespec if_poll_cycle;
  thread *if_poll_thread;
  dlil_threading_info *if_inp;
  thread_call_t if_dt_tcall;
  ifnet::$FDF1CE6E7EB89D62E9908B60B4ED85D0 if_broadcast;
  pfi_kif *if_pf_kif;
  void (*if_na_finalize)(nexus_netif_adapter *, ifnet_0 *);
  void (*if_na_reap)(nexus_netif_adapter *, ifnet_0 *, uint32_t_0);
  nexus_netif_adapter *if_na;
  if_nexus_netif if_nx_netif;
  if_nexus_multistack if_nx_multistack;
  uint16_t if_tx_headroom;
  uint16_t if_tx_trailer;
  uint32_t_0 if_rx_mit_ival;
  ifnet_start_func if_save_start;
  ifnet_output_func if_save_output;
  uint32_t_0 if_start_waiters;
  lck_mtx_t if_cached_route_lock;
  u_int32_t if_fwd_cacheok;
  route if_fwd_route;
  route if_src_route;
  route_in6 if_src_route6;
  lck_rw_t if_llreach_lock;
  ll_reach_tree if_ll_srcs;
  void *if_bridge;
  u_int32_t if_want_aggressive_drain;
  u_int32_t if_idle_flags;
  u_int32_t if_idle_new_flags;
  u_int32_t if_idle_new_flags_mask;
  u_int32_t if_route_refcnt;
  u_int32_t if_rt_sendts;
  if_traffic_class if_tc;
  igmp_ifinfo *if_igi;
  mld_ifinfo *if_mli;
  tcpstat_local *if_tcp_stat;
  udpstat_local *if_udp_stat;
  ifnet::$84A273D192F849021096946526FA0146 if_log;
  ifnet_0::$C52EC806A375541CEAAE4ADF14F4C5EE if_delegated;
  uuid_t *if_agentids;
  u_int32_t if_agentcount;
  volatile uint32_t_0 if_low_power_gencnt;
  u_int32_t if_generation;
  u_int32_t if_fg_sendts;
  u_int64_t if_data_threshold;
  int64_t if_sndbyte_total;
  int64_t if_sndbyte_unsent;
  uint32_t_0 if_unsent_data_cnt;
  lck_rw_t if_inetdata_lock;
  void *if_inetdata;
  lck_rw_t if_inet6data_lock;
  void *if_inet6data;
  lck_rw_t if_link_status_lock;
  if_link_status *if_link_status;
  if_interface_state if_interface_state;
  if_tcp_ecn_stat *if_ipv4_stat;
  if_tcp_ecn_stat *if_ipv6_stat;
  ifnet::$D835C1FB80356427E73262EF64749CA4 if_netns_tokens;
  if_lim_perf_stat if_lim_stat;
};

/* 6190 */
struct ifnet_0::$02E4001F8B213A2F10BAE799DF0E5DFC
{
  ifnet_0 *tqe_next;
  ifnet_0 **tqe_prev;
};

/* 6191 */
typedef ifnet_0 *ifnet_t_0;

/* 6192 */
struct if_proto
{
  if_proto::$4A62D76130F2AF4A6D6E47ACB598B244 next_hash;
  u_int32_t refcount;
  u_int32_t detached;
  ifnet_0 *ifp;
  protocol_family_t protocol_family;
  int proto_kpi;
  if_proto::$5234F8330AD1D89920D9B5031A3A382B kpi;
};

/* 6193 */
struct if_proto::$4A62D76130F2AF4A6D6E47ACB598B244
{
  if_proto *sle_next;
};

/* 6194 */
union if_proto::$5234F8330AD1D89920D9B5031A3A382B
{
  if_proto::$5234F8330AD1D89920D9B5031A3A382B::$A35DEC3EAE99977AB43592E4705A4127 v1;
  if_proto::$5234F8330AD1D89920D9B5031A3A382B::$7CD2A87B0B5AD36046F76B9BDA66099E v2;
};

/* 6195 */
struct if_proto::$5234F8330AD1D89920D9B5031A3A382B::$A35DEC3EAE99977AB43592E4705A4127
{
  proto_media_input input;
  proto_media_preout pre_output;
  proto_media_event event;
  proto_media_ioctl ioctl;
  proto_media_detached detached;
  proto_media_resolve_multi resolve_multi;
  proto_media_send_arp send_arp;
};

/* 6196 */
struct if_proto::$5234F8330AD1D89920D9B5031A3A382B::$7CD2A87B0B5AD36046F76B9BDA66099E
{
  proto_media_input_v2 input;
  proto_media_preout pre_output;
  proto_media_event event;
  proto_media_ioctl ioctl;
  proto_media_detached detached;
  proto_media_resolve_multi resolve_multi;
  proto_media_send_arp send_arp;
};

/* 6197 */
typedef errno_t (*proto_media_input_v2)(ifnet_t_0, protocol_family_t, mbuf_t);

/* 6198 */
struct ifnet_filter::$25BE8621560369BAA740AA352318E110
{
  ifnet_filter *tqe_next;
  ifnet_filter **tqe_prev;
};

/* 6199 */
struct igmp_ifinfo::$32B7641A7CA5F9E95D15FBFAA7AE5BFE
{
  igmp_ifinfo *le_next;
  igmp_ifinfo **le_prev;
};

/* 6200 */
struct igmp_ifinfo::$07F0ED11DC3379F2F0D30E5B8FAB9116
{
  in_multi *slh_first;
};

/* 6201 */
struct uthread_0
{
  u_int64_t uu_arg[8];
  int uu_rval[2];
  char uu_cursig;
  unsigned int syscall_code;
  int uu_exception;
  mach_exception_code_t uu_code;
  mach_exception_subcode_t uu_subcode;
  uthread_0::$50367DB53BDFBC6199F4EECF93865EAB uu_save;
  _select uu_select;
  int (*uu_continuation)(int);
  int uu_pri;
  int uu_timo;
  caddr_t uu_wchan;
  const char *uu_wmesg;
  proc *uu_proc;
  thread_t uu_thread;
  void *uu_userstate;
  waitq_set *uu_wqset;
  size_t uu_wqstate_sz;
  int uu_flag;
  sigset_t uu_siglist;
  sigset_t uu_sigwait;
  sigset_t uu_sigmask;
  sigset_t uu_oldmask;
  sigset_t uu_vforkmask;
  vfs_context uu_context;
  uthread_0::$F4127FC3AE976869D268A81CE5434788 uu_list;
  kaudit_record *uu_ar;
  task *uu_aio_task;
  lck_mtx_t *uu_mtx;
  lck_spin_t uu_rethrottle_lock;
  uthread_0::$F4127FC3AE976869D268A81CE5434788 uu_throttlelist;
  void *uu_throttle_info;
  int uu_on_throttlelist;
  int uu_lowpri_window;
  unsigned __int32 uu_was_rethrottled : 1;
  unsigned __int32 uu_is_throttled : 1;
  unsigned __int32 uu_throttle_bc : 1;
  unsigned __int32 uu_throttle_unused : 29;
  u_int32_t uu_network_marks;
  kern_sigaltstack uu_sigstk;
  vnode_t uu_vreclaims;
  vnode_t uu_cdir;
  int uu_dupfd;
  int uu_defer_reclaims;
  kqrequest *uu_kqr_bound;
  uthread_0::$F4127FC3AE976869D268A81CE5434788 uu_workq_entry;
  mach_vm_offset_t uu_workq_stackaddr;
  mach_port_name_t uu_workq_thport;
  uu_workq_policy uu_workq_pri;
  uint8_t_0 uu_workq_flags;
  kq_index_t uu_kqueue_override;
  int uu_proc_refcount;
  uint32_t_0 t_dtrace_errno;
  siginfo_t t_dtrace_siginfo;
  uint64_t_0 t_dtrace_resumepid;
  uint8_t_0 t_dtrace_stop;
  uint8_t_0 t_dtrace_sig;
  __tdu _tdu;
  user_addr_t t_dtrace_pc;
  user_addr_t t_dtrace_npc;
  user_addr_t t_dtrace_scrpc;
  user_addr_t t_dtrace_astpc;
  dtrace_ptss_page_entry *t_dtrace_scratch;
  uint64_t_0 t_dtrace_regv;
  void *t_dtrace_syscall_args;
  char *pth_name;
  doc_tombstone *t_tombstone;
  os_reason *uu_exit_reason;
};

/* 6202 */
union uthread_0::$50367DB53BDFBC6199F4EECF93865EAB
{
  _select_data uus_select_data;
  _kqueue_scan uus_kqueue_scan;
  _kevent uus_kevent;
  _kevent_register uus_kevent_register;
  _kauth uus_kauth;
  ksyn_waitq_element uus_kwe;
  _waitid_data uus_waitid_data;
  _wait4_data uus_wait4_data;
  _workq_park_data uus_workq_park_data;
  _ulock_wait_data uus_ulock_wait_data;
};

/* 6203 */
struct uthread_0::$F4127FC3AE976869D268A81CE5434788
{
  uthread_0 *tqe_next;
  uthread_0 **tqe_prev;
};

/* 6204 */
struct skmem_cache_0
{
  uint64_t_0 skm_alloc_fail;
  uint64_t_0 skm_bufinuse;
  uint64_t_0 skm_bufmax;
  uint64_t_0 skm_rescale;
  uint64_t_0 skm_sl_create;
  uint64_t_0 skm_sl_destroy;
  uint64_t_0 skm_sl_alloc;
  uint64_t_0 skm_sl_free;
  uint64_t_0 skm_depot_contention;
  uint64_t_0 skm_depot_contention_prev;
  skmem_cache_0::$570784B90B097874A80F77C8D3C11BFF skm_link;
  char skm_name[64];
  size_t skm_bufsize;
  size_t skm_align;
  uint32_t_0 skm_mode;
  skmem_ctor_fn_t skm_ctor;
  skmem_dtor_fn_t skm_dtor;
  skmem_reclaim_fn_t skm_reclaim;
  void *skm_private;
  skmem_region_0 *skm_region;
  lck_mtx_t skm_sl_lock;
  size_t skm_chunksize;
  size_t skm_objsize;
  size_t skm_slabsize;
  size_t skm_hash_initial;
  size_t skm_hash_limit;
  size_t skm_hash_shift;
  size_t skm_hash_mask;
  skmem_bufctl_bkt *skm_hash_table;
  skmem_cache_0::$B13567E7FD4CF7DFF11D25C7888DB37E skm_sl_partial;
  skmem_cache_0::$B13567E7FD4CF7DFF11D25C7888DB37E skm_sl_empty;
  lck_mtx_t skm_dp_lock;
  skmem_magtype_0 *skm_magtype;
  skmem_maglist skm_full;
  skmem_maglist skm_empty;
  skmem_cpu_cache skm_cpu_cache[1];
};

/* 6205 */
struct skmem_cache_0::$570784B90B097874A80F77C8D3C11BFF
{
  skmem_cache_0 *tqe_next;
  skmem_cache_0 **tqe_prev;
};

/* 6206 */
struct skmem_obj_info_0
{
  void *oi_addr;
  size_t oi_size;
  obj_idx_t oi_idx_reg;
  obj_idx_t oi_idx_seg;
  sksegment *oi_seg;
};

/* 6207 */
struct skmem_region_0
{
  lck_mtx_t skr_lock;
  uint32_t_0 skr_refcnt;
  uint64_t_0 skr_meminuse;
  uint64_t_0 skr_w_meminuse;
  uint64_t_0 skr_memtotal;
  uint64_t_0 skr_seginuse;
  uint64_t_0 skr_rescale;
  uint64_t_0 skr_alloc;
  uint64_t_0 skr_free;
  skmem_region_params_0 skr_params;
  skmem_region_0::$0CF0446B659AB0D745FDD10B8828546C skr_link;
  char skr_name[64];
  uuid_t skr_uuid;
  IOSKMemoryBufferSpec skr_bufspec;
  IOSKRegionSpec skr_regspec;
  IOSKRegionRef skr_reg;
  uint32_t_0 skr_mode;
  size_t skr_size;
  void *skr_private;
  sksegment_ctor_fn_t skr_seg_ctor;
  sksegment_dtor_fn_t skr_seg_dtor;
  sksegment **skr_seg_lut;
  size_t skr_seg_objs;
  bitmap_t *skr_seg_bmap;
  size_t skr_seg_bmap_len;
  size_t skr_seg_free_cnt;
  size_t skr_hash_initial;
  size_t skr_hash_limit;
  size_t skr_hash_shift;
  size_t skr_hash_mask;
  sksegment_bkt *skr_hash_table;
  segfreehead skr_seg_free;
  uint32_t_0 skr_seg_waiters;
  skmem_region_0 *skr_mirror;
};

/* 6208 */
struct skmem_region_params_0
{
  const char *srp_name;
  skmem_region_id_t srp_id;
  uint32_t_0 srp_cflags;
  size_t srp_r_seg_size;
  size_t srp_c_seg_size;
  size_t srp_seg_cnt;
  size_t srp_r_obj_size;
  size_t srp_r_obj_cnt;
  size_t srp_c_obj_size;
  size_t srp_c_obj_cnt;
  nexus_meta_type_t srp_md_type;
  nexus_meta_subtype_t srp_md_subtype;
  size_t srp_max_frags;
};

/* 6209 */
struct skmem_region_0::$0CF0446B659AB0D745FDD10B8828546C
{
  skmem_region_0 *tqe_next;
  skmem_region_0 **tqe_prev;
};

/* 6210 */
struct skmem_cache_0::$B13567E7FD4CF7DFF11D25C7888DB37E
{
  skmem_slab *tqh_first;
  skmem_slab **tqh_last;
};

/* 6211 */
struct skmem_magtype_0
{
  int mt_magsize;
  int mt_align;
  size_t mt_minbuf;
  size_t mt_maxbuf;
  mcache_0 *mt_cache;
  char mt_cname[64];
};

/* 6212 */
struct mcache_0
{
  mcache_0::$FE29E54BCC1945A40E939D7C9C0DBF41 mc_list;
  char mc_name[32];
  zone *mc_slab_zone;
  mcache_allocfn_t mc_slab_alloc;
  mcache_freefn_t mc_slab_free;
  mcache_auditfn_t mc_slab_audit;
  mcache_logfn_t mc_slab_log;
  mcache_notifyfn_t mc_slab_notify;
  void *mc_private;
  size_t mc_bufsize;
  size_t mc_align;
  u_int32_t mc_flags;
  u_int32_t mc_purge_cnt;
  u_int32_t mc_enable_cnt;
  u_int32_t mc_waiter_cnt;
  u_int32_t mc_wretry_cnt;
  u_int32_t mc_nwretry_cnt;
  u_int32_t mc_nwfail_cnt;
  lck_mtx_t mc_sync_lock;
  lck_attr_t *mc_sync_lock_attr;
  lck_grp_t *mc_sync_lock_grp;
  lck_grp_attr_t *mc_sync_lock_grp_attr;
  lck_attr_t *mc_cpu_lock_attr;
  lck_grp_t *mc_cpu_lock_grp;
  lck_grp_attr_t *mc_cpu_lock_grp_attr;
  lck_mtx_t mc_bkt_lock;
  lck_attr_t *mc_bkt_lock_attr;
  lck_grp_t *mc_bkt_lock_grp;
  lck_grp_attr_t *mc_bkt_lock_grp_attr;
  mcache_bkttype_t_0 *cache_bkttype;
  mcache_bktlist_t mc_full;
  mcache_bktlist_t mc_empty;
  size_t mc_chunksize;
  u_int32_t mc_bkt_contention;
  u_int32_t mc_bkt_contention_prev;
  mcache_cpu_t mc_cpu[1];
};

/* 6213 */
struct mcache_0::$FE29E54BCC1945A40E939D7C9C0DBF41
{
  mcache_0 *le_next;
  mcache_0 **le_prev;
};

/* 6214 */
typedef mcache_bkttype_0 mcache_bkttype_t_0;

/* 6215 */
struct mcache_bkttype_0
{
  int bt_bktsize;
  size_t bt_minbuf;
  size_t bt_maxbuf;
  mcache_0 *bt_cache;
};

/* 6216 */
struct skmem_arena_0
{
  lck_mtx_t ar_lock;
  uint32_t_0 ar_refcnt;
  skmem_arena_0::$9662F79726D2BC0C03E1BACDB59BE1E9 ar_link;
  char ar_name[64];
  skmem_arena_type_t ar_type;
  uint32_t_0 ar_flags;
  size_t ar_zsize;
  zone *ar_zone;
  IOSKArenaRef ar_ar;
  skmem_region_0 *ar_regions[12];
  mach_vm_size_t ar_mapsize;
  uint32_t_0 ar_mapcnt;
  uint32_t_0 ar_maprdrcnt;
  skmem_arena_0::$741C7E7A4371AA328EA3B4BCFC36F8F6 ar_map_head;
};

/* 6217 */
struct skmem_arena_0::$9662F79726D2BC0C03E1BACDB59BE1E9
{
  skmem_arena_0 *tqe_next;
  skmem_arena_0 **tqe_prev;
};

/* 6218 */
struct skmem_arena_0::$741C7E7A4371AA328EA3B4BCFC36F8F6
{
  skmem_arena_mmap_info *slh_first;
};

/* 6219 */
struct sysctl_req_0
{
  proc *p;
  int lock;
  user_addr_t oldptr;
  size_t oldlen;
  size_t oldidx;
  int (*oldfunc)(sysctl_req_0 *, const void *, size_t);
  user_addr_t newptr;
  size_t newlen;
  size_t newidx;
  int (*newfunc)(sysctl_req_0 *, void *, size_t);
};

/* 6220 */
struct if_llreach::$11806A929F61427925DD05EDC09C2D34
{
  if_llreach *rbe_left;
  if_llreach *rbe_right;
  if_llreach *rbe_parent;
};

/* 6221 */
struct lr_key_s
{
  u_int16_t proto;
  u_int8_t addr[6];
};

/* 6222 */
struct mld_ifinfo::$5F576C549509D0655E6E7A6D9340AFFC
{
  mld_ifinfo *le_next;
  mld_ifinfo **le_prev;
};

/* 6223 */
struct mld_ifinfo::$8EA3F9881ACADACA113B33344BAA5CDA
{
  in6_multi *slh_first;
};

/* 6224 */
struct ifnet_0::$C52EC806A375541CEAAE4ADF14F4C5EE
{
  ifnet_0 *ifp;
  u_int32_t type;
  u_int32_t family;
  u_int32_t subfamily;
  unsigned __int32 expensive : 1;
};

/* 6225 */
typedef const net_thread_marks *net_thread_marks_t;

/* 6226 */
struct net_thread_marks
{
  __int8 gap0[1];
};

/* 6227 */
struct $0DCAE2D1C8B92645486F7E59D6253184
{
  dlil_ifnet *tqh_first;
  dlil_ifnet **tqh_last;
};

/* 6228 */
struct dlil_ifnet
{
  ifnet_0 dl_if;
  lck_mtx_t dl_if_lock;
  dlil_ifnet::$DF12E913C410771D6CAA9DAE558080FD dl_if_link;
  u_int32_t dl_if_flags;
  u_int32_t dl_if_refcnt;
  void (*dl_if_trace)(dlil_ifnet *, int);
  void *dl_if_uniqueid;
  size_t dl_if_uniqueid_len;
  char dl_if_namestorage[16];
  char dl_if_xnamestorage[24];
  dlil_ifnet::$65167EE5F8C191F6A4F478FEB447437F dl_if_lladdr;
  u_int8_t dl_if_descstorage[128];
  dlil_threading_info dl_if_inpstorage;
  ctrace_t dl_if_attach;
  ctrace_t dl_if_detach;
};

/* 6229 */
struct dlil_ifnet::$DF12E913C410771D6CAA9DAE558080FD
{
  dlil_ifnet *tqe_next;
  dlil_ifnet **tqe_prev;
};

/* 6230 */
struct dlil_ifnet::$65167EE5F8C191F6A4F478FEB447437F
{
  ifaddr ifa;
  u_int8_t asdl[64];
  u_int8_t msdl[64];
};

/* 6231 */
struct dlil_main_threading_info
{
  dlil_threading_info inp;
  class_queue_t lo_rcvq_pkts;
};

/* 6232 */
struct chain_len_stats
{
  uint64_t_0 cls_one;
  uint64_t_0 cls_two;
  uint64_t_0 cls_three;
  uint64_t_0 cls_four;
  uint64_t_0 cls_five_or_more;
};

/* 6233 */
struct $2C12AB111A388D8F2F658DA99C9CB387
{
  ifnet_0 *tqh_first;
  ifnet_0 **tqh_last;
};

/* 6234 */
struct ifnet_fc_tree
{
  ifnet_fc_entry *rbh_root;
};

/* 6235 */
struct ifnet_fc_entry
{
  ifnet_fc_entry::$9417E07647E09FA54B1A3C1EB119C317 ifce_entry;
  u_int32_t ifce_flowhash;
  ifnet_0 *ifce_ifp;
};

/* 6236 */
struct ifnet_fc_entry::$9417E07647E09FA54B1A3C1EB119C317
{
  ifnet_fc_entry *rbe_left;
  ifnet_fc_entry *rbe_right;
  ifnet_fc_entry *rbe_parent;
};

/* 6237 */
struct net_api_stats
{
  int64_t nas_iflt_attach_count;
  int64_t nas_iflt_attach_total;
  int64_t nas_iflt_attach_os_total;
  int64_t nas_ipf_add_count;
  int64_t nas_ipf_add_total;
  int64_t nas_ipf_add_os_total;
  int64_t nas_sfltr_register_count;
  int64_t nas_sfltr_register_total;
  int64_t nas_sfltr_register_os_total;
  int64_t nas_socket_alloc_total;
  int64_t nas_socket_in_kernel_total;
  int64_t nas_socket_in_kernel_os_total;
  int64_t nas_socket_necp_clientuuid_total;
  int64_t nas_socket_domain_local_total;
  int64_t nas_socket_domain_route_total;
  int64_t nas_socket_domain_inet_total;
  int64_t nas_socket_domain_inet6_total;
  int64_t nas_socket_domain_system_total;
  int64_t nas_socket_domain_multipath_total;
  int64_t nas_socket_domain_key_total;
  int64_t nas_socket_domain_ndrv_total;
  int64_t nas_socket_domain_other_total;
  int64_t nas_socket_inet_stream_total;
  int64_t nas_socket_inet_dgram_total;
  int64_t nas_socket_inet_dgram_connected;
  int64_t nas_socket_inet_dgram_dns;
  int64_t nas_socket_inet_dgram_no_data;
  int64_t nas_socket_inet6_stream_total;
  int64_t nas_socket_inet6_dgram_total;
  int64_t nas_socket_inet6_dgram_connected;
  int64_t nas_socket_inet6_dgram_dns;
  int64_t nas_socket_inet6_dgram_no_data;
  int64_t nas_socket_mcast_join_total;
  int64_t nas_socket_mcast_join_os_total;
  int64_t nas_sock_inet6_stream_exthdr_in;
  int64_t nas_sock_inet6_stream_exthdr_out;
  int64_t nas_sock_inet6_dgram_exthdr_in;
  int64_t nas_sock_inet6_dgram_exthdr_out;
  int64_t nas_nx_flow_inet_stream_total;
  int64_t nas_nx_flow_inet_dgram_total;
  int64_t nas_nx_flow_inet6_stream_total;
  int64_t nas_nx_flow_inet6_dgram_total;
  int64_t nas_ifnet_alloc_count;
  int64_t nas_ifnet_alloc_total;
  int64_t nas_ifnet_alloc_os_count;
  int64_t nas_ifnet_alloc_os_total;
  int64_t nas_pf_addrule_total;
  int64_t nas_pf_addrule_os;
  int64_t nas_vmnet_total;
};

/* 6238 */
struct rxpoll_time_tbl
{
  u_int64_t speed;
  u_int32_t plowat;
  u_int32_t phiwat;
  u_int32_t blowat;
  u_int32_t bhiwat;
};

/* 6239 */
enum pbuf_type : __int32
{
  PBUF_TYPE_ZOMBIE = 0x0,
  PBUF_TYPE_MBUF = 0x1,
  PBUF_TYPE_MEMORY = 0x2,
};

/* 6240 */
enum pbuf_action : __int32
{
  PBUF_ACTION_DESTROY = 0x0,
};

/* 6241 */
struct nd_ifinfo
{
  lck_mtx_t lock;
  boolean_t initialized;
  u_int32_t linkmtu;
  u_int32_t maxmtu;
  u_int32_t basereachable;
  u_int32_t reachable;
  u_int32_t retrans;
  u_int32_t flags;
  int recalctm;
  u_int8_t chlim;
  u_int8_t _pad[3];
  u_int8_t randomseed0[8];
  u_int8_t randomseed1[8];
  u_int8_t randomid[8];
  int32_t nprefixes;
  int32_t ndefrouters;
  boolean_t cga_initialized;
  in6_cga_modifier local_cga_modifier;
};

/* 6242 */
struct in6_cga_modifier
{
  u_int8_t octets[16];
};

/* 6243 */
struct dlil_ifnet_dbg
{
  dlil_ifnet dldbg_dlif;
  u_int16_t dldbg_if_refhold_cnt;
  u_int16_t dldbg_if_refrele_cnt;
  ctrace_t dldbg_if_refhold[8];
  ctrace_t dldbg_if_refrele[8];
};

/* 6244 */
typedef if_nexus_multistack *if_nexus_multistack_t;

/* 6245 */
typedef thread_affinity_policy thread_affinity_policy_data_t;

/* 6246 */
struct nd_prefix_0
{
  lck_mtx_t ndpr_lock;
  u_int32_t ndpr_refcount;
  u_int32_t ndpr_debug;
  ifnet_0 *ndpr_ifp;
  rtentry *ndpr_rt;
  nd_prefix_0::$DFDF11C2C18132B0058128424E9FCE47 ndpr_entry;
  sockaddr_in6 ndpr_prefix;
  in6_addr ndpr_mask;
  in6_addr ndpr_addr;
  u_int32_t ndpr_vltime;
  u_int32_t ndpr_pltime;
  u_int64_t ndpr_preferred;
  u_int64_t ndpr_expire;
  u_int64_t ndpr_lastupdate;
  u_int64_t ndpr_base_calendartime;
  u_int64_t ndpr_base_uptime;
  prf_ra ndpr_flags;
  unsigned int ndpr_genid;
  u_int32_t ndpr_stateflags;
  pr_rtrhead ndpr_advrtrs;
  u_char ndpr_plen;
  int ndpr_addrcnt;
  u_int32_t ndpr_allmulti_cnt;
  u_int32_t ndpr_prproxy_sols_cnt;
  prproxy_sols_tree ndpr_prproxy_sols;
  void (*ndpr_trace)(nd_prefix_0 *, int);
};

/* 6247 */
struct nd_prefix_0::$DFDF11C2C18132B0058128424E9FCE47
{
  nd_prefix_0 *le_next;
  nd_prefix_0 **le_prev;
};

/* 6248 */
struct nd_defrouter_0
{
  lck_mtx_t nddr_lock;
  nd_defrouter_0::$3FEA8F2B2DEA48865868C3ADFA6758E2 dr_entry;
  in6_addr rtaddr;
  u_int32_t nddr_refcount;
  u_int32_t nddr_debug;
  u_int64_t expire;
  u_int64_t base_calendartime;
  u_int64_t base_uptime;
  u_char flags;
  u_char stateflags;
  u_short rtlifetime;
  int err;
  ifnet_0 *ifp;
  in6_addr rtaddr_mapped;
  void (*nddr_trace)(nd_defrouter_0 *, int);
};

/* 6249 */
struct nd_defrouter_0::$3FEA8F2B2DEA48865868C3ADFA6758E2
{
  nd_defrouter_0 *tqe_next;
  nd_defrouter_0 **tqe_prev;
};

/* 6250 */
typedef pbuf pbuf_t;

/* 6251 */
struct pbuf
{
  pbuf_type pb_type;
  pbuf::$0CE0E942110E40C42D9EE9737A8036BB pb_u;
  void *pb_data;
  uint32_t_0 pb_packet_len;
  uint32_t_0 pb_contig_len;
  uint32_t_0 *pb_csum_flags;
  uint32_t_0 *pb_csum_data;
  uint8_t_0 *pb_proto;
  uint8_t_0 *pb_flowsrc;
  uint32_t_0 *pb_flowid;
  uint32_t_0 *pb_flags;
  pf_mtag *pb_pftag;
  ifnet_0 *pb_ifp;
  pbuf *pb_next;
};

/* 6252 */
union pbuf::$0CE0E942110E40C42D9EE9737A8036BB
{
  mbuf *pbu_mbuf;
  pbuf_memory pbu_memory;
};

/* 6253 */
struct pbuf_memory
{
  uint8_t_0 *pm_buffer;
  u_int pm_buffer_len;
  u_int pm_offset;
  u_int pm_len;
  uint32_t_0 pm_csum_flags;
  uint32_t_0 pm_csum_data;
  uint8_t_0 pm_proto;
  uint8_t_0 pm_flowsrc;
  uint32_t_0 pm_flowid;
  uint32_t_0 pm_flags;
  pf_mtag pm_pftag;
  int (*pm_action)(pbuf_memory *, pbuf_action);
  void *pm_action_cookie;
};

/* 6254 */
struct ifnet_flowhash_key
{
  char ifk_name[16];
  uint32_t_0 ifk_unit;
  uint32_t_0 ifk_flags;
  uint32_t_0 ifk_eflags;
  uint32_t_0 ifk_capabilities;
  uint32_t_0 ifk_capenable;
  uint32_t_0 ifk_output_sched_model;
  uint32_t_0 ifk_rand1;
  uint32_t_0 ifk_rand2;
};

/* 6255 */
typedef if_nexus_netif *if_nexus_netif_t;

/* 6256 */
struct kev_dl_rrc_state
{
  net_event_data link_data;
  u_int32_t rrc_state;
};

/* 6257 */
typedef cqrq_throttle cqrq_throttle_t;

/* 6258 */
struct cqrq_throttle
{
  u_int32_t set;
  u_int32_t level;
};

/* 6259 */
struct ifnet_stats_per_flow
{
  u_int64_t bk_txpackets;
  u_int64_t txpackets;
  u_int64_t rxpackets;
  u_int32_t txretransmitbytes;
  u_int32_t rxoutoforderbytes;
  u_int32_t rxmitpkts;
  u_int32_t rcvoopack;
  u_int32_t pawsdrop;
  u_int32_t sack_recovery_episodes;
  u_int32_t reordered_pkts;
  u_int32_t dsack_sent;
  u_int32_t dsack_recvd;
  u_int32_t srtt;
  u_int32_t rttupdated;
  u_int32_t rttvar;
  u_int32_t rttmin;
  u_int32_t bw_sndbw_max;
  u_int32_t bw_rcvbw_max;
  u_int32_t ecn_recv_ece;
  u_int32_t ecn_recv_ce;
  u_int16_t ecn_flags;
  unsigned __int16 ipv4 : 1;
  unsigned __int16 local : 1;
  unsigned __int16 connreset : 1;
  unsigned __int16 conntimeout : 1;
  unsigned __int16 rxmit_drop : 1;
  unsigned __int16 ecn_fallback_synloss : 1;
  unsigned __int16 ecn_fallback_droprst : 1;
  unsigned __int16 ecn_fallback_droprxmt : 1;
  unsigned __int16 ecn_fallback_ce : 1;
  unsigned __int16 ecn_fallback_reorder : 1;
};

/* 6260 */
struct ifnet_notify_address_params
{
  sa_family_t address_family;
  u_int32_t reserved[3];
};

/* 6261 */
struct kev_dl_proto_data
{
  net_event_data link_data;
  u_int32_t proto_family;
  u_int32_t proto_remaining_count;
};

/* 6262 */
struct ifnet_model_params
{
  ifnet_model_t model;
  u_int32_t reserved[3];
};

/* 6263 */
struct ifnet_poll_params
{
  u_int32_t flags;
  u_int32_t packets_limit;
  u_int32_t packets_lowat;
  u_int32_t packets_hiwat;
  u_int32_t bytes_lowat;
  u_int32_t bytes_hiwat;
  u_int64_t interval_time;
  u_int64_t reserved[4];
};

/* 6264 */
typedef ifaddr *ifaddr_t;

/* 6265 */
struct sockaddr_inarp
{
  u_char sin_len;
  u_char sin_family;
  u_short sin_port;
  in_addr sin_addr;
  in_addr sin_srcaddr;
  u_short sin_tos;
  u_short sin_other;
};

/* 6266 */
struct ifnet_attach_proto_param_v2
{
  ifnet_demux_desc *demux_array;
  u_int32_t demux_count;
  proto_media_input_v2 input;
  proto_media_preout pre_output;
  proto_media_event event;
  proto_media_ioctl ioctl;
  proto_media_detached detached;
  proto_media_resolve_multi resolve;
  proto_media_send_arp send_arp;
};

/* 6267 */
struct kev_dl_link_quality_metric_data
{
  net_event_data link_data;
  int link_quality_metric;
};

/* 6268 */
struct kev_dl_node_presence
{
  net_event_data link_data;
  sockaddr_in6 sin6_node_address;
  sockaddr_dl sdl_node_address;
  int32_t rssi;
  int link_quality_metric;
  int node_proximity_metric;
  u_int8_t node_service_info[48];
};

/* 6269 */
struct kev_dl_node_absence
{
  net_event_data link_data;
  sockaddr_in6 sin6_node_address;
  sockaddr_dl sdl_node_address;
};

/* 6270 */
struct __attribute__((aligned(8))) kev_dl_issues
{
  net_event_data link_data;
  u_int8_t modid[20];
  u_int64_t timestamp;
  u_int8_t info[12];
};

/* 6271 */
struct ifnet_log_params
{
  ifnet_log_level_t level;
  ifnet_log_flags_t flags;
  ifnet_log_category_t category;
  ifnet_log_subcategory_t subcategory;
};

/* 6272 */
typedef int32_t ifnet_log_level_t;

/* 6273 */
typedef u_int32_t ifnet_log_flags_t;

/* 6274 */
typedef int32_t ifnet_log_category_t;

/* 6275 */
typedef int32_t ifnet_log_subcategory_t;

/* 6276 */
struct ether_desc_blk_str
{
  u_int32_t n_max_used;
  u_int32_t n_count;
  u_int32_t n_used;
  en_desc block_ptr[1];
};

/* 6277 */
struct en_desc
{
  u_int16_t type;
  u_int32_t protocol_family;
  u_int32_t data[2];
};

/* 6278 */
struct ether_vlan_header
{
  u_char evl_dhost[6];
  u_char evl_shost[6];
  u_int16_t evl_encap_proto;
  u_int16_t evl_tag;
  u_int16_t evl_proto;
};

/* 6279 */
struct __attribute__((aligned(4))) ip6aux
{
  u_int32_t ip6a_flags;
  u_char ip6a_ehsrc[6];
};

/* 6280 */
struct lo_statics_str
{
  int bpf_mode;
  bpf_packet_func bpf_callback;
};

/* 6281 */
struct loopback_header
{
  protocol_family_t protocol;
};

/* 6282 */
struct ifmibdata_supplemental
{
  if_traffic_class ifmd_traffic_class;
  if_data_extended ifmd_data_extended;
  if_packet_stats ifmd_packet_stats;
  if_rxpoll_stats ifmd_rxpoll_stats;
};

/* 6283 */
struct __attribute__((packed)) __attribute__((aligned(4))) ifmibdata
{
  char ifmd_name[16];
  unsigned int ifmd_pcount;
  unsigned int ifmd_flags;
  unsigned int ifmd_snd_len;
  unsigned int ifmd_snd_maxlen;
  unsigned int ifmd_snd_drops;
  unsigned int ifmd_filler[4];
  if_data64 ifmd_data;
};

/* 6284 */
typedef vlan_globals_s *vlan_globals_ref;

/* 6285 */
struct __attribute__((aligned(8))) vlan_globals_s
{
  vlan_parent_list parent_list;
  int verbose;
};

/* 6286 */
struct vlan_parent_list
{
  vlan_parent *lh_first;
};

/* 6287 */
struct __attribute__((aligned(8))) vlan_parent
{
  vlan_parent_entry vlp_parent_list;
  ifnet *vlp_ifp;
  ifvlan_list vlp_vlan_list;
  u_int32_t vlp_flags;
  u_int32_t vlp_event_code;
  ifdevmtu vlp_devmtu;
  int32_t vlp_retain_count;
  u_int32_t vlp_signature;
};

/* 6288 */
struct vlan_parent_entry
{
  vlan_parent *le_next;
  vlan_parent **le_prev;
};

/* 6289 */
struct ifvlan_list
{
  ifvlan *lh_first;
};

/* 6290 */
struct __attribute__((aligned(8))) ifvlan
{
  ifvlan_entry ifv_vlan_list;
  char ifv_name[16];
  ifnet *ifv_ifp;
  vlan_parent_ref ifv_vlp;
  ifv_linkmib ifv_mib;
  multicast_list ifv_multicast;
  u_int32_t ifv_flags;
  int32_t ifv_retain_count;
  u_int32_t ifv_signature;
};

/* 6291 */
struct ifvlan_entry
{
  ifvlan *le_next;
  ifvlan **le_prev;
};

/* 6292 */
typedef vlan_parent *vlan_parent_ref;

/* 6293 */
struct ifv_linkmib
{
  u_int16_t ifvm_encaplen;
  u_int16_t ifvm_mtufudge;
  u_int16_t ifvm_proto;
  u_int16_t ifvm_tag;
};

/* 6294 */
struct multicast_list
{
  multicast_entry *slh_first;
};

/* 6295 */
struct multicast_entry
{
  multicast_entry::$7505D93AAF0C0C7D7C2FF29367AB30ED mc_entries;
  ifmultiaddr_t mc_ifma;
};

/* 6296 */
struct multicast_entry::$7505D93AAF0C0C7D7C2FF29367AB30ED
{
  multicast_entry *sle_next;
};

/* 6297 */
typedef ifmultiaddr *ifmultiaddr_t;

/* 6298 */
typedef ifvlan *ifvlan_ref;

/* 6299 */
struct $<8863299,1>::$702627CCEF8AD049C7FD7503AB5786E6
{
  kern_event_msg header;
  u_int32_t unit;
  char if_name[16];
};

/* 6300 */
struct vlanreq
{
  char vlr_parent[16];
  u_short vlr_tag;
};

/* 6301 */
typedef $A74FA65F7D41531532BDAEA5B61BFF4D *fake_packet_pool_t;

/* 6302 */
struct __attribute__((aligned(8))) $A74FA65F7D41531532BDAEA5B61BFF4D
{
  kern_pbufpool_t fpp_pp;
  uint32_t_0 fpp_retain_count;
};

/* 6303 */
typedef if_fake *if_fake_ref;

/* 6304 */
struct if_fake
{
  char iff_name[16];
  ifnet_t iff_ifp;
  iff_flags_t iff_flags;
  uint32_t_0 iff_retain_count;
  ifnet_t iff_peer;
  int iff_media_current;
  int iff_media_active;
  uint32_t_0 iff_media_count;
  int iff_media_list[27];
  mbuf *iff_pending_tx_packet;
  boolean_t iff_start_busy;
  fake_nx iff_nx;
  kern_channel_ring_t iff_rx_ring[1];
  kern_channel_ring_t iff_tx_ring[4];
  thread_call_t iff_doorbell_tcall;
  boolean_t iff_tcall_active;
  boolean_t iff_waiting_for_tcall;
  boolean_t iff_channel_connected;
  fake_packet_pool_t iff_fpp;
};

/* 6305 */
typedef uint16_t iff_flags_t;

/* 6306 */
struct fake_nx
{
  uuid_t fnx_provider;
  uuid_t fnx_instance;
};

/* 6307 */
typedef fake_nx *fake_nx_t;

/* 6308 */
struct if_fake_request
{
  uint64_t_0 iffr_reserved[4];
  if_fake_request::$38CED8411764F8CFECF58B0F2DF3E84A iffr_u;
};

/* 6309 */
union if_fake_request::$38CED8411764F8CFECF58B0F2DF3E84A
{
  char iffru_buf[128];
  if_fake_media iffru_media;
  char iffru_peer_name[16];
  uint32_t_0 iffru_dequeue_stall;
};

/* 6310 */
struct if_fake_media
{
  int32_t iffm_current;
  uint32_t_0 iffm_count;
  uint32_t_0 iffm_reserved[3];
  int32_t iffm_list[27];
};

/* 6311 */
struct kern_pbufpool_init
{
  uint32_t_0 kbi_version;
  pbufpool_name_t kbi_name;
  uint32_t_0 kbi_flags;
  uint32_t_0 kbi_packets;
  uint32_t_0 kbi_max_frags;
  uint32_t_0 kbi_buflets;
  uint32_t_0 kbi_bufsize;
  uint32_t_0 kbi_buf_seg_size;
  pbuf_seg_ctor_fn_t kbi_buf_seg_ctor;
  pbuf_seg_dtor_fn_t kbi_buf_seg_dtor;
};

/* 6312 */
union ifdrvu
{
  ifdrv32 *ifdrvu_32;
  ifdrv64 *ifdrvu_64;
  void *ifdrvu_p;
};

/* 6313 */
struct kern_channel_ring_stat_increment
{
  uint32_t_0 kcrsi_slots_transferred;
  uint32_t_0 kcrsi_bytes_transferred;
};

/* 6314 */
struct ether_addr
{
  u_char octet[6];
};

/* 6315 */
typedef bond_globals_s *bond_globals_ref;

/* 6316 */
struct __attribute__((aligned(8))) bond_globals_s
{
  ifbond_list ifbond_list;
  lacp_system system;
  lacp_system_priority system_priority;
  int verbose;
};

/* 6317 */
struct ifbond_list
{
  ifbond_s *tqh_first;
  ifbond_s **tqh_last;
};

/* 6318 */
struct __attribute__((aligned(8))) ifbond_s
{
  ifbond_s::$791B5DD216F29E69FB2659C4CAB2D399 ifb_bond_list;
  int ifb_flags;
  SInt32 ifb_retain_count;
  char ifb_name[16];
  ifnet *ifb_ifp;
  bpf_packet_func ifb_bpf_input;
  bpf_packet_func ifb_bpf_output;
  int ifb_altmtu;
  port_list ifb_port_list;
  __int16 ifb_port_count;
  lag_list ifb_lag_list;
  lacp_key ifb_key;
  __int16 ifb_max_active;
  LAG_ref ifb_active_lag;
  ifmultiaddr *ifb_ifma_slow_proto;
  bondport_ref *ifb_distributing_array;
  int ifb_distributing_count;
  int ifb_last_link_event;
  int ifb_mode;
};

/* 6319 */
struct ifbond_s::$791B5DD216F29E69FB2659C4CAB2D399
{
  ifbond_s *tqe_next;
  ifbond_s **tqe_prev;
};

/* 6320 */
struct port_list
{
  bondport_s *tqh_first;
  bondport_s **tqh_last;
};

/* 6321 */
struct bondport_s
{
  bondport_s::$6E7C70C413C5514A643A28451B916889 po_port_list;
  ifbond_ref po_bond;
  multicast_list po_multicast;
  ifnet *po_ifp;
  ether_addr po_saved_addr;
  int po_enabled;
  char po_name[16];
  ifdevmtu po_devmtu;
  bondport_s::$6E7C70C413C5514A643A28451B916889 po_lag_port_list;
  devtimer_ref po_current_while_timer;
  devtimer_ref po_periodic_timer;
  devtimer_ref po_wait_while_timer;
  devtimer_ref po_transmit_timer;
  partner_state po_partner_state;
  lacp_port_priority po_priority;
  lacp_actor_partner_state po_actor_state;
  u_char po_flags;
  u_char po_periodic_interval;
  u_char po_n_transmit;
  ReceiveState po_receive_state;
  MuxState po_mux_state;
  SelectedState po_selected;
  int32_t po_last_transmit_secs;
  media_info po_media_info;
  LAG_ref po_lag;
};

/* 6322 */
struct bondport_s::$6E7C70C413C5514A643A28451B916889
{
  bondport_s *tqe_next;
  bondport_s **tqe_prev;
};

/* 6323 */
typedef ifbond_s *ifbond_ref;

/* 6324 */
typedef devtimer_s *devtimer_ref;

/* 6325 */
struct devtimer_s
{
  void *dt_callout;
  devtimer_timeout_func dt_timeout_func;
  devtimer_process_func dt_process_func;
  void *dt_arg0;
  void *dt_arg1;
  void *dt_arg2;
  int dt_generation;
  UInt32 dt_retain_count;
};

/* 6326 */
typedef partner_state_s partner_state;

/* 6327 */
struct __attribute__((aligned(2))) partner_state_s
{
  LAG_info ps_lag_info;
  lacp_port ps_port;
  lacp_port_priority ps_port_priority;
  lacp_actor_partner_state ps_state;
};

/* 6328 */
typedef LAG_info_s LAG_info;

/* 6329 */
struct LAG_info_s
{
  lacp_system li_system;
  lacp_system_priority li_system_priority;
  lacp_key li_key;
};

/* 6330 */
struct lacp_system
{
  u_char system_id[6];
};

/* 6331 */
typedef u_int16_t lacp_system_priority;

/* 6332 */
typedef u_int16_t lacp_key;

/* 6333 */
typedef u_int16_t lacp_port;

/* 6334 */
typedef u_int16_t lacp_port_priority;

/* 6335 */
typedef u_char lacp_actor_partner_state;

/* 6336 */
typedef u_char ReceiveState;

/* 6337 */
typedef u_char MuxState;

/* 6338 */
typedef u_char SelectedState;

/* 6339 */
struct media_info
{
  int mi_active;
  int mi_status;
};

/* 6340 */
typedef LAG_s *LAG_ref;

/* 6341 */
struct __attribute__((aligned(8))) LAG_s
{
  LAG_s::$F6F1392CD6AD1F97935A6A8C2675687E lag_list;
  port_list lag_port_list;
  __int16 lag_port_count;
  __int16 lag_selected_port_count;
  int lag_active_media;
  LAG_info lag_info;
};

/* 6342 */
struct LAG_s::$F6F1392CD6AD1F97935A6A8C2675687E
{
  LAG_s *tqe_next;
  LAG_s **tqe_prev;
};

/* 6343 */
struct lag_list
{
  LAG_s *tqh_first;
  LAG_s **tqh_last;
};

/* 6344 */
typedef bondport_s *bondport_ref;

/* 6345 */
enum LAEvent : __int32
{
  LAEventStart = 0x0,
  LAEventTimeout = 0x1,
  LAEventPacket = 0x2,
  LAEventMediaChange = 0x3,
  LAEventSelectedChange = 0x4,
  LAEventPortMoved = 0x5,
  LAEventReady = 0x6,
};

/* 6346 */
typedef lacp_system *lacp_system_ref;

/* 6347 */
typedef lacpdu_s *lacpdu_ref;

/* 6348 */
struct lacpdu_s
{
  u_char la_subtype;
  u_char la_version;
  u_char la_actor_tlv[20];
  u_char la_partner_tlv[20];
  u_char la_collector_tlv[16];
  u_char la_terminator_type;
  u_char la_terminator_length;
  u_char la_reserved[50];
};

/* 6349 */
typedef lacp_actor_partner_tlv_s *lacp_actor_partner_tlv_ref;

/* 6350 */
struct lacp_actor_partner_tlv_s
{
  u_char lap_tlv_type;
  u_char lap_length;
  u_char lap_system_priority[2];
  u_char lap_system[6];
  u_char lap_key[2];
  u_char lap_port_priority[2];
  u_char lap_port[2];
  u_char lap_state;
  u_char lap_reserved[3];
};

/* 6351 */
typedef void (*devtimer_timeout_func)(void *, void *, void *);

/* 6352 */
typedef la_marker_pdu_s *la_marker_pdu_ref;

/* 6353 */
struct la_marker_pdu_s
{
  u_char lm_subtype;
  u_char lm_version;
  u_char lm_marker_tlv_type;
  u_char lm_marker_tlv_length;
  u_char lm_requestor_port[2];
  u_char lm_requestor_system[6];
  u_char lm_requestor_transaction_id[4];
  u_char lm_pad[2];
  u_char lm_terminator_type;
  u_char lm_terminator_length;
  u_char lm_reserved[90];
};

/* 6354 */
typedef mbuf *packet_buffer_ref;

/* 6355 */
typedef lacp_collector_tlv_s *lacp_collector_tlv_ref;

/* 6356 */
struct lacp_collector_tlv_s
{
  u_char lac_tlv_type;
  u_char lac_length;
  u_char lac_max_delay[2];
  u_char lac_reserved[12];
};

/* 6357 */
typedef partner_state_s *partner_state_ref;

/* 6358 */
struct if_bond_req
{
  u_int32_t ibr_op;
  if_bond_req::$77C6EBB455C839F35A55379D26DC0CE2 ibr_ibru;
};

/* 6359 */
union if_bond_req::$77C6EBB455C839F35A55379D26DC0CE2
{
  char ibru_if_name[16];
  if_bond_status_req ibru_status;
  int ibru_int_val;
};

/* 6360 */
struct __attribute__((packed)) __attribute__((aligned(4))) if_bond_status_req
{
  int ibsr_version;
  int ibsr_total;
  int ibsr_count;
  if_bond_status_req::$22E107DEF6E3B8A68C1254870AB6E4D6 ibsr_ibsru;
  lacp_key ibsr_key;
  u_int8_t ibsr_mode;
  u_int8_t ibsr_reserved0;
  u_int32_t ibsr_reserved[3];
};

/* 6361 */
union if_bond_status_req::$22E107DEF6E3B8A68C1254870AB6E4D6
{
  void *ibsru_buffer;
  u_int64_t ibsru_buffer64;
};

/* 6362 */
struct if_bond_status
{
  char ibs_if_name[16];
  lacp_port_priority ibs_port_priority;
  lacp_actor_partner_state ibs_state;
  u_char ibs_selected_state;
  if_bond_partner_state ibs_partner_state;
  u_int32_t ibs_reserved[8];
};

/* 6363 */
struct if_bond_partner_state
{
  lacp_system ibps_system;
  lacp_system_priority ibps_system_priority;
  lacp_key ibps_key;
  lacp_port ibps_port;
  lacp_port_priority ibps_port_priority;
  lacp_actor_partner_state ibps_state;
  u_char ibps_reserved1;
};

/* 6364 */
typedef LAG_info_s *LAG_info_ref;

/* 6365 */
typedef void (*devtimer_process_func)(devtimer_ref, devtimer_process_func_event);

/* 6366 */
typedef int devtimer_process_func_event;

/* 6367 */
struct $3137034C7374763A71BED71910847D82
{
  ndrv_cb *tqh_first;
  ndrv_cb **tqh_last;
};

/* 6368 */
struct __attribute__((aligned(8))) ndrv_cb
{
  ndrv_cb::$65C59FB0ADBF8FB47A4AF2B59D9E6F65 nd_next;
  socket *nd_socket;
  u_int32_t nd_signature;
  sockaddr_ndrv *nd_faddr;
  sockaddr_ndrv *nd_laddr;
  sockproto nd_proto;
  int nd_descrcnt;
  dlist nd_dlist;
  u_int32_t nd_dlist_cnt;
  ifnet *nd_if;
  u_int32_t nd_proto_family;
  u_int32_t nd_family;
  ndrv_multiaddr *nd_multiaddrs;
  __int16 nd_unit;
};

/* 6369 */
struct ndrv_cb::$65C59FB0ADBF8FB47A4AF2B59D9E6F65
{
  ndrv_cb *tqe_next;
  ndrv_cb **tqe_prev;
};

/* 6370 */
struct sockaddr_ndrv
{
  unsigned __int8 snd_len;
  unsigned __int8 snd_family;
  unsigned __int8 snd_name[16];
};

/* 6371 */
struct sockproto
{
  __uint16_t sp_family;
  __uint16_t sp_protocol;
};

/* 6372 */
struct dlist
{
  dlil_demux_desc *tqh_first;
  dlil_demux_desc **tqh_last;
};

/* 6373 */
struct dlil_demux_desc;

/* 6374 */
struct ndrv_multiaddr
{
  ndrv_multiaddr *next;
  ifmultiaddr_t ifma;
  sockaddr addr;
};

/* 6375 */
struct ndrv_demux_desc
{
  u_int16_t type;
  u_int16_t length;
  ndrv_demux_desc::$B777CDF456D3984B209946E2916661F3 data;
};

/* 6376 */
union ndrv_demux_desc::$B777CDF456D3984B209946E2916661F3
{
  u_int16_t ether_type;
  u_int8_t sap[3];
  u_int8_t snap[5];
  u_int8_t other[28];
};

/* 6377 */
struct ndrv_protocol_desc
{
  u_int32_t version;
  u_int32_t protocol_family;
  u_int32_t demux_count;
  ndrv_demux_desc *demux_array;
};

/* 6378 */
struct ndrv_protocol_desc32
{
  u_int32_t version;
  u_int32_t protocol_family;
  u_int32_t demux_count;
  user32_addr_t demux_array;
};

/* 6379 */
struct ndrv_protocol_desc64
{
  u_int32_t version;
  u_int32_t protocol_family;
  u_int32_t demux_count;
  user64_addr_t demux_array;
};

/* 6380 */
struct rawcb_list_head
{
  rawcb *lh_first;
};

/* 6381 */
struct __attribute__((aligned(8))) rawcb
{
  rawcb::$CC7F39AFD67CC0607A424542E4EA7FA0 list;
  socket *rcb_socket;
  sockaddr *rcb_faddr;
  sockaddr *rcb_laddr;
  sockproto rcb_proto;
  uint32_t_0 reserved[4];
};

/* 6382 */
struct rawcb::$CC7F39AFD67CC0607A424542E4EA7FA0
{
  rawcb *le_next;
  rawcb **le_prev;
};

/* 6383 */
struct eventqelt_0
{
  eventqelt_0::$0389F1D7D7F73755D30060E8827CFDAE ee_slist;
  eventqelt_0::$0389F1D7D7F73755D30060E8827CFDAE ee_plist;
  eventreq64 ee_req;
  proc *ee_proc;
  u_int ee_flags;
  u_int ee_eventmask;
};

/* 6384 */
struct eventqelt_0::$0389F1D7D7F73755D30060E8827CFDAE
{
  eventqelt_0 *tqe_next;
  eventqelt_0 **tqe_prev;
};

/* 6385 */
struct rtstat
{
  __int16 rts_badredirect;
  __int16 rts_dynamic;
  __int16 rts_newgateway;
  __int16 rts_unreach;
  __int16 rts_wildcard;
  __int16 rts_badrtgwroute;
};

/* 6386 */
struct $FEE2F82EBF2EE96BB63D476B96CD2E19
{
  rtentry_dbg *tqh_first;
  rtentry_dbg **tqh_last;
};

/* 6387 */
struct rtentry_dbg
{
  rtentry rtd_entry;
  rtentry rtd_entry_saved;
  uint32_t_0 rtd_inuse;
  uint16_t rtd_refhold_cnt;
  uint16_t rtd_refrele_cnt;
  uint32_t_0 rtd_lock_cnt;
  uint32_t_0 rtd_unlock_cnt;
  ctrace_t rtd_alloc;
  ctrace_t rtd_free;
  ctrace_t rtd_refhold[4];
  ctrace_t rtd_refrele[4];
  ctrace_t rtd_lock[4];
  ctrace_t rtd_unlock[4];
  rtentry_dbg::$1909D2E8A297061646F95B9EE49C20A3 rtd_trash_link;
};

/* 6388 */
struct rtentry_dbg::$1909D2E8A297061646F95B9EE49C20A3
{
  rtentry_dbg *tqe_next;
  rtentry_dbg **tqe_prev;
};

/* 6389 */
struct route_event
{
  rtentry *rt;
  rtentry *gwrt;
  route_event::$9D6451576F07F9B38571211702BAA05C rt_addr;
  uint32_t_0 route_event_code;
  eventhandler_tag evtag;
};

/* 6390 */
union route_event::$9D6451576F07F9B38571211702BAA05C
{
  sockaddr_in_4_6 _rtev_ipaddr;
  sockaddr_dl _rtev_lladdr;
  char _rtev_addr_bytes[64];
};

/* 6391 */
typedef eventhandler_entry *eventhandler_tag;

/* 6392 */
struct route_event_nwk_wq_entry
{
  nwk_wq_entry nwk_wqe;
  route_event rt_ev_arg;
};

/* 6393 */
struct eventhandler_entry_route_event
{
  eventhandler_entry ee;
  route_event_fn eh_func;
};

/* 6394 */
typedef void (*route_event_fn)(eventhandler_entry_arg, sockaddr *, int, sockaddr *, int);

/* 6395 */
struct rt_addrinfo
{
  int rti_addrs;
  sockaddr *rti_info[8];
};

/* 6396 */
struct rtfc_arg
{
  rtentry *rt0;
  radix_node_head *rnh;
};

/* 6397 */
struct matchleaf_arg
{
  unsigned int ifscope;
};

/* 6398 */
struct route_cb
{
  u_int32_t ip_count;
  u_int32_t ip6_count;
  u_int32_t any_count;
};

/* 6399 */
struct rt_msghdr
{
  u_short rtm_msglen;
  u_char rtm_version;
  u_char rtm_type;
  u_short rtm_index;
  int rtm_flags;
  int rtm_addrs;
  pid_t rtm_pid;
  int rtm_seq;
  int rtm_errno;
  int rtm_use;
  u_int32_t rtm_inits;
  rt_metrics rtm_rmx;
};

/* 6400 */
struct if_msghdr
{
  unsigned __int16 ifm_msglen;
  unsigned __int8 ifm_version;
  unsigned __int8 ifm_type;
  int ifm_addrs;
  int ifm_flags;
  unsigned __int16 ifm_index;
  if_data ifm_data;
};

/* 6401 */
struct ifa_msghdr
{
  unsigned __int16 ifam_msglen;
  unsigned __int8 ifam_version;
  unsigned __int8 ifam_type;
  int ifam_addrs;
  int ifam_flags;
  unsigned __int16 ifam_index;
  int ifam_metric;
};

/* 6402 */
struct __attribute__((aligned(4))) ifma_msghdr
{
  unsigned __int16 ifmam_msglen;
  unsigned __int8 ifmam_version;
  unsigned __int8 ifmam_type;
  int ifmam_addrs;
  int ifmam_flags;
  unsigned __int16 ifmam_index;
};

/* 6403 */
struct rt_msghdr2
{
  u_short rtm_msglen;
  u_char rtm_version;
  u_char rtm_type;
  u_short rtm_index;
  int rtm_flags;
  int rtm_addrs;
  int32_t rtm_refcnt;
  int rtm_parentflags;
  int rtm_reserved;
  int rtm_use;
  u_int32_t rtm_inits;
  rt_metrics rtm_rmx;
};

/* 6404 */
struct rt_msghdr_ext
{
  u_short rtm_msglen;
  u_char rtm_version;
  u_char rtm_type;
  u_int32_t rtm_index;
  u_int32_t rtm_flags;
  u_int32_t rtm_reserved;
  u_int32_t rtm_addrs;
  pid_t rtm_pid;
  int rtm_seq;
  int rtm_errno;
  u_int32_t rtm_use;
  u_int32_t rtm_inits;
  rt_metrics rtm_rmx;
  rt_reach_info rtm_ri;
};

/* 6405 */
struct if_msghdr2
{
  u_short ifm_msglen;
  u_char ifm_version;
  u_char ifm_type;
  int ifm_addrs;
  int ifm_flags;
  u_short ifm_index;
  int ifm_snd_len;
  int ifm_snd_maxlen;
  int ifm_snd_drops;
  int ifm_timer;
  if_data64 ifm_data;
};

/* 6406 */
struct ifma_msghdr2
{
  u_short ifmam_msglen;
  u_char ifmam_version;
  u_char ifmam_type;
  int ifmam_addrs;
  int ifmam_flags;
  u_short ifmam_index;
  int32_t ifmam_refcount;
};

/* 6407 */
struct walkarg
{
  int w_tmemsize;
  int w_op;
  int w_arg;
  caddr_t w_tmem;
  sysctl_req *w_req;
};

/* 6408 */
typedef void *kern_ctl_ref;

/* 6409 */
struct netsrc_req
{
  unsigned int nrq_ver;
  unsigned int nrq_ifscope;
  netsrc_req::$A9718FA80ED11FFE279AE133F7E8D066 _anon_0;
};

/* 6410 */
union netsrc_req::$A9718FA80ED11FFE279AE133F7E8D066
{
  sockaddr_in_4_6 nrq_dst;
  sockaddr_in_4_6 _usa;
};

/* 6411 */
struct netsrc_repv2
{
  netsrc_repv2::$9468CC3DCC833C62BA7388AE604FB48A _anon_0;
  uint32_t_0 nrp_min_rtt;
  uint32_t_0 nrp_connection_attempts;
  uint32_t_0 nrp_connection_successes;
  uint32_t_0 nrp_flags;
  uint16_t nrp_label;
  uint16_t nrp_precedence;
  uint16_t nrp_dstlabel;
  uint16_t nrp_dstprecedence;
  uint16_t nrp_ifindex;
  uint16_t nrp_unused;
};

/* 6412 */
union netsrc_repv2::$9468CC3DCC833C62BA7388AE604FB48A
{
  sockaddr_in_4_6 nrp_src;
  sockaddr_in_4_6 _usa;
};

/* 6413 */
struct netsrc_repv1
{
  netsrc_repv1::$9468CC3DCC833C62BA7388AE604FB48A _anon_0;
  uint16_t nrp_flags;
  uint16_t nrp_label;
  uint16_t nrp_precedence;
  uint16_t nrp_dstlabel;
  uint16_t nrp_dstprecedence;
  uint16_t nrp_unused;
};

/* 6414 */
union netsrc_repv1::$9468CC3DCC833C62BA7388AE604FB48A
{
  sockaddr_in_4_6 nrp_src;
  sockaddr_in_4_6 _usa;
};

/* 6415 */
struct in6_addrpolicy
{
  sockaddr_in6 addr;
  sockaddr_in6 addrmask;
  int preced;
  int label;
  u_quad_t use;
};

/* 6416 */
struct kern_ctl_reg
{
  char ctl_name[96];
  u_int32_t ctl_id;
  u_int32_t ctl_unit;
  u_int32_t ctl_flags;
  u_int32_t ctl_sendsize;
  u_int32_t ctl_recvsize;
  ctl_connect_func ctl_connect;
  ctl_disconnect_func ctl_disconnect;
  ctl_send_func ctl_send;
  ctl_setopt_func ctl_setopt;
  ctl_getopt_func ctl_getopt;
  ctl_rcvd_func ctl_rcvd;
  ctl_send_list_func ctl_send_list;
  ctl_bind_func ctl_bind;
};

/* 6417 */
typedef errno_t (*ctl_connect_func)(kern_ctl_ref, sockaddr_ctl *, void **);

/* 6418 */
struct sockaddr_ctl
{
  u_char sc_len;
  u_char sc_family;
  u_int16_t ss_sysaddr;
  u_int32_t sc_id;
  u_int32_t sc_unit;
  u_int32_t sc_reserved[5];
};

/* 6419 */
typedef errno_t (*ctl_disconnect_func)(kern_ctl_ref, u_int32_t, void *);

/* 6420 */
typedef errno_t (*ctl_send_func)(kern_ctl_ref, u_int32_t, void *, mbuf_t, int);

/* 6421 */
typedef errno_t (*ctl_setopt_func)(kern_ctl_ref, u_int32_t, void *, int, void *, size_t_0);

/* 6422 */
typedef errno_t (*ctl_getopt_func)(kern_ctl_ref, u_int32_t, void *, int, void *, size_t_0 *);

/* 6423 */
typedef void (*ctl_rcvd_func)(kern_ctl_ref, u_int32_t, void *, int);

/* 6424 */
typedef errno_t (*ctl_send_list_func)(kern_ctl_ref, u_int32_t, void *, mbuf_t, int);

/* 6425 */
typedef errno_t (*ctl_bind_func)(kern_ctl_ref, sockaddr_ctl *, void **);

/* 6426 */
struct nstat_provider
{
  nstat_provider *next;
  nstat_provider_id_t nstat_provider_id;
  size_t_0 nstat_descriptor_length;
  errno_t (*nstat_lookup)(const void *, u_int32_t, nstat_provider_cookie_t *);
  int (*nstat_gone)(nstat_provider_cookie_t);
  errno_t (*nstat_counts)(nstat_provider_cookie_t, nstat_counts *, int *);
  errno_t (*nstat_watcher_add)(nstat_control_state_0 *, nstat_msg_add_all_srcs_0 *);
  void (*nstat_watcher_remove)(nstat_control_state_0 *);
  errno_t (*nstat_copy_descriptor)(nstat_provider_cookie_t, void *, u_int32_t);
  void (*nstat_release)(nstat_provider_cookie_t, boolean_t);
  _Bool (*nstat_reporting_allowed)(nstat_provider_cookie_t, nstat_provider_filter_0 *);
};

/* 6427 */
typedef u_int32_t nstat_provider_id_t;

/* 6428 */
typedef void *nstat_provider_cookie_t;

/* 6429 */
typedef nstat_control_state nstat_control_state_0;

/* 6430 */
struct nstat_control_state
{
  nstat_control_state *ncs_next;
  u_int32_t ncs_watching;
  lck_mtx_t ncs_mtx;
  kern_ctl_ref ncs_kctl;
  u_int32_t ncs_unit;
  nstat_src_ref_t ncs_next_srcref;
  tailq_head_nstat_src ncs_src_queue;
  mbuf_t ncs_accumulated;
  u_int32_t ncs_flags;
  nstat_provider_filter_0 ncs_provider_filters[8];
  u_int64_t ncs_context;
  u_int64_t ncs_seq;
};

/* 6431 */
typedef u_int64_t nstat_src_ref_t;

/* 6432 */
struct tailq_head_nstat_src
{
  nstat_src *tqh_first;
  nstat_src **tqh_last;
};

/* 6433 */
struct nstat_src
{
  tailq_entry_nstat_src ns_control_link;
  nstat_control_state_0 *ns_control;
  nstat_src_ref_t srcref;
  nstat_provider_0 *provider;
  nstat_provider_cookie_t cookie;
  uint32_t_0 filter;
  uint64_t_0 seq;
};

/* 6434 */
struct tailq_entry_nstat_src
{
  nstat_src *tqe_next;
  nstat_src **tqe_prev;
};

/* 6435 */
typedef nstat_provider nstat_provider_0;

/* 6436 */
typedef nstat_provider_filter nstat_provider_filter_0;

/* 6437 */
struct __attribute__((aligned(8))) nstat_provider_filter
{
  u_int64_t npf_flags;
  u_int64_t npf_events;
  pid_t npf_pid;
  uuid_t npf_uuid;
};

/* 6438 */
typedef nstat_msg_add_all_srcs nstat_msg_add_all_srcs_0;

/* 6439 */
struct nstat_msg_add_all_srcs
{
  nstat_msg_hdr_0 hdr;
  u_int64_t filter;
  nstat_event_flags_t events;
  nstat_provider_id_t provider;
  pid_t target_pid;
  uuid_t target_uuid;
};

/* 6440 */
typedef nstat_msg_hdr nstat_msg_hdr_0;

/* 6441 */
struct nstat_msg_hdr
{
  u_int64_t context;
  u_int32_t type;
  u_int16_t length;
  u_int16_t flags;
};

/* 6442 */
typedef u_int64_t nstat_event_flags_t;

/* 6443 */
struct nstat_stats
{
  u_int32_t nstat_successmsgfailures;
  u_int32_t nstat_sendcountfailures;
  u_int32_t nstat_sysinfofailures;
  u_int32_t nstat_srcupatefailures;
  u_int32_t nstat_descriptionfailures;
  u_int32_t nstat_msgremovedfailures;
  u_int32_t nstat_srcaddedfailures;
  u_int32_t nstat_msgerrorfailures;
  u_int32_t nstat_copy_descriptor_failures;
  u_int32_t nstat_provider_counts_failures;
  u_int32_t nstat_control_send_description_failures;
  u_int32_t nstat_control_send_goodbye_failures;
  u_int32_t nstat_flush_accumulated_msgs_failures;
  u_int32_t nstat_accumulate_msg_failures;
  u_int32_t nstat_control_cleanup_source_failures;
  u_int32_t nstat_handle_msg_failures;
};

/* 6444 */
typedef struct __OSMallocTag__ *OSMallocTag_0;

/* 6445 */
struct __OSMallocTag__;

/* 6446 */
struct tailq_head_procdetails
{
  nstat_procdetails *tqh_first;
  nstat_procdetails **tqh_last;
};

/* 6447 */
struct nstat_procdetails
{
  tailq_entry_procdetails pdet_link;
  int pdet_pid;
  u_int64_t pdet_upid;
  char pdet_procname[64];
  uuid_t pdet_uuid;
  u_int32_t pdet_numflows;
  u_int32_t pdet_magic;
};

/* 6448 */
struct tailq_entry_procdetails
{
  nstat_procdetails *tqe_next;
  nstat_procdetails **tqe_prev;
};

/* 6449 */
struct tailq_head_tu_shadow
{
  nstat_tu_shadow *tqh_first;
  nstat_tu_shadow **tqh_last;
};

/* 6450 */
struct nstat_tu_shadow
{
  tailq_entry_tu_shadow shad_link;
  userland_stats_request_vals_fn *shad_getvals_fn;
  userland_stats_provider_context *shad_provider_context;
  u_int64_t shad_properties;
  u_int64_t shad_start_timestamp;
  nstat_provider_id_t shad_provider;
  nstat_procdetails *shad_procdetails;
  _Bool shad_live;
  uint32_t_0 shad_magic;
};

/* 6451 */
struct tailq_entry_tu_shadow
{
  nstat_tu_shadow *tqe_next;
  nstat_tu_shadow **tqe_prev;
};

/* 6452 */
typedef _Bool userland_stats_request_vals_fn(userland_stats_provider_context *, u_int16_t *, nstat_progress_digest_0 *, nstat_counts_0 *, void *);

/* 6453 */
typedef void *userland_stats_provider_context;

/* 6454 */
typedef nstat_progress_digest nstat_progress_digest_0;

/* 6455 */
struct nstat_progress_digest
{
  u_int64_t rxbytes;
  u_int64_t txbytes;
  u_int32_t rxduplicatebytes;
  u_int32_t rxoutoforderbytes;
  u_int32_t txretransmit;
  u_int32_t ifindex;
  u_int32_t state;
  u_int32_t txunacked;
  u_int32_t txwindow;
  nstat_progress_digest::$7EF3DF13ED8FC9D923AFA9381A39CD47 _anon_0;
};

/* 6456 */
union nstat_progress_digest::$7EF3DF13ED8FC9D923AFA9381A39CD47
{
  tcp_conn_status connstatus;
  uint8_t_0 __pad_connstatus[4];
};

/* 6457 */
struct tcp_conn_status
{
  unsigned __int32 probe_activated : 1;
  unsigned __int32 write_probe_failed : 1;
  unsigned __int32 read_probe_failed : 1;
  unsigned __int32 conn_probe_failed : 1;
};

/* 6458 */
typedef nstat_counts nstat_counts_0;

/* 6459 */
struct __attribute__((aligned(8))) nstat_tucookie
{
  inpcb *inp;
  char pname[17];
  _Bool cached;
  nstat_tucookie::$C2B0359D572B93F45363770D3E982B96 local;
  nstat_tucookie::$C2B0359D572B93F45363770D3E982B96 remote;
  unsigned int if_index;
  uint16_t ifnet_properties;
};

/* 6460 */
struct inpcb
{
  lck_mtx_t inpcb_mtx;
  inpcb::$2A9B25674DDEEFE7E23C1EED9D0D1FB5 inp_hash;
  inpcb::$2A9B25674DDEEFE7E23C1EED9D0D1FB5 inp_list;
  void *inp_ppcb;
  inpcbinfo *inp_pcbinfo;
  socket *inp_socket;
  inpcb::$2A9B25674DDEEFE7E23C1EED9D0D1FB5 inp_portlist;
  inpcb::$EDCFF7939E830AB33277C7F881FD0AAF infc_link;
  inpcbport *inp_phd;
  inp_gen_t inp_gencnt;
  int inp_hash_element;
  int inp_wantcnt;
  int inp_state;
  u_short inp_fport;
  u_short inp_lport;
  u_int32_t inp_flags;
  u_int32_t inp_flags2;
  u_int32_t inp_flow;
  u_char inp_sndinprog_cnt;
  u_char inp_vflag;
  u_char inp_ip_ttl;
  u_char inp_ip_p;
  ifnet *inp_boundifp;
  ifnet *inp_last_outifp;
  u_int32_t inp_flowhash;
  inpcb::$2BD7BB0BBD3693F1B78AD189346C4D37 inp_dependfaddr;
  inpcb::$EADFB7ED4EAA8E4682185B21FFB778D7 inp_dependladdr;
  inpcb::$3E1745B1C6E514E601098072F11E3BB4 inp_dependroute;
  inpcb::$8D4E16FA47B8771F1B16514E43BDA305 inp_depend4;
  inpcb::$F12CF4F80E803A09F4521CFD6440493F inp_depend6;
  caddr_t inp_saved_ppcb;
  inpcbpolicy *inp_sp;
  inpcb::$DC2617868D60071C4FF8F43D1F661377 inp_necp_attributes;
  necp_inpcb_result inp_policyresult;
  uuid_t necp_client_uuid;
  necp_client_flow_cb necp_cb;
  netns_token inp_netns_token;
  netns_token inp_wildcard_netns_token;
  u_char *inp_keepalive_data;
  u_int8_t inp_keepalive_datalen;
  u_int8_t inp_keepalive_type;
  u_int16_t inp_keepalive_interval;
  uint32_t_0 inp_nstat_refcnt;
  inp_stat *inp_stat;
  inp_stat *inp_cstat;
  inp_stat *inp_wstat;
  inp_stat *inp_Wstat;
  u_int8_t inp_stat_store[40];
  u_int8_t inp_cstat_store[40];
  u_int8_t inp_wstat_store[40];
  u_int8_t inp_Wstat_store[40];
  activity_bitmap_t inp_nw_activity;
  u_int64_t inp_start_timestamp;
};

/* 6461 */
struct inpcb::$2A9B25674DDEEFE7E23C1EED9D0D1FB5
{
  inpcb *le_next;
  inpcb **le_prev;
};

/* 6462 */
struct __attribute__((aligned(8))) inpcbinfo
{
  inpcbinfo::$A640185ED7C33B2F7C126420FE6A454C ipi_entry;
  inpcb_timer_func_t ipi_gc;
  inpcb_timer_func_t ipi_timer;
  intimercount ipi_gc_req;
  intimercount ipi_timer_req;
  lck_rw_t *ipi_lock;
  inpcbhead *ipi_listhead;
  uint32_t_0 ipi_count;
  uint32_t_0 ipi_twcount;
  uint64_t_0 ipi_gencnt;
  uint16_t ipi_lastport;
  uint16_t ipi_lastlow;
  uint16_t ipi_lasthi;
  zone *ipi_zone;
  inpcbhead *ipi_hashbase;
  u_long ipi_hashmask;
  inpcbporthead *ipi_porthashbase;
  u_long ipi_porthashmask;
  lck_attr_t *ipi_lock_attr;
  lck_grp_t *ipi_lock_grp;
  lck_grp_attr_t *ipi_lock_grp_attr;
  u_int32_t ipi_flags;
};

/* 6463 */
struct inpcbinfo::$A640185ED7C33B2F7C126420FE6A454C
{
  inpcbinfo *tqe_next;
  inpcbinfo **tqe_prev;
};

/* 6464 */
typedef void (*inpcb_timer_func_t)(inpcbinfo *);

/* 6465 */
struct intimercount
{
  u_int32_t intimer_lazy;
  u_int32_t intimer_fast;
  u_int32_t intimer_nodelay;
};

/* 6466 */
struct inpcbhead
{
  inpcb *lh_first;
};

/* 6467 */
struct inpcbporthead
{
  inpcbport *lh_first;
};

/* 6468 */
struct __attribute__((aligned(8))) inpcbport
{
  inpcbport::$F0301F882F6C17606873D0079A366E07 phd_hash;
  inpcbhead phd_pcblist;
  u_short phd_port;
};

/* 6469 */
struct inpcbport::$F0301F882F6C17606873D0079A366E07
{
  inpcbport *le_next;
  inpcbport **le_prev;
};

/* 6470 */
struct inpcb::$EDCFF7939E830AB33277C7F881FD0AAF
{
  inpcb *rbe_left;
  inpcb *rbe_right;
  inpcb *rbe_parent;
};

/* 6471 */
typedef u_quad_t inp_gen_t;

/* 6472 */
union inpcb::$2BD7BB0BBD3693F1B78AD189346C4D37
{
  in_addr_4in6 inp46_foreign;
  in6_addr inp6_foreign;
};

/* 6473 */
struct in_addr_4in6
{
  u_int32_t ia46_pad32[3];
  in_addr ia46_addr4;
};

/* 6474 */
union inpcb::$EADFB7ED4EAA8E4682185B21FFB778D7
{
  in_addr_4in6 inp46_local;
  in6_addr inp6_local;
};

/* 6475 */
union inpcb::$3E1745B1C6E514E601098072F11E3BB4
{
  route inp4_route;
  route_in6 inp6_route;
};

/* 6476 */
struct inpcb::$8D4E16FA47B8771F1B16514E43BDA305
{
  u_char inp4_ip_tos;
  mbuf *inp4_options;
  ip_moptions *inp4_moptions;
};

/* 6477 */
struct ip_moptions
{
  lck_mtx_t imo_lock;
  uint32_t_0 imo_refcnt;
  uint32_t_0 imo_debug;
  ifnet *imo_multicast_ifp;
  u_char imo_multicast_ttl;
  u_char imo_multicast_loop;
  u_short imo_num_memberships;
  u_short imo_max_memberships;
  in_multi **imo_membership;
  in_mfilter *imo_mfilters;
  u_int32_t imo_multicast_vif;
  in_addr imo_multicast_addr;
  void (*imo_trace)(ip_moptions *, int);
};

/* 6478 */
struct __attribute__((aligned(8))) in_mfilter
{
  ip_msource_tree imf_sources;
  u_long imf_nsrc;
  uint8_t_0 imf_st[2];
};

/* 6479 */
struct __attribute__((aligned(4))) inpcb::$F12CF4F80E803A09F4521CFD6440493F
{
  mbuf *inp6_options;
  ip6_pktopts *inp6_outputopts;
  ip6_moptions *inp6_moptions;
  icmp6_filter *inp6_icmp6filt;
  int inp6_cksum;
  __int16 inp6_hops;
};

/* 6480 */
struct ip6_pktopts
{
  mbuf *ip6po_m;
  int ip6po_hlim;
  in6_pktinfo *ip6po_pktinfo;
  ip6po_nhinfo ip6po_nhinfo;
  ip6_hbh *ip6po_hbh;
  ip6_dest *ip6po_dest1;
  ip6po_rhinfo ip6po_rhinfo;
  ip6_dest *ip6po_dest2;
  int ip6po_tclass;
  int ip6po_minmtu;
  int ip6po_prefer_tempaddr;
  int ip6po_flags;
};

/* 6481 */
struct in6_pktinfo
{
  in6_addr ipi6_addr;
  unsigned int ipi6_ifindex;
};

/* 6482 */
struct ip6po_nhinfo
{
  sockaddr *ip6po_nhi_nexthop;
  route_in6 ip6po_nhi_route;
};

/* 6483 */
struct ip6_hbh
{
  u_int8_t ip6h_nxt;
  u_int8_t ip6h_len;
};

/* 6484 */
struct ip6_dest
{
  u_int8_t ip6d_nxt;
  u_int8_t ip6d_len;
};

/* 6485 */
struct ip6po_rhinfo
{
  ip6_rthdr *ip6po_rhi_rthdr;
  route_in6 ip6po_rhi_route;
};

/* 6486 */
struct ip6_rthdr
{
  u_int8_t ip6r_nxt;
  u_int8_t ip6r_len;
  u_int8_t ip6r_type;
  u_int8_t ip6r_segleft;
};

/* 6487 */
struct ip6_moptions
{
  lck_mtx_t im6o_lock;
  uint32_t_0 im6o_refcnt;
  uint32_t_0 im6o_debug;
  ifnet *im6o_multicast_ifp;
  u_char im6o_multicast_hlim;
  u_char im6o_multicast_loop;
  u_short im6o_num_memberships;
  u_short im6o_max_memberships;
  in6_multi **im6o_membership;
  in6_mfilter *im6o_mfilters;
  void (*im6o_trace)(ip6_moptions *, int);
};

/* 6488 */
struct __attribute__((aligned(8))) in6_mfilter
{
  ip6_msource_tree im6f_sources;
  u_long im6f_nsrc;
  uint8_t_0 im6f_st[2];
};

/* 6489 */
struct icmp6_filter
{
  u_int32_t icmp6_filt[8];
};

/* 6490 */
struct __attribute__((aligned(8))) inpcbpolicy
{
  secpolicy *sp_in;
  secpolicy *sp_out;
  int priv;
};

/* 6491 */
struct secpolicy
{
  secpolicy::$822095D5753EE737A1A282510AE9C664 chain;
  int refcnt;
  secpolicyindex spidx;
  u_int32_t id;
  u_int state;
  u_int policy;
  ipsecrequest *req;
  ifnet_t ipsec_if;
  ifnet_t outgoing_if;
  char disabled;
  __int64 created;
  __int64 lastused;
  __int64 lifetime;
  __int64 validtime;
};

/* 6492 */
struct secpolicy::$822095D5753EE737A1A282510AE9C664
{
  secpolicy *le_next;
  secpolicy **le_prev;
};

/* 6493 */
struct secpolicyindex
{
  u_int8_t dir;
  sockaddr_storage src;
  sockaddr_storage dst;
  u_int8_t prefs;
  u_int8_t prefd;
  u_int16_t ul_proto;
  ifnet_t internal_if;
  secpolicyaddrrange src_range;
  secpolicyaddrrange dst_range;
};

/* 6494 */
struct secpolicyaddrrange
{
  sockaddr_storage start;
  sockaddr_storage end;
};

/* 6495 */
struct ipsecrequest
{
  ipsecrequest *next;
  secasindex saidx;
  u_int level;
  secpolicy *sp;
};

/* 6496 */
struct __attribute__((aligned(8))) secasindex
{
  sockaddr_storage src;
  sockaddr_storage dst;
  u_int16_t proto;
  u_int8_t mode;
  u_int32_t reqid;
  u_int ipsec_ifindex;
};

/* 6497 */
struct inpcb::$DC2617868D60071C4FF8F43D1F661377
{
  char *inp_domain;
  char *inp_account;
};

/* 6498 */
struct necp_inpcb_result
{
  u_int32_t app_id;
  necp_kernel_policy_id policy_id;
  necp_kernel_policy_id skip_policy_id;
  int32_t policy_gencount;
  u_int32_t flowhash;
  necp_aggregate_socket_result results;
};

/* 6499 */
typedef u_int32_t necp_kernel_policy_id;

/* 6500 */
struct necp_aggregate_socket_result
{
  necp_kernel_policy_result result;
  necp_kernel_policy_result_parameter result_parameter;
  necp_kernel_policy_filter filter_control_unit;
  u_int32_t route_rule_id;
  int32_t qos_marking_gencount;
};

/* 6501 */
typedef u_int32_t necp_kernel_policy_result;

/* 6502 */
union necp_kernel_policy_result_parameter
{
  u_int tunnel_interface_index;
  u_int scoped_interface_index;
  u_int32_t flow_divert_control_unit;
  u_int32_t filter_control_unit;
  u_int32_t skip_policy_order;
  u_int32_t route_rule_id;
  u_int32_t netagent_id;
  necp_kernel_policy_service service;
};

/* 6503 */
struct necp_kernel_policy_service
{
  u_int32_t identifier;
  u_int32_t data;
};

/* 6504 */
typedef u_int32_t necp_kernel_policy_filter;

/* 6505 */
typedef void (*necp_client_flow_cb)(void *, int, uint32_t_0, uint32_t_0, _Bool *);

/* 6506 */
typedef ns_token *netns_token;

/* 6507 */
struct inp_stat
{
  u_int64_t rxpackets;
  u_int64_t rxbytes;
  u_int64_t txpackets;
  u_int64_t txbytes;
};

/* 6508 */
typedef activity_bitmap activity_bitmap_t;

/* 6509 */
struct activity_bitmap
{
  uint64_t_0 start;
  uint64_t_0 bitmap[2];
};

/* 6510 */
union nstat_tucookie::$C2B0359D572B93F45363770D3E982B96
{
  sockaddr_in v4;
  sockaddr_in6 v6;
};

/* 6511 */
typedef void *nstat_userland_context;

/* 6512 */
struct nstat_ifnet_cookie
{
  ifnet *ifp;
  uint64_t_0 threshold;
};

/* 6513 */
struct xinpcb_n
{
  u_int32_t xi_len;
  u_int32_t xi_kind;
  u_int64_t xi_inpp;
  u_short inp_fport;
  u_short inp_lport;
  __attribute__((packed)) __attribute__((aligned(1))) u_int64_t inp_ppcb;
  __attribute__((packed)) __attribute__((aligned(1))) inp_gen_t inp_gencnt;
  int inp_flags;
  u_int32_t inp_flow;
  u_char inp_vflag;
  u_char inp_ip_ttl;
  u_char inp_ip_p;
  xinpcb_n::$2BD7BB0BBD3693F1B78AD189346C4D37 inp_dependfaddr;
  xinpcb_n::$EADFB7ED4EAA8E4682185B21FFB778D7 inp_dependladdr;
  xinpcb_n::$858A1AC577643F0F1919D0B7C614C693 inp_depend4;
  xinpcb_n::$5F4E62BB901E498E33D59398BB0791E2 inp_depend6;
  u_int32_t inp_flowhash;
  u_int32_t inp_flags2;
};

/* 6514 */
union xinpcb_n::$2BD7BB0BBD3693F1B78AD189346C4D37
{
  in_addr_4in6 inp46_foreign;
  in6_addr inp6_foreign;
};

/* 6515 */
union xinpcb_n::$EADFB7ED4EAA8E4682185B21FFB778D7
{
  in_addr_4in6 inp46_local;
  in6_addr inp6_local;
};

/* 6516 */
struct xinpcb_n::$858A1AC577643F0F1919D0B7C614C693
{
  u_char inp4_ip_tos;
};

/* 6517 */
struct xinpcb_n::$5F4E62BB901E498E33D59398BB0791E2
{
  u_int8_t inp6_hlim;
  int inp6_cksum;
  u_short inp6_ifindex;
  __int16 inp6_hops;
};

/* 6518 */
struct __attribute__((packed)) __attribute__((aligned(4))) xsocket_n
{
  u_int32_t xso_len;
  u_int32_t xso_kind;
  u_int64_t xso_so;
  __int16 so_type;
  __attribute__((aligned(4))) u_int32_t so_options;
  __int16 so_linger;
  __int16 so_state;
  u_int64_t so_pcb;
  int xso_protocol;
  int xso_family;
  __int16 so_qlen;
  __int16 so_incqlen;
  __int16 so_qlimit;
  __int16 so_timeo;
  u_short so_error;
  __attribute__((aligned(4))) pid_t so_pgid;
  u_int32_t so_oobmark;
  uid_t so_uid;
  pid_t so_last_pid;
  pid_t so_e_pid;
};

/* 6519 */
struct xsockbuf_n
{
  u_int32_t xsb_len;
  u_int32_t xsb_kind;
  u_int32_t sb_cc;
  u_int32_t sb_hiwat;
  u_int32_t sb_mbcnt;
  u_int32_t sb_mbmax;
  int32_t sb_lowat;
  __int16 sb_flags;
  __int16 sb_timeo;
};

/* 6520 */
struct xsockstat_n
{
  u_int32_t xst_len;
  u_int32_t xst_kind;
  data_stats xst_tc_stats[4];
};

/* 6521 */
struct __attribute__((packed)) __attribute__((aligned(4))) xtcpcb_n
{
  u_int32_t xt_len;
  u_int32_t xt_kind;
  u_int64_t t_segq;
  int t_dupacks;
  int t_timer[4];
  int t_state;
  u_int t_flags;
  int t_force;
  tcp_seq snd_una;
  tcp_seq snd_max;
  tcp_seq snd_nxt;
  tcp_seq snd_up;
  tcp_seq snd_wl1;
  tcp_seq snd_wl2;
  tcp_seq iss;
  tcp_seq irs;
  tcp_seq rcv_nxt;
  tcp_seq rcv_adv;
  u_int32_t rcv_wnd;
  tcp_seq rcv_up;
  u_int32_t snd_wnd;
  u_int32_t snd_cwnd;
  u_int32_t snd_ssthresh;
  u_int t_maxopd;
  u_int32_t t_rcvtime;
  u_int32_t t_starttime;
  int t_rtttime;
  tcp_seq t_rtseq;
  int t_rxtcur;
  u_int t_maxseg;
  int t_srtt;
  int t_rttvar;
  int t_rxtshift;
  u_int t_rttmin;
  u_int32_t t_rttupdated;
  u_int32_t max_sndwnd;
  int t_softerror;
  char t_oobflags;
  char t_iobc;
  u_char snd_scale;
  u_char rcv_scale;
  u_char request_r_scale;
  u_char requested_s_scale;
  __attribute__((aligned(4))) u_int32_t ts_recent;
  u_int32_t ts_recent_age;
  tcp_seq last_ack_sent;
  tcp_cc cc_send;
  tcp_cc cc_recv;
  tcp_seq snd_recover;
  u_int32_t snd_cwnd_prev;
  u_int32_t snd_ssthresh_prev;
};

/* 6522 */
typedef __uint32_t tcp_cc;

/* 6523 */
typedef nstat_flow_data nstat_flow_data_0;

/* 6524 */
struct nstat_flow_data
{
  nstat_counts_0 counts;
  nstat_flow_data::$75AEC340083B0265BC435F3DC2BEFF7A flow_descriptor;
};

/* 6525 */
union nstat_flow_data::$75AEC340083B0265BC435F3DC2BEFF7A
{
  nstat_udp_descriptor_0 udp_descriptor;
  nstat_tcp_descriptor_0 tcp_descriptor;
};

/* 6526 */
typedef nstat_udp_descriptor nstat_udp_descriptor_0;

/* 6527 */
struct nstat_udp_descriptor
{
  u_int64_t upid;
  u_int64_t eupid;
  u_int64_t start_timestamp;
  u_int64_t timestamp;
  activity_bitmap_t activity_bitmap;
  nstat_udp_descriptor::$C2B0359D572B93F45363770D3E982B96 local;
  nstat_udp_descriptor::$C2B0359D572B93F45363770D3E982B96 remote;
  u_int32_t ifindex;
  u_int32_t rcvbufsize;
  u_int32_t rcvbufused;
  u_int32_t traffic_class;
  u_int32_t pid;
  char pname[64];
  u_int32_t epid;
  uuid_t uuid;
  uuid_t euuid;
  uuid_t vuuid;
  uint16_t ifnet_properties;
  u_int8_t reserved[6];
};

/* 6528 */
union nstat_udp_descriptor::$C2B0359D572B93F45363770D3E982B96
{
  sockaddr_in v4;
  sockaddr_in6 v6;
};

/* 6529 */
typedef nstat_tcp_descriptor nstat_tcp_descriptor_0;

/* 6530 */
struct nstat_tcp_descriptor
{
  u_int64_t upid;
  u_int64_t eupid;
  u_int64_t start_timestamp;
  u_int64_t timestamp;
  activity_bitmap_t activity_bitmap;
  u_int32_t ifindex;
  u_int32_t state;
  u_int32_t sndbufsize;
  u_int32_t sndbufused;
  u_int32_t rcvbufsize;
  u_int32_t rcvbufused;
  u_int32_t txunacked;
  u_int32_t txwindow;
  u_int32_t txcwindow;
  u_int32_t traffic_class;
  u_int32_t traffic_mgt_flags;
  u_int32_t pid;
  u_int32_t epid;
  nstat_tcp_descriptor::$C2B0359D572B93F45363770D3E982B96 local;
  nstat_tcp_descriptor::$C2B0359D572B93F45363770D3E982B96 remote;
  char cc_algo[16];
  char pname[64];
  uuid_t uuid;
  uuid_t euuid;
  uuid_t vuuid;
  nstat_tcp_descriptor::$7EF3DF13ED8FC9D923AFA9381A39CD47 _anon_0;
  uint16_t ifnet_properties;
  u_int8_t reserved[6];
};

/* 6531 */
union nstat_tcp_descriptor::$C2B0359D572B93F45363770D3E982B96
{
  sockaddr_in v4;
  sockaddr_in6 v6;
};

/* 6532 */
union nstat_tcp_descriptor::$7EF3DF13ED8FC9D923AFA9381A39CD47
{
  tcp_conn_status connstatus;
  uint8_t_0 __pad_connstatus[4];
};

/* 6533 */
typedef nstat_route_add_param nstat_route_add_param_0;

/* 6534 */
struct nstat_route_add_param
{
  nstat_route_add_param::$C2B0359D572B93F45363770D3E982B96 dst;
  nstat_route_add_param::$C2B0359D572B93F45363770D3E982B96 mask;
  u_int32_t ifindex;
};

/* 6535 */
union nstat_route_add_param::$C2B0359D572B93F45363770D3E982B96
{
  sockaddr_in v4;
  sockaddr_in6 v6;
};

/* 6536 */
typedef nstat_route_descriptor nstat_route_descriptor_0;

/* 6537 */
struct nstat_route_descriptor
{
  u_int64_t id;
  u_int64_t parent_id;
  u_int64_t gateway_id;
  nstat_route_descriptor::$EBEAC5D8C5C3356086388E13E2B2084F dst;
  nstat_route_descriptor::$EBEAC5D8C5C3356086388E13E2B2084F mask;
  nstat_route_descriptor::$EBEAC5D8C5C3356086388E13E2B2084F gateway;
  u_int32_t ifindex;
  u_int32_t flags;
  u_int8_t reserved[4];
};

/* 6538 */
union nstat_route_descriptor::$EBEAC5D8C5C3356086388E13E2B2084F
{
  sockaddr_in v4;
  sockaddr_in6 v6;
  sockaddr sa;
};

/* 6539 */
struct align_header
{
  u_int32_t offset;
  u_int32_t length;
};

/* 6540 */
typedef nstat_tcp_add_param nstat_tcp_add_param_0;

/* 6541 */
struct nstat_tcp_add_param
{
  nstat_tcp_add_param::$C2B0359D572B93F45363770D3E982B96 local;
  nstat_tcp_add_param::$C2B0359D572B93F45363770D3E982B96 remote;
};

/* 6542 */
union nstat_tcp_add_param::$C2B0359D572B93F45363770D3E982B96
{
  sockaddr_in v4;
  sockaddr_in6 v6;
};

/* 6543 */
struct tcpcb
{
  tsegqe_head t_segq;
  int t_dupacks;
  int t_state;
  uint32_t_0 t_timer[8];
  tcptimerentry tentry;
  inpcb *t_inpcb;
  uint32_t_0 t_flags;
  tcp_seq snd_una;
  tcp_seq snd_max;
  tcp_seq snd_nxt;
  tcp_seq snd_up;
  tcp_seq snd_wl1;
  tcp_seq snd_wl2;
  tcp_seq iss;
  tcp_seq irs;
  tcp_seq rcv_nxt;
  tcp_seq rcv_adv;
  u_int32_t rcv_wnd;
  tcp_seq rcv_up;
  u_int32_t snd_wnd;
  u_int32_t snd_cwnd;
  u_int32_t snd_ssthresh;
  tcp_seq snd_recover;
  u_int32_t t_maxopd;
  u_int32_t t_rcvtime;
  u_int32_t t_sndtime;
  u_int32_t t_starttime;
  int t_rtttime;
  tcp_seq t_rtseq;
  u_int32_t rfbuf_ts;
  u_int32_t rfbuf_cnt;
  int t_rxtcur;
  u_int t_maxseg;
  int t_srtt;
  int t_rttvar;
  u_int64_t t_accsleep_ms;
  u_int16_t t_reassqlen;
  u_int16_t t_rxtshift;
  u_int32_t t_rttmin;
  u_int32_t t_rttbest;
  u_int32_t t_rttcur;
  u_int32_t t_rttupdated;
  u_int32_t t_rxt_conndroptime;
  u_int32_t t_rxtstart;
  u_int32_t max_sndwnd;
  int t_softerror;
  char t_oobflags;
  char t_iobc;
  u_int8_t snd_scale;
  u_int8_t rcv_scale;
  u_int8_t request_r_scale;
  u_int8_t requested_s_scale;
  u_int8_t tcp_cc_index;
  u_int8_t t_adaptive_rtimo;
  u_int8_t t_adaptive_wtimo;
  u_int8_t t_stretchack_delayed;
  u_int16_t t_early_rexmt_count;
  u_int32_t t_early_rexmt_win;
  u_int32_t ts_recent;
  u_int32_t ts_recent_age;
  tcp_seq last_ack_sent;
  u_int32_t t_bytes_acked;
  int t_lastchain;
  u_int16_t t_unacksegs;
  u_int8_t t_rexmtthresh;
  u_int8_t t_rtimo_probes;
  u_int32_t t_persist_timeout;
  u_int32_t t_persist_stop;
  u_int32_t t_notsent_lowat;
  u_int32_t rcv_unackwin;
  u_int32_t rcv_by_unackwin;
  u_int32_t rcv_nostrack_ts;
  u_int32_t rcv_nostrack_pkts;
  u_int16_t rcv_waitforss;
  u_int16_t ecn_flags;
  u_int32_t t_ecn_recv_ce;
  u_int32_t t_ecn_recv_cwr;
  u_int32_t snd_cwnd_prev;
  u_int32_t snd_ssthresh_prev;
  tcp_seq snd_recover_prev;
  int t_srtt_prev;
  int t_rttvar_prev;
  u_int32_t t_badrexmt_time;
  u_int16_t t_reorderwin;
  int16_t snd_numholes;
  tcp_seq sack_newdata;
  sackhole_head snd_holes;
  tcp_seq snd_fack;
  int rcv_numsacks;
  sackblk sackblks[6];
  sackhint sackhint;
  mbuf *t_pktlist_head;
  mbuf *t_pktlist_tail;
  u_int32_t t_pktlist_sentlen;
  u_int32_t t_keepidle;
  u_int32_t t_keepinit;
  u_int32_t t_keepintvl;
  u_int32_t t_keepcnt;
  u_int32_t tso_max_segment_size;
  u_int16_t t_pmtud_lastseg_size;
  u_int16_t t_pmtud_saved_maxopd;
  u_int32_t t_pmtud_start_ts;
  tcpcb::$0DA42B16401CDFB0D8E771DD0F9F4ECD t_stat;
  u_int8_t t_notify_ack_count;
  u_int8_t t_ecn_recv_ce_pkt;
  u_int16_t t_cached_maxopd;
  uint32_t_0 bg_ssthresh;
  uint32_t_0 t_flagsext;
  uint32_t_0 iaj_rcv_ts;
  uint16_t iaj_size;
  uint8_t_0 iaj_small_pkt;
  uint8_t_0 t_pipeack_ind;
  uint16_t iaj_pktcnt;
  uint16_t acc_iaj;
  uint32_t_0 avg_iaj;
  uint32_t_0 std_dev_iaj;
  bwmeas *t_bwmeas;
  uint32_t_0 t_lropktlen;
  tcp_seq t_idleat;
  tcpcb::$8F829F568656896097508A3BD6180E01 t_twentry;
  tcp_ccstate *t_ccstate;
  tcp_seq t_tlphighrxt;
  u_int32_t t_tlpstart;
  tcp_seq t_dsack_lseq;
  tcp_seq t_dsack_rseq;
  tcp_rxt_seghead t_rxt_segments;
  tcp_seq t_dsack_lastuna;
  u_int32_t t_pipeack_sample[3];
  tcp_seq t_pipeack_lastuna;
  u_int32_t t_pipeack;
  u_int32_t t_lossflightsize;
  u_int32_t t_mpflags;
  tcp_seq t_mpuna;
  mptcb *t_mptcb;
  mptsub *t_mpsub;
  mpt_dsn_map t_rcv_map;
  u_int8_t t_local_aid;
  u_int8_t t_rem_aid;
  u_int8_t t_mprxtshift;
  u_int8_t t_tfo_flags;
  u_int16_t t_tfo_stats;
  u_int8_t t_tfo_probes;
  u_int8_t t_tfo_probe_state;
  u_int32_t t_rcvoopack;
  u_int32_t t_pawsdrop;
  u_int32_t t_sack_recovery_episode;
  u_int32_t t_reordered_pkts;
  u_int32_t t_dsack_sent;
  u_int32_t t_dsack_recvd;
  tcpcb::$22E4329EAC8FB91F7B0B06B0A4E2DF2D t_notify_ack;
  u_int32_t t_recv_throttle_ts;
  u_int32_t t_rxt_minimum_timeout;
  uint32_t_0 t_challengeack_last;
  uint32_t_0 t_challengeack_count;
};

/* 6544 */
struct tsegqe_head
{
  tseg_qent *lh_first;
};

/* 6545 */
struct tseg_qent
{
  tseg_qent::$75CE538ED536A1D6FD88FB463061DE9F tqe_q;
  int tqe_len;
  tcphdr *tqe_th;
  mbuf *tqe_m;
};

/* 6546 */
struct tseg_qent::$75CE538ED536A1D6FD88FB463061DE9F
{
  tseg_qent *le_next;
  tseg_qent **le_prev;
};

/* 6547 */
struct __attribute__((aligned(8))) tcptimerentry
{
  tcptimerentry::$3D752AE75FE53B91E8A1EDDC8917CDC5 le;
  uint32_t_0 timer_start;
  uint16_t index;
  uint16_t mode;
  uint32_t_0 runtime;
};

/* 6548 */
struct tcptimerentry::$3D752AE75FE53B91E8A1EDDC8917CDC5
{
  tcptimerentry *le_next;
  tcptimerentry **le_prev;
};

/* 6549 */
struct sackhole_head
{
  sackhole *tqh_first;
  sackhole **tqh_last;
};

/* 6550 */
struct sackhole
{
  tcp_seq start;
  tcp_seq end;
  tcp_seq rxmit;
  u_int32_t rxmit_start;
  sackhole::$0735B4825BDD95F05A1350F6A23E3460 scblink;
};

/* 6551 */
struct sackhole::$0735B4825BDD95F05A1350F6A23E3460
{
  sackhole *tqe_next;
  sackhole **tqe_prev;
};

/* 6552 */
struct sackblk
{
  tcp_seq start;
  tcp_seq end;
};

/* 6553 */
struct __attribute__((aligned(8))) sackhint
{
  sackhole *nexthole;
  int sack_bytes_rexmit;
};

/* 6554 */
struct tcpcb::$0DA42B16401CDFB0D8E771DD0F9F4ECD
{
  u_int32_t rxduplicatebytes;
  u_int32_t rxoutoforderbytes;
  u_int32_t txretransmitbytes;
  u_int8_t synrxtshift;
  u_int8_t unused;
  u_int16_t unused_pad_to_8;
  u_int32_t rxmitpkts;
};

/* 6555 */
struct bwmeas
{
  tcp_seq bw_start;
  uint32_t_0 bw_ts;
  uint32_t_0 bw_size;
  uint32_t_0 bw_minsizepkts;
  uint32_t_0 bw_maxsizepkts;
  uint32_t_0 bw_minsize;
  uint32_t_0 bw_maxsize;
  uint32_t_0 bw_sndbw;
  uint32_t_0 bw_sndbw_max;
  uint32_t_0 bw_rcvbw_max;
};

/* 6556 */
struct tcpcb::$8F829F568656896097508A3BD6180E01
{
  tcpcb *tqe_next;
  tcpcb **tqe_prev;
};

/* 6557 */
struct tcp_ccstate
{
  tcp_ccstate::$08749AA247E5B623C0EF2C196381081B __u__;
};

/* 6558 */
union tcp_ccstate::$08749AA247E5B623C0EF2C196381081B
{
  tcp_cubic_state _cubic_state_;
};

/* 6559 */
struct tcp_cubic_state
{
  u_int32_t tc_last_max;
  u_int32_t tc_epoch_start;
  u_int32_t tc_origin_point;
  u_int32_t tc_tcp_win;
  u_int32_t tc_tcp_bytes_acked;
  u_int32_t tc_target_win;
  u_int32_t tc_avg_lastmax;
  u_int32_t tc_mean_deviation;
  float tc_epoch_period;
};

/* 6560 */
struct tcp_rxt_seghead
{
  tcp_rxt_seg *slh_first;
};

/* 6561 */
struct tcp_rxt_seg
{
  tcp_seq rx_start;
  tcp_seq rx_end;
  u_int16_t rx_count;
  u_int16_t rx_flags;
  tcp_rxt_seg::$424C5C3A0427FD0029405CEB1DBF4B91 rx_link;
};

/* 6562 */
struct tcp_rxt_seg::$424C5C3A0427FD0029405CEB1DBF4B91
{
  tcp_rxt_seg *sle_next;
};

/* 6563 */
struct __attribute__((aligned(8))) mptcb
{
  mptses *mpt_mpte;
  mptcp_state_t mpt_state;
  u_int32_t mpt_flags;
  u_int32_t mpt_version;
  int mpt_softerror;
  mptcp_key_t mpt_localkey;
  mptcp_key_t mpt_remotekey;
  mptcp_token_t mpt_localtoken;
  mptcp_token_t mpt_remotetoken;
  int mpt_rxtshift;
  u_int32_t mpt_rxtstart;
  u_int64_t mpt_rtseq;
  u_int32_t mpt_timer_vals;
  u_int32_t mpt_timewait;
  u_int64_t mpt_snduna;
  u_int64_t mpt_sndnxt;
  u_int64_t mpt_sndmax;
  u_int64_t mpt_local_idsn;
  u_int32_t mpt_sndwnd;
  u_int64_t mpt_sndwl1;
  u_int64_t mpt_sndwl2;
  u_int64_t mpt_rcvnxt;
  u_int64_t mpt_remote_idsn;
  u_int32_t mpt_rcvwnd;
  mptcb::$2E56B2518DC8B09911124CBCC5922BAD mpt_subauth_list;
  u_int64_t mpt_dsn_at_csum_fail;
  u_int32_t mpt_ssn_at_csum_fail;
  int32_t mpt_gc_ticks;
  u_int32_t mpt_notsent_lowat;
  u_int32_t mpt_peer_version;
  tsegqe_head mpt_segq;
  u_int16_t mpt_reassqlen;
};

/* 6564 */
struct __attribute__((aligned(8))) mptsub
{
  mptsub::$55BB275FF7178049162E89138B769C56 mpts_entry;
  uint32_t_0 mpts_refcnt;
  uint32_t_0 mpts_flags;
  uint32_t_0 mpts_evctl;
  sae_connid_t mpts_connid;
  int mpts_oldintval;
  mptses *mpts_mpte;
  socket *mpts_socket;
  sockaddr *mpts_src;
  mptsub::$FAB93303023E9275B54822C9BD02C0D7 _anon_0;
  u_int32_t mpts_rel_seq;
  u_int32_t mpts_iss;
  u_int32_t mpts_ifscope;
  uint32_t_0 mpts_probesoon;
  uint32_t_0 mpts_probecnt;
  uint32_t_0 mpts_maxseg;
};

/* 6565 */
struct __attribute__((aligned(8))) mpt_dsn_map
{
  uint64_t_0 mpt_dsn;
  uint32_t_0 mpt_sseq;
  uint16_t mpt_len;
  uint16_t mpt_csum;
  uint8_t_0 mpt_dfin;
};

/* 6566 */
struct tcpcb::$22E4329EAC8FB91F7B0B06B0A4E2DF2D
{
  tcp_notify_ack_marker *slh_first;
};

/* 6567 */
struct tcp_notify_ack_marker
{
  tcp_seq notify_snd_una;
  tcp_notify_ack_id_t notify_id;
  tcp_notify_ack_marker::$D8FFB7C93FC4CB606A1DF29EEC04AF59 notify_next;
};

/* 6568 */
typedef u_int32_t tcp_notify_ack_id_t;

/* 6569 */
struct tcp_notify_ack_marker::$D8FFB7C93FC4CB606A1DF29EEC04AF59
{
  tcp_notify_ack_marker *sle_next;
};

/* 6570 */
typedef nstat_ifnet_add_param nstat_ifnet_add_param_0;

/* 6571 */
struct nstat_ifnet_add_param
{
  u_int64_t threshold;
  u_int32_t ifindex;
  u_int8_t reserved[4];
};

/* 6572 */
typedef nstat_msg_src_description nstat_msg_src_description_0;

/* 6573 */
struct nstat_msg_src_description
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
  nstat_event_flags_t event_flags;
  nstat_provider_id_t provider;
  u_int8_t reserved[4];
  u_int8_t data[];
};

/* 6574 */
typedef nstat_ifnet_descriptor nstat_ifnet_descriptor_0;

/* 6575 */
struct nstat_ifnet_descriptor
{
  u_int64_t threshold;
  u_int32_t ifindex;
  nstat_ifnet_desc_link_status_0 link_status;
  unsigned int type;
  char description[128];
  char name[17];
  u_int8_t reserved[3];
};

/* 6576 */
typedef nstat_ifnet_desc_link_status nstat_ifnet_desc_link_status_0;

/* 6577 */
struct nstat_ifnet_desc_link_status
{
  u_int32_t link_status_type;
  nstat_ifnet_desc_link_status::$3768ED046E0800FDE5C545176637C5C0 u;
};

/* 6578 */
union nstat_ifnet_desc_link_status::$3768ED046E0800FDE5C545176637C5C0
{
  nstat_ifnet_desc_cellular_status_0 cellular;
  nstat_ifnet_desc_wifi_status_0 wifi;
};

/* 6579 */
typedef nstat_ifnet_desc_cellular_status nstat_ifnet_desc_cellular_status_0;

/* 6580 */
struct nstat_ifnet_desc_cellular_status
{
  u_int32_t valid_bitmask;
  u_int32_t link_quality_metric;
  u_int32_t ul_effective_bandwidth;
  u_int32_t ul_max_bandwidth;
  u_int32_t ul_min_latency;
  u_int32_t ul_effective_latency;
  u_int32_t ul_max_latency;
  u_int32_t ul_retxt_level;
  u_int32_t ul_bytes_lost;
  u_int32_t ul_min_queue_size;
  u_int32_t ul_avg_queue_size;
  u_int32_t ul_max_queue_size;
  u_int32_t dl_effective_bandwidth;
  u_int32_t dl_max_bandwidth;
  u_int32_t config_inactivity_time;
  u_int32_t config_backoff_time;
  u_int16_t mss_recommended;
  u_int8_t reserved[2];
};

/* 6581 */
typedef nstat_ifnet_desc_wifi_status nstat_ifnet_desc_wifi_status_0;

/* 6582 */
struct nstat_ifnet_desc_wifi_status
{
  u_int32_t valid_bitmask;
  u_int32_t link_quality_metric;
  u_int32_t ul_effective_bandwidth;
  u_int32_t ul_max_bandwidth;
  u_int32_t ul_min_latency;
  u_int32_t ul_effective_latency;
  u_int32_t ul_max_latency;
  u_int32_t ul_retxt_level;
  u_int32_t ul_bytes_lost;
  u_int32_t ul_error_rate;
  u_int32_t dl_effective_bandwidth;
  u_int32_t dl_max_bandwidth;
  u_int32_t dl_min_latency;
  u_int32_t dl_effective_latency;
  u_int32_t dl_max_latency;
  u_int32_t dl_error_rate;
  u_int32_t config_frequency;
  u_int32_t config_multicast_rate;
  u_int32_t scan_count;
  u_int32_t scan_duration;
};

/* 6583 */
typedef nstat_sysinfo_keyval nstat_sysinfo_keyval_0;

/* 6584 */
struct nstat_sysinfo_keyval
{
  u_int32_t nstat_sysinfo_key;
  u_int32_t nstat_sysinfo_flags;
  nstat_sysinfo_keyval::$3AC461C5D566E6E78A183961B5D3DF27 u;
  u_int32_t nstat_sysinfo_valsize;
  u_int8_t reserved[4];
};

/* 6585 */
union nstat_sysinfo_keyval::$3AC461C5D566E6E78A183961B5D3DF27
{
  int64_t nstat_sysinfo_scalar;
  double nstat_sysinfo_distribution;
  u_int8_t nstat_sysinfo_string[24];
};

/* 6586 */
typedef nstat_msg_src_update nstat_msg_src_update_0;

/* 6587 */
struct nstat_msg_src_update
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
  nstat_event_flags_t event_flags;
  nstat_counts_0 counts;
  nstat_provider_id_t provider;
  u_int8_t reserved[4];
  u_int8_t data[];
};

/* 6588 */
typedef nstat_src nstat_src_0;

/* 6589 */
union nstat_route_lookup::$A305C516848B0A4377FDE67E2506B676
{
  sockaddr *sa;
  const sockaddr *const_sa;
};

/* 6590 */
typedef nstat_msg_add_src nstat_msg_add_src_req;

/* 6591 */
struct nstat_msg_add_src
{
  nstat_msg_hdr_0 hdr;
  nstat_provider_id_t provider;
  u_int8_t reserved[4];
  u_int8_t param[];
};

/* 6592 */
typedef nstat_msg_query_src nstat_msg_query_src_req;

/* 6593 */
struct nstat_msg_query_src
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
};

/* 6594 */
struct nstat_msg_error
{
  nstat_msg_hdr_0 hdr;
  u_int32_t error;
  u_int8_t reserved[4];
};

/* 6595 */
typedef nstat_msg_get_src_description nstat_msg_get_src_description_0;

/* 6596 */
struct nstat_msg_get_src_description
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
};

/* 6597 */
typedef nstat_msg_set_filter nstat_msg_set_filter_0;

/* 6598 */
struct nstat_msg_set_filter
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
  u_int32_t filter;
  u_int8_t reserved[4];
};

/* 6599 */
typedef nstat_msg_src_counts nstat_msg_src_counts_0;

/* 6600 */
struct nstat_msg_src_counts
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
  nstat_event_flags_t event_flags;
  nstat_counts_0 counts;
};

/* 6601 */
typedef nstat_msg_src_removed nstat_msg_src_removed_0;

/* 6602 */
struct nstat_msg_src_removed
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
};

/* 6603 */
struct nstat_sysinfo_ifnet_ecn_stats
{
  u_int32_t ifnet_proto;
  u_int32_t ifnet_type;
  if_tcp_ecn_stat ecn_stat;
};

/* 6604 */
struct nstat_sysinfo_data
{
  uint32_t_0 flags;
  uint32_t_0 unsent_data_cnt;
  nstat_sysinfo_data::$0956FED8451E7287C893BEC835F7440B u;
};

/* 6605 */
union nstat_sysinfo_data::$0956FED8451E7287C893BEC835F7440B
{
  nstat_sysinfo_mbuf_stats_0 mb_stats;
  nstat_sysinfo_tcp_stats_0 tcp_stats;
  nstat_sysinfo_ifnet_ecn_stats_0 ifnet_ecn_stats;
  nstat_sysinfo_lim_stats_0 lim_stats;
  nstat_sysinfo_net_api_stats_0 net_api_stats;
};

/* 6606 */
typedef nstat_sysinfo_mbuf_stats nstat_sysinfo_mbuf_stats_0;

/* 6607 */
struct nstat_sysinfo_mbuf_stats
{
  u_int32_t total_256b;
  u_int32_t total_2kb;
  u_int32_t total_4kb;
  u_int32_t total_16kb;
  u_int32_t sbmb_total;
  u_int32_t sb_atmbuflimit;
  u_int32_t draincnt;
  u_int32_t memreleased;
  u_int32_t sbmb_floor;
};

/* 6608 */
typedef nstat_sysinfo_tcp_stats nstat_sysinfo_tcp_stats_0;

/* 6609 */
struct nstat_sysinfo_tcp_stats
{
  u_int32_t ipv4_avgrtt;
  u_int32_t ipv6_avgrtt;
  u_int32_t send_plr;
  u_int32_t recv_plr;
  u_int32_t send_tlrto_rate;
  u_int32_t send_reorder_rate;
  u_int32_t connection_attempts;
  u_int32_t connection_accepts;
  u_int32_t ecn_client_enabled;
  u_int32_t ecn_server_enabled;
  u_int32_t ecn_client_setup;
  u_int32_t ecn_server_setup;
  u_int32_t ecn_client_success;
  u_int32_t ecn_server_success;
  u_int32_t ecn_not_supported;
  u_int32_t ecn_lost_syn;
  u_int32_t ecn_lost_synack;
  u_int32_t ecn_recv_ce;
  u_int32_t ecn_recv_ece;
  u_int32_t ecn_sent_ece;
  u_int32_t ecn_conn_recv_ce;
  u_int32_t ecn_conn_recv_ece;
  u_int32_t ecn_conn_plnoce;
  u_int32_t ecn_conn_pl_ce;
  u_int32_t ecn_conn_nopl_ce;
  u_int32_t ecn_fallback_synloss;
  u_int32_t ecn_fallback_reorder;
  u_int32_t ecn_fallback_ce;
  u_int32_t tfo_syn_data_rcv;
  u_int32_t tfo_cookie_req_rcv;
  u_int32_t tfo_cookie_sent;
  u_int32_t tfo_cookie_invalid;
  u_int32_t tfo_cookie_req;
  u_int32_t tfo_cookie_rcv;
  u_int32_t tfo_syn_data_sent;
  u_int32_t tfo_syn_data_acked;
  u_int32_t tfo_syn_loss;
  u_int32_t tfo_blackhole;
  u_int32_t tfo_cookie_wrong;
  u_int32_t tfo_no_cookie_rcv;
  u_int32_t tfo_heuristics_disable;
  u_int32_t tfo_sndblackhole;
  u_int32_t mptcp_handover_attempt;
  u_int32_t mptcp_interactive_attempt;
  u_int32_t mptcp_aggregate_attempt;
  u_int32_t mptcp_fp_handover_attempt;
  u_int32_t mptcp_fp_interactive_attempt;
  u_int32_t mptcp_fp_aggregate_attempt;
  u_int32_t mptcp_heuristic_fallback;
  u_int32_t mptcp_fp_heuristic_fallback;
  u_int32_t mptcp_handover_success_wifi;
  u_int32_t mptcp_handover_success_cell;
  u_int32_t mptcp_interactive_success;
  u_int32_t mptcp_aggregate_success;
  u_int32_t mptcp_fp_handover_success_wifi;
  u_int32_t mptcp_fp_handover_success_cell;
  u_int32_t mptcp_fp_interactive_success;
  u_int32_t mptcp_fp_aggregate_success;
  u_int32_t mptcp_handover_cell_from_wifi;
  u_int32_t mptcp_handover_wifi_from_cell;
  u_int32_t mptcp_interactive_cell_from_wifi;
  u_int32_t mptcp_back_to_wifi;
  u_int64_t mptcp_handover_cell_bytes;
  u_int64_t mptcp_interactive_cell_bytes;
  u_int64_t mptcp_aggregate_cell_bytes;
  u_int64_t mptcp_handover_all_bytes;
  u_int64_t mptcp_interactive_all_bytes;
  u_int64_t mptcp_aggregate_all_bytes;
  u_int32_t mptcp_wifi_proxy;
  u_int32_t mptcp_cell_proxy;
  u_int32_t mptcp_triggered_cell;
  u_int32_t _padding;
};

/* 6610 */
typedef nstat_sysinfo_ifnet_ecn_stats nstat_sysinfo_ifnet_ecn_stats_0;

/* 6611 */
typedef nstat_sysinfo_lim_stats nstat_sysinfo_lim_stats_0;

/* 6612 */
struct nstat_sysinfo_lim_stats
{
  u_int8_t ifnet_signature[24];
  u_int32_t ifnet_siglen;
  u_int32_t ifnet_type;
  if_lim_perf_stat lim_stat;
};

/* 6613 */
typedef nstat_sysinfo_net_api_stats nstat_sysinfo_net_api_stats_0;

/* 6614 */
struct nstat_sysinfo_net_api_stats
{
  u_int32_t report_interval;
  u_int32_t _padding;
  net_api_stats net_api_stats;
};

/* 6615 */
typedef nstat_sysinfo_data nstat_sysinfo_data_0;

/* 6616 */
typedef nstat_msg_sysinfo_counts nstat_msg_sysinfo_counts_0;

/* 6617 */
struct nstat_msg_sysinfo_counts
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
  nstat_sysinfo_counts_0 counts;
};

/* 6618 */
typedef nstat_sysinfo_counts nstat_sysinfo_counts_0;

/* 6619 */
struct nstat_sysinfo_counts
{
  u_int32_t nstat_sysinfo_len;
  u_int32_t pad;
  u_int8_t nstat_sysinfo_keyvals[];
};

/* 6620 */
union nstat_tcpudp_lookup::$9773A97C3001C4278BDFF9CCEA8BCBAC
{
  const in6_addr *in6c;
  in6_addr *in6;
};

/* 6621 */
struct xtcpprogress_indicators
{
  u_int32_t xp_numflows;
  u_int32_t xp_conn_probe_fails;
  u_int32_t xp_read_probe_fails;
  u_int32_t xp_write_probe_fails;
  u_int32_t xp_recentflows;
  u_int32_t xp_recentflows_unacked;
  u_int64_t xp_recentflows_rxbytes;
  u_int64_t xp_recentflows_txbytes;
  u_int64_t xp_recentflows_rxooo;
  u_int64_t xp_recentflows_rxdup;
  u_int64_t xp_recentflows_retx;
  u_int64_t xp_reserved1;
  u_int64_t xp_reserved2;
  u_int64_t xp_reserved3;
  u_int64_t xp_reserved4;
};

/* 6622 */
struct tcpprogressreq
{
  u_int64_t ifindex;
  u_int64_t recentflow_maxduration;
  u_int64_t xp_reserved1;
  u_int64_t xp_reserved2;
};

/* 6623 */
typedef nstat_msg_src_added nstat_msg_src_added_0;

/* 6624 */
struct nstat_msg_src_added
{
  nstat_msg_hdr_0 hdr;
  nstat_src_ref_t srcref;
  nstat_provider_id_t provider;
  u_int8_t reserved[4];
};

/* 6625 */
typedef net_perf net_perf_t;

/* 6626 */
struct __attribute__((aligned(8))) net_perf
{
  uint64_t_0 np_total_pkts;
  uint64_t_0 np_total_usecs;
  uint64_t_0 np_hist1;
  uint64_t_0 np_hist2;
  uint64_t_0 np_hist3;
  uint64_t_0 np_hist4;
  uint64_t_0 np_hist5;
  uint8_t_0 np_hist_bars[4];
};

/* 6627 */
struct gifhead
{
  gif_softc *tqh_first;
  gif_softc **tqh_last;
};

/* 6628 */
struct gif_softc
{
  ifnet_t gif_if;
  sockaddr *gif_psrc;
  sockaddr *gif_pdst;
  protocol_family_t gif_proto;
  gif_softc::$C3975D6B5B951304AC670DBEEE1C7025 gifsc_gifscr;
  int gif_flags;
  int gif_called;
  const encaptab *encap_cookie4;
  const encaptab *encap_cookie6;
  gif_softc::$1E2B0BA3944955918E8C58B2F7716848 gif_link;
  bpf_tap_mode tap_mode;
  bpf_packet_func tap_callback;
  char gif_ifname[16];
  lck_mtx_t gif_lock;
};

/* 6629 */
union gif_softc::$C3975D6B5B951304AC670DBEEE1C7025
{
  route gifscr_ro;
  route_in6 gifscr_ro6;
};

/* 6630 */
struct encaptab
{
  encaptab::$C580B9FD129909E8333FD82587A9C83F chain;
  int af;
  int proto;
  sockaddr_storage src;
  sockaddr_storage srcmask;
  sockaddr_storage dst;
  sockaddr_storage dstmask;
  int (*func)(const mbuf *, int, int, void *);
  const protosw *psw;
  void *arg;
};

/* 6631 */
struct encaptab::$C580B9FD129909E8333FD82587A9C83F
{
  encaptab *le_next;
  encaptab **le_prev;
};

/* 6632 */
struct gif_softc::$1E2B0BA3944955918E8C58B2F7716848
{
  gif_softc *tqe_next;
  gif_softc **tqe_prev;
};

/* 6633 */
struct ip6protosw
{
  ip6protosw::$021826E2965D78E69C8F358DB5956030 pr_entry;
  domain *pr_domain;
  protosw *pr_protosw;
  u_int16_t pr_type;
  u_int16_t pr_protocol;
  u_int32_t pr_flags;
  int (*pr_input)(mbuf **, int *, int);
  int (*pr_output)(mbuf *, socket *, sockaddr_in6 *, mbuf *);
  void (*pr_ctlinput)(int, sockaddr *, void *, ifnet *);
  int (*pr_ctloutput)(socket *, sockopt_0 *);
  pr_usrreqs *pr_usrreqs;
  void (*pr_init)(ip6protosw *, domain *);
  void (*pr_drain)(void);
  int (*pr_sysctl)(void);
  int (*pr_lock)(socket *, int, void *);
  int (*pr_unlock)(socket *, int, void *);
  lck_mtx_t *(*pr_getlock)(socket *, int);
  ip6protosw::$CCE26F19DBDD725D9D5747443CBC5977 pr_filter_head;
  protosw_old *pr_old;
};

/* 6634 */
struct ip6protosw::$021826E2965D78E69C8F358DB5956030
{
  ip6protosw *tqe_next;
  ip6protosw **tqe_prev;
};

/* 6635 */
struct ip6protosw::$CCE26F19DBDD725D9D5747443CBC5977
{
  socket_filter *tqh_first;
  socket_filter **tqh_last;
};

/* 6636 */
struct stf_softc
{
  ifnet_t sc_if;
  u_int32_t sc_protocol_family;
  stf_softc::$6184D3798283E3C0D5E94F23486FDC2D __sc_ro46;
  lck_mtx_t sc_ro_mtx;
  const encaptab *encap_cookie;
  bpf_tap_mode tap_mode;
  bpf_packet_func tap_callback;
};

/* 6637 */
union stf_softc::$6184D3798283E3C0D5E94F23486FDC2D
{
  route __sc_ro4;
  route_in6 __sc_ro6;
};

/* 6638 */
struct ip_out_args
{
  unsigned int ipoa_boundif;
  flowadv ipoa_flowadv;
  u_int32_t ipoa_flags;
  u_int32_t ipoa_retflags;
  int ipoa_sotc;
  int ipoa_netsvctype;
};

/* 6639 */
struct net_port_entry_list
{
  net_port_entry *slh_first;
};

/* 6640 */
struct __attribute__((aligned(8))) net_port_entry
{
  net_port_entry::$E130063F5343B5637CAA95166354BFFD npe_next;
  net_port_info npe_npi;
};

/* 6641 */
struct net_port_entry::$E130063F5343B5637CAA95166354BFFD
{
  net_port_entry *sle_next;
};

/* 6642 */
struct __attribute__((aligned(4))) net_port_info
{
  uint16_t npi_if_index;
  uint16_t npi_flags;
  timeval32 npi_timestamp;
  uuid_t npi_flow_uuid;
  in_port_t npi_local_port;
  in_port_t npi_foreign_port;
  in_addr_4_6 npi_local_addr_;
  in_addr_4_6 npi_foreign_addr_;
  pid_t npi_owner_pid;
  pid_t npi_effective_pid;
  char npi_owner_pname[17];
  char npi_effective_pname[17];
};

/* 6643 */
union in_addr_4_6
{
  in_addr _in_a_4;
  in6_addr _in_a_6;
};

/* 6644 */
struct xnpigen
{
  uint32_t_0 xng_len;
  uint32_t_0 xng_gen;
  uint32_t_0 xng_npi_count;
  uint32_t_0 xng_npi_size;
  uuid_t xng_wakeuuid;
};

/* 6645 */
struct __attribute__((aligned(4))) ns_flow_info
{
  uuid_t nfi_rule_id;
  ifnet *nfi_ifp;
  sockaddr_in_4_6 nfi_laddr;
  sockaddr_in_4_6 nfi_faddr;
  uint8_t_0 nfi_protocol;
  uint8_t_0 nfi_pad[3];
  pid_t nfi_owner_pid;
  pid_t nfi_effective_pid;
  char nfi_owner_name[17];
  char nfi_effective_name[17];
};

/* 6646 */
enum if_low_power_ev_code_t : __int32
{
  IF_LOW_POWER_EVENT_OFF = 0x0,
  IF_LOW_POWER_EVENT_ON = 0x1,
};

/* 6647 */
struct kev_dl_low_power_mode
{
  net_event_data link_data;
  int low_power_event;
};

/* 6648 */
typedef u_int32_t ifnet_offload_t;

/* 6649 */
struct ifnet_get_address_list_family_internal::$D07ADDB22E0CA4FC48BEAB42749FB1C4
{
  ifnet_addr_list *slh_first;
};

/* 6650 */
struct ifnet_addr_list
{
  ifnet_addr_list::$2CB6A78C240474FA73E718BE71A0DC9A ifal_le;
  ifaddr *ifal_ifa;
};

/* 6651 */
struct ifnet_addr_list::$2CB6A78C240474FA73E718BE71A0DC9A
{
  ifnet_addr_list *sle_next;
};

/* 6652 */
struct ifnet_list_get_common::$D17F5750C7C1DB196E315F096EDC91BB
{
  ifnet_list *slh_first;
};

/* 6653 */
struct ifnet_list
{
  ifnet_list::$154FA3022426DEF16773312171F33BBE ifl_le;
  ifnet *ifl_ifp;
};

/* 6654 */
struct ifnet_list::$154FA3022426DEF16773312171F33BBE
{
  ifnet_list *sle_next;
};

/* 6655 */
struct __attribute__((aligned(8))) ifnet_init_params
{
  const void *uniqueid;
  u_int32_t uniqueid_len;
  const char *name;
  u_int32_t unit;
  ifnet_family_t family;
  u_int32_t type;
  ifnet_output_func output;
  ifnet_demux_func demux;
  ifnet_add_proto_func add_proto;
  ifnet_del_proto_func del_proto;
  ifnet_check_multi check_multi;
  ifnet_framer_func framer;
  void *softc;
  ifnet_ioctl_func ioctl;
  ifnet_set_bpf_tap set_bpf_tap;
  ifnet_detached_func detach;
  ifnet_event_func event;
  const void *broadcast_addr;
  u_int32_t broadcast_len;
};

/* 6656 */
struct ifnet_stats_param
{
  u_int64_t packets_in;
  u_int64_t bytes_in;
  u_int64_t multicasts_in;
  u_int64_t errors_in;
  u_int64_t packets_out;
  u_int64_t bytes_out;
  u_int64_t multicasts_out;
  u_int64_t errors_out;
  u_int64_t collisions;
  u_int64_t dropped;
  u_int64_t no_protocol;
};

/* 6657 */
struct ifnet_clone_params
{
  const char *ifc_name;
  ifnet_clone_create_func ifc_create;
  ifnet_clone_destroy_func ifc_destroy;
};

/* 6658 */
typedef errno_t (*ifnet_clone_create_func)(if_clone_t, u_int32_t, void *);

/* 6659 */
typedef if_clone *if_clone_t;

/* 6660 */
typedef errno_t (*ifnet_clone_destroy_func)(ifnet_t);

/* 6661 */
typedef u_int32_t tx_compl_val_t;

/* 6662 */
struct ifnet_keepalive_offload_frame
{
  u_int8_t data[128];
  u_int8_t type;
  u_int8_t length;
  u_int16_t interval;
  u_int8_t ether_type;
  u_int8_t keep_cnt;
  u_int16_t keep_retry;
  u_int8_t reply_length;
  u_int8_t addr_length;
  u_int8_t reserved[2];
  u_int8_t reply_data[128];
  u_int8_t local_addr[16];
  u_int8_t remote_addr[16];
  u_int16_t local_port;
  u_int16_t remote_port;
  u_int32_t local_seq;
  u_int32_t remote_seq;
};

/* 6663 */
struct ifnet_buffer_status_t
{
  int32_t buf_interface;
  int32_t buf_sndbuf;
};

/* 6664 */
struct proto_input_entry
{
  proto_input_entry *next;
  int detach;
  domain *domain;
  int hash;
  int chain;
  protocol_family_t protocol;
  proto_input_handler input;
  proto_input_detached_handler detached;
  mbuf_t inject_first;
  mbuf_t inject_last;
  proto_input_entry *input_next;
  mbuf_t input_first;
  mbuf_t input_last;
};

/* 6665 */
typedef void (*proto_input_handler)(protocol_family_t, mbuf_t);

/* 6666 */
typedef void (*proto_input_detached_handler)(protocol_family_t);

/* 6667 */
struct $066F9E1093A5D2F5739361B604AC27FF
{
  proto_family_str *tqh_first;
  proto_family_str **tqh_last;
};

/* 6668 */
struct proto_family_str
{
  proto_family_str::$A590B56A9EE0ACA4F2BDE408CD1DF312 proto_fam_next;
  protocol_family_t proto_family;
  ifnet_family_t if_family;
  proto_plumb_handler attach_proto;
  proto_unplumb_handler detach_proto;
};

/* 6669 */
struct proto_family_str::$A590B56A9EE0ACA4F2BDE408CD1DF312
{
  proto_family_str *tqe_next;
  proto_family_str **tqe_prev;
};

/* 6670 */
typedef errno_t (*proto_plumb_handler)(ifnet_t, protocol_family_t);

/* 6671 */
typedef void (*proto_unplumb_handler)(ifnet_t, protocol_family_t);

/* 6672 */
struct $2C77EF6B63467E9F424B3C421232639B
{
  net_str_id_entry *slh_first;
};

/* 6673 */
struct __attribute__((aligned(8))) net_str_id_entry
{
  net_str_id_entry::$46196163EF22BD7AAE8E19665AF3E381 nsi_next;
  u_int32_t nsi_flags;
  u_int32_t nsi_id;
  char nsi_string[1];
};

/* 6674 */
struct net_str_id_entry::$46196163EF22BD7AAE8E19665AF3E381
{
  net_str_id_entry *sle_next;
};

/* 6675 */
struct __attribute__((aligned(4))) if_family_id
{
  u_int32_t iffmid_len;
  u_int32_t iffmid_id;
  char iffmid_str[1];
};

/* 6676 */
struct utun_list
{
  utun_pcb *tqh_first;
  utun_pcb **tqh_last;
};

/* 6677 */
struct __attribute__((aligned(8))) utun_pcb
{
  utun_pcb::$D4FFBB885904E3D7AA1BAD2696C8545F utun_chain;
  kern_ctl_ref utun_ctlref;
  ifnet_t utun_ifp;
  u_int32_t utun_unit;
  u_int32_t utun_unique_id;
  u_int32_t utun_flags;
  int utun_ext_ifdata_stats;
  u_int32_t utun_max_pending_packets;
  char utun_if_xname[24];
  char utun_unique_name[24];
  lck_rw_t utun_pcb_lock;
  mbuf *utun_input_chain;
  mbuf *utun_input_chain_last;
  lck_mtx_t utun_input_chain_lock;
  utun_nx utun_nx;
  int utun_kpipe_enabled;
  uuid_t utun_kpipe_uuid;
  void *utun_kpipe_rxring;
  void *utun_kpipe_txring;
  kern_pbufpool_t utun_kpipe_pp;
  kern_nexus_t utun_netif_nexus;
  kern_pbufpool_t utun_netif_pp;
  void *utun_netif_rxring;
  void *utun_netif_txring;
  uint64_t_0 utun_netif_txring_size;
  u_int32_t utun_slot_size;
  u_int32_t utun_netif_ring_size;
  u_int32_t utun_tx_fsw_ring_size;
  u_int32_t utun_rx_fsw_ring_size;
  _Bool utun_use_netif;
  _Bool utun_needs_netagent;
};

/* 6678 */
struct utun_pcb::$D4FFBB885904E3D7AA1BAD2696C8545F
{
  utun_pcb *tqe_next;
  utun_pcb **tqe_prev;
};

/* 6679 */
struct nx_port_info
{
  uintptr_t npi_nah;
  nxbind *npi_nxb;
};

/* 6680 */
struct nx_flowswitch::$0EBC757CBED77F29662A0CCDE3233072
{
  nexus_wrap_adapter *stqh_first;
  nexus_wrap_adapter **stqh_last;
};

/* 6681 */
struct __attribute__((aligned(8))) nexus_wrap_adapter
{
  nexus_vp_adapter wna_up;
  nexus_wrap_adapter::$FA49D6E065242A387495FAD3A907CE23 wna_link;
  nexus_adapter *wna_hwna;
  kern_channel *wna_hw_ch;
  kern_channel *wna_fsw_ch;
  uint16_t wna_tx_headroom;
};

/* 6682 */
struct nexus_wrap_adapter::$FA49D6E065242A387495FAD3A907CE23
{
  nexus_wrap_adapter *stqe_next;
};

/* 6683 */
struct nexus_fsw_ops
{
  fsw_nx_check_fn_t fsw_nx_check;
  fsw_port_alloc_fn_t fsw_port_alloc;
  fsw_port_ctor_fn_t fsw_port_ctor;
  fsw_port_dtor_fn_t fsw_port_dtor;
  fsw_port_free_fn_t fsw_port_free;
  fsw_port_grow_fn_t fsw_port_grow;
  fsw_port_flush_fn_t fsw_port_flush;
  fsw_port_na_activate_fn_t fsw_port_na_activate;
  fsw_port_na_defunct_fn_t fsw_port_na_defunct;
  fsw_deq_packets_fn_t fsw_deq_packets;
  fsw_ctl_fn_t fsw_ctl;
  fsw_mib_get_fn_t fsw_mib_get;
  fsw_fold_stats_fn_t fsw_fold_stats;
  fsw_free_fn_t fsw_free;
};

/* 6684 */
typedef int (*fsw_nx_check_fn_t)(nx_flowswitch *, kern_nexus *);

/* 6685 */
typedef int (*fsw_port_alloc_fn_t)(nx_flowswitch *, nxbind *, nexus_vp_adapter **, nexus_port_t, proc_0 *, boolean_t, boolean_t);

/* 6686 */
typedef int (*fsw_port_ctor_fn_t)(nx_flowswitch *, nexus_vp_adapter *, const nxbind *);

/* 6687 */
typedef boolean_t (*fsw_port_dtor_fn_t)(nx_flowswitch *, const nexus_vp_adapter *);

/* 6688 */
typedef void (*fsw_port_free_fn_t)(nx_flowswitch *, nexus_vp_adapter *, nexus_port_t, boolean_t);

/* 6689 */
typedef int (*fsw_port_grow_fn_t)(nx_flowswitch *, uint32_t_0);

/* 6690 */
typedef int (*fsw_port_flush_fn_t)(nx_flowswitch *, __kern_channel_ring *, slot_idx_t, uint32_t_0, proc_0 *);

/* 6691 */
typedef int (*fsw_port_na_activate_fn_t)(nx_flowswitch *, nexus_vp_adapter *, na_activate_mode_t);

/* 6692 */
typedef int (*fsw_port_na_defunct_fn_t)(nx_flowswitch *, nexus_vp_adapter *);

/* 6693 */
typedef errno_t (*fsw_deq_packets_fn_t)(nx_flowswitch *, uint32_t_0, uint32_t_0, __kern_packet **, boolean_t, boolean_t *, kern_packet_svc_class_t);

/* 6694 */
typedef int (*fsw_ctl_fn_t)(nx_flowswitch *, nxcfg_cmd_t, proc_0 *, void *);

/* 6695 */
typedef size_t_0 (*fsw_mib_get_fn_t)(nx_flowswitch *, nexus_mib_filter *, void *, size_t_0, proc_0 *);

/* 6696 */
typedef void (*fsw_fold_stats_fn_t)(nx_flowswitch *, void *, nexus_stats_type_t);

/* 6697 */
typedef void (*fsw_free_fn_t)(nx_flowswitch *);

/* 6698 */
struct __attribute__((aligned(16))) fsw_stats
{
  uint64_t_0 _arr[51];
};

/* 6699 */
struct utun_nx
{
  uuid_t if_provider;
  uuid_t if_instance;
  uuid_t ms_provider;
  uuid_t ms_instance;
  uuid_t ms_device;
  uuid_t ms_host;
  uuid_t ms_agent;
};

/* 6700 */
enum packet_svc_class_t : __int32
{
  PKT_SC_BK_SYS = 0x80090,
  PKT_SC_BK = 0x100080,
  PKT_SC_BE = 0x0,
  PKT_SC_RD = 0x180010,
  PKT_SC_OAM = 0x200020,
  PKT_SC_AV = 0x280120,
  PKT_SC_RV = 0x300110,
  PKT_SC_VI = 0x380100,
  PKT_SC_SIG = 0x380130,
  PKT_SC_VO = 0x400180,
  PKT_SC_CTL = 0x480190,
};

/* 6701 */
enum sk_stats_flow_track_state_t : __int32
{
  SFT_STATE_CLOSED = 0x0,
  SFT_STATE_LISTEN = 0x1,
  SFT_STATE_SYN_SENT = 0x2,
  SFT_STATE_SYN_RECEIVED = 0x3,
  SFT_STATE_ESTABLISHED = 0x4,
  SFT_STATE_CLOSE_WAIT = 0x5,
  SFT_STATE_FIN_WAIT_1 = 0x6,
  SFT_STATE_CLOSING = 0x7,
  SFT_STATE_LAST_ACK = 0x8,
  SFT_STATE_FIN_WAIT_2 = 0x9,
  SFT_STATE_TIME_WAIT = 0xA,
  SFT_STATE_NO_TRAFFIC = 0x14,
  SFT_STATE_SINGLE = 0x15,
  SFT_STATE_MULTIPLE = 0x16,
  SFT_STATE_MAX = 0xFF,
};

/* 6702 */
struct __attribute__((aligned(16))) netif_stats
{
  uint64_t_0 _arr[29];
};

/* 6703 */
struct fsw_ms_context
{
  flow_mgr_context mc_flow_mgr_context;
  netagent_session_t mc_agent_session;
  uuid_t mc_agent_uuid;
  ifnet *mc_ifp;
  nexus_adapter *mc_nifna;
  fsw_ms_context::$265B3EE60CB0B925B590FEF3F7595CE6 __mc_slladdr;
  nx_flowswitch *mc_fsw;
  uint32_t_0 mc_detach_flags;
  uint32_t_0 mc_detach_barriers;
  uint32_t_0 mc_detach_waiters;
  lck_mtx_t mc_detach_barrier_lock;
  classq_pkt_type_t mc_classq_enq_ptype;
  boolean_t mc_classq_enabled;
  boolean_t mc_bpf_tap;
  u_int mc_ifp_dlt;
  uint32_t_0 mc_src_lla_gencnt;
  uint32_t_0 mc_pending_nonviable;
  uint32_t_0 mc_low_power_gencnt;
  void (*mc_ctor)(fsw_ms_context *, flow_route *);
  int (*mc_resolve)(fsw_ms_context *, flow_route *, ms_ft_pkt *, proc_0 *);
  void (*mc_frame)(fsw_ms_context *, flow_route *, ms_ft_pkt *);
  sa_family_t (*mc_demux)(fsw_ms_context *, __kern_packet *);
  __nx_stats_fsw_ms mc_closed_na_stats;
  lck_mtx_t mc_reap_lock;
  uint32_t_0 mc_reap_flags;
  uint32_t_0 mc_reap_requests;
  thread *mc_reap_thread;
  char mc_reap_name[64];
  uint64_t_0 mc_drain_channel_chk_last;
  uint64_t_0 mc_drain_netif_chk_last;
  lck_mtx_t mc_linger_lock;
  flow_entry_linger_head mc_linger_head;
  uint32_t_0 mc_linger_cnt;
  ms_ip_frag_mgr *mc_ipfm;
};

/* 6704 */
struct flow_mgr_context
{
  void *fmc_buckets;
  const uint32_t_0 fmc_buckets_cnt;
  const uint32_t_0 fmc_bucket_sz;
  void *fmc_owner_buckets;
  const uint32_t_0 fmc_owner_buckets_cnt;
  const uint32_t_0 fmc_owner_bucket_sz;
  void *fmc_route_buckets;
  const uint32_t_0 fmc_route_buckets_cnt;
  const uint32_t_0 fmc_route_bucket_sz;
  void *fmc_route_id_buckets;
  const uint32_t_0 fmc_route_id_buckets_cnt;
  const uint32_t_0 fmc_route_id_bucket_sz;
  char fmc_name[16];
  uuid_t fmc_uuid;
  flow_mgr_context::$B64EFEEB9A5D9DDB8FE7A34FA92C239C fmc_link;
};

/* 6705 */
struct flow_mgr_context::$B64EFEEB9A5D9DDB8FE7A34FA92C239C
{
  flow_mgr_context *rbe_left;
  flow_mgr_context *rbe_right;
  flow_mgr_context *rbe_parent;
};

/* 6706 */
typedef void *netagent_session_t;

/* 6707 */
union fsw_ms_context::$265B3EE60CB0B925B590FEF3F7595CE6
{
  uint64_t_0 _buf[1];
  uint8_t_0 _eth_src[6];
};

/* 6708 */
struct flow_route
{
  flow_route::$55A0A47F05E6C1816993BC827F12D19D fr_link;
  flow_route::$55A0A47F05E6C1816993BC827F12D19D fr_id_link;
  sockaddr_in_4_6 fr_laddr;
  sockaddr_in_4_6 fr_faddr;
  sockaddr_in_4_6 fr_gaddr;
  flow_llhdr fr_llhdr;
  void *fr_addr_key;
  uuid_t fr_uuid;
  lck_spin_t fr_reflock;
  uint64_t_0 fr_expire;
  volatile uint32_t_0 fr_usecnt;
  uint32_t_0 fr_flags;
  uint32_t_0 fr_laddr_gencnt;
  uint32_t_0 fr_addr_len;
  volatile uint32_t_0 fr_want_configure;
  volatile uint32_t_0 fr_want_probe;
  lck_mtx_t fr_lock;
  eventhandler_tag fr_rt_evhdlr_tag;
  rtentry *fr_rt_dst;
  rtentry *fr_rt_gw;
  uuid_t fr_nx_uuid;
  const flow_mgr_context *fr_mgr_ctx;
  const flow_route_bucket *fr_frb;
  const flow_route_id_bucket *fr_frib;
};

/* 6709 */
struct flow_route::$55A0A47F05E6C1816993BC827F12D19D
{
  flow_route *rbe_left;
  flow_route *rbe_right;
  flow_route *rbe_parent;
};

/* 6710 */
struct flow_llhdr
{
  uint32_t_0 flh_gencnt;
  const uint8_t_0 flh_off;
  const uint8_t_0 flh_len;
  uint16_t flh_pad;
  _flh_u _flh;
};

/* 6711 */
union _flh_u
{
  uint64_t_0 _buf[2];
  _flh_u::$3CE429165AEC32413883D5DDC0BBBA92 _eth_padded;
};

/* 6712 */
struct _flh_u::$3CE429165AEC32413883D5DDC0BBBA92
{
  uint16_t _eth_pad;
  ether_header _eth;
};

/* 6713 */
struct __attribute__((aligned(8))) flow_route_bucket
{
  lck_rw_t frb_lock;
  flow_route_tree frb_head;
  const uint32_t_0 frb_idx;
};

/* 6714 */
struct flow_route_tree
{
  flow_route *rbh_root;
};

/* 6715 */
struct __attribute__((aligned(8))) flow_route_id_bucket
{
  lck_rw_t frib_lock;
  flow_route_id_tree frib_head;
  const uint32_t_0 frib_idx;
};

/* 6716 */
struct flow_route_id_tree
{
  flow_route *rbh_root;
};

/* 6717 */
struct ms_ft_pkt
{
  __kern_packet *ft_pkt_ptr;
  mach_vm_address_t ft_pkt_buf;
  uint16_t ft_pkt_flags;
  uint16_t ft_pkt_len;
  uint16_t ft_pkt_next;
  uint16_t ft_pkt_nfrags;
  flowadv_idx_t ft_pkt_flowsrc_fidx;
  kern_packet_svc_class_t ft_pkt_svc_class;
  uint8_t_0 ft_pkt_llhdr_off;
  uint8_t_0 ft_pkt_llhdr_len;
  __attribute__((aligned(8))) uint8_t_0 ft_pkt_llhdr[16];
  uint8_t_0 *ft_pkt_thdr;
};

/* 6718 */
struct __nx_stats_fsw_ms
{
  ip_stats nxs_ipstat;
  ip6_stats nxs_ip6stat;
  tcp_stats nxs_tcpstat;
  if_tcp_ecn_stats nxs_if_tcp_ecn_stat;
  if_tcp_ecn_perf_stats nxs_if_tcp_ecn_perf_stat;
  udp_stats nxs_udpstat;
};

/* 6719 */
struct __attribute__((aligned(16))) ip_stats
{
  uint64_t_0 _arr[43];
};

/* 6720 */
struct ip6_stats
{
  uint64_t_0 _arr[36];
};

/* 6721 */
struct __attribute__((aligned(16))) tcp_stats
{
  uint64_t_0 _arr[205];
};

/* 6722 */
struct if_tcp_ecn_stats
{
  uint64_t_0 _arr[22];
};

/* 6723 */
struct if_tcp_ecn_perf_stats
{
  uint64_t_0 _arr[10];
};

/* 6724 */
struct udp_stats
{
  uint64_t_0 _arr[22];
};

/* 6725 */
struct flow_entry_linger_head
{
  flow_entry *tqh_first;
  flow_entry **tqh_last;
};

/* 6726 */
struct __attribute__((aligned(8))) flow_entry
{
  flow_ptrs fe_ptrs;
  flow_entry::$4B3A0B5457D386A0C4EB0B8854076180 fe_ptrs_link;
  flow_entry::$4B3A0B5457D386A0C4EB0B8854076180 fe_id_link;
  flow_entry::$6B752BFA344DCF628629120CDEA85C57 _anon_0;
  uuid_t fe_euuid;
  uint32_t_0 fe_policy_id;
  uint32_t_0 fe_flags;
  nexus_port_t fe_nx_port;
  uint8_t_0 fe_protocol;
  uint8_t_0 fe_pad[3];
  flow_route *fe_route;
  uint32_t_0 fe_laddr_gencnt;
  sockaddr_in_4_6 fe_laddr;
  sockaddr_in_4_6 fe_faddr;
  uint32_t_0 fe_want_nonviable;
  uint32_t_0 fe_want_withdraw;
  flow_track fe_ltrack;
  flow_track fe_rtrack;
  flow_stats *fe_stats;
  netns_token fe_port_reservation;
  const flow_bucket *fe_fb;
  const flow_owner *fe_fp;
  kern_packet_svc_class_t fe_svc_class;
  flowadv_idx_t fe_adv_idx;
  fsw_ms_context *fe_mc;
  flow_entry::$E6D20D07BA2C9CEAE570139DD7A68876 fe_linger_link;
  uint64_t_0 fe_linger_expire;
  uint32_t_0 fe_linger_wait;
  pid_t fe_owner_pid;
  char fe_owner_name[24];
  pid_t fe_effective_pid;
  char fe_effective_name[24];
};

/* 6727 */
struct __attribute__((aligned(8))) flow_ptrs
{
  unsigned __int8 *fp_rule_id;
  void *fp_laddr;
  uint16_t *fp_lport;
  void *fp_faddr;
  uint16_t *fp_fport;
  uint8_t_0 *fp_protocol;
  uint8_t_0 fp_addrlen;
  uint8_t_0 fp_pad;
  uint16_t fp_mask;
};

/* 6728 */
struct flow_entry::$4B3A0B5457D386A0C4EB0B8854076180
{
  flow_entry *rbe_left;
  flow_entry *rbe_right;
  flow_entry *rbe_parent;
};

/* 6729 */
union flow_entry::$6B752BFA344DCF628629120CDEA85C57
{
  uint64_t_0 fe_rule_id_64[2];
  uint32_t_0 fe_rule_id_32[4];
  uuid_t fe_rule_id;
};

/* 6730 */
struct flow_track
{
  uint32_t_0 fse_seqlo;
  uint32_t_0 fse_seqhi;
  uint32_t_0 fse_seqlast;
  uint16_t fse_max_win;
  uint16_t fse_mss;
  uint8_t_0 fse_state;
  uint8_t_0 fse_wscale;
  uint16_t fse_flags;
  uint32_t_0 fse_syn_ts;
  uint32_t_0 fse_syn_cnt;
  flow_track_rtt fse_rtt;
};

/* 6731 */
struct flow_track_rtt
{
  uint64_t_0 frtt_timestamp;
  uint32_t_0 frtt_last;
  uint32_t_0 frtt_seg_begin;
  uint32_t_0 frtt_seg_end;
  uint32_t_0 frtt_usec;
};

/* 6732 */
struct __attribute__((aligned(8))) flow_stats
{
  sk_stats_flow fs_stats;
  os_refcnt_t fs_refcnt;
};

/* 6733 */
struct sk_stats_flow
{
  uuid_t sf_nx_uuid;
  char sf_if_name[16];
  uint32_t_0 sf_bucket_idx;
  char sf_owner_name[32];
  pid_t sf_owner_pid;
  uint32_t_0 sf_flags;
  nexus_port_t sf_nx_port;
  sockaddr_in_4_6 sf_laddr;
  sockaddr_in_4_6 sf_faddr;
  uint8_t_0 sf_protocol;
  packet_svc_class_t sf_svc_class;
  flowadv_idx_t sf_adv_idx;
  volatile sk_stats_flow_track sf_ltrack;
  volatile sk_stats_flow_track sf_rtrack;
  activity_bitmap_t sf_activity;
};

/* 6734 */
struct sk_stats_flow_track
{
  uint64_t_0 sft_bytes;
  uint64_t_0 sft_packets;
  sk_stats_flow_track_state_t sft_state;
  uint32_t_0 sft_rtt;
};

/* 6735 */
struct __attribute__((aligned(8))) flow_bucket
{
  lck_rw_t fb_lock;
  flow_entry_tree fb_flow_entry_head;
  const uint32_t_0 fb_idx;
};

/* 6736 */
struct flow_entry_tree
{
  flow_entry *rbh_root;
};

/* 6737 */
struct flow_owner
{
  flow_owner::$508DAAC974AE17EB91553F534E8B578D fo_link;
  flow_entry_id_tree fo_flow_entry_id_head;
  const flow_owner_bucket *fo_bucket;
  void *fo_context;
  pid_t fo_pid;
  boolean_t fo_nx_port_pid_bound;
  boolean_t fo_nx_port_destroyed;
  nexus_port_t fo_nx_port;
  uuid_t fo_key;
  const nexus_adapter *fo_nx_port_na;
  const fsw_ms_context *fo_mc;
  bitmap_t *fo_flowadv_bmap;
  uint32_t_0 fo_flowadv_max;
  uint32_t_0 fo_num_flowadv;
  char fo_name[24];
};

/* 6738 */
struct flow_owner::$508DAAC974AE17EB91553F534E8B578D
{
  flow_owner *rbe_left;
  flow_owner *rbe_right;
  flow_owner *rbe_parent;
};

/* 6739 */
struct flow_entry_id_tree
{
  flow_entry *rbh_root;
};

/* 6740 */
struct __attribute__((aligned(8))) flow_owner_bucket
{
  lck_mtx_t fob_lock;
  flow_owner_tree fob_owner_head;
  uint16_t fob_busy_flags;
  uint16_t fob_open_waiters;
  uint16_t fob_close_waiters;
  uint16_t fob_dtor_waiters;
  const uint32_t_0 fob_idx;
};

/* 6741 */
struct flow_owner_tree
{
  flow_owner *rbh_root;
};

/* 6742 */
struct flow_entry::$E6D20D07BA2C9CEAE570139DD7A68876
{
  flow_entry *tqe_next;
  flow_entry **tqe_prev;
};

/* 6743 */
struct ms_ip_frag_mgr
{
  ipfq ipfm_q;
  uint32_t_0 ipfm_q_count;
  uint32_t_0 ipfm_f_count;
  lck_mtx_t ipfm_lock;
  thread_call_t ipfm_timeout_tcall;
  ifnet *ipfm_ifp;
  fsw_stats *ipfm_stats;
};

/* 6744 */
struct utun_stats_param
{
  u_int64_t utsp_packets;
  u_int64_t utsp_bytes;
  u_int64_t utsp_errors;
};

/* 6745 */
typedef utun_nx *utun_nx_t;

/* 6746 */
struct utun_kpipe_sync_tx::mbufq
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 6747 */
struct in6_ifreq
{
  char ifr_name[16];
  in6_ifreq::$CD483B77DD23939600F6831E25CBF327 ifr_ifru;
};

/* 6748 */
union in6_ifreq::$CD483B77DD23939600F6831E25CBF327
{
  sockaddr_in6 ifru_addr;
  sockaddr_in6 ifru_dstaddr;
  int ifru_flags;
  int ifru_flags6;
  int ifru_metric;
  int ifru_intval;
  caddr_t ifru_data;
  in6_addrlifetime ifru_lifetime;
  in6_ifstat ifru_stat;
  icmp6_ifstat ifru_icmp6stat;
  u_int32_t ifru_scope_id[16];
};

/* 6749 */
struct in6_addrlifetime
{
  time_t ia6t_expire;
  time_t ia6t_preferred;
  u_int32_t ia6t_vltime;
  u_int32_t ia6t_pltime;
};

/* 6750 */
struct in6_ifstat
{
  u_quad_t ifs6_in_receive;
  u_quad_t ifs6_in_hdrerr;
  u_quad_t ifs6_in_toobig;
  u_quad_t ifs6_in_noroute;
  u_quad_t ifs6_in_addrerr;
  u_quad_t ifs6_in_protounknown;
  u_quad_t ifs6_in_truncated;
  u_quad_t ifs6_in_discard;
  u_quad_t ifs6_in_deliver;
  u_quad_t ifs6_out_forward;
  u_quad_t ifs6_out_request;
  u_quad_t ifs6_out_discard;
  u_quad_t ifs6_out_fragok;
  u_quad_t ifs6_out_fragfail;
  u_quad_t ifs6_out_fragcreat;
  u_quad_t ifs6_reass_reqd;
  u_quad_t ifs6_reass_ok;
  u_quad_t ifs6_atmfrag_rcvd;
  u_quad_t ifs6_reass_fail;
  u_quad_t ifs6_in_mcast;
  u_quad_t ifs6_out_mcast;
  u_quad_t ifs6_cantfoward_icmp6;
  u_quad_t ifs6_addr_expiry_cnt;
  u_quad_t ifs6_pfx_expiry_cnt;
  u_quad_t ifs6_defrtr_expiry_cnt;
};

/* 6751 */
struct icmp6_ifstat
{
  u_quad_t ifs6_in_msg;
  u_quad_t ifs6_in_error;
  u_quad_t ifs6_in_dstunreach;
  u_quad_t ifs6_in_adminprohib;
  u_quad_t ifs6_in_timeexceed;
  u_quad_t ifs6_in_paramprob;
  u_quad_t ifs6_in_pkttoobig;
  u_quad_t ifs6_in_echo;
  u_quad_t ifs6_in_echoreply;
  u_quad_t ifs6_in_routersolicit;
  u_quad_t ifs6_in_routeradvert;
  u_quad_t ifs6_in_neighborsolicit;
  u_quad_t ifs6_in_neighboradvert;
  u_quad_t ifs6_in_redirect;
  u_quad_t ifs6_in_mldquery;
  u_quad_t ifs6_in_mldreport;
  u_quad_t ifs6_in_mlddone;
  u_quad_t ifs6_out_msg;
  u_quad_t ifs6_out_error;
  u_quad_t ifs6_out_dstunreach;
  u_quad_t ifs6_out_adminprohib;
  u_quad_t ifs6_out_timeexceed;
  u_quad_t ifs6_out_paramprob;
  u_quad_t ifs6_out_pkttoobig;
  u_quad_t ifs6_out_echo;
  u_quad_t ifs6_out_echoreply;
  u_quad_t ifs6_out_routersolicit;
  u_quad_t ifs6_out_routeradvert;
  u_quad_t ifs6_out_neighborsolicit;
  u_quad_t ifs6_out_neighboradvert;
  u_quad_t ifs6_out_redirect;
  u_quad_t ifs6_out_mldquery;
  u_quad_t ifs6_out_mldreport;
  u_quad_t ifs6_out_mlddone;
};

/* 6752 */
struct ipsec_list
{
  ipsec_pcb *tqh_first;
  ipsec_pcb **tqh_last;
};

/* 6753 */
struct __attribute__((aligned(8))) ipsec_pcb
{
  ipsec_pcb::$3E39073384107359742DF1879B779418 ipsec_chain;
  kern_ctl_ref ipsec_ctlref;
  ifnet_t ipsec_ifp;
  u_int32_t ipsec_unit;
  u_int32_t ipsec_unique_id;
  u_int32_t ipsec_flags;
  u_int32_t ipsec_input_frag_size;
  _Bool ipsec_frag_size_set;
  int ipsec_ext_ifdata_stats;
  mbuf_svc_class_t ipsec_output_service_class;
  char ipsec_if_xname[24];
  char ipsec_unique_name[24];
  lck_rw_t ipsec_pcb_lock;
  lck_mtx_t ipsec_input_chain_lock;
  mbuf *ipsec_input_chain;
  mbuf *ipsec_input_chain_last;
  ipsec_nx ipsec_nx;
  int ipsec_kpipe_enabled;
  uuid_t ipsec_kpipe_uuid;
  void *ipsec_kpipe_rxring;
  void *ipsec_kpipe_txring;
  kern_pbufpool_t ipsec_kpipe_pp;
  kern_nexus_t ipsec_netif_nexus;
  kern_pbufpool_t ipsec_netif_pp;
  void *ipsec_netif_rxring;
  void *ipsec_netif_txring;
  uint64_t_0 ipsec_netif_txring_size;
  u_int32_t ipsec_slot_size;
  u_int32_t ipsec_netif_ring_size;
  u_int32_t ipsec_tx_fsw_ring_size;
  u_int32_t ipsec_rx_fsw_ring_size;
  _Bool ipsec_use_netif;
  _Bool ipsec_needs_netagent;
};

/* 6754 */
struct ipsec_pcb::$3E39073384107359742DF1879B779418
{
  ipsec_pcb *tqe_next;
  ipsec_pcb **tqe_prev;
};

/* 6755 */
struct ipsec_nx
{
  uuid_t if_provider;
  uuid_t if_instance;
  uuid_t ms_provider;
  uuid_t ms_instance;
  uuid_t ms_device;
  uuid_t ms_host;
  uuid_t ms_agent;
};

/* 6756 */
struct ipsec_stats_param
{
  u_int64_t utsp_packets;
  u_int64_t utsp_bytes;
  u_int64_t utsp_errors;
};

/* 6757 */
typedef ipsec_nx *ipsec_nx_t;

/* 6758 */
struct __attribute__((aligned(8))) ipsec_output_state
{
  int tunneled;
  mbuf *m;
  route_in6 ro;
  sockaddr *dst;
  u_int outgoing_if;
};

/* 6759 */
struct ip6_out_args
{
  unsigned int ip6oa_boundif;
  flowadv ip6oa_flowadv;
  u_int32_t ip6oa_flags;
  u_int32_t ip6oa_retflags;
  int ip6oa_sotc;
  int ip6oa_netsvctype;
};

/* 6760 */
struct __attribute__((aligned(8))) ip6_exthdrs
{
  mbuf *ip6e_ip6;
  mbuf *ip6e_hbh;
  mbuf *ip6e_dest1;
  mbuf *ip6e_rthdr;
  mbuf *ip6e_dest2;
  boolean_t merged;
};

/* 6761 */
struct _necp_session_list
{
  necp_session *tqh_first;
  necp_session **tqh_last;
};

/* 6762 */
struct necp_session
{
  u_int8_t necp_fd_type;
  u_int32_t control_unit;
  u_int32_t session_priority;
  u_int32_t session_order;
  necp_policy_id last_policy_id;
  lck_mtx_t lock;
  _Bool proc_locked;
  uuid_t proc_uuid;
  int proc_pid;
  _Bool dirty;
  _policies policies;
  _services services;
  necp_session::$6F31EA1ABB8D2F4B48BC3EA9B6C0C381 chain;
};

/* 6763 */
typedef u_int32_t necp_policy_id;

/* 6764 */
struct _policies
{
  necp_session_policy *lh_first;
};

/* 6765 */
struct necp_session_policy
{
  necp_session_policy::$EAF477A9F1660000C720BB3D1904C4D8 chain;
  _Bool applied;
  _Bool pending_deletion;
  _Bool pending_update;
  necp_policy_id local_id;
  necp_policy_order order;
  u_int8_t *result;
  u_int32_t result_size;
  u_int8_t *conditions;
  u_int32_t conditions_size;
  u_int8_t *route_rules;
  u_int32_t route_rules_size;
  uuid_t applied_app_uuid;
  uuid_t applied_real_app_uuid;
  char *applied_account;
  uuid_t applied_result_uuid;
  u_int32_t applied_route_rules_id;
  necp_kernel_policy_id kernel_socket_policies[1];
  necp_kernel_policy_id kernel_ip_output_policies[4];
};

/* 6766 */
struct necp_session_policy::$EAF477A9F1660000C720BB3D1904C4D8
{
  necp_session_policy *le_next;
  necp_session_policy **le_prev;
};

/* 6767 */
typedef u_int32_t necp_policy_order;

/* 6768 */
struct _services
{
  necp_service_registration *lh_first;
};

/* 6769 */
struct __attribute__((aligned(8))) necp_service_registration
{
  necp_service_registration::$C1638CE0542A142018DEA7C0392E9A42 session_chain;
  necp_service_registration::$C1638CE0542A142018DEA7C0392E9A42 kernel_chain;
  u_int32_t service_id;
};

/* 6770 */
struct necp_service_registration::$C1638CE0542A142018DEA7C0392E9A42
{
  necp_service_registration *le_next;
  necp_service_registration **le_prev;
};

/* 6771 */
struct necp_session::$6F31EA1ABB8D2F4B48BC3EA9B6C0C381
{
  necp_session *tqe_next;
  necp_session **tqe_prev;
};

/* 6772 */
struct _necpkernelsocketconnectpolicies
{
  necp_kernel_socket_policy *lh_first;
};

/* 6773 */
struct necp_kernel_socket_policy
{
  necp_kernel_socket_policy::$31736A61AE9FF0D877FFCFB99BC4708D chain;
  necp_kernel_policy_id id;
  necp_policy_order order;
  u_int32_t session_order;
  int session_pid;
  u_int32_t condition_mask;
  u_int32_t condition_negated_mask;
  necp_kernel_policy_id cond_policy_id;
  u_int32_t cond_app_id;
  u_int32_t cond_real_app_id;
  char *cond_custom_entitlement;
  u_int8_t cond_custom_entitlement_matched;
  u_int32_t cond_account_id;
  char *cond_domain;
  u_int8_t cond_domain_dot_count;
  pid_t cond_pid;
  uid_t cond_uid;
  ifnet_t cond_bound_interface;
  necp_policy_condition_tc_range cond_traffic_class;
  u_int16_t cond_protocol;
  necp_sockaddr_union cond_local_start;
  necp_sockaddr_union cond_local_end;
  u_int8_t cond_local_prefix;
  necp_sockaddr_union cond_remote_start;
  necp_sockaddr_union cond_remote_end;
  u_int8_t cond_remote_prefix;
  necp_policy_condition_agent_type cond_agent_type;
  necp_kernel_policy_result result;
  necp_kernel_policy_result_parameter result_parameter;
};

/* 6774 */
struct necp_kernel_socket_policy::$31736A61AE9FF0D877FFCFB99BC4708D
{
  necp_kernel_socket_policy *le_next;
  necp_kernel_socket_policy **le_prev;
};

/* 6775 */
struct necp_policy_condition_tc_range
{
  u_int32_t start_tc;
  u_int32_t end_tc;
};

/* 6776 */
union necp_sockaddr_union
{
  sockaddr sa;
  sockaddr_in sin;
  sockaddr_in6 sin6;
};

/* 6777 */
struct necp_policy_condition_agent_type
{
  char agent_domain[32];
  char agent_type[32];
};

/* 6778 */
struct _necpkernelipoutputpolicies
{
  necp_kernel_ip_output_policy *lh_first;
};

/* 6779 */
struct __attribute__((aligned(8))) necp_kernel_ip_output_policy
{
  necp_kernel_ip_output_policy::$C8F9B56B11A35EF02924969DC3310373 chain;
  necp_kernel_policy_id id;
  necp_policy_order suborder;
  necp_policy_order order;
  u_int32_t session_order;
  int session_pid;
  u_int32_t condition_mask;
  u_int32_t condition_negated_mask;
  necp_kernel_policy_id cond_policy_id;
  ifnet_t cond_bound_interface;
  u_int16_t cond_protocol;
  necp_sockaddr_union cond_local_start;
  necp_sockaddr_union cond_local_end;
  u_int8_t cond_local_prefix;
  necp_sockaddr_union cond_remote_start;
  necp_sockaddr_union cond_remote_end;
  u_int8_t cond_remote_prefix;
  u_int32_t cond_last_interface_index;
  necp_kernel_policy_result result;
  necp_kernel_policy_result_parameter result_parameter;
};

/* 6780 */
struct necp_kernel_ip_output_policy::$C8F9B56B11A35EF02924969DC3310373
{
  necp_kernel_ip_output_policy *le_next;
  necp_kernel_ip_output_policy **le_prev;
};

/* 6781 */
struct necp_uuid_id_mapping_head
{
  necp_uuid_id_mapping *lh_first;
};

/* 6782 */
struct __attribute__((aligned(8))) necp_uuid_id_mapping
{
  necp_uuid_id_mapping::$80EDB75B6FBA713F55662D1ED8E99ECB chain;
  uuid_t uuid;
  u_int32_t id;
  u_int32_t refcount;
  u_int32_t table_refcount;
};

/* 6783 */
struct necp_uuid_id_mapping::$80EDB75B6FBA713F55662D1ED8E99ECB
{
  necp_uuid_id_mapping *le_next;
  necp_uuid_id_mapping **le_prev;
};

/* 6784 */
struct necp_string_id_mapping_list
{
  necp_string_id_mapping *lh_first;
};

/* 6785 */
struct necp_string_id_mapping
{
  necp_string_id_mapping::$2E394AD83B06C766A68266BF392967B0 chain;
  char *string;
  necp_app_id id;
  u_int32_t refcount;
};

/* 6786 */
struct necp_string_id_mapping::$2E394AD83B06C766A68266BF392967B0
{
  necp_string_id_mapping *le_next;
  necp_string_id_mapping **le_prev;
};

/* 6787 */
typedef u_int32_t necp_app_id;

/* 6788 */
struct _necp_kernel_service_list
{
  necp_service_registration *lh_first;
};

/* 6789 */
struct necp_route_rule_list
{
  necp_route_rule *lh_first;
};

/* 6790 */
struct __attribute__((aligned(8))) necp_route_rule
{
  necp_route_rule::$BD11065BE099BD38C70D2DA188F3F4DA chain;
  u_int32_t id;
  u_int32_t default_action;
  u_int8_t cellular_action;
  u_int8_t wifi_action;
  u_int8_t wired_action;
  u_int8_t expensive_action;
  u_int exception_if_indices[10];
  u_int8_t exception_if_actions[10];
  u_int32_t refcount;
};

/* 6791 */
struct necp_route_rule::$BD11065BE099BD38C70D2DA188F3F4DA
{
  necp_route_rule *le_next;
  necp_route_rule **le_prev;
};

/* 6792 */
struct necp_aggregate_route_rule_list
{
  necp_aggregate_route_rule *lh_first;
};

/* 6793 */
struct __attribute__((aligned(8))) necp_aggregate_route_rule
{
  necp_aggregate_route_rule::$B3FE3ECBC29DBA7BB3DD0C900D813D90 chain;
  u_int32_t id;
  u_int32_t rule_ids[16];
};

/* 6794 */
struct necp_aggregate_route_rule::$B3FE3ECBC29DBA7BB3DD0C900D813D90
{
  necp_aggregate_route_rule *le_next;
  necp_aggregate_route_rule **le_prev;
};

/* 6795 */
struct __attribute__((packed)) __attribute__((aligned(1))) necp_policy_condition_addr
{
  u_int8_t prefix;
  necp_policy_condition_addr::$F47528DE81AA29AAE14E090C24A9C657 address;
};

/* 6796 */
union necp_policy_condition_addr::$F47528DE81AA29AAE14E090C24A9C657
{
  sockaddr sa;
  sockaddr_in sin;
  sockaddr_in6 sin6;
};

/* 6797 */
struct necp_policy_condition_addr_range
{
  necp_policy_condition_addr_range::$F47528DE81AA29AAE14E090C24A9C657 start_address;
  necp_policy_condition_addr_range::$F47528DE81AA29AAE14E090C24A9C657 end_address;
};

/* 6798 */
union necp_policy_condition_addr_range::$F47528DE81AA29AAE14E090C24A9C657
{
  sockaddr sa;
  sockaddr_in sin;
  sockaddr_in6 sin6;
};

/* 6799 */
struct necp_packet_header
{
  u_int8_t packet_type;
  u_int8_t flags;
  u_int32_t message_id;
};

/* 6800 */
struct kev_necp_policies_changed_data
{
  u_int32_t changed_count;
};

/* 6801 */
struct substring
{
  char *string;
  size_t_0 length;
};

/* 6802 */
struct necp_session_action_args
{
  int necp_fd;
  char necp_fd_r_[4];
  uint32_t_0 action;
  char action_r_[4];
  user_addr_t in_buffer;
  user_size_t in_buffer_length;
  user_addr_t out_buffer;
  user_size_t out_buffer_length;
  char out_buffer_length_r_[];
};

/* 6803 */
typedef u_int32_t necp_session_priority;

/* 6804 */
struct __attribute__((aligned(8))) necp_socket_info
{
  pid_t pid;
  uid_t uid;
  necp_sockaddr_union local_addr;
  necp_sockaddr_union remote_addr;
  u_int32_t bound_interface_index;
  u_int32_t traffic_class;
  u_int16_t protocol;
  u_int32_t application_id;
  u_int32_t real_application_id;
  u_int32_t account_id;
  char *domain;
  errno_t cred_result;
};

/* 6805 */
struct __attribute__((aligned(8))) kev_netpolicy_ifdenied
{
  netpolicy_event_data ev_data;
  __uint32_t ev_if_functional_type;
};

/* 6806 */
struct __attribute__((aligned(8))) netpolicy_event_data
{
  __uint64_t eupid;
  pid_t epid;
  uuid_t euuid;
};

/* 6807 */
struct necp_client_parameter_netagent_type
{
  char netagent_domain[32];
  char netagent_type[32];
};

/* 6808 */
struct necp_session_open_args
{
  int flags;
  char flags_r_[4];
};

/* 6809 */
struct necp_policy_result_ip_tunnel
{
  u_int32_t secondary_result;
  char interface_name[24];
};

/* 6810 */
struct necp_policy_result_service
{
  uuid_t identifier;
  u_int32_t data;
};

/* 6811 */
struct __attribute__((aligned(4))) necp_aggregate_result
{
  necp_kernel_policy_result routing_result;
  necp_kernel_policy_routing_result_parameter routing_result_parameter;
  necp_kernel_policy_filter filter_control_unit;
  necp_kernel_policy_result service_action;
  uuid_t service_uuid;
  u_int32_t service_flags;
  u_int32_t service_data;
  u_int routed_interface_index;
  u_int32_t policy_id;
  uuid_t netagents[8];
  u_int32_t netagent_use_flags[8];
  u_int8_t mss_recommended;
};

/* 6812 */
union necp_kernel_policy_routing_result_parameter
{
  u_int tunnel_interface_index;
  u_int scoped_interface_index;
  u_int32_t flow_divert_control_unit;
  u_int32_t filter_control_unit;
};

/* 6813 */
struct _necp_flow_registration_list
{
  necp_client_flow_registration *lh_first;
};

/* 6814 */
struct necp_client_flow_registration
{
  necp_client_flow_registration::$6FD70D47A5FE9A7A385BADF8E6B87584 fd_link;
  necp_client_flow_registration::$6FD70D47A5FE9A7A385BADF8E6B87584 global_link;
  necp_client_flow_registration::$6FD70D47A5FE9A7A385BADF8E6B87584 client_link;
  necp_client_flow_registration::$79FCA523D3A446729F5A4255D433E2B3 collect_stats_chain;
  uuid_t registration_id;
  u_int32_t flags;
  unsigned __int32 flow_result_read : 1;
  unsigned __int32 defunct : 1;
  void *interface_handle;
  necp_client_flow_cb interface_cb;
  necp_client *client;
  _necp_registration_flow_list flow_list;
  necp_arena_info *stats_arena;
  void *kstats_kaddr;
  mach_vm_address_t ustats_uaddr;
  nstat_userland_context stats_handler_context;
  flow_stats *nexus_stats;
  u_int64_t last_interface_details;
};

/* 6815 */
struct necp_client_flow_registration::$6FD70D47A5FE9A7A385BADF8E6B87584
{
  necp_client_flow_registration *rbe_left;
  necp_client_flow_registration *rbe_right;
  necp_client_flow_registration *rbe_parent;
};

/* 6816 */
struct necp_client_flow_registration::$79FCA523D3A446729F5A4255D433E2B3
{
  necp_client_flow_registration *le_next;
  necp_client_flow_registration **le_prev;
};

/* 6817 */
struct necp_client
{
  necp_client::$0B35A16FCA9EF382ABABE967A3A3A42E link;
  necp_client::$0B35A16FCA9EF382ABABE967A3A3A42E global_link;
  lck_mtx_t lock;
  lck_mtx_t route_lock;
  uint32_t_0 reference_count;
  uuid_t client_id;
  unsigned __int32 result_read : 1;
  unsigned __int32 allow_multiple_flows : 1;
  unsigned __int32 legacy_client_is_flow : 1;
  unsigned __int32 background : 1;
  unsigned __int32 background_update : 1;
  unsigned __int32 platform_binary : 1;
  size_t_0 result_length;
  u_int8_t result[512];
  necp_policy_id policy_id;
  u_int16_t ip_protocol;
  int proc_pid;
  _necp_client_flow_tree flow_registrations;
  _necp_client_assertion_list assertion_list;
  rtentry *current_route;
  necp_client_interface_option interface_options[4];
  necp_client_interface_option *extra_interface_options;
  u_int8_t interface_option_count;
  necp_client_result_netagent failed_trigger_agent;
  void *agent_handle;
  size_t_0 parameters_length;
  u_int8_t parameters[];
};

/* 6818 */
struct necp_client::$0B35A16FCA9EF382ABABE967A3A3A42E
{
  necp_client *rbe_left;
  necp_client *rbe_right;
  necp_client *rbe_parent;
};

/* 6819 */
struct _necp_client_flow_tree
{
  necp_client_flow_registration *rbh_root;
};

/* 6820 */
struct _necp_client_assertion_list
{
  necp_client_assertion *lh_first;
};

/* 6821 */
struct necp_client_assertion
{
  necp_client_assertion::$571FDB29D2518187C76353573521963B assertion_chain;
  uuid_t asserted_netagent;
};

/* 6822 */
struct necp_client_assertion::$571FDB29D2518187C76353573521963B
{
  necp_client_assertion *le_next;
  necp_client_assertion **le_prev;
};

/* 6823 */
struct necp_client_interface_option
{
  u_int32_t interface_index;
  u_int32_t interface_generation;
  uuid_t nexus_agent;
};

/* 6824 */
struct necp_client_result_netagent
{
  u_int32_t generation;
  uuid_t netagent_uuid;
};

/* 6825 */
struct _necp_registration_flow_list
{
  necp_client_flow *lh_first;
};

/* 6826 */
struct necp_client_flow
{
  necp_client_flow::$51778C038B472B89E3EA23BD8A59FC01 flow_chain;
  unsigned __int32 invalid : 1;
  unsigned __int32 nexus : 1;
  unsigned __int32 socket : 1;
  unsigned __int32 viable : 1;
  unsigned __int32 assigned : 1;
  unsigned __int32 has_protoctl_event : 1;
  unsigned __int32 check_tcp_heuristics : 1;
  unsigned __int32 _reserved : 1;
  necp_client_flow::$F51518C10647CF40916B8A5E06248966 u;
  uint32_t_0 interface_index;
  uint16_t interface_flags;
  uint32_t_0 necp_flow_flags;
  necp_client_flow_protoctl_event protoctl_event;
  necp_sockaddr_union local_addr;
  necp_sockaddr_union remote_addr;
  size_t_0 assigned_results_length;
  u_int8_t *assigned_results;
};

/* 6827 */
struct necp_client_flow::$51778C038B472B89E3EA23BD8A59FC01
{
  necp_client_flow *le_next;
  necp_client_flow **le_prev;
};

/* 6828 */
union necp_client_flow::$F51518C10647CF40916B8A5E06248966
{
  uuid_t nexus_agent;
  necp_client_flow::$F51518C10647CF40916B8A5E06248966::$0A11FB215298D15BABD51ABA6200C8FF _anon_0;
};

/* 6829 */
struct necp_client_flow::$F51518C10647CF40916B8A5E06248966::$0A11FB215298D15BABD51ABA6200C8FF
{
  void *socket_handle;
  necp_client_flow_cb cb;
};

/* 6830 */
struct necp_client_flow_protoctl_event
{
  uint32_t_0 protoctl_event_code;
  uint32_t_0 protoctl_event_val;
  uint32_t_0 protoctl_event_tcp_seq_num;
};

/* 6831 */
struct __attribute__((aligned(8))) necp_arena_info
{
  necp_arena_info::$2216B3A19B2AC12B97A3FBDAE8056CED nai_chain;
  u_int32_t nai_flags;
  pid_t nai_proc_pid;
  skmem_arena *nai_arena;
  skmem_arena_mmap_info nai_mmap;
  mach_vm_offset_t nai_roff;
  u_int32_t nai_use_count;
};

/* 6832 */
struct necp_arena_info::$2216B3A19B2AC12B97A3FBDAE8056CED
{
  necp_arena_info *le_next;
  necp_arena_info **le_prev;
};

/* 6833 */
struct _necp_client_global_tree
{
  necp_client *rbh_root;
};

/* 6834 */
struct _necp_client_flow_global_tree
{
  necp_client_flow_registration *rbh_root;
};

/* 6835 */
struct _necp_fd_list
{
  necp_fd_data *lh_first;
};

/* 6836 */
struct necp_fd_data
{
  u_int8_t necp_fd_type;
  necp_fd_data::$6E7669C19AC00FBC1B5400834A33A631 chain;
  _necp_client_tree clients;
  _necp_fd_flow_tree flows;
  _necp_client_update_list update_list;
  int update_count;
  int flags;
  int proc_pid;
  lck_mtx_t fd_lock;
  selinfo si;
  necp_arena_info *stats_arena_active;
  _necp_arena_info_list stats_arena_list;
  u_int32_t stats_arena_gencnt;
  skmem_arena *sysctl_arena;
  skmem_arena_mmap_info sysctl_mmap;
  mach_vm_offset_t system_sysctls_roff;
};

/* 6837 */
struct necp_fd_data::$6E7669C19AC00FBC1B5400834A33A631
{
  necp_fd_data *le_next;
  necp_fd_data **le_prev;
};

/* 6838 */
struct _necp_client_tree
{
  necp_client *rbh_root;
};

/* 6839 */
struct _necp_fd_flow_tree
{
  necp_client_flow_registration *rbh_root;
};

/* 6840 */
struct _necp_client_update_list
{
  necp_client_update *tqh_first;
  necp_client_update **tqh_last;
};

/* 6841 */
struct __attribute__((aligned(8))) necp_client_update
{
  necp_client_update::$2830E7CF051458968CAE31612C63A5E6 chain;
  uuid_t client_id;
  size_t_0 update_length;
  necp_client_observer_update update;
};

/* 6842 */
struct necp_client_update::$2830E7CF051458968CAE31612C63A5E6
{
  necp_client_update *tqe_next;
  necp_client_update **tqe_prev;
};

/* 6843 */
struct necp_client_observer_update
{
  u_int32_t update_type;
  u_int8_t tlv_buffer[];
};

/* 6844 */
struct _necp_arena_info_list
{
  necp_arena_info *lh_first;
};

/* 6845 */
struct _necp_fd_observer_list
{
  necp_fd_data *lh_first;
};

/* 6846 */
enum mppcb_state : __int32
{
  MPPCB_STATE_INUSE = 0x1,
  MPPCB_STATE_DEAD = 0x2,
};

/* 6847 */
struct necp_client_endpoint
{
  necp_client_endpoint::$8ECCD57F8DBF82E78D5253E6EBE718BF u;
};

/* 6848 */
union necp_client_endpoint::$8ECCD57F8DBF82E78D5253E6EBE718BF
{
  sockaddr sa;
  sockaddr_in sin;
  sockaddr_in6 sin6;
  necp_client_endpoint::$8ECCD57F8DBF82E78D5253E6EBE718BF::$3EFD2670CB164DFBA49A14FF2A3C4420 endpoint;
};

/* 6849 */
struct necp_client_endpoint::$8ECCD57F8DBF82E78D5253E6EBE718BF::$3EFD2670CB164DFBA49A14FF2A3C4420
{
  u_int8_t endpoint_length;
  u_int8_t endpoint_family;
  u_int16_t endpoint_port;
  u_int32_t endpoint_type;
  char endpoint_data[];
};

/* 6850 */
struct necp_client_parsed_parameters
{
  u_int32_t valid_fields;
  u_int32_t flags;
  necp_sockaddr_union local_addr;
  necp_sockaddr_union remote_addr;
  u_int32_t required_interface_index;
  char prohibited_interfaces[24][16];
  u_int8_t required_interface_type;
  u_int8_t prohibited_interface_types[16];
  necp_client_parameter_netagent_type required_netagent_types[16];
  necp_client_parameter_netagent_type prohibited_netagent_types[16];
  necp_client_parameter_netagent_type preferred_netagent_types[16];
  necp_client_parameter_netagent_type avoided_netagent_types[16];
  uuid_t required_netagents[16];
  uuid_t prohibited_netagents[16];
  uuid_t preferred_netagents[16];
  uuid_t avoided_netagents[16];
  u_int16_t ip_protocol;
  pid_t effective_pid;
  uuid_t effective_uuid;
  u_int32_t traffic_class;
};

/* 6851 */
struct necp_all_kstats
{
  necp_all_stats necp_stats_comm;
  necp_all_stats *necp_stats_ustats;
};

/* 6852 */
struct necp_all_stats
{
  necp_all_stats::$0029DBEAEE09611C9D3CEEB1561E6CA5 all_stats_u;
};

/* 6853 */
union necp_all_stats::$0029DBEAEE09611C9D3CEEB1561E6CA5
{
  necp_tcp_stats tcp_stats;
  necp_udp_stats udp_stats;
};

/* 6854 */
struct necp_tcp_stats
{
  necp_stats_hdr necp_tcp_hdr;
  necp_stat_counts necp_tcp_counts;
  necp_basic_metadata necp_tcp_basic;
  necp_extra_tcp_metadata necp_tcp_extra;
};

/* 6855 */
struct necp_stats_hdr
{
  u_int32_t necp_stats_type;
  u_int32_t necp_stats_ver;
  u_int64_t __necp_stats_reserved;
};

/* 6856 */
struct __attribute__((aligned(8))) necp_stat_counts
{
  u_int64_t necp_stat_rxpackets;
  u_int64_t necp_stat_rxbytes;
  u_int64_t necp_stat_txpackets;
  u_int64_t necp_stat_txbytes;
  u_int32_t necp_stat_rxduplicatebytes;
  u_int32_t necp_stat_rxoutoforderbytes;
  u_int32_t necp_stat_txretransmit;
  u_int32_t necp_stat_connectattempts;
  u_int32_t necp_stat_connectsuccesses;
  u_int32_t necp_stat_min_rtt;
  u_int32_t necp_stat_avg_rtt;
  u_int32_t necp_stat_var_rtt;
  u_int32_t necp_stat_route_flags;
};

/* 6857 */
struct necp_basic_metadata
{
  u_int32_t rcvbufsize;
  u_int32_t rcvbufused;
};

/* 6858 */
struct necp_extra_tcp_metadata
{
  necp_tcp_probe_status probestatus;
  u_int32_t sndbufsize;
  u_int32_t sndbufused;
  u_int32_t txunacked;
  u_int32_t txwindow;
  u_int32_t txcwindow;
  u_int32_t flags;
  u_int32_t flags1;
  u_int32_t traffic_mgt_flags;
  u_int32_t cc_alg_index;
  u_int32_t state;
  activity_bitmap_t activity_bitmap;
};

/* 6859 */
struct necp_tcp_probe_status
{
  unsigned __int32 probe_activated : 1;
  unsigned __int32 write_probe_failed : 1;
  unsigned __int32 read_probe_failed : 1;
  unsigned __int32 conn_probe_failed : 1;
};

/* 6860 */
struct necp_udp_stats
{
  necp_stats_hdr necp_udp_hdr;
  necp_stat_counts necp_udp_counts;
  necp_basic_metadata necp_udp_basic;
};

/* 6861 */
struct __attribute__((packed)) __attribute__((aligned(4))) necp_client_add_flow
{
  uuid_t agent_uuid;
  uuid_t registration_id;
  u_int16_t flags;
  u_int16_t stats_request_count;
  necp_client_flow_stats stats_requests[];
};

/* 6862 */
struct necp_client_flow_stats
{
  u_int32_t stats_type;
  u_int32_t stats_version;
  u_int32_t stats_size;
  mach_vm_address_t stats_addr;
};

/* 6863 */
struct mppcb
{
  mppcb::$7B38A80D309F5E77E8CBC0EFBA3AA75E mpp_entry;
  lck_mtx_t mpp_lock;
  mppcbinfo *mpp_pcbinfo;
  mptses *mpp_pcbe;
  socket *mpp_socket;
  uint32_t_0 mpp_flags;
  mppcb_state_t mpp_state;
  uuid_t necp_client_uuid;
  void (*necp_cb)(void *, int, uint32_t_0, uint32_t_0, _Bool *);
};

/* 6864 */
struct mppcb::$7B38A80D309F5E77E8CBC0EFBA3AA75E
{
  mppcb *tqe_next;
  mppcb **tqe_prev;
};

/* 6865 */
struct mppcbinfo
{
  mppcbinfo::$ECE15621885C42D9478F46CD9FCAE922 mppi_entry;
  mppcbinfo::$7F4E64B547603D17CF41CA1BCF180950 mppi_pcbs;
  uint32_t_0 mppi_count;
  zone *mppi_zone;
  uint32_t_0 mppi_size;
  lck_grp_t *mppi_lock_grp;
  lck_attr_t *mppi_lock_attr;
  lck_grp_attr_t *mppi_lock_grp_attr;
  lck_mtx_t mppi_lock;
  uint32_t_0 (*mppi_gc)(mppcbinfo *);
  uint32_t_0 (*mppi_timer)(mppcbinfo *);
};

/* 6866 */
struct mppcbinfo::$ECE15621885C42D9478F46CD9FCAE922
{
  mppcbinfo *tqe_next;
  mppcbinfo **tqe_prev;
};

/* 6867 */
struct mppcbinfo::$7F4E64B547603D17CF41CA1BCF180950
{
  mppcb *tqh_first;
  mppcb **tqh_last;
};

/* 6868 */
struct mptses
{
  mppcb *mpte_mppcb;
  mptcb *mpte_mptcb;
  mptses::$2881C00AA635AD927766C41535C0246A mpte_sopts;
  mptses::$FC610EC98F68B05D10B892A570698E28 mpte_subflows;
  uint16_t mpte_numflows;
  uint16_t mpte_nummpcapflows;
  sae_associd_t mpte_associd;
  sae_connid_t mpte_connid_last;
  mptses::$C22FFEAE6BF0CD142C1510AF65B6B9A9 _anon_0;
  mptses::$FB6E1578E2C0C6DC81779A78E15AA342 _anon_1;
  sockaddr_in mpte_dst_v4_nat64;
  uint16_t mpte_alternate_port;
  mptsub *mpte_active_sub;
  uint8_t_0 mpte_flags;
  uint8_t_0 mpte_svctype;
  uint8_t_0 mpte_lost_aid;
  uint8_t_0 mpte_addrid_last;
  uint32_t_0 mpte_itfinfo_size;
  mpt_itf_info _mpte_itfinfo[4];
  mpt_itf_info *mpte_itfinfo;
  mbuf *mpte_reinjectq;
  uint32_t_0 mpte_subflow_switches;
  unsigned __int32 mpte_used_cell : 1;
  unsigned __int32 mpte_used_wifi : 1;
  unsigned __int32 mpte_initial_cell : 1;
  uint32_t_0 mpte_triggered_cell;
  unsigned __int32 mpte_handshake_success : 1;
  mptcp_itf_stats mpte_itfstats[4];
  uint64_t_0 mpte_init_txbytes;
  uint64_t_0 mpte_init_rxbytes;
};

/* 6869 */
typedef mppcb_state mppcb_state_t;

/* 6870 */
struct _necp_flow_defunct_list
{
  necp_flow_defunct *lh_first;
};

/* 6871 */
struct __attribute__((aligned(8))) necp_flow_defunct
{
  necp_flow_defunct::$27791AEE155853294FA9F7CF5C7B7A50 chain;
  uuid_t flow_id;
  uuid_t nexus_agent;
  void *agent_handle;
  int proc_pid;
};

/* 6872 */
struct necp_flow_defunct::$27791AEE155853294FA9F7CF5C7B7A50
{
  necp_flow_defunct *le_next;
  necp_flow_defunct **le_prev;
};

/* 6873 */
struct necp_client_action_args
{
  int necp_fd;
  char necp_fd_r_[4];
  uint32_t_0 action;
  char action_r_[4];
  user_addr_t client_id;
  user_size_t client_id_len;
  user_addr_t buffer;
  user_size_t buffer_size;
  char buffer_size_r_[];
};

/* 6874 */
struct necp_client_nexus_parameters
{
  pid_t pid;
  pid_t epid;
  uuid_t euuid;
  necp_sockaddr_union local_addr;
  necp_sockaddr_union remote_addr;
  u_int16_t ip_protocol;
  u_int32_t traffic_class;
  necp_policy_id policy_id;
  unsigned __int32 is_listener : 1;
  unsigned __int32 allow_qos_marking : 1;
};

/* 6875 */
struct __attribute__((packed)) __attribute__((aligned(4))) necp_client_add_flow_default
{
  uuid_t agent_uuid;
  uuid_t registration_id;
  u_int16_t flags;
  u_int16_t stats_request_count;
  necp_client_flow_stats stats_requests[1];
};

/* 6876 */
struct necp_stats_bufreq
{
  u_int32_t necp_stats_bufreq_id;
  u_int32_t necp_stats_bufreq_type;
  u_int32_t necp_stats_bufreq_ver;
  u_int32_t necp_stats_bufreq_size;
  necp_stats_bufreq::$10C57029B89BFBF8BE275C8C5145F97C _anon_0;
};

/* 6877 */
union necp_stats_bufreq::$10C57029B89BFBF8BE275C8C5145F97C
{
  void *necp_stats_bufreq_addr;
  mach_vm_address_t necp_stats_bufreq_uaddr;
};

/* 6878 */
typedef necp_cache_buffer necp_cache_buffer_0;

/* 6879 */
struct necp_cache_buffer
{
  u_int8_t necp_cache_buf_type;
  u_int8_t necp_cache_buf_ver;
  u_int32_t necp_cache_buf_size;
  mach_vm_address_t necp_cache_buf_addr;
};

/* 6880 */
typedef necp_tcp_tfo_cache necp_tcp_tfo_cache_0;

/* 6881 */
struct necp_tcp_tfo_cache
{
  u_int8_t necp_tcp_tfo_cookie[16];
  u_int8_t necp_tcp_tfo_cookie_len;
  unsigned __int8 necp_tcp_tfo_heuristics_success : 1;
  unsigned __int8 necp_tcp_tfo_heuristics_loss : 1;
  unsigned __int8 necp_tcp_tfo_heuristics_middlebox : 1;
  unsigned __int8 necp_tcp_tfo_heuristics_success_req : 1;
  unsigned __int8 necp_tcp_tfo_heuristics_loss_req : 1;
  unsigned __int8 necp_tcp_tfo_heuristics_rst_data : 1;
  unsigned __int8 necp_tcp_tfo_heuristics_rst_req : 1;
};

/* 6882 */
typedef necp_tcp_ecn_cache necp_tcp_ecn_cache_0;

/* 6883 */
struct necp_tcp_ecn_cache
{
  unsigned __int8 necp_tcp_ecn_heuristics_success : 1;
  unsigned __int8 necp_tcp_ecn_heuristics_loss : 1;
  unsigned __int8 necp_tcp_ecn_heuristics_drop_rst : 1;
  unsigned __int8 necp_tcp_ecn_heuristics_drop_rxmt : 1;
  unsigned __int8 necp_tcp_ecn_heuristics_aggressive : 1;
  unsigned __int8 necp_tcp_ecn_heuristics_syn_rst : 1;
};

/* 6884 */
struct necp_agent_use_parameters
{
  uuid_t agent_uuid;
  uint64_t_0 out_use_count;
};

/* 6885 */
struct __attribute__((aligned(4))) necp_interface_details
{
  char name[24];
  u_int32_t index;
  u_int32_t generation;
  u_int32_t functional_type;
  u_int32_t delegate_index;
  u_int32_t flags;
  u_int32_t mtu;
  necp_interface_signature ipv4_signature;
  necp_interface_signature ipv6_signature;
};

/* 6886 */
struct necp_interface_signature
{
  u_int8_t signature[20];
  u_int8_t signature_len;
};

/* 6887 */
struct necp_client_result_interface
{
  u_int32_t generation;
  u_int32_t index;
};

/* 6888 */
struct necp_open_args
{
  int flags;
  char flags_r_[4];
};

/* 6889 */
struct __attribute__((packed)) __attribute__((aligned(2))) necp_client_nexus_flow_header
{
  necp_client_flow_header flow_header;
  necp_tlv_header agent_tlv_header;
  necp_client_result_netagent agent_value;
  necp_tlv_header tfo_cookie_tlv_header;
  u_int8_t tfo_cookie_value[16];
};

/* 6890 */
struct necp_client_flow_header
{
  necp_tlv_header outer_header;
  necp_tlv_header flow_id_tlv_header;
  uuid_t flow_id;
  necp_tlv_header flags_tlv_header;
  __attribute__((packed)) __attribute__((aligned(1))) u_int32_t flags_value;
  necp_tlv_header interface_tlv_header;
  necp_client_result_interface interface_value;
};

/* 6891 */
struct __attribute__((packed)) __attribute__((aligned(1))) necp_tlv_header
{
  u_int8_t type;
  u_int32_t length;
};

/* 6892 */
struct __attribute__((packed)) __attribute__((aligned(1))) necp_client_flow_protoctl_event_header
{
  necp_tlv_header protoctl_tlv_header;
  necp_client_flow_protoctl_event protoctl_event;
};

/* 6893 */
struct necp_match_policy_args
{
  user_addr_t parameters;
  user_size_t parameters_size;
  user_addr_t returned_result;
  char returned_result_r_[];
};

/* 6894 */
struct _netagent_list
{
  netagent_wrapper *lh_first;
};

/* 6895 */
struct netagent_wrapper
{
  netagent_wrapper::$C5D5672EF1DEE256654E05D54D65731A master_chain;
  u_int32_t control_unit;
  netagent_event_f event_handler;
  void *event_context;
  u_int32_t generation;
  u_int64_t use_count;
  netagent_client_list_s pending_triggers_list;
  netagent netagent;
};

/* 6896 */
struct netagent_wrapper::$C5D5672EF1DEE256654E05D54D65731A
{
  netagent_wrapper *le_next;
  netagent_wrapper **le_prev;
};

/* 6897 */
typedef errno_t (*netagent_event_f)(u_int8_t, unsigned __int8 *, pid_t, void *, void *, necp_client_nexus_parameters *, void **, size_t_0 *);

/* 6898 */
struct netagent_client_list_s
{
  netagent_client *lh_first;
};

/* 6899 */
struct __attribute__((aligned(8))) netagent_client
{
  netagent_client::$5F44D40124766680B1F6C20EAE99158E client_chain;
  uuid_t client_id;
  uuid_t client_proc_uuid;
  pid_t client_pid;
};

/* 6900 */
struct netagent_client::$5F44D40124766680B1F6C20EAE99158E
{
  netagent_client *le_next;
  netagent_client **le_prev;
};

/* 6901 */
struct netagent
{
  uuid_t netagent_uuid;
  char netagent_domain[32];
  char netagent_type[32];
  char netagent_desc[128];
  u_int32_t netagent_flags;
  u_int32_t netagent_data_size;
  u_int8_t netagent_data[];
};

/* 6902 */
enum netagent_error_domain_t : __int32
{
  kNetagentErrorDomainPOSIX = 0x0,
  kNetagentErrorDomainUserDefined = 0x1,
};

/* 6903 */
struct netagent_session
{
  u_int32_t control_unit;
  netagent_wrapper *wrapper;
  netagent_event_f event_handler;
  void *event_context;
};

/* 6904 */
struct netagent_req32
{
  uuid_t netagent_uuid;
  char netagent_domain[32];
  char netagent_type[32];
  char netagent_desc[128];
  u_int32_t netagent_flags;
  u_int32_t netagent_data_size;
  user32_addr_t netagent_data;
};

/* 6905 */
struct netagent_req64
{
  uuid_t netagent_uuid;
  char netagent_domain[32];
  char netagent_type[32];
  char netagent_desc[128];
  u_int32_t netagent_flags;
  u_int32_t netagent_data_size;
  user64_addr_t netagent_data;
};

/* 6906 */
struct netagentlist_req32
{
  u_int32_t data_size;
  user32_addr_t data;
};

/* 6907 */
struct netagentlist_req64
{
  u_int32_t data_size;
  user64_addr_t data;
};

/* 6908 */
struct netagent_message_header
{
  u_int8_t message_type;
  u_int8_t message_flags;
  u_int32_t message_id;
  u_int32_t message_error;
  u_int32_t message_payload_length;
};

/* 6909 */
struct netagent_assign_nexus_message
{
  uuid_t assign_client_id;
  u_int8_t assign_necp_results[];
};

/* 6910 */
struct netagent_trigger_message
{
  u_int32_t trigger_flags;
  pid_t trigger_pid;
  uuid_t trigger_proc_uuid;
};

/* 6911 */
struct netagent_client_message
{
  uuid_t client_id;
};

/* 6912 */
struct kev_netagent_data
{
  uuid_t netagent_uuid;
};

/* 6913 */
struct netagent_trigger_args
{
  user_addr_t agent_uuid;
  user_size_t agent_uuidlen;
  char agent_uuidlen_r_[];
};

/* 6914 */
struct $707F6C150F0D280721839E50FCD7FE0C
{
  pflog_softc *lh_first;
};

/* 6915 */
struct pflog_softc
{
  ifnet *sc_if;
  u_int32_t sc_flags;
  int sc_unit;
  pflog_softc::$C907B821E5B918DCE503B1F13917D074 sc_list;
};

/* 6916 */
struct pflog_softc::$C907B821E5B918DCE503B1F13917D074
{
  pflog_softc *le_next;
  pflog_softc **le_prev;
};

/* 6917 */
typedef pbuf_0 pbuf_t_0;

/* 6918 */
struct pbuf_0
{
  pbuf_type pb_type;
  pbuf::$0CE0E942110E40C42D9EE9737A8036BB pb_u;
  void *pb_data;
  uint32_t_0 pb_packet_len;
  uint32_t_0 pb_contig_len;
  uint32_t_0 *pb_csum_flags;
  uint32_t_0 *pb_csum_data;
  uint8_t_0 *pb_proto;
  uint8_t_0 *pb_flowsrc;
  uint32_t_0 *pb_flowid;
  uint32_t_0 *pb_flags;
  pf_mtag *pb_pftag;
  ifnet *pb_ifp;
  pbuf_0 *pb_next;
};

/* 6919 */
struct __attribute__((aligned(8))) pf_pdesc
{
  pf_pdesc::$FEF1E23A2076257DE54281E5733D7F4A lookup;
  u_int64_t tot_len;
  pf_pdesc::$808EA58F3AB2961697726AC246D44286 hdr;
  pf_addr baddr;
  pf_addr bdaddr;
  pf_addr naddr;
  pf_addr ndaddr;
  pf_rule *nat_rule;
  pf_addr *src;
  pf_addr *dst;
  ether_header *eh;
  pbuf_t_0 *mp;
  int lmw;
  pf_mtag *pf_mtag;
  u_int16_t *ip_sum;
  u_int32_t off;
  u_int32_t hdrlen;
  u_int32_t p_len;
  u_int16_t flags;
  sa_family_t af;
  sa_family_t naf;
  u_int8_t proto;
  u_int8_t tos;
  u_int8_t ttl;
  u_int8_t proto_variant;
  mbuf_svc_class_t sc;
  u_int32_t pktflags;
  u_int32_t flowsrc;
  u_int32_t flowhash;
};

/* 6920 */
struct pf_pdesc::$FEF1E23A2076257DE54281E5733D7F4A
{
  int done;
  uid_t uid;
  gid_t gid;
  pid_t pid;
};

/* 6921 */
union pf_pdesc::$808EA58F3AB2961697726AC246D44286
{
  tcphdr *tcp;
  udphdr *udp;
  icmp *icmp;
  icmp6_hdr *icmp6;
  pf_grev1_hdr *grev1;
  pf_esp_hdr *esp;
  void *any;
};

/* 6922 */
struct icmp
{
  u_char icmp_type;
  u_char icmp_code;
  u_short icmp_cksum;
  icmp::$59AB5B6EFDD9E9426C5156B0EB8FC241 icmp_hun;
  icmp::$9C079E0CAB990AA59356AFF74D2652AF icmp_dun;
};

/* 6923 */
struct icmp6_hdr
{
  u_int8_t icmp6_type;
  u_int8_t icmp6_code;
  u_int16_t icmp6_cksum;
  icmp6_hdr::$0081545B08822FDA0CB579A106E28B23 icmp6_dataun;
};

/* 6924 */
struct pf_grev1_hdr
{
  u_int16_t flags;
  u_int16_t protocol_type;
  u_int16_t payload_length;
  u_int16_t call_id;
};

/* 6925 */
struct pf_esp_hdr
{
  u_int32_t spi;
  u_int32_t seqno;
  u_int8_t payload[];
};

/* 6926 */
struct pfloghdr
{
  u_int8_t length;
  sa_family_t af;
  u_int8_t action;
  u_int8_t reason;
  char ifname[16];
  char ruleset[16];
  u_int32_t rulenr;
  u_int32_t subrulenr;
  uid_t uid;
  pid_t pid;
  uid_t rule_uid;
  pid_t rule_pid;
  u_int8_t dir;
  u_int8_t pad[3];
};

/* 6927 */
enum in6_clat46_evhdlr_code_t : __int32
{
  IN6_CLAT46_EVENT_V4_FLOW = 0x0,
  IN6_CLAT46_EVENT_V6_ADDR_CONFFAIL = 0x1,
};

/* 6928 */
struct ip6_frag
{
  u_int8_t ip6f_nxt;
  u_int8_t ip6f_reserved;
  u_int16_t ip6f_offlg;
  u_int32_t ip6f_ident;
};

/* 6929 */
struct nat464_addr
{
  nat464_addr::$40BC7B71E56309B90E189D090C80F2B3 nat464a;
};

/* 6930 */
union nat464_addr::$40BC7B71E56309B90E189D090C80F2B3
{
  in_addr _v4addr;
  in6_addr _v6addr;
  uint8_t_0 _addr8[16];
  uint16_t _addr16[8];
  uint32_t_0 _addr32[4];
};

/* 6931 */
union icmp::$59AB5B6EFDD9E9426C5156B0EB8FC241
{
  u_char ih_pptr;
  in_addr ih_gwaddr;
  ih_idseq ih_idseq;
  int ih_void;
  ih_pmtu ih_pmtu;
  ih_rtradv ih_rtradv;
};

/* 6932 */
struct ih_idseq
{
  n_short icd_id;
  n_short icd_seq;
};

/* 6933 */
typedef __uint16_t n_short;

/* 6934 */
struct ih_pmtu
{
  n_short ipm_void;
  n_short ipm_nextmtu;
};

/* 6935 */
struct ih_rtradv
{
  u_char irt_num_addrs;
  u_char irt_wpa;
  u_int16_t irt_lifetime;
};

/* 6936 */
union icmp::$9C079E0CAB990AA59356AFF74D2652AF
{
  id_ts id_ts;
  id_ip id_ip;
  icmp_ra_addr id_radv;
  u_int32_t id_mask;
  char id_data[1];
};

/* 6937 */
struct id_ts
{
  n_time its_otime;
  n_time its_rtime;
  n_time its_ttime;
};

/* 6938 */
typedef __uint32_t n_time;

/* 6939 */
struct id_ip
{
  ip idi_ip;
};

/* 6940 */
struct icmp_ra_addr
{
  u_int32_t ira_addr;
  u_int32_t ira_preference;
};

/* 6941 */
union icmp6_hdr::$0081545B08822FDA0CB579A106E28B23
{
  u_int32_t icmp6_un_data32[1];
  u_int16_t icmp6_un_data16[2];
  u_int8_t icmp6_un_data8[4];
};

/* 6942 */
struct in6_clat46_event_nwk_wq_entry
{
  nwk_wq_entry nwk_wqe;
  kev_netevent_clat46_data in6_clat46_ev_arg;
};

/* 6943 */
struct kev_netevent_clat46_data
{
  in6_clat46_evhdlr_code_t_0 clat46_event_code;
  pid_t epid;
  uuid_t euuid;
};

/* 6944 */
typedef in6_clat46_evhdlr_code_t in6_clat46_evhdlr_code_t_0;

/* 6945 */
struct eventhandler_entry_in6_clat46_event
{
  eventhandler_entry ee;
  in6_clat46_event_fn eh_func;
};

/* 6946 */
typedef void (*in6_clat46_event_fn)(eventhandler_entry_arg, in6_clat46_evhdlr_code_t_0, pid_t, unsigned __int8 *);

/* 6947 */
struct __attribute__((aligned(8))) pf_pool_limit
{
  void *pp;
  unsigned int limit;
};

/* 6948 */
struct pf_state
{
  u_int64_t id;
  u_int32_t creatorid;
  u_int32_t pad;
  pf_state::$2CF6EFA2C4E3074AB16D96069EC03836 entry_list;
  pf_state::$2CF6EFA2C4E3074AB16D96069EC03836 next;
  pf_state::$9FD6E9F5314843FF1636C5859BEA5084 entry_id;
  pf_state_peer src;
  pf_state_peer dst;
  pf_rule_ptr rule;
  pf_rule_ptr anchor;
  pf_rule_ptr nat_rule;
  pf_addr rt_addr;
  hook_desc_head unlink_hooks;
  pf_state_key *state_key;
  pfi_kif *kif;
  pfi_kif *rt_kif;
  pf_src_node *src_node;
  pf_src_node *nat_src_node;
  u_int64_t packets[2];
  u_int64_t bytes[2];
  u_int64_t creation;
  u_int64_t expire;
  u_int64_t pfsync_time;
  u_int16_t tag;
  u_int8_t log;
  u_int8_t allow_opts;
  u_int8_t timeout;
  u_int8_t sync_flags;
  netns_token nstoken;
};

/* 6949 */
struct pf_state::$2CF6EFA2C4E3074AB16D96069EC03836
{
  pf_state *tqe_next;
  pf_state **tqe_prev;
};

/* 6950 */
struct pf_state::$9FD6E9F5314843FF1636C5859BEA5084
{
  pf_state *rbe_left;
  pf_state *rbe_right;
  pf_state *rbe_parent;
};

/* 6951 */
struct __attribute__((aligned(8))) pf_state_peer
{
  u_int32_t seqlo;
  u_int32_t seqhi;
  u_int32_t seqdiff;
  u_int16_t max_win;
  u_int8_t state;
  u_int8_t wscale;
  u_int16_t mss;
  u_int8_t tcp_est;
  pf_state_scrub *scrub;
  u_int8_t pad[3];
};

/* 6952 */
struct __attribute__((aligned(8))) pf_state_scrub
{
  timeval pfss_last;
  u_int32_t pfss_tsecr;
  u_int32_t pfss_tsval;
  u_int32_t pfss_tsval0;
  u_int16_t pfss_flags;
  u_int8_t pfss_ttl;
  u_int8_t pad;
  u_int32_t pfss_ts_mod;
};

/* 6953 */
struct hook_desc_head
{
  hook_desc *tqh_first;
  hook_desc **tqh_last;
};

/* 6954 */
struct hook_desc
{
  hook_desc::$B53551698D9F75288B0AAAD5F5992E91 hd_list;
  hook_fn_t hd_fn;
  void *hd_arg;
};

/* 6955 */
struct hook_desc::$B53551698D9F75288B0AAAD5F5992E91
{
  hook_desc *tqe_next;
  hook_desc **tqe_prev;
};

/* 6956 */
typedef void (*hook_fn_t)(void *);

/* 6957 */
struct __attribute__((aligned(8))) pf_state_key
{
  pf_state_host lan;
  pf_state_host gwy;
  pf_state_host ext_lan;
  pf_state_host ext_gwy;
  sa_family_t af_lan;
  sa_family_t af_gwy;
  u_int8_t proto;
  u_int8_t direction;
  u_int8_t proto_variant;
  pf_app_state *app_state;
  u_int32_t flowsrc;
  u_int32_t flowhash;
  pf_state_key::$798268440E8049EBABF591AA218D562E entry_lan_ext;
  pf_state_key::$798268440E8049EBABF591AA218D562E entry_ext_gwy;
  pf_statelist states;
  u_int32_t refcnt;
};

/* 6958 */
struct pf_state_host
{
  pf_addr addr;
  pf_state_xport xport;
};

/* 6959 */
union pf_state_xport
{
  u_int16_t port;
  u_int16_t call_id;
  u_int32_t spi;
};

/* 6960 */
struct pf_app_state
{
  pf_app_handler handler;
  pf_app_compare compare_lan_ext;
  pf_app_compare compare_ext_gwy;
  pf_app_state::$71D3393A11DEE064E37EEA03418DC543 u;
};

/* 6961 */
typedef void (*pf_app_handler)(pf_state *, int, int, pf_pdesc *, pfi_kif *);

/* 6962 */
typedef int (*pf_app_compare)(pf_app_state *, pf_app_state *);

/* 6963 */
union pf_app_state::$71D3393A11DEE064E37EEA03418DC543
{
  pf_pptp_state pptp;
  pf_grev1_state grev1;
  pf_ike_state ike;
};

/* 6964 */
struct pf_pptp_state
{
  pf_state *grev1_state;
};

/* 6965 */
struct pf_grev1_state
{
  pf_state *pptp_state;
};

/* 6966 */
struct pf_ike_state
{
  u_int64_t cookie;
};

/* 6967 */
struct pf_state_key::$798268440E8049EBABF591AA218D562E
{
  pf_state_key *rbe_left;
  pf_state_key *rbe_right;
  pf_state_key *rbe_parent;
};

/* 6968 */
struct pf_statelist
{
  pf_state *tqh_first;
  pf_state **tqh_last;
};

/* 6969 */
struct __attribute__((aligned(8))) pf_src_node
{
  pf_src_node::$312E1D2CF232279A32D0E0116F5A70A5 entry;
  pf_addr addr;
  pf_addr raddr;
  pf_rule_ptr rule;
  pfi_kif *kif;
  u_int64_t bytes[2];
  u_int64_t packets[2];
  u_int32_t states;
  u_int32_t conn;
  pf_threshold conn_rate;
  u_int64_t creation;
  u_int64_t expire;
  sa_family_t af;
  u_int8_t ruletype;
};

/* 6970 */
struct pf_src_node::$312E1D2CF232279A32D0E0116F5A70A5
{
  pf_src_node *rbe_left;
  pf_src_node *rbe_right;
  pf_src_node *rbe_parent;
};

/* 6971 */
struct pf_threshold
{
  u_int32_t limit;
  u_int32_t seconds;
  u_int32_t count;
  u_int32_t last;
};

/* 6972 */
struct pf_state_tree_lan_ext
{
  pf_state_key *rbh_root;
};

/* 6973 */
struct pf_state_tree_ext_gwy
{
  pf_state_key *rbh_root;
};

/* 6974 */
struct pf_status
{
  u_int64_t counters[16];
  u_int64_t lcounters[7];
  u_int64_t fcounters[3];
  u_int64_t scounters[3];
  u_int64_t pcounters[2][2][3];
  u_int64_t bcounters[2][2];
  u_int64_t stateid;
  u_int32_t running;
  u_int32_t states;
  u_int32_t src_nodes;
  u_int64_t since;
  u_int32_t debug;
  u_int32_t hostid;
  char ifname[16];
  u_int8_t pf_chksum[16];
};

/* 6975 */
struct pf_anchor_stackframe
{
  pf_ruleset *rs;
  pf_rule *r;
  pf_anchor_node *parent;
  pf_anchor *child;
};

/* 6976 */
struct pool
{
  zone *pool_zone;
  const char *pool_name;
  unsigned int pool_count;
  unsigned int pool_hiwat;
  unsigned int pool_limit;
  unsigned int pool_fails;
};

/* 6977 */
struct pf_src_tree
{
  pf_src_node *rbh_root;
};

/* 6978 */
struct pf_state_tree_id
{
  pf_state *rbh_root;
};

/* 6979 */
struct pf_state_queue
{
  pf_state *tqh_first;
  pf_state **tqh_last;
};

/* 6980 */
enum pfi_kif_refs : __int32
{
  PFI_KIF_REF_NONE = 0x0,
  PFI_KIF_REF_STATE = 0x1,
  PFI_KIF_REF_RULE = 0x2,
};

/* 6981 */
enum pf_pptp_handler::$C57A6E48B6A665A816065055264F7725 : __int32
{
  PF_PPTP_PASS = 0x0,
  PF_PPTP_INSERT_GRE = 0x1,
  PF_PPTP_REMOVE_GRE = 0x2,
};

/* 6982 */
struct ip_fw_args
{
  mbuf *fwa_m;
  ifnet *fwa_oif;
  sockaddr_in *fwa_next_hop;
  ip_fw *fwa_ipfw_rule;
  pf_rule *fwa_pf_rule;
  ether_header *fwa_eh;
  int fwa_flags;
  int fwa_oflags;
  ip_fw_args::$2AD30D63151B2BA10F7A6FC4101997BB fwa_ipoa_;
  ip_fw_args::$DEFE77C7B1E7FC75ED828D511CF19703 fwa_ro_;
  ip_fw_args::$C907DCBED1F636D62FC7A8DDB3C597AB fwa_dst_;
  route_in6 *fwa_ro6_pmtu;
  ifnet *fwa_origifp;
  u_int32_t fwa_mtu;
  int fwa_alwaysfrag;
  u_int32_t fwa_unfragpartlen;
  ip6_exthdrs *fwa_exthdrs;
  ip_flow_id fwa_id;
  u_int16_t fwa_divert_rule;
  u_int32_t fwa_cookie;
};

/* 6983 */
struct ip_fw
{
  u_int32_t version;
  void *context;
  u_int64_t fw_pcnt;
  u_int64_t fw_bcnt;
  in_addr fw_src;
  in_addr fw_dst;
  in_addr fw_smsk;
  in_addr fw_dmsk;
  u_short fw_number;
  u_int fw_flg;
  ip_fw::$C5FCB1E568521986DEBEB7121BD6E07E fw_uar;
  u_int fw_ipflg;
  u_char fw_ipopt;
  u_char fw_ipnopt;
  u_char fw_tcpopt;
  u_char fw_tcpnopt;
  u_char fw_tcpf;
  u_char fw_tcpnf;
  __int64 timestamp;
  ip_fw_if fw_in_if;
  ip_fw_if fw_out_if;
  ip_fw::$DE3467BABAA005E378BA6F8B714C02B6 fw_un;
  u_char fw_prot;
  u_char fw_nports;
  void *pipe_ptr;
  void *next_rule_ptr;
  uid_t fw_uid;
  int fw_logamount;
  u_int64_t fw_loghighest;
};

/* 6984 */
union ip_fw_args::$2AD30D63151B2BA10F7A6FC4101997BB
{
  ip_out_args *_fwa_ipoa;
  ip6_out_args *_fwa_ip6oa;
};

/* 6985 */
union ip_fw_args::$DEFE77C7B1E7FC75ED828D511CF19703
{
  route *_fwa_ro;
  route_in6 *_fwa_ro6;
};

/* 6986 */
union ip_fw_args::$C907DCBED1F636D62FC7A8DDB3C597AB
{
  sockaddr_in *_fwa_dst;
  sockaddr_in6 *_fwa_dst6;
};

/* 6987 */
struct ip_flow_id
{
  u_int32_t dst_ip;
  u_int32_t src_ip;
  u_int16_t dst_port;
  u_int16_t src_port;
  u_int8_t proto;
  u_int8_t flags;
  u_int8_t addr_type;
  in6_addr dst_ip6;
  in6_addr src_ip6;
  u_int32_t flow_id6;
  u_int32_t frag_id6;
};

/* 6988 */
struct pf_state_key_cmp
{
  pf_state_host lan;
  pf_state_host gwy;
  pf_state_host ext_lan;
  pf_state_host ext_gwy;
  sa_family_t af_lan;
  sa_family_t af_gwy;
  u_int8_t proto;
  u_int8_t direction;
  u_int8_t proto_variant;
  pf_app_state *app_state;
};

/* 6989 */
struct pf_state_cmp
{
  u_int64_t id;
  u_int32_t creatorid;
  u_int32_t pad;
};

/* 6990 */
struct pf_flowhash_key
{
  pf_state_host ap1;
  pf_state_host ap2;
  u_int32_t af;
  u_int32_t proto;
};

/* 6991 */
struct __attribute__((aligned(8))) pf_ike_hdr
{
  u_int64_t initiator_cookie;
  u_int64_t responder_cookie;
  u_int8_t next_payload;
  u_int8_t version;
  u_int8_t exchange_type;
  u_int8_t flags;
  u_int32_t message_id;
  u_int32_t length;
};

/* 6992 */
struct ip6_ext
{
  u_int8_t ip6e_nxt;
  u_int8_t ip6e_len;
};

/* 6993 */
struct pf_pptp_ctrl_msg
{
  pf_pptp_hdr hdr;
  pf_pptp_ctrl_hdr ctrl;
  pf_pptp_ctrl_msg_union msg;
};

/* 6994 */
struct pf_pptp_hdr
{
  u_int16_t length;
  u_int16_t type;
  u_int32_t magic;
};

/* 6995 */
struct pf_pptp_ctrl_hdr
{
  u_int16_t type;
  u_int16_t reserved_0;
};

/* 6996 */
union pf_pptp_ctrl_msg_union
{
  pf_pptp_ctrl_start_req start_req;
  pf_pptp_ctrl_start_rpy start_rpy;
  pf_pptp_ctrl_stop_req stop_req;
  pf_pptp_ctrl_stop_rpy stop_rpy;
  pf_pptp_ctrl_echo_req echo_req;
  pf_pptp_ctrl_echo_rpy echo_rpy;
  pf_pptp_ctrl_call_out_req call_out_req;
  pf_pptp_ctrl_call_out_rpy call_out_rpy;
  pf_pptp_ctrl_call_in_1st call_in_1st;
  pf_pptp_ctrl_call_in_2nd call_in_2nd;
  pf_pptp_ctrl_call_in_3rd call_in_3rd;
  pf_pptp_ctrl_call_clr call_clr;
  pf_pptp_ctrl_call_disc call_disc;
  pf_pptp_ctrl_error error;
  pf_pptp_ctrl_set_linkinfo set_linkinfo;
  u_int8_t data[];
};

/* 6997 */
struct pf_pptp_ctrl_start_req
{
  u_int16_t protocol_version;
  u_int16_t reserved_1;
  u_int32_t framing_capabilities;
  u_int32_t bearer_capabilities;
  u_int16_t maximum_channels;
  u_int16_t firmware_revision;
  u_int8_t host_name[64];
  u_int8_t vendor_string[64];
};

/* 6998 */
struct pf_pptp_ctrl_start_rpy
{
  u_int16_t protocol_version;
  u_int8_t result_code;
  u_int8_t error_code;
  u_int32_t framing_capabilities;
  u_int32_t bearer_capabilities;
  u_int16_t maximum_channels;
  u_int16_t firmware_revision;
  u_int8_t host_name[64];
  u_int8_t vendor_string[64];
};

/* 6999 */
struct pf_pptp_ctrl_stop_req
{
  u_int8_t reason;
  u_int8_t reserved_1;
  u_int16_t reserved_2;
};

/* 7000 */
struct pf_pptp_ctrl_stop_rpy
{
  u_int8_t reason;
  u_int8_t error_code;
  u_int16_t reserved_1;
};

/* 7001 */
struct pf_pptp_ctrl_echo_req
{
  u_int32_t identifier;
};

/* 7002 */
struct pf_pptp_ctrl_echo_rpy
{
  u_int32_t identifier;
  u_int8_t result_code;
  u_int8_t error_code;
  u_int16_t reserved_1;
};

/* 7003 */
struct pf_pptp_ctrl_call_out_req
{
  u_int16_t call_id;
  u_int16_t call_sernum;
  u_int32_t min_bps;
  u_int32_t bearer_type;
  u_int32_t framing_type;
  u_int16_t rxwindow_size;
  u_int16_t proc_delay;
  u_int8_t phone_num[64];
  u_int8_t sub_addr[64];
};

/* 7004 */
struct pf_pptp_ctrl_call_out_rpy
{
  u_int16_t call_id;
  u_int16_t peer_call_id;
  u_int8_t result_code;
  u_int8_t error_code;
  u_int16_t cause_code;
  u_int32_t connect_speed;
  u_int16_t rxwindow_size;
  u_int16_t proc_delay;
  u_int32_t phy_channel_id;
};

/* 7005 */
struct pf_pptp_ctrl_call_in_1st
{
  u_int16_t call_id;
  u_int16_t call_sernum;
  u_int32_t bearer_type;
  u_int32_t phy_channel_id;
  u_int16_t dialed_number_len;
  u_int16_t dialing_number_len;
  u_int8_t dialed_num[64];
  u_int8_t dialing_num[64];
  u_int8_t sub_addr[64];
};

/* 7006 */
struct pf_pptp_ctrl_call_in_2nd
{
  u_int16_t call_id;
  u_int16_t peer_call_id;
  u_int8_t result_code;
  u_int8_t error_code;
  u_int16_t rxwindow_size;
  u_int16_t txdelay;
  u_int16_t reserved_1;
};

/* 7007 */
struct pf_pptp_ctrl_call_in_3rd
{
  u_int16_t call_id;
  u_int16_t reserved_1;
  u_int32_t connect_speed;
  u_int16_t rxwindow_size;
  u_int16_t txdelay;
  u_int32_t framing_type;
};

/* 7008 */
struct pf_pptp_ctrl_call_clr
{
  u_int16_t call_id;
  u_int16_t reserved_1;
};

/* 7009 */
struct pf_pptp_ctrl_call_disc
{
  u_int16_t call_id;
  u_int8_t result_code;
  u_int8_t error_code;
  u_int16_t cause_code;
  u_int16_t reserved_1;
  u_int8_t statistics[128];
};

/* 7010 */
struct pf_pptp_ctrl_error
{
  u_int16_t peer_call_id;
  u_int16_t reserved_1;
  u_int32_t crc_errors;
  u_int32_t fr_errors;
  u_int32_t hw_errors;
  u_int32_t buf_errors;
  u_int32_t tim_errors;
  u_int32_t align_errors;
};

/* 7011 */
struct pf_pptp_ctrl_set_linkinfo
{
  u_int16_t peer_call_id;
  u_int16_t reserved_1;
  u_int32_t tx_accm;
  u_int32_t rx_accm;
};

/* 7012 */
struct pfr_addr
{
  pfr_addr::$D81AA3602F3BC7FB2638AFCD9FC2A841 pfra_u;
  u_int8_t pfra_af;
  u_int8_t pfra_net;
  u_int8_t pfra_not;
  u_int8_t pfra_fback;
};

/* 7013 */
union pfr_addr::$D81AA3602F3BC7FB2638AFCD9FC2A841
{
  in_addr _pfra_ip4addr;
  in6_addr _pfra_ip6addr;
};

/* 7014 */
struct pfi_ifhead
{
  pfi_kif *rbh_root;
};

/* 7015 */
struct pfi_kif_cmp
{
  char pfik_name[16];
};

/* 7016 */
struct __attribute__((aligned(8))) pfi_uif
{
  char pfik_name[16];
  u_int64_t pfik_packets[2][2][2];
  u_int64_t pfik_bytes[2][2][2];
  u_int64_t pfik_tzero;
  int pfik_flags;
  int pfik_states;
  int pfik_rules;
};

/* 7017 */
struct pfioctl::$0D5AA4234AE98BA5D9DA7BBE609B5556
{
  pfioctl::$0D5AA4234AE98BA5D9DA7BBE609B5556::$0AD67F46AC0F4CF43023CDCABD233068 _u;
};

/* 7018 */
union pfioctl::$0D5AA4234AE98BA5D9DA7BBE609B5556::$0AD67F46AC0F4CF43023CDCABD233068
{
  pfioc_trans_32 _s_32;
  pfioc_trans_64 _s_64;
};

/* 7019 */
struct __attribute__((aligned(8))) pfioc_trans_32
{
  int size;
  int esize;
  user32_addr_t array;
};

/* 7020 */
struct pfioc_trans_64
{
  int size;
  int esize;
  user64_addr_t array;
};

/* 7021 */
struct pfioctl::$24F77C0B45A363B2709A2FE131E1116A
{
  pfioctl::$24F77C0B45A363B2709A2FE131E1116A::$E1246DBF1B81E2DEFF6471603C0CF684 _u;
};

/* 7022 */
union pfioctl::$24F77C0B45A363B2709A2FE131E1116A::$E1246DBF1B81E2DEFF6471603C0CF684
{
  pfioc_table_32 _s_32;
  pfioc_table_64 _s_64;
};

/* 7023 */
struct pfioc_table_32
{
  pfr_table pfrio_table;
  user32_addr_t pfrio_buffer;
  __attribute__((aligned(8))) int pfrio_esize;
  int pfrio_size;
  int pfrio_size2;
  int pfrio_nadd;
  int pfrio_ndel;
  int pfrio_nchange;
  int pfrio_flags;
  u_int32_t pfrio_ticket;
};

/* 7024 */
struct pfioc_table_64
{
  pfr_table pfrio_table;
  user64_addr_t pfrio_buffer;
  int pfrio_esize;
  int pfrio_size;
  int pfrio_size2;
  int pfrio_nadd;
  int pfrio_ndel;
  int pfrio_nchange;
  int pfrio_flags;
  u_int32_t pfrio_ticket;
};

/* 7025 */
struct pfioctl::$00E3BF5A441907ADA688B5DCB3D0EF2F
{
  pfioctl::$00E3BF5A441907ADA688B5DCB3D0EF2F::$292E9F2364E2CD2ECBB8548FE647FEB4 _u;
};

/* 7026 */
union pfioctl::$00E3BF5A441907ADA688B5DCB3D0EF2F::$292E9F2364E2CD2ECBB8548FE647FEB4
{
  pfioc_iface_32 _s_32;
  pfioc_iface_64 _s_64;
};

/* 7027 */
struct pfioc_iface_32
{
  char pfiio_name[16];
  user32_addr_t pfiio_buffer;
  __attribute__((aligned(8))) int pfiio_esize;
  int pfiio_size;
  int pfiio_nzero;
  int pfiio_flags;
};

/* 7028 */
struct pfioc_iface_64
{
  char pfiio_name[16];
  user64_addr_t pfiio_buffer;
  int pfiio_esize;
  int pfiio_size;
  int pfiio_nzero;
  int pfiio_flags;
};

/* 7029 */
union pfioctl::$ED7A68FCB8B1D452954CDA44FD11B350::$E83A66FF8121E247E2E314E74C96A2D0
{
  pfioc_src_nodes_32 _s_32;
  pfioc_src_nodes_64 _s_64;
};

/* 7030 */
struct pfioc_src_nodes_32
{
  int psn_len;
  __attribute__((aligned(8))) pfioc_src_nodes_32::$3BAFAFF85425455E623498DAFABB9147 psn_u;
};

/* 7031 */
union pfioc_src_nodes_32::$3BAFAFF85425455E623498DAFABB9147
{
  user32_addr_t psu_buf;
  user32_addr_t psu_src_nodes;
};

/* 7032 */
struct pfioc_src_nodes_64
{
  int psn_len;
  pfioc_src_nodes_64::$D8B738886EFC49C911F7937FC9339979 psn_u;
};

/* 7033 */
union pfioc_src_nodes_64::$D8B738886EFC49C911F7937FC9339979
{
  user64_addr_t psu_buf;
  user64_addr_t psu_src_nodes;
};

/* 7034 */
union pfioctl::$A0660790E8912B602D55B16ED7FE1B5B::$C7E4B873F479EB6A0DBF842AE1C83219
{
  pfioc_tokens_32 _s_32;
  pfioc_tokens_64 _s_64;
};

/* 7035 */
struct pfioc_tokens_32
{
  int size;
  __attribute__((aligned(8))) pfioc_tokens_32::$2E7E427449094741414276DCD79EECE0 pgt_u;
};

/* 7036 */
union pfioc_tokens_32::$2E7E427449094741414276DCD79EECE0
{
  user32_addr_t pgtu_buf;
  user32_addr_t pgtu_tokens;
};

/* 7037 */
struct pfioc_tokens_64
{
  int size;
  pfioc_tokens_64::$B8F6FADF4F93A4B52910CB59A6E84AFF pgt_u;
};

/* 7038 */
union pfioc_tokens_64::$B8F6FADF4F93A4B52910CB59A6E84AFF
{
  user64_addr_t pgtu_buf;
  user64_addr_t pgtu_tokens;
};

/* 7039 */
union pfioctl::$BA82F209FB920C14FA9F06B84E4E7F70::$18FF4974C1D0044D298D1467BED12FB4
{
  pfioc_states_32 _s_32;
  pfioc_states_64 _s_64;
};

/* 7040 */
struct pfioc_states_32
{
  int ps_len;
  __attribute__((aligned(8))) pfioc_states_32::$839CF0D0496BB4F0F92250E1CEA43065 ps_u;
};

/* 7041 */
union pfioc_states_32::$839CF0D0496BB4F0F92250E1CEA43065
{
  user32_addr_t psu_buf;
  user32_addr_t psu_states;
};

/* 7042 */
struct pfioc_states_64
{
  int ps_len;
  pfioc_states_64::$7F7319B7ED448E2FC9E9A5370F4FF7D5 ps_u;
};

/* 7043 */
union pfioc_states_64::$7F7319B7ED448E2FC9E9A5370F4FF7D5
{
  user64_addr_t psu_buf;
  user64_addr_t psu_states;
};

/* 7044 */
struct list_head_0
{
  pfioc_kernel_token *slh_first;
};

/* 7045 */
struct __attribute__((aligned(8))) pfioc_kernel_token
{
  pfioc_kernel_token::$ABA55CCC35E74CE7CD8E5B5D25B723E9 next;
  pfioc_token token;
};

/* 7046 */
struct pfioc_kernel_token::$ABA55CCC35E74CE7CD8E5B5D25B723E9
{
  pfioc_kernel_token *sle_next;
};

/* 7047 */
struct __attribute__((packed)) __attribute__((aligned(4))) pfioc_token
{
  u_int64_t token_value;
  u_int64_t timestamp;
  pid_t pid;
  char proc_name[64];
};

/* 7048 */
struct pf_tags
{
  pf_tagname *tqh_first;
  pf_tagname **tqh_last;
};

/* 7049 */
struct pf_tagname
{
  pf_tagname::$D6BBD0B9022405EC68C2A59E60DAE595 entries;
  char name[64];
  u_int16_t tag;
  int ref;
};

/* 7050 */
struct pf_tagname::$D6BBD0B9022405EC68C2A59E60DAE595
{
  pf_tagname *tqe_next;
  pf_tagname **tqe_prev;
};

/* 7051 */
struct pfioc_rule
{
  u_int32_t action;
  u_int32_t ticket;
  u_int32_t pool_ticket;
  u_int32_t nr;
  char anchor[1024];
  char anchor_call[1024];
  pf_rule rule;
};

/* 7052 */
struct pfioc_if
{
  char ifname[16];
};

/* 7053 */
struct pf_ifspeed
{
  char ifname[16];
  u_int64_t baudrate;
};

/* 7054 */
struct pfioc_trans_e
{
  int rs_num;
  char anchor[1024];
  u_int32_t ticket;
};

/* 7055 */
struct pfioc_ruleset
{
  u_int32_t nr;
  char path[1024];
  char name[64];
};

/* 7056 */
struct pfioc_state
{
  pfsync_state state;
};

/* 7057 */
struct __attribute__((packed)) __attribute__((aligned(1))) pfsync_state
{
  u_int32_t id[2];
  char ifname[16];
  pfsync_state_host lan;
  pfsync_state_host gwy;
  pfsync_state_host ext_lan;
  pfsync_state_host ext_gwy;
  pfsync_state_peer src;
  pfsync_state_peer dst;
  pf_addr rt_addr;
  hook_desc_head unlink_hooks;
  u_int32_t rule;
  u_int32_t anchor;
  u_int32_t nat_rule;
  u_int64_t creation;
  u_int64_t expire;
  u_int32_t packets[2][2];
  u_int32_t bytes[2][2];
  u_int32_t creatorid;
  u_int16_t tag;
  sa_family_t af_lan;
  sa_family_t af_gwy;
  u_int8_t proto;
  u_int8_t direction;
  u_int8_t log;
  u_int8_t allow_opts;
  u_int8_t timeout;
  u_int8_t sync_flags;
  u_int8_t updates;
  u_int8_t proto_variant;
  u_int8_t __pad;
  u_int32_t flowhash;
};

/* 7058 */
struct pfsync_state_host
{
  pf_addr addr;
  pf_state_xport xport;
  u_int16_t pad[2];
};

/* 7059 */
struct pfsync_state_peer
{
  pfsync_state_scrub scrub;
  u_int32_t seqlo;
  u_int32_t seqhi;
  u_int32_t seqdiff;
  u_int16_t max_win;
  u_int16_t mss;
  u_int8_t state;
  u_int8_t wscale;
  u_int8_t pad[6];
};

/* 7060 */
struct pfsync_state_scrub
{
  u_int16_t pfss_flags;
  u_int8_t pfss_ttl;
  u_int8_t scrub_flag;
  u_int32_t pfss_ts_mod;
};

/* 7061 */
struct dummynet_event
{
  uint32_t_0 dn_event_code;
  dummynet_event::$C197BA44CF565185ECCB386835C0608C dn_event;
};

/* 7062 */
union dummynet_event::$C197BA44CF565185ECCB386835C0608C
{
  dn_pipe_mini_config _dnev_pipe_config;
  dn_rule_mini_config _dnev_rule_config;
};

/* 7063 */
struct dn_pipe_mini_config
{
  uint32_t_0 bandwidth;
  uint32_t_0 delay;
  uint32_t_0 plr;
};

/* 7064 */
struct dn_rule_mini_config
{
  uint32_t_0 dir;
  uint32_t_0 af;
  uint32_t_0 proto;
  uint32_t_0 src_port;
  uint32_t_0 dst_port;
  char ifname[24];
};

/* 7065 */
struct pfioc_pooladdr
{
  u_int32_t action;
  u_int32_t ticket;
  u_int32_t nr;
  u_int32_t r_num;
  u_int8_t r_action;
  u_int8_t r_last;
  u_int8_t af;
  char anchor[1024];
  pf_pooladdr addr;
};

/* 7066 */
struct pfioc_limit
{
  int index;
  unsigned int limit;
};

/* 7067 */
struct pfioc_state_kill
{
  sa_family_t psk_af;
  u_int8_t psk_proto;
  u_int8_t psk_proto_variant;
  u_int8_t _pad;
  pfioc_state_addr_kill psk_src;
  pfioc_state_addr_kill psk_dst;
  char psk_ifname[16];
  char psk_ownername[64];
};

/* 7068 */
struct __attribute__((aligned(8))) pfioc_state_addr_kill
{
  pf_addr_wrap addr;
  u_int8_t reserved_[3];
  u_int8_t neg;
  pf_rule_xport xport;
};

/* 7069 */
struct pfioc_tm
{
  int timeout;
  int seconds;
};

/* 7070 */
struct pfioc_natlook
{
  pf_addr saddr;
  pf_addr daddr;
  pf_addr rsaddr;
  pf_addr rdaddr;
  pf_state_xport sxport;
  pf_state_xport dxport;
  pf_state_xport rsxport;
  pf_state_xport rdxport;
  sa_family_t af;
  u_int8_t proto;
  u_int8_t proto_variant;
  u_int8_t direction;
};

/* 7071 */
struct pfioc_src_node_kill
{
  sa_family_t psnk_af;
  pf_rule_addr psnk_src;
  pf_rule_addr psnk_dst;
};

/* 7072 */
struct pfioc_remove_token
{
  u_int64_t token_value;
  u_int64_t refcount;
};

/* 7073 */
struct pf_osfp_ioctl
{
  pf_osfp_entry fp_os;
  pf_tcpopts_t fp_tcpopts;
  u_int16_t fp_wsize;
  u_int16_t fp_psize;
  u_int16_t fp_mss;
  u_int16_t fp_flags;
  u_int8_t fp_optcnt;
  u_int8_t fp_wscale;
  u_int8_t fp_ttl;
  int fp_getnum;
};

/* 7074 */
struct pf_osfp_entry
{
  pf_osfp_entry::$D4A3B64FE42D7B07D47A78D28ED29B28 fp_entry;
  pf_osfp_t fp_os;
  int fp_enflags;
  char fp_class_nm[32];
  char fp_version_nm[32];
  char fp_subtype_nm[32];
};

/* 7075 */
struct pf_osfp_entry::$D4A3B64FE42D7B07D47A78D28ED29B28
{
  pf_osfp_entry *sle_next;
};

/* 7076 */
typedef u_int64_t pf_tcpopts_t;

/* 7077 */
struct pf_fragqueue
{
  pf_fragment *tqh_first;
  pf_fragment **tqh_last;
};

/* 7078 */
struct pf_fragment
{
  pf_fragment::$A79141ABDBAF6231EB8EF74B60906EA8 fr_entry;
  pf_fragment::$CED36FF3AF7E4155386BA4B7315DCE52 frag_next;
  pf_addr fr_srcx;
  pf_addr fr_dstx;
  u_int8_t fr_p;
  u_int8_t fr_flags;
  u_int16_t fr_max;
  pf_fragment::$DA0CBC2CD5C48511FED352AE4CC483A6 fr_uid;
  int fr_af;
  u_int32_t fr_timeout;
  pf_fragment::$E27E9275CA0E0C988B38FC62E6A60848 fr_u;
  uint32_t_0 fr_csum_flags;
  uint32_t_0 fr_csum;
};

/* 7079 */
struct pf_fragment::$A79141ABDBAF6231EB8EF74B60906EA8
{
  pf_fragment *rbe_left;
  pf_fragment *rbe_right;
  pf_fragment *rbe_parent;
};

/* 7080 */
struct pf_fragment::$CED36FF3AF7E4155386BA4B7315DCE52
{
  pf_fragment *tqe_next;
  pf_fragment **tqe_prev;
};

/* 7081 */
union pf_fragment::$DA0CBC2CD5C48511FED352AE4CC483A6
{
  u_int16_t fru_id4;
  u_int32_t fru_id6;
};

/* 7082 */
union pf_fragment::$E27E9275CA0E0C988B38FC62E6A60848
{
  pf_fragq fru_queue;
  pf_cacheq fru_cache;
};

/* 7083 */
struct pf_fragq
{
  pf_frent *lh_first;
};

/* 7084 */
struct __attribute__((aligned(8))) pf_frent
{
  pf_frent::$7DAF949828E53071FD272C91DA6D35BE fr_next;
  mbuf *fr_m;
  pf_frent::$DA29E026EF8A68D0FD82A9E3A32C0F74 fr_u;
  ip6_frag fr_ip6f_opt;
  int fr_ip6f_hlen;
};

/* 7085 */
struct pf_frent::$7DAF949828E53071FD272C91DA6D35BE
{
  pf_frent *le_next;
  pf_frent **le_prev;
};

/* 7086 */
union pf_frent::$DA29E026EF8A68D0FD82A9E3A32C0F74
{
  ip *fru_ipv4;
  ip6_hdr *fru_ipv6;
};

/* 7087 */
struct pf_cacheq
{
  pf_frcache *lh_first;
};

/* 7088 */
struct __attribute__((aligned(8))) pf_frcache
{
  pf_frcache::$6900F1608DEFAF177084ACF39FCAA640 fr_next;
  uint16_t fr_off;
  uint16_t fr_end;
};

/* 7089 */
struct pf_frcache::$6900F1608DEFAF177084ACF39FCAA640
{
  pf_frcache *le_next;
  pf_frcache **le_prev;
};

/* 7090 */
struct pf_cachequeue
{
  pf_fragment *tqh_first;
  pf_fragment **tqh_last;
};

/* 7091 */
struct pf_frag_tree
{
  pf_fragment *rbh_root;
};

/* 7092 */
struct pf_osfp_list
{
  pf_os_fingerprint *slh_first;
};

/* 7093 */
struct pf_os_fingerprint
{
  pf_osfp_enlist fp_oses;
  pf_tcpopts_t fp_tcpopts;
  u_int16_t fp_wsize;
  u_int16_t fp_psize;
  u_int16_t fp_mss;
  u_int16_t fp_flags;
  u_int8_t fp_optcnt;
  u_int8_t fp_wscale;
  u_int8_t fp_ttl;
  pf_os_fingerprint::$FFD955EBEACB541F1D4DCC6EA8979C87 fp_next;
};

/* 7094 */
struct pf_osfp_enlist
{
  pf_osfp_entry *slh_first;
};

/* 7095 */
struct pf_os_fingerprint::$FFD955EBEACB541F1D4DCC6EA8979C87
{
  pf_os_fingerprint *sle_next;
};

/* 7096 */
struct pf_anchor_global
{
  pf_anchor *rbh_root;
};

/* 7097 */
union sockaddr_union
{
  sockaddr sa;
  sockaddr_in sin;
  sockaddr_in6 sin6;
};

/* 7098 */
struct pfr_ktablehead
{
  pfr_ktable *rbh_root;
};

/* 7099 */
enum pfrw_op : __int32
{
  PFRW_MARK = 0x0,
  PFRW_SWEEP = 0x1,
  PFRW_ENQUEUE = 0x2,
  PFRW_GET_ADDRS = 0x3,
  PFRW_GET_ASTATS = 0x4,
  PFRW_POOL_GET = 0x5,
  PFRW_DYNADDR_UPDATE = 0x6,
};

/* 7100 */
struct __attribute__((aligned(4))) pfr_kentry
{
  radix_node pfrke_node[2];
  sockaddr_union pfrke_sa;
  u_int64_t pfrke_packets[2][2];
  u_int64_t pfrke_bytes[2][2];
  pfr_kentry::$35C56135657534BC906518595E911664 pfrke_workq;
  u_int64_t pfrke_tzero;
  u_int8_t pfrke_af;
  u_int8_t pfrke_net;
  u_int8_t pfrke_not;
  u_int8_t pfrke_mark;
  u_int8_t pfrke_intrpool;
};

/* 7101 */
struct pfr_kentry::$35C56135657534BC906518595E911664
{
  pfr_kentry *sle_next;
};

/* 7102 */
struct pfr_kentryworkq
{
  pfr_kentry *slh_first;
};

/* 7103 */
struct pfr_walktree
{
  pfrw_op pfrw_op;
  pfr_walktree::$E7109846EC4311064660E7C4BDCCBA50 pfrw_1;
  int pfrw_free;
  int pfrw_flags;
};

/* 7104 */
union pfr_walktree::$E7109846EC4311064660E7C4BDCCBA50
{
  user_addr_t pfrw1_addr;
  user_addr_t pfrw1_astats;
  pfr_kentryworkq *pfrw1_workq;
  pfr_kentry *pfrw1_kentry;
  pfi_dynaddr *pfrw1_dyn;
};

/* 7105 */
struct pfr_ktableworkq
{
  pfr_ktable *slh_first;
};

/* 7106 */
struct pfr_astats
{
  pfr_addr pfras_a;
  u_int64_t pfras_packets[2][2];
  u_int64_t pfras_bytes[2][2];
  u_int64_t pfras_tzero;
};

/* 7107 */
struct iptap_list
{
  iptap_softc *lh_first;
};

/* 7108 */
struct iptap_softc
{
  iptap_softc::$F40F90A4EE3B82DBEAE76322F2EA4A89 iptap_link;
  uint32_t_0 iptap_unit;
  uint32_t_0 iptap_dlt_raw_count;
  uint32_t_0 iptap_dlt_pkttap_count;
  ifnet *iptap_ifp;
};

/* 7109 */
struct iptap_softc::$F40F90A4EE3B82DBEAE76322F2EA4A89
{
  iptap_softc *le_next;
  iptap_softc **le_prev;
};

/* 7110 */
typedef struct opaque_ipfilter *ipfilter_t;

/* 7111 */
struct opaque_ipfilter;

/* 7112 */
struct ipf_filter
{
  void *cookie;
  const char *name;
  ipf_input_func ipf_input;
  ipf_output_func ipf_output;
  ipf_detach_func ipf_detach;
};

/* 7113 */
typedef errno_t (*ipf_input_func)(void *, mbuf_t *, int, u_int8_t);

/* 7114 */
typedef errno_t (*ipf_output_func)(void *, mbuf_t *, ipf_pktopts_t);

/* 7115 */
typedef ipf_pktopts *ipf_pktopts_t;

/* 7116 */
struct __attribute__((aligned(4))) ipf_pktopts
{
  u_int32_t ippo_flags;
  ifnet_t ippo_mcast_ifnet;
  int ippo_mcast_loop;
  u_int8_t ippo_mcast_ttl;
};

/* 7117 */
typedef void (*ipf_detach_func)(void *);

/* 7118 */
struct $<10536362,1>::$B3F3030D6B33F052917DCA41F88E8100
{
  pktap_header hdr;
  u_int32_t proto;
};

/* 7119 */
struct pktap_list
{
  pktap_softc *lh_first;
};

/* 7120 */
struct pktap_softc
{
  pktap_softc::$729D447B4AC7E14D95A183765B9F2B68 pktp_link;
  uint32_t_0 pktp_unit;
  uint32_t_0 pktp_dlt_raw_count;
  uint32_t_0 pktp_dlt_pkttap_count;
  ifnet *pktp_ifp;
  pktap_filter pktp_filters[8];
};

/* 7121 */
struct pktap_softc::$729D447B4AC7E14D95A183765B9F2B68
{
  pktap_softc *le_next;
  pktap_softc **le_prev;
};

/* 7122 */
struct pktap_filter
{
  uint32_t_0 filter_op;
  uint32_t_0 filter_param;
  pktap_filter::$4BF5FA59515DDE0EA2DCC5877F28393B param_;
  size_t_0 filter_ifname_prefix_len;
};

/* 7123 */
union pktap_filter::$4BF5FA59515DDE0EA2DCC5877F28393B
{
  uint32_t_0 _filter_if_type;
  char _filter_if_name[24];
};

/* 7124 */
struct pktap_bpf_tap::$B3F3030D6B33F052917DCA41F88E8100
{
  pktap_header hdr;
  u_int32_t proto;
};

/* 7125 */
struct pktap_bpf_tap_packet::$2C44D385BE517849FE9A103B00B7B62F
{
  pktap_header pkth;
  pktap_bpf_tap_packet::$2C44D385BE517849FE9A103B00B7B62F::$A2CA752D56E3BFDBE2FC45B34714A15D extra;
};

/* 7126 */
union pktap_bpf_tap_packet::$2C44D385BE517849FE9A103B00B7B62F::$A2CA752D56E3BFDBE2FC45B34714A15D
{
  uint8_t_0 llhdr[16];
  uint32_t_0 proto;
};

/* 7127 */
struct x_pktap_filter
{
  uint32_t_0 filter_op;
  uint32_t_0 filter_param;
  x_pktap_filter::$4BF5FA59515DDE0EA2DCC5877F28393B param_;
};

/* 7128 */
union x_pktap_filter::$4BF5FA59515DDE0EA2DCC5877F28393B
{
  uint32_t_0 _filter_if_type;
  char _filter_if_name[24];
};

/* 7129 */
typedef void (*tap_packet_func)(ifnet_t, u_int32_t, kern_packet_t, void *, size_t_0);

/* 7130 */
struct pktap_buffer_v2_hdr_extra
{
  pktap_v2_hdr_space hdr_space;
  pktap_header_extra extra;
};

/* 7131 */
struct __attribute__((aligned(4))) pktap_v2_hdr_space
{
  pktap_v2_hdr pth_hdr;
  uint8_t_0 pth_uuid[16];
  uint8_t_0 pth_e_uuid[16];
  uint8_t_0 pth_ifname[24];
  uint8_t_0 pth_comm[17];
  uint8_t_0 pth_e_comm[17];
};

/* 7132 */
struct __attribute__((aligned(8))) if_llreach_info
{
  u_int32_t lri_refcnt;
  u_int32_t lri_ifindex;
  u_int64_t lri_expire;
  u_int32_t lri_probes;
  u_int16_t lri_reserved;
  u_int16_t lri_proto;
  u_int8_t lri_addr[64];
  int32_t lri_rssi;
  int32_t lri_lqm;
  int32_t lri_npm;
  u_int8_t lri_reserved2[16];
};

/* 7133 */
typedef u_int32_t net_flowhash_fn_t(const void *, u_int32_t, const u_int32_t);

/* 7134 */
struct fadv_head
{
  flowadv_fcentry *stqh_first;
  flowadv_fcentry **stqh_last;
};

/* 7135 */
struct flowadv_fcentry
{
  flowadv_fcentry::$2E8352710406257C17F0049CDCDA129E fce_link;
  u_int32_t fce_flowsrc_type;
  u_int32_t fce_flowid;
  flowadv_token_t fce_flowsrc_token;
  flowadv_idx_t fce_flowsrc_fidx;
  ifnet *fce_ifp;
};

/* 7136 */
struct flowadv_fcentry::$2E8352710406257C17F0049CDCDA129E
{
  flowadv_fcentry *stqe_next;
};

/* 7137 */
typedef uint32_t_0 flowadv_token_t;

/* 7138 */
struct flowadv_fclist
{
  flowadv_fcentry *stqh_first;
  flowadv_fcentry **stqh_last;
};

/* 7139 */
struct content_filter
{
  kern_ctl_ref cf_kcref;
  u_int32_t cf_kcunit;
  u_int32_t cf_flags;
  uint32_t_0 cf_necp_control_unit;
  uint32_t_0 cf_sock_count;
  content_filter::$08EADE78A97261784651940F3EBDF1CE cf_sock_entries;
};

/* 7140 */
struct content_filter::$08EADE78A97261784651940F3EBDF1CE
{
  cfil_entry *tqh_first;
  cfil_entry **tqh_last;
};

/* 7141 */
struct cfil_entry
{
  cfil_entry::$1EDE1881E62B8980BDB3EBF0FA2E03FF cfe_link;
  content_filter *cfe_filter;
  cfil_info *cfe_cfil_info;
  uint32_t_0 cfe_flags;
  uint32_t_0 cfe_necp_control_unit;
  timeval cfe_last_event;
  timeval cfe_last_action;
  cfe_buf cfe_snd;
  cfe_buf cfe_rcv;
};

/* 7142 */
struct cfil_entry::$1EDE1881E62B8980BDB3EBF0FA2E03FF
{
  cfil_entry *tqe_next;
  cfil_entry **tqe_prev;
};

/* 7143 */
struct cfil_info::$82FF11EA697E4763DBF675A70142FBC3
{
  cfil_info *tqe_next;
  cfil_info **tqe_prev;
};

/* 7144 */
struct cfilhashhead
{
  cfil_hash_entry *lh_first;
};

/* 7145 */
struct cfil_hash_entry
{
  cfil_hash_entry::$356625D3025A83D6C9733D794691115A cfentry_link;
  cfil_info *cfentry_cfil;
  u_short cfentry_fport;
  u_short cfentry_lport;
  sa_family_t cfentry_family;
  u_int32_t cfentry_flowhash;
  u_int32_t cfentry_lastused;
  cfil_hash_entry::$B57C43FAEC156A81089BF1A464DC24FC cfentry_faddr;
  cfil_hash_entry::$B57C43FAEC156A81089BF1A464DC24FC cfentry_laddr;
};

/* 7146 */
struct cfil_hash_entry::$356625D3025A83D6C9733D794691115A
{
  cfil_hash_entry *le_next;
  cfil_hash_entry **le_prev;
};

/* 7147 */
union cfil_hash_entry::$B57C43FAEC156A81089BF1A464DC24FC
{
  in_addr_4in6 addr46;
  in6_addr addr6;
};

/* 7148 */
struct timeval64
{
  __int64_t tv_sec;
  __int64_t tv_usec;
};

/* 7149 */
struct cfi_buf
{
  uint64_t_0 cfi_pending_first;
  uint64_t_0 cfi_pending_last;
  uint32_t_0 cfi_pending_mbcnt;
  uint32_t_0 cfi_pending_mbnum;
  uint32_t_0 cfi_tail_drop_cnt;
  uint64_t_0 cfi_pass_offset;
  cfil_queue cfi_inject_q;
};

/* 7150 */
struct cfil_queue
{
  uint64_t_0 q_start;
  uint64_t_0 q_end;
  cfil_mqhead q_mq;
};

/* 7151 */
struct cfil_mqhead
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 7152 */
struct cfe_buf
{
  cfil_queue cfe_pending_q;
  cfil_queue cfe_ctl_q;
  uint64_t_0 cfe_pass_offset;
  uint64_t_0 cfe_peek_offset;
  uint64_t_0 cfe_peeked;
};

/* 7153 */
struct cfil_sock_head
{
  cfil_info *tqh_first;
  cfil_info **tqh_last;
};

/* 7154 */
struct cfil_stats
{
  int32_t cfs_ctl_connect_ok;
  int32_t cfs_ctl_connect_fail;
  int32_t cfs_ctl_disconnect_ok;
  int32_t cfs_ctl_disconnect_fail;
  int32_t cfs_ctl_send_ok;
  int32_t cfs_ctl_send_bad;
  int32_t cfs_ctl_rcvd_ok;
  int32_t cfs_ctl_rcvd_bad;
  int32_t cfs_ctl_rcvd_flow_lift;
  int32_t cfs_ctl_action_data_update;
  int32_t cfs_ctl_action_drop;
  int32_t cfs_ctl_action_bad_op;
  int32_t cfs_ctl_action_bad_len;
  int32_t cfs_sock_id_not_found;
  int32_t cfs_cfi_alloc_ok;
  int32_t cfs_cfi_alloc_fail;
  int32_t cfs_sock_userspace_only;
  int32_t cfs_sock_attach_in_vain;
  int32_t cfs_sock_attach_already;
  int32_t cfs_sock_attach_no_mem;
  int32_t cfs_sock_attach_failed;
  int32_t cfs_sock_attached;
  int32_t cfs_sock_detached;
  int32_t cfs_attach_event_ok;
  int32_t cfs_attach_event_flow_control;
  int32_t cfs_attach_event_fail;
  int32_t cfs_closed_event_ok;
  int32_t cfs_closed_event_flow_control;
  int32_t cfs_closed_event_fail;
  int32_t cfs_data_event_ok;
  int32_t cfs_data_event_flow_control;
  int32_t cfs_data_event_fail;
  int32_t cfs_disconnect_in_event_ok;
  int32_t cfs_disconnect_out_event_ok;
  int32_t cfs_disconnect_event_flow_control;
  int32_t cfs_disconnect_event_fail;
  int32_t cfs_ctl_q_not_started;
  int32_t cfs_close_wait;
  int32_t cfs_close_wait_timeout;
  int32_t cfs_flush_in_drop;
  int32_t cfs_flush_out_drop;
  int32_t cfs_flush_in_close;
  int32_t cfs_flush_out_close;
  int32_t cfs_flush_in_free;
  int32_t cfs_flush_out_free;
  int32_t cfs_inject_q_nomem;
  int32_t cfs_inject_q_nobufs;
  int32_t cfs_inject_q_detached;
  int32_t cfs_inject_q_in_fail;
  int32_t cfs_inject_q_out_fail;
  int32_t cfs_inject_q_in_retry;
  int32_t cfs_inject_q_out_retry;
  int32_t cfs_data_in_control;
  int32_t cfs_data_in_oob;
  int32_t cfs_data_out_control;
  int32_t cfs_data_out_oob;
  int64_t cfs_ctl_q_in_enqueued;
  int64_t cfs_ctl_q_out_enqueued;
  int64_t cfs_ctl_q_in_peeked;
  int64_t cfs_ctl_q_out_peeked;
  int64_t cfs_pending_q_in_enqueued;
  int64_t cfs_pending_q_out_enqueued;
  int64_t cfs_inject_q_in_enqueued;
  int64_t cfs_inject_q_out_enqueued;
  int64_t cfs_inject_q_in_passed;
  int64_t cfs_inject_q_out_passed;
};

/* 7155 */
struct __attribute__((aligned(4))) cfil_tag
{
  sockaddr_in_4_6 cfil_faddr;
  uint32_t_0 cfil_so_state_change_cnt;
  __int16 cfil_so_options;
};

/* 7156 */
struct cfil_msg_data_event
{
  cfil_msg_hdr cfd_msghdr;
  sockaddr_in_4_6 cfc_src;
  sockaddr_in_4_6 cfc_dst;
  uint64_t_0 cfd_start_offset;
  uint64_t_0 cfd_end_offset;
};

/* 7157 */
struct cfil_msg_hdr
{
  uint32_t_0 cfm_len;
  uint32_t_0 cfm_version;
  uint32_t_0 cfm_type;
  uint32_t_0 cfm_op;
  cfil_sock_id_t cfm_sock_id;
};

/* 7158 */
typedef uint64_t_0 cfil_sock_id_t;

/* 7159 */
struct cfil_msg_action
{
  cfil_msg_hdr cfa_msghdr;
  uint64_t_0 cfa_in_pass_offset;
  uint64_t_0 cfa_in_peek_offset;
  uint64_t_0 cfa_out_pass_offset;
  uint64_t_0 cfa_out_peek_offset;
};

/* 7160 */
struct cfil_msg_bless_client
{
  cfil_msg_hdr cfb_msghdr;
  uuid_t cfb_client_uuid;
};

/* 7161 */
struct __attribute__((aligned(8))) cfil_opt_sock_info
{
  cfil_sock_id_t cfs_sock_id;
  int cfs_sock_family;
  int cfs_sock_type;
  int cfs_sock_protocol;
  sockaddr_in_4_6 cfs_local;
  sockaddr_in_4_6 cfs_remote;
  pid_t cfs_pid;
  pid_t cfs_e_pid;
  uuid_t cfs_uuid;
  uuid_t cfs_e_uuid;
};

/* 7162 */
struct cfil_filter_stat
{
  uint32_t_0 cfs_len;
  uint32_t_0 cfs_filter_id;
  uint32_t_0 cfs_flags;
  uint32_t_0 cfs_sock_count;
  uint32_t_0 cfs_necp_control_unit;
};

/* 7163 */
struct cfil_sock_stat
{
  uint32_t_0 cfs_len;
  int cfs_sock_family;
  int cfs_sock_type;
  int cfs_sock_protocol;
  cfil_sock_id_t cfs_sock_id;
  uint64_t_0 cfs_flags;
  pid_t cfs_pid;
  pid_t cfs_e_pid;
  uuid_t cfs_uuid;
  uuid_t cfs_e_uuid;
  cfi_buf_stat cfs_snd;
  cfi_buf_stat cfs_rcv;
  cfil_entry_stat ces_entries[2];
};

/* 7164 */
struct cfi_buf_stat
{
  uint64_t_0 cbs_pending_first;
  uint64_t_0 cbs_pending_last;
  uint64_t_0 cbs_pass_offset;
  uint64_t_0 cbs_inject_q_len;
};

/* 7165 */
struct cfil_entry_stat
{
  uint32_t_0 ces_len;
  uint32_t_0 ces_filter_id;
  uint32_t_0 ces_flags;
  uint32_t_0 ces_necp_control_unit;
  timeval64 ces_last_event;
  timeval64 ces_last_action;
  cfe_buf_stat ces_snd;
  cfe_buf_stat ces_rcv;
};

/* 7166 */
struct cfe_buf_stat
{
  uint64_t_0 cbs_pending_first;
  uint64_t_0 cbs_pending_last;
  uint64_t_0 cbs_ctl_first;
  uint64_t_0 cbs_ctl_last;
  uint64_t_0 cbs_pass_offset;
  uint64_t_0 cbs_peek_offset;
  uint64_t_0 cbs_peeked;
};

/* 7167 */
struct cfil_msg_sock_attached
{
  cfil_msg_hdr cfs_msghdr;
  int cfs_sock_family;
  int cfs_sock_type;
  int cfs_sock_protocol;
  int cfs_unused;
  pid_t cfs_pid;
  pid_t cfs_e_pid;
  uuid_t cfs_uuid;
  uuid_t cfs_e_uuid;
};

/* 7168 */
struct __attribute__((aligned(8))) cfil_msg_sock_closed
{
  cfil_msg_hdr cfc_msghdr;
  timeval64 cfc_first_event;
  uint32_t_0 cfc_op_list_ctr;
  uint32_t_0 cfc_op_time[6];
  unsigned __int8 cfc_op_list[6];
};

/* 7169 */
struct packet_mangler
{
  kern_ctl_ref pkt_mnglr_kcref;
  uint32_t_0 pkt_mnglr_kcunit;
  uint32_t_0 pkt_mnglr_flags;
  ipfilter_t pkt_mnglr_ipfref;
  ipfilter_t pkt_mnglr_ipfrefv6;
  ipf_filter pkt_mnglr_ipfilter;
  uint8_t_0 activate;
  Pkt_Mnglr_Flow dir;
  sockaddr_storage lsaddr;
  sockaddr_storage rsaddr;
  sockaddr_storage swap_lsaddr;
  sockaddr_storage swap_rsaddr;
  uint32_t_0 ip_action_mask;
  uint16_t lport;
  uint16_t rport;
  uint32_t_0 proto;
  uint32_t_0 proto_action_mask;
};

/* 7170 */
enum Pkt_Mnglr_Flow : __int32
{
  INOUT = 0x0,
  IN = 0x1,
  OUT = 0x2,
};

/* 7171 */
struct $F0FFEE4543B13CCFA640BF1B32A1D60B
{
  lltable *slh_first;
};

/* 7172 */
struct eventhandler_entry_lle_event
{
  eventhandler_entry ee;
  lle_event_fn eh_func;
};

/* 7173 */
typedef void (*lle_event_fn)(eventhandler_entry_arg, llentry *, int);

/* 7174 */
struct __attribute__((aligned(8))) prefix_match_data
{
  const sockaddr *addr;
  const sockaddr *mask;
  llentries dchain;
  u_int flags;
};

/* 7175 */
struct nwk_wq_thread_cont::$8D204D074F05222E22FB758AC6ACA76B
{
  nwk_wq_entry *tqh_first;
  nwk_wq_entry **tqh_last;
};

/* 7176 */
typedef skmem_sysctl skmem_sysctl_0;

/* 7177 */
struct skmem_sysctl
{
  uint32_t_0 version;
  skmem_sysctl::$E1D93894B59B32F81683A48F5E3952A2 tcp;
};

/* 7178 */
struct skmem_sysctl::$E1D93894B59B32F81683A48F5E3952A2
{
  int32_t bg_target_qdelay;
  int32_t bg_allowed_increase;
  int32_t bg_tether_shift;
  uint32_t_0 bg_ss_fltsz;
  int32_t ecn_timeout;
  int32_t disable_tcp_heuristics;
  int32_t cc_debug;
  int32_t use_newreno;
  int32_t cubic_tcp_friendliness;
  int32_t cubic_fast_convergence;
  int32_t cubic_use_minrtt;
  int32_t delayed_ack;
  int32_t tcp_lq_overflow;
  int32_t recvbg;
  int32_t drop_synfin;
  int32_t slowlink_wsize;
  int32_t maxseg_unacked;
  int32_t rfc3465;
  int32_t rfc3465_lim2;
  int32_t recv_allowed_iaj;
  uint32_t_0 doautorcvbuf;
  uint32_t_0 autorcvbufmax;
  int32_t rcvsspktcnt;
  int32_t path_mtu_discovery;
  int32_t slowstart_flightsize;
  int32_t local_slowstart_flightsize;
  uint32_t_0 ecn_setup_percentage;
  int32_t ecn_initiate_out;
  int32_t ecn_negotiate_in;
  int32_t packetchain;
  int32_t socket_unlocked_on_output;
  int32_t rfc3390;
  int32_t min_iaj_win;
  int32_t acc_iaj_react_limit;
  uint32_t_0 doautosndbuf;
  uint32_t_0 autosndbufinc;
  uint32_t_0 autosndbufmax;
  uint32_t_0 ack_prioritize;
  uint32_t_0 rtt_recvbg;
  uint32_t_0 recv_throttle_minwin;
  int32_t enable_tlp;
  int32_t sack;
  int32_t sack_maxholes;
  int32_t sack_globalmaxholes;
  int32_t mssdflt;
  int32_t v6mssdflt;
  int32_t fastopen_backlog;
  int32_t fastopen;
  int32_t minmss;
  int32_t do_tcpdrain;
  int32_t icmp_may_rst;
  int32_t rtt_min;
  int32_t rexmt_slop;
  int32_t randomize_ports;
  int32_t win_scale_factor;
  int32_t keepinit;
  int32_t keepidle;
  int32_t keepintvl;
  int32_t keepcnt;
  int32_t msl;
  uint32_t_0 max_persist_timeout;
  int32_t always_keepalive;
  uint32_t_0 timer_fastmode_idlemax;
  int32_t broken_peer_syn_rexmit_thres;
  int32_t pmtud_blackhole_detection;
  uint32_t_0 pmtud_blackhole_mss;
  int32_t sendspace;
  int32_t recvspace;
  uint32_t_0 microuptime_init;
  uint32_t_0 now_init;
  uint32_t_0 challengeack_limit;
  int32_t do_rfc5961;
};

/* 7179 */
struct $<10785198,1>::mq_freeq
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 7180 */
struct sfb
{
  u_int32_t sfb_flags;
  u_int32_t sfb_qlim;
  u_int32_t sfb_qid;
  u_int16_t sfb_allocation;
  u_int16_t sfb_drop_thresh;
  u_int32_t sfb_clearpkts;
  u_int64_t sfb_eff_rate;
  timespec sfb_getqtime;
  timespec sfb_holdtime;
  ifnet *sfb_ifp;
  u_int64_t sfb_target_qdelay;
  timespec sfb_update_interval;
  u_int64_t sfb_fc_threshold;
  u_int64_t sfb_min_qdelay;
  timespec sfb_update_time;
  timespec sfb_hinterval;
  timespec sfb_nextreset;
  timespec sfb_pboxtime;
  timespec sfb_pboxfreeze;
  u_int32_t sfb_current;
  sfb_bins (*sfb_bins)[2];
  sfb_fcl (*sfb_fc_lists)[32];
  sfbstats sfb_stats;
};

/* 7181 */
struct sfb_bins
{
  u_int32_t fudge;
  sfbbinstats stats[2][32];
  timespec freezetime[2][32];
};

/* 7182 */
struct sfbbinstats
{
  int16_t pmark;
  u_int16_t pkts;
  u_int32_t bytes;
};

/* 7183 */
struct sfb_fcl
{
  u_int32_t cnt;
  flowadv_fclist fclist;
};

/* 7184 */
struct sfbstats
{
  u_int64_t drop_early;
  u_int64_t drop_pbox;
  u_int64_t drop_queue;
  u_int64_t marked_packets;
  u_int64_t pbox_packets;
  u_int64_t pbox_time;
  u_int64_t hold_time;
  u_int64_t dequeue_avg;
  u_int64_t rehash_intval;
  u_int64_t num_rehash;
  u_int64_t null_flowid;
  u_int64_t flow_controlled;
  u_int64_t flow_feedback;
  u_int64_t dequeue_stall;
};

/* 7185 */
typedef _pktsched_pkt_ pktsched_pkt_t;

/* 7186 */
struct _pktsched_pkt_
{
  classq_pkt_type_t __ptype;
  uint32_t_0 __plen;
  void *__pkt;
};

/* 7187 */
struct sfb_stats
{
  u_int32_t allocation;
  u_int32_t dropthresh;
  u_int32_t clearpkts;
  u_int32_t current;
  u_int64_t target_qdelay;
  u_int64_t update_interval;
  u_int64_t min_estdelay;
  u_int32_t delay_fcthreshold;
  u_int32_t flags;
  sfbstats sfbstats;
  sfbbins binstats[2];
};

/* 7188 */
struct sfbbins
{
  sfbbinstats stats[2][32];
};

/* 7189 */
typedef cqrq_stat_sc cqrq_stat_sc_t;

/* 7190 */
struct cqrq_stat_sc
{
  mbuf_svc_class_t sc;
  u_int32_t packets;
  u_int32_t bytes;
};

/* 7191 */
struct if_ifclassq_stats
{
  u_int32_t ifqs_len;
  u_int32_t ifqs_maxlen;
  pktcntr ifqs_xmitcnt;
  pktcntr ifqs_dropcnt;
  u_int32_t ifqs_scheduler;
  if_ifclassq_stats::$FD5F247125D7098156DCCA6AC492C469 _anon_0;
};

/* 7192 */
union if_ifclassq_stats::$FD5F247125D7098156DCCA6AC492C469
{
  tcq_classstats ifqs_tcq_stats;
  qfq_classstats ifqs_qfq_stats;
  fq_codel_classstats ifqs_fq_codel_stats;
};

/* 7193 */
struct __attribute__((aligned(8))) tcq_classstats
{
  u_int32_t class_handle;
  u_int32_t priority;
  u_int32_t qlength;
  u_int32_t qlimit;
  u_int32_t period;
  pktcntr xmitcnt;
  pktcntr dropcnt;
  classq_type_t qtype;
  tcq_classstats::$07089DD008530E9720E641EFD08E525F _anon_0;
  classq_state_t qstate;
};

/* 7194 */
union tcq_classstats::$07089DD008530E9720E641EFD08E525F
{
  red_stats red[3];
  blue_stats blue;
  sfb_stats sfb;
};

/* 7195 */
struct red_stats
{
  int32_t q_avg;
  u_int32_t _pad;
  u_int32_t drop_forced;
  u_int32_t drop_unforced;
  u_int32_t marked_packets;
};

/* 7196 */
struct blue_stats
{
  int32_t q_pmark;
  u_int32_t _pad;
  u_int64_t drop_forced;
  u_int64_t drop_unforced;
  u_int64_t marked_packets;
};

/* 7197 */
struct __attribute__((aligned(8))) qfq_classstats
{
  u_int32_t class_handle;
  u_int32_t index;
  u_int32_t weight;
  u_int32_t lmax;
  u_int32_t qlength;
  u_int32_t qlimit;
  u_int32_t period;
  pktcntr xmitcnt;
  pktcntr dropcnt;
  classq_type_t qtype;
  qfq_classstats::$07089DD008530E9720E641EFD08E525F _anon_0;
  classq_state_t qstate;
};

/* 7198 */
union qfq_classstats::$07089DD008530E9720E641EFD08E525F
{
  red_stats red[3];
  blue_stats blue;
  sfb_stats sfb;
};

/* 7199 */
struct __attribute__((aligned(8))) fq_codel_classstats
{
  u_int32_t fcls_pri;
  u_int32_t fcls_service_class;
  u_int32_t fcls_quantum;
  u_int32_t fcls_drr_max;
  int64_t fcls_budget;
  u_int64_t fcls_target_qdelay;
  u_int64_t fcls_update_interval;
  u_int32_t fcls_flow_control;
  u_int32_t fcls_flow_feedback;
  u_int32_t fcls_dequeue_stall;
  u_int32_t fcls_flow_control_fail;
  u_int64_t fcls_drop_overflow;
  u_int64_t fcls_drop_early;
  u_int32_t fcls_drop_memfailure;
  u_int32_t fcls_flows_cnt;
  u_int32_t fcls_newflows_cnt;
  u_int32_t fcls_oldflows_cnt;
  u_int64_t fcls_pkt_cnt;
  u_int64_t fcls_dequeue;
  u_int64_t fcls_dequeue_bytes;
  u_int64_t fcls_byte_cnt;
  u_int32_t fcls_throttle_on;
  u_int32_t fcls_throttle_off;
  u_int32_t fcls_throttle_drops;
  u_int32_t fcls_dup_rexmts;
  u_int32_t fcls_flowstats_cnt;
  fq_codel_flowstats fcls_flowstats[20];
};

/* 7200 */
struct fq_codel_flowstats
{
  u_int32_t fqst_min_qdelay;
  u_int32_t fqst_flags;
  u_int32_t fqst_bytes;
  u_int32_t fqst_flowhash;
};

/* 7201 */
typedef fq_codel_sched_data fq_if_t;

/* 7202 */
struct __attribute__((aligned(8))) fq_codel_sched_data
{
  ifclassq *fqs_ifq;
  u_int64_t fqs_target_qdelay;
  u_int64_t fqs_update_interval;
  flowq_list_t fqs_flows[256];
  pktsched_bitmap_t fqs_bitmaps[4];
  u_int32_t fqs_pkt_droplimit;
  u_int8_t fqs_throttle;
  u_int8_t fqs_flags;
  fq_if_classq_t fqs_classq[10];
  flowadv_fclist fqs_fclist;
  flowq *fqs_large_flow;
  classq_pkt_type_t fqs_ptype;
};

/* 7203 */
struct flowq_list_t
{
  flowq *slh_first;
};

/* 7204 */
struct flowq
{
  flowq::$B5329E39514EEB410FD53AB8E9B9EB84 __fq_pktq_u;
  u_int8_t fq_flags;
  u_int8_t fq_sc_index;
  int16_t fq_deficit;
  u_int32_t fq_bytes;
  u_int64_t fq_min_qdelay;
  u_int64_t fq_updatetime;
  u_int64_t fq_getqtime;
  flowq::$7EDA5DCBF94554B2EBAF0C6E0E924FD2 fq_hashlink;
  flowq::$4EF574DF938B2FD7C2004D2BC20B7A31 fq_actlink;
  u_int32_t fq_flowhash;
  classq_pkt_type_t fq_ptype;
};

/* 7205 */
union flowq::$B5329E39514EEB410FD53AB8E9B9EB84
{
  mbufq_head __mbufq;
  kpktq_head __kpktq;
};

/* 7206 */
struct mbufq_head
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 7207 */
struct kpktq_head
{
  __kern_packet *kq_first;
  __kern_packet **kq_last;
};

/* 7208 */
struct flowq::$7EDA5DCBF94554B2EBAF0C6E0E924FD2
{
  flowq *sle_next;
};

/* 7209 */
struct flowq::$4EF574DF938B2FD7C2004D2BC20B7A31
{
  flowq *stqe_next;
};

/* 7210 */
typedef u_int32_t pktsched_bitmap_t;

/* 7211 */
typedef fq_if_classq fq_if_classq_t;

/* 7212 */
struct fq_if_classq
{
  u_int32_t fcl_pri;
  u_int32_t fcl_service_class;
  u_int32_t fcl_quantum;
  u_int32_t fcl_drr_max;
  int64_t fcl_budget;
  flowq_stailq_t fcl_new_flows;
  flowq_stailq_t fcl_old_flows;
  fcl_stat fcl_stat;
};

/* 7213 */
struct flowq_stailq_t
{
  flowq *stqh_first;
  flowq **stqh_last;
};

/* 7214 */
struct fcl_stat
{
  u_int32_t fcl_flow_control;
  u_int32_t fcl_flow_feedback;
  u_int32_t fcl_dequeue_stall;
  u_int32_t fcl_flow_control_fail;
  u_int64_t fcl_drop_overflow;
  u_int64_t fcl_drop_early;
  u_int32_t fcl_drop_memfailure;
  u_int32_t fcl_flows_cnt;
  u_int32_t fcl_newflows_cnt;
  u_int32_t fcl_oldflows_cnt;
  u_int64_t fcl_pkt_cnt;
  u_int64_t fcl_dequeue;
  u_int64_t fcl_dequeue_bytes;
  u_int64_t fcl_byte_cnt;
  u_int32_t fcl_throttle_on;
  u_int32_t fcl_throttle_off;
  u_int32_t fcl_throttle_drops;
  u_int32_t fcl_dup_rexmts;
};

/* 7215 */
typedef flowq fq_t;

/* 7216 */
struct qfq_if
{
  ifclassq *qif_ifq;
  u_int32_t qif_throttle;
  u_int8_t qif_classes;
  u_int8_t qif_maxclasses;
  u_int8_t qif_maxslots;
  qfq_class *qif_default;
  qfq_class **qif_class_tbl;
  u_int64_t qif_V;
  u_int32_t qif_wsum;
  u_int32_t qif_i_wsum;
  u_int32_t qif_queued;
  u_int32_t qif_emptygrp;
  pktsched_bitmap_t qif_bitmaps[4];
  qfq_group **qif_groups;
};

/* 7217 */
struct qfq_class
{
  u_int32_t cl_handle;
  class_queue_t cl_q;
  u_int32_t cl_qflags;
  qfq_class::$B7F9D28DA26C4696FC3FA9E377621829 cl_qalg;
  qfq_if *cl_qif;
  u_int32_t cl_flags;
  u_int64_t cl_S;
  u_int64_t cl_F;
  qfq_class *cl_next;
  qfq_group *cl_grp;
  u_int32_t cl_inv_w;
  u_int32_t cl_lmax;
  u_int32_t cl_period;
  pktcntr cl_xmitcnt;
  pktcntr cl_dropcnt;
};

/* 7218 */
union qfq_class::$B7F9D28DA26C4696FC3FA9E377621829
{
  void *ptr;
  sfb *sfb;
};

/* 7219 */
struct qfq_group
{
  u_int64_t qfg_S;
  u_int64_t qfg_F;
  u_int8_t qfg_slot_shift;
  u_int8_t qfg_index;
  u_int8_t qfg_front;
  pktsched_bitmap_t qfg_full_slots;
  qfq_class **qfg_slots;
};

/* 7220 */
typedef cqev cqev_t;

/* 7221 */
typedef cqrq cqrq_t;

/* 7222 */
struct tcq_if
{
  ifclassq *tif_ifq;
  int tif_maxpri;
  u_int32_t tif_throttle;
  tcq_class *tif_default;
  tcq_class *tif_classes[4];
};

/* 7223 */
struct tcq_class
{
  u_int32_t cl_handle;
  class_queue_t cl_q;
  u_int32_t cl_qflags;
  tcq_class::$B7F9D28DA26C4696FC3FA9E377621829 cl_qalg;
  int32_t cl_pri;
  u_int32_t cl_flags;
  tcq_if *cl_tif;
  u_int32_t cl_period;
  pktcntr cl_xmitcnt;
  pktcntr cl_dropcnt;
};

/* 7224 */
union tcq_class::$B7F9D28DA26C4696FC3FA9E377621829
{
  void *ptr;
  sfb *sfb;
};

/* 7225 */
typedef void (*fq_if_append_pkt_t)(void *, void *);

/* 7226 */
typedef boolean_t (*fq_getq_flow_t)(fq_if_t *, fq_if_classq_t *, fq_t *, u_int32_t, u_int32_t, void **, void **, u_int32_t *, u_int32_t *, boolean_t *, u_int32_t);

/* 7227 */
struct __attribute__((aligned(8))) _mbuf
{
  _mbuf *_m_next;
  void *_m_pad;
  uint8_t_0 *_m_data;
  int32_t _m_len;
};

/* 7228 */
union q_util
{
  uint16_t s[4];
  uint32_t_0 l[2];
  uint64_t_0 q;
};

/* 7229 */
union l_util
{
  uint16_t s[2];
  uint32_t_0 l;
};

/* 7230 */
struct $141D1590E260CB4C080C8EAC97409EEC
{
  igmp_ifinfo *lh_first;
};

/* 7231 */
struct igmpstat
{
  u_int igps_rcv_total;
  u_int igps_rcv_tooshort;
  u_int igps_rcv_badsum;
  u_int igps_rcv_queries;
  u_int igps_rcv_badqueries;
  u_int igps_rcv_reports;
  u_int igps_rcv_badreports;
  u_int igps_rcv_ourreports;
  u_int igps_snd_reports;
};

/* 7232 */
struct igmpstat_v3
{
  uint32_t_0 igps_version;
  uint32_t_0 igps_len;
  uint64_t_0 igps_rcv_total;
  uint64_t_0 igps_rcv_tooshort;
  uint64_t_0 igps_rcv_badttl;
  uint64_t_0 igps_rcv_badsum;
  uint64_t_0 igps_rcv_v1v2_queries;
  uint64_t_0 igps_rcv_v3_queries;
  uint64_t_0 igps_rcv_badqueries;
  uint64_t_0 igps_rcv_gen_queries;
  uint64_t_0 igps_rcv_group_queries;
  uint64_t_0 igps_rcv_gsr_queries;
  uint64_t_0 igps_drop_gsr_queries;
  uint64_t_0 igps_rcv_reports;
  uint64_t_0 igps_rcv_badreports;
  uint64_t_0 igps_rcv_ourreports;
  uint64_t_0 igps_rcv_nora;
  uint64_t_0 igps_snd_reports;
  uint64_t_0 __igps_pad[4];
};

/* 7233 */
enum rectype_t : __int32
{
  REC_NONE = 0x0,
  REC_ALLOW = 0x1,
  REC_BLOCK = 0x2,
  REC_FULL = 0x3,
};

/* 7234 */
struct igmp_inm_relhead
{
  in_multi *slh_first;
};

/* 7235 */
struct igmp
{
  u_char igmp_type;
  u_char igmp_code;
  u_short igmp_cksum;
  in_addr igmp_group;
};

/* 7236 */
struct igmpv3
{
  u_char igmp_type;
  u_char igmp_code;
  u_short igmp_cksum;
  in_addr igmp_group;
  u_char igmp_misc;
  u_char igmp_qqi;
  u_short igmp_numsrc;
};

/* 7237 */
struct igmp_grouprec
{
  u_char ig_type;
  u_char ig_datalen;
  u_short ig_numsrc;
  in_addr ig_group;
};

/* 7238 */
struct igmp_report
{
  u_char ir_type;
  u_char ir_rsv1;
  u_short ir_cksum;
  u_short ir_rsv2;
  u_short ir_numgrps;
};

/* 7239 */
struct ipoption
{
  in_addr ipopt_dst;
  char ipopt_list[40];
};

/* 7240 */
struct igmp_domifdetach::$07F0ED11DC3379F2F0D30E5B8FAB9116
{
  in_multi *slh_first;
};

/* 7241 */
struct igi_remref::$07F0ED11DC3379F2F0D30E5B8FAB9116
{
  in_multi *slh_first;
};

/* 7242 */
struct igmp_tparams
{
  int qpt;
  int it;
  int cst;
  int sct;
};

/* 7243 */
struct in_multistep
{
  in_multi *i_inm;
};

/* 7244 */
struct igmp_timeout::$07F0ED11DC3379F2F0D30E5B8FAB9116
{
  in_multi *slh_first;
};

/* 7245 */
struct igmp_ifinfo_u
{
  uint32_t_0 igi_ifindex;
  uint32_t_0 igi_version;
  uint32_t_0 igi_v1_timer;
  uint32_t_0 igi_v2_timer;
  uint32_t_0 igi_v3_timer;
  uint32_t_0 igi_flags;
  uint32_t_0 igi_rv;
  uint32_t_0 igi_qi;
  uint32_t_0 igi_qri;
  uint32_t_0 igi_uri;
};

/* 7246 */
struct $A5970CCD3C6CBEFB66B8744322A6CFD7
{
  in_ifaddr_dbg *tqh_first;
  in_ifaddr_dbg **tqh_last;
};

/* 7247 */
struct in_ifaddr_dbg
{
  in_ifaddr inifa;
  in_ifaddr inifa_old;
  u_int16_t inifa_refhold_cnt;
  u_int16_t inifa_refrele_cnt;
  ctrace_t inifa_alloc;
  ctrace_t inifa_free;
  ctrace_t inifa_refhold[32];
  ctrace_t inifa_refrele[32];
  in_ifaddr_dbg::$B8DA49AD2441DD5349A8FA6CFC27C6BD inifa_trash_link;
};

/* 7248 */
struct in_ifaddr_dbg::$B8DA49AD2441DD5349A8FA6CFC27C6BD
{
  in_ifaddr_dbg *tqe_next;
  in_ifaddr_dbg **tqe_prev;
};

/* 7249 */
struct in_aliasreq
{
  char ifra_name[16];
  sockaddr_in ifra_addr;
  sockaddr_in ifra_broadaddr;
  sockaddr_in ifra_mask;
};

/* 7250 */
struct in_ifextra
{
  uint32_t_0 netsig_len;
  u_int8_t netsig[20];
  lltable *ii_llt;
};

/* 7251 */
struct in_llentry
{
  llentry base;
};

/* 7252 */
union inctl_associd::$D400CEA0EAE3F7B9597B90F74C16818F
{
  so_aidreq32 a32;
  so_aidreq64 a64;
};

/* 7253 */
struct so_aidreq32
{
  __uint32_t sar_cnt;
  user32_addr_t sar_aidp;
};

/* 7254 */
struct so_aidreq64
{
  __uint32_t sar_cnt;
  user64_addr_t sar_aidp;
};

/* 7255 */
union inctl_connid::$1D0C90F8F2C37AA52BD186DAB635D25A
{
  so_cidreq32 c32;
  so_cidreq64 c64;
};

/* 7256 */
struct so_cidreq32
{
  sae_associd_t scr_aid;
  __uint32_t scr_cnt;
  user32_addr_t scr_cidp;
};

/* 7257 */
struct so_cidreq64
{
  sae_associd_t scr_aid;
  __uint32_t scr_cnt;
  user64_addr_t scr_cidp;
};

/* 7258 */
union inctl_conninfo::$136115C98F50BCF5531C7CD96B996F0C
{
  so_cinforeq32 ci32;
  so_cinforeq64 ci64;
};

/* 7259 */
struct so_cinforeq32
{
  sae_connid_t scir_cid;
  __uint32_t scir_flags;
  __uint32_t scir_ifindex;
  __int32_t scir_error;
  user32_addr_t scir_src;
  socklen_t scir_src_len;
  user32_addr_t scir_dst;
  socklen_t scir_dst_len;
  __uint32_t scir_aux_type;
  user32_addr_t scir_aux_data;
  __uint32_t scir_aux_len;
};

/* 7260 */
struct __attribute__((aligned(8))) so_cinforeq64
{
  sae_connid_t scir_cid;
  __uint32_t scir_flags;
  __uint32_t scir_ifindex;
  __int32_t scir_error;
  user64_addr_t scir_src;
  socklen_t scir_src_len;
  user64_addr_t scir_dst;
  socklen_t scir_dst_len;
  __uint32_t scir_aux_type;
  user64_addr_t scir_aux_data;
  __uint32_t scir_aux_len;
};

/* 7261 */
struct in_lltable_dump_entry::$7D1FD16D07C263E1C45CFD59827B4531
{
  rt_msghdr rtm;
  sockaddr_in sin;
  sockaddr_dl sdl;
};

/* 7262 */
struct kev_in_data
{
  net_event_data link_data;
  in_addr ia_addr;
  u_int32_t ia_net;
  u_int32_t ia_netmask;
  u_int32_t ia_subnet;
  u_int32_t ia_subnetmask;
  in_addr ia_netbroadcast;
  in_addr ia_dstaddr;
};

/* 7263 */
struct conninfo_tcp
{
  pid_t tcpci_peer_pid;
  tcp_info tcpci_tcp_info;
};

/* 7264 */
struct __attribute__((packed)) __attribute__((aligned(4))) tcp_info
{
  u_int8_t tcpi_state;
  u_int8_t tcpi_options;
  u_int8_t tcpi_snd_wscale;
  u_int8_t tcpi_rcv_wscale;
  u_int32_t tcpi_flags;
  u_int32_t tcpi_rto;
  u_int32_t tcpi_snd_mss;
  u_int32_t tcpi_rcv_mss;
  u_int32_t tcpi_rttcur;
  u_int32_t tcpi_srtt;
  u_int32_t tcpi_rttvar;
  u_int32_t tcpi_rttbest;
  u_int32_t tcpi_snd_ssthresh;
  u_int32_t tcpi_snd_cwnd;
  u_int32_t tcpi_rcv_space;
  u_int32_t tcpi_snd_wnd;
  u_int32_t tcpi_snd_nxt;
  u_int32_t tcpi_rcv_nxt;
  int32_t tcpi_last_outif;
  u_int32_t tcpi_snd_sbbytes;
  u_int64_t tcpi_txpackets;
  u_int64_t tcpi_txbytes;
  u_int64_t tcpi_txretransmitbytes;
  u_int64_t tcpi_txunacked;
  u_int64_t tcpi_rxpackets;
  u_int64_t tcpi_rxbytes;
  u_int64_t tcpi_rxduplicatebytes;
  u_int64_t tcpi_rxoutoforderbytes;
  u_int64_t tcpi_snd_bw;
  u_int8_t tcpi_synrexmits;
  u_int8_t tcpi_unused1;
  u_int16_t tcpi_unused2;
  u_int64_t tcpi_cell_rxpackets;
  u_int64_t tcpi_cell_rxbytes;
  u_int64_t tcpi_cell_txpackets;
  u_int64_t tcpi_cell_txbytes;
  u_int64_t tcpi_wifi_rxpackets;
  u_int64_t tcpi_wifi_rxbytes;
  u_int64_t tcpi_wifi_txpackets;
  u_int64_t tcpi_wifi_txbytes;
  u_int64_t tcpi_wired_rxpackets;
  u_int64_t tcpi_wired_rxbytes;
  u_int64_t tcpi_wired_txpackets;
  u_int64_t tcpi_wired_txbytes;
  tcp_conn_status tcpi_connstatus;
  unsigned __int16 tcpi_tfo_cookie_req : 1;
  unsigned __int16 tcpi_tfo_cookie_rcv : 1;
  unsigned __int16 tcpi_tfo_syn_loss : 1;
  unsigned __int16 tcpi_tfo_syn_data_sent : 1;
  unsigned __int16 tcpi_tfo_syn_data_acked : 1;
  unsigned __int16 tcpi_tfo_syn_data_rcv : 1;
  unsigned __int16 tcpi_tfo_cookie_req_rcv : 1;
  unsigned __int16 tcpi_tfo_cookie_sent : 1;
  unsigned __int16 tcpi_tfo_cookie_invalid : 1;
  unsigned __int16 tcpi_tfo_cookie_wrong : 1;
  unsigned __int16 tcpi_tfo_no_cookie_rcv : 1;
  unsigned __int16 tcpi_tfo_heuristics_disable : 1;
  unsigned __int16 tcpi_tfo_send_blackhole : 1;
  unsigned __int16 tcpi_tfo_recv_blackhole : 1;
  unsigned __int16 tcpi_tfo_onebyte_proxy : 1;
  unsigned __int16 tcpi_ecn_client_setup : 1;
  unsigned __int16 tcpi_ecn_server_setup : 1;
  unsigned __int16 tcpi_ecn_success : 1;
  unsigned __int16 tcpi_ecn_lost_syn : 1;
  unsigned __int16 tcpi_ecn_lost_synack : 1;
  unsigned __int16 tcpi_local_peer : 1;
  unsigned __int16 tcpi_if_cell : 1;
  unsigned __int16 tcpi_if_wifi : 1;
  unsigned __int16 tcpi_if_wired : 1;
  unsigned __int16 tcpi_if_wifi_infra : 1;
  unsigned __int16 tcpi_if_wifi_awdl : 1;
  unsigned __int16 tcpi_snd_background : 1;
  unsigned __int16 tcpi_rcv_background : 1;
  u_int32_t tcpi_ecn_recv_ce;
  u_int32_t tcpi_ecn_recv_cwr;
  u_int32_t tcpi_rcvoopack;
  u_int32_t tcpi_pawsdrop;
  u_int32_t tcpi_sack_recovery_episode;
  u_int32_t tcpi_reordered_pkts;
  u_int32_t tcpi_dsack_sent;
  u_int32_t tcpi_dsack_recvd;
  u_int32_t tcpi_flowhash;
  u_int64_t tcpi_txretransmitpackets;
};

/* 7265 */
struct $4AC24D319B3242996D2DAF6A0713B89F
{
  llinfo_arp *lh_first;
};

/* 7266 */
struct llinfo_arp
{
  llinfo_arp::$B250C643834F4111B5BCB7E2503B8F41 la_le;
  rtentry *la_rt;
  class_queue_t la_holdq;
  if_llreach *la_llreach;
  u_int64_t la_lastused;
  u_int32_t la_asked;
  u_int32_t la_maxtries;
  u_int64_t la_probeexp;
  u_int32_t la_prbreq_cnt;
  u_int32_t la_flags;
};

/* 7267 */
struct llinfo_arp::$B250C643834F4111B5BCB7E2503B8F41
{
  llinfo_arp *le_next;
  llinfo_arp **le_prev;
};

/* 7268 */
struct arpstat
{
  uint32_t_0 txrequests;
  uint32_t_0 txreplies;
  uint32_t_0 txannounces;
  uint32_t_0 rxrequests;
  uint32_t_0 rxreplies;
  uint32_t_0 received;
  uint32_t_0 txconflicts;
  uint32_t_0 invalidreqs;
  uint32_t_0 reqnobufs;
  uint32_t_0 dropped;
  uint32_t_0 purged;
  uint32_t_0 timeouts;
  uint32_t_0 dupips;
  uint32_t_0 inuse;
  uint32_t_0 txurequests;
  uint32_t_0 held;
};

/* 7269 */
struct __attribute__((aligned(4))) kev_in_collision
{
  net_event_data link_data;
  in_addr ia_ipaddr;
  u_char hw_len;
  u_char hw_addr[];
};

/* 7270 */
struct arptf_arg
{
  boolean_t draining;
  boolean_t probing;
  uint32_t_0 killed;
  uint32_t_0 aging;
  uint32_t_0 sticky;
  uint32_t_0 found;
  uint32_t_0 qlen;
  uint32_t_0 qsize;
};

/* 7271 */
typedef rtentry *route_t;

/* 7272 */
struct kev_in_arpfailure
{
  net_event_data link_data;
};

/* 7273 */
struct kev_in_arpalive
{
  net_event_data link_data;
};

/* 7274 */
struct $227157271F52F47A2F8035D72F7DD8F8
{
  in_multi_dbg *tqh_first;
  in_multi_dbg **tqh_last;
};

/* 7275 */
struct in_multi_dbg
{
  in_multi inm;
  u_int16_t inm_refhold_cnt;
  u_int16_t inm_refrele_cnt;
  ctrace_t inm_refhold[32];
  ctrace_t inm_refrele[32];
  in_multi_dbg::$6A53C28370281CBFB6C2B540953CA692 inm_trash_link;
};

/* 7276 */
struct in_multi_dbg::$6A53C28370281CBFB6C2B540953CA692
{
  in_multi_dbg *tqe_next;
  in_multi_dbg **tqe_prev;
};

/* 7277 */
struct in_multihead
{
  in_multi *lh_first;
};

/* 7278 */
struct __attribute__((aligned(4))) in_msource
{
  in_msource::$8403FED15581EF441CA720D1E22CFD76 ims_link;
  in_addr_t ims_haddr;
  uint8_t_0 imsl_st[2];
};

/* 7279 */
struct in_msource::$8403FED15581EF441CA720D1E22CFD76
{
  ip_msource *rbe_left;
  ip_msource *rbe_right;
  ip_msource *rbe_parent;
};

/* 7280 */
struct __msfilterreq64
{
  uint32_t_0 msfr_ifindex;
  uint32_t_0 msfr_fmode;
  uint32_t_0 msfr_nsrcs;
  uint32_t_0 __msfr_align;
  sockaddr_storage msfr_group;
  user64_addr_t msfr_srcs;
};

/* 7281 */
struct __attribute__((packed)) __attribute__((aligned(4))) __msfilterreq32
{
  uint32_t_0 msfr_ifindex;
  uint32_t_0 msfr_fmode;
  uint32_t_0 msfr_nsrcs;
  uint32_t_0 __msfr_align;
  sockaddr_storage msfr_group;
  user32_addr_t msfr_srcs;
};

/* 7282 */
struct __attribute__((packed)) __attribute__((aligned(4))) group_source_req
{
  uint32_t_0 gsr_interface;
  sockaddr_storage gsr_group;
  sockaddr_storage gsr_source;
};

/* 7283 */
struct ip_mreq_source
{
  in_addr imr_multiaddr;
  in_addr imr_sourceaddr;
  in_addr imr_interface;
};

/* 7284 */
struct ip_mreqn
{
  in_addr imr_multiaddr;
  in_addr imr_address;
  int imr_ifindex;
};

/* 7285 */
struct inp_fc_tree
{
  inpcb *rbh_root;
};

/* 7286 */
struct $D4D70A23602AFB20283EC147D4D63426
{
  inpcbinfo *tqh_first;
  inpcbinfo **tqh_last;
};

/* 7287 */
typedef unsigned __int16 UInt16;

/* 7288 */
struct kev_in_portinuse
{
  u_int16_t port;
  u_int32_t req_pid;
  u_int32_t reserved[2];
};

/* 7289 */
struct inpcb_compat
{
  _inpcb_list_entry inp_hash;
  in_addr reserved1;
  in_addr reserved2;
  u_short inp_fport;
  u_short inp_lport;
  _inpcb_list_entry inp_list;
  u_int32_t inp_ppcb;
  u_int32_t inp_pcbinfo;
  u_int32_t inp_socket;
  u_char nat_owner;
  u_int32_t nat_cookie;
  _inpcb_list_entry inp_portlist;
  u_int32_t inp_phd;
  __attribute__((packed)) __attribute__((aligned(1))) inp_gen_t inp_gencnt;
  int inp_flags;
  u_int32_t inp_flow;
  u_char inp_vflag;
  u_char inp_ip_ttl;
  u_char inp_ip_p;
  inpcb_compat::$2BD7BB0BBD3693F1B78AD189346C4D37 inp_dependfaddr;
  inpcb_compat::$EADFB7ED4EAA8E4682185B21FFB778D7 inp_dependladdr;
  inpcb_compat::$2DDEFABF9276E52C051FEAE42C7EA272 inp_dependroute;
  inpcb_compat::$24CD4621B0057B0D1A0E598B285DB2E5 inp_depend4;
  inpcb_compat::$835D269BEAB82E9AA5805C713DF59208 inp_depend6;
  int hash_element;
  u_int32_t inp_saved_ppcb;
  u_int32_t inp_sp;
  u_int32_t reserved[3];
};

/* 7290 */
struct _inpcb_list_entry
{
  u_int32_t le_next;
  u_int32_t le_prev;
};

/* 7291 */
union inpcb_compat::$2BD7BB0BBD3693F1B78AD189346C4D37
{
  in_addr_4in6 inp46_foreign;
  in6_addr inp6_foreign;
};

/* 7292 */
union inpcb_compat::$EADFB7ED4EAA8E4682185B21FFB778D7
{
  in_addr_4in6 inp46_local;
  in6_addr inp6_local;
};

/* 7293 */
union inpcb_compat::$2DDEFABF9276E52C051FEAE42C7EA272
{
  u_char inp4_route[20];
  u_char inp6_route[32];
};

/* 7294 */
struct inpcb_compat::$24CD4621B0057B0D1A0E598B285DB2E5
{
  u_char inp4_ip_tos;
  u_int32_t inp4_options;
  u_int32_t inp4_moptions;
};

/* 7295 */
struct inpcb_compat::$835D269BEAB82E9AA5805C713DF59208
{
  u_int32_t inp6_options;
  u_int8_t inp6_hlim;
  u_int8_t unused_uint8_1;
  ushort unused_uint16_1;
  u_int32_t inp6_outputopts;
  u_int32_t inp6_moptions;
  u_int32_t inp6_icmp6filt;
  int inp6_cksum;
  u_short inp6_ifindex;
  __int16 inp6_hops;
};

/* 7296 */
typedef unsigned __int16 ushort;

/* 7297 */
struct __attribute__((packed)) __attribute__((aligned(4))) xinpcb64
{
  u_int64_t xi_len;
  u_int64_t xi_inpp;
  u_short inp_fport;
  u_short inp_lport;
  inpcb64_list_entry inp_list;
  u_int64_t inp_ppcb;
  u_int64_t inp_pcbinfo;
  inpcb64_list_entry inp_portlist;
  u_int64_t inp_phd;
  inp_gen_t inp_gencnt;
  int inp_flags;
  u_int32_t inp_flow;
  u_char inp_vflag;
  u_char inp_ip_ttl;
  u_char inp_ip_p;
  __attribute__((aligned(2))) xinpcb64::$2BD7BB0BBD3693F1B78AD189346C4D37 inp_dependfaddr;
  xinpcb64::$EADFB7ED4EAA8E4682185B21FFB778D7 inp_dependladdr;
  xinpcb64::$858A1AC577643F0F1919D0B7C614C693 inp_depend4;
  __attribute__((aligned(4))) xinpcb64::$5F4E62BB901E498E33D59398BB0791E2 inp_depend6;
  xsocket64 xi_socket;
  u_quad_t xi_alignment_hack;
};

/* 7298 */
struct inpcb64_list_entry
{
  u_int64_t le_next;
  u_int64_t le_prev;
};

/* 7299 */
union xinpcb64::$2BD7BB0BBD3693F1B78AD189346C4D37
{
  in_addr_4in6 inp46_foreign;
  in6_addr inp6_foreign;
};

/* 7300 */
union xinpcb64::$EADFB7ED4EAA8E4682185B21FFB778D7
{
  in_addr_4in6 inp46_local;
  in6_addr inp6_local;
};

/* 7301 */
struct xinpcb64::$858A1AC577643F0F1919D0B7C614C693
{
  u_char inp4_ip_tos;
};

/* 7302 */
struct xinpcb64::$5F4E62BB901E498E33D59398BB0791E2
{
  u_int8_t inp6_hlim;
  int inp6_cksum;
  u_short inp6_ifindex;
  __int16 inp6_hops;
};

/* 7303 */
struct __attribute__((packed)) __attribute__((aligned(4))) xsocket64
{
  u_int32_t xso_len;
  u_int64_t xso_so;
  __int16 so_type;
  __int16 so_options;
  __int16 so_linger;
  __int16 so_state;
  u_int64_t so_pcb;
  int xso_protocol;
  int xso_family;
  __int16 so_qlen;
  __int16 so_incqlen;
  __int16 so_qlimit;
  __int16 so_timeo;
  u_short so_error;
  __attribute__((aligned(4))) pid_t so_pgid;
  u_int32_t so_oobmark;
  xsockbuf so_rcv;
  xsockbuf so_snd;
  uid_t so_uid;
};

/* 7304 */
struct xsockbuf
{
  u_int32_t sb_cc;
  u_int32_t sb_hiwat;
  u_int32_t sb_mbcnt;
  u_int32_t sb_mbmax;
  int32_t sb_lowat;
  __int16 sb_flags;
  __int16 sb_timeo;
};

/* 7305 */
struct inp_flowhash_key
{
  inp_flowhash_key_addr infh_laddr;
  inp_flowhash_key_addr infh_faddr;
  u_int32_t infh_lport;
  u_int32_t infh_fport;
  u_int32_t infh_af;
  u_int32_t infh_proto;
  u_int32_t infh_rand1;
  u_int32_t infh_rand2;
};

/* 7306 */
struct inp_flowhash_key_addr
{
  inp_flowhash_key_addr::$E4A32602EB7833EED8CD3A88AD7FAC7F infha;
};

/* 7307 */
union inp_flowhash_key_addr::$E4A32602EB7833EED8CD3A88AD7FAC7F
{
  in_addr v4;
  in6_addr v6;
  u_int8_t addr8[16];
  u_int16_t addr16[8];
  u_int32_t addr32[4];
};

/* 7308 */
struct xinpgen
{
  u_int32_t xig_len;
  u_int xig_count;
  inp_gen_t xig_gen;
  so_gen_t xig_sogen;
};

/* 7309 */
struct rtqk_arg
{
  radix_node_head *rnh;
  int updating;
  int draining;
  uint32_t_0 killed;
  uint32_t_0 found;
  uint64_t_0 nextstop;
};

/* 7310 */
struct __attribute__((aligned(8))) in_ifadown_arg
{
  radix_node_head *rnh;
  ifaddr *ifa;
  int del;
};

/* 7311 */
struct net_qos_dscp_map
{
  u_int8_t sotc_to_dscp[10];
  u_int8_t netsvctype_to_dscp[9];
};

/* 7312 */
struct __attribute__((aligned(4))) netsvctype_dscp_map
{
  int netsvctype;
  u_int8_t dscp;
};

/* 7313 */
struct dcsp_msc_map
{
  u_int8_t dscp;
  mbuf_svc_class_t msc;
};

/* 7314 */
enum mbuf_traffic_class_t : __int32
{
  MBUF_TC_UNSPEC = 0xFFFFFFFF,
  MBUF_TC_BE = 0x0,
  MBUF_TC_BK = 0x1,
  MBUF_TC_VI = 0x2,
  MBUF_TC_VO = 0x3,
  MBUF_TC_MAX = 0x4,
};

/* 7315 */
struct cmsghdr
{
  socklen_t cmsg_len;
  int cmsg_level;
  int cmsg_type;
};

/* 7316 */
struct net_qos_guideline_args
{
  user_addr_t param;
  uint32_t_0 param_len;
  char param_len_r_[4];
};

/* 7317 */
struct net_qos_param
{
  u_int64_t nq_transfer_size;
  unsigned __int32 nq_use_expensive : 1;
  unsigned __int32 nq_uplink : 1;
  u_int32_t nq_unused;
};

/* 7318 */
union ip_fw::$C5FCB1E568521986DEBEB7121BD6E07E
{
  u_short fw_pts[10];
  unsigned int fw_icmptypes[4];
};

/* 7319 */
union ip_fw_if
{
  in_addr fu_via_ip;
  ip_fw_if::$535603DCC49E3F68B29DA6B94918EE04 fu_via_if;
};

/* 7320 */
struct ip_fw_if::$535603DCC49E3F68B29DA6B94918EE04
{
  char name[10];
  __int16 unit;
};

/* 7321 */
union ip_fw::$DE3467BABAA005E378BA6F8B714C02B6
{
  u_short fu_divert_port;
  u_short fu_pipe_nr;
  u_short fu_skipto_rule;
  u_short fu_reject_code;
  sockaddr_in fu_fwd_ip;
};

/* 7322 */
struct dn_heap
{
  int size;
  int elements;
  int offset;
  dn_heap_entry *p;
};

/* 7323 */
struct dn_heap_entry
{
  dn_key key;
  void *object;
};

/* 7324 */
typedef u_int64_t dn_key;

/* 7325 */
struct dn_pipe_head
{
  dn_pipe *slh_first;
};

/* 7326 */
struct dn_pipe
{
  dn_pipe::$B249FAFC958E8EE91E353C51BD1AA21B next;
  int pipe_nr;
  int bandwidth;
  int delay;
  mbuf *head;
  mbuf *tail;
  dn_heap scheduler_heap;
  dn_heap not_eligible_heap;
  dn_heap idle_heap;
  dn_key V;
  int sum;
  int numbytes;
  dn_key sched_time;
  char if_name[16];
  ifnet *ifp;
  int ready;
  dn_flow_set fs;
};

/* 7327 */
struct dn_pipe::$B249FAFC958E8EE91E353C51BD1AA21B
{
  dn_pipe *sle_next;
};

/* 7328 */
struct __attribute__((aligned(8))) dn_flow_set
{
  dn_flow_set::$ED8816463EF9D361313DA25AF36DD757 next;
  u_short fs_nr;
  u_short flags_fs;
  dn_pipe *pipe;
  u_short parent_nr;
  int weight;
  int qsize;
  int plr;
  ip_flow_id flow_mask;
  int rq_size;
  int rq_elements;
  dn_flow_queue **rq;
  u_int32_t last_expired;
  int backlogged;
  int w_q;
  int max_th;
  int min_th;
  int max_p;
  u_int c_1;
  u_int c_2;
  u_int c_3;
  u_int c_4;
  u_int *w_q_lookup;
  u_int lookup_depth;
  int lookup_step;
  int lookup_weight;
  int avg_pkt_size;
  int max_pkt_size;
};

/* 7329 */
struct dn_flow_set::$ED8816463EF9D361313DA25AF36DD757
{
  dn_flow_set *sle_next;
};

/* 7330 */
struct dn_flow_queue
{
  dn_flow_queue *next;
  ip_flow_id id;
  mbuf *head;
  mbuf *tail;
  u_int len;
  u_int len_bytes;
  u_int32_t numbytes;
  u_int64_t tot_pkts;
  u_int64_t tot_bytes;
  u_int32_t drops;
  int hash_slot;
  int avg;
  int count;
  int random;
  u_int32_t q_time;
  dn_flow_set *fs;
  int heap_pos;
  dn_key sched_time;
  dn_key S;
  dn_key F;
};

/* 7331 */
struct dn_flow_set_head
{
  dn_flow_set *slh_first;
};

/* 7332 */
struct dn_pkt_tag
{
  ip_fw *dn_ipfw_rule;
  void *dn_pf_rule;
  int dn_dir;
  dn_key dn_output_time;
  ifnet *dn_ifp;
  dn_pkt_tag::$123C7EAA6178C54F77EFA38744A0FBD7 dn_dst_;
  dn_pkt_tag::$6C24B326D8D7CECDE9EED7C7A7A6BB29 dn_ro_;
  route_in6 dn_ro6_pmtu;
  ifnet *dn_origifp;
  u_int32_t dn_mtu;
  int dn_alwaysfrag;
  u_int32_t dn_unfragpartlen;
  ip6_exthdrs dn_exthdrs;
  int dn_flags;
  int dn_client;
  dn_pkt_tag::$5F10AE758F2A0ABC69B15E7D30C30878 dn_ipoa_;
};

/* 7333 */
union dn_pkt_tag::$123C7EAA6178C54F77EFA38744A0FBD7
{
  sockaddr_in _dn_dst;
  sockaddr_in6 _dn_dst6;
};

/* 7334 */
union dn_pkt_tag::$6C24B326D8D7CECDE9EED7C7A7A6BB29
{
  route _dn_ro;
  route_in6 _dn_ro6;
};

/* 7335 */
union dn_pkt_tag::$5F10AE758F2A0ABC69B15E7D30C30878
{
  ip_out_args _dn_ipoa;
  ip6_out_args _dn_ip6oa;
};

/* 7336 */
struct dn_event_nwk_wq_entry
{
  nwk_wq_entry nwk_wqe;
  dummynet_event dn_ev_arg;
};

/* 7337 */
struct dn_pipe_64
{
  user64_addr_t next;
  int pipe_nr;
  int bandwidth;
  int delay;
  user64_addr_t head;
  user64_addr_t tail;
  dn_heap_64 scheduler_heap;
  dn_heap_64 not_eligible_heap;
  dn_heap_64 idle_heap;
  dn_key V;
  int sum;
  int numbytes;
  dn_key sched_time;
  char if_name[16];
  user64_addr_t ifp;
  int ready;
  dn_flow_set_64 fs;
};

/* 7338 */
struct dn_heap_64
{
  int size;
  int elements;
  int offset;
  user64_addr_t p;
};

/* 7339 */
struct __attribute__((aligned(8))) dn_flow_set_64
{
  user64_addr_t next;
  u_short fs_nr;
  u_short flags_fs;
  user64_addr_t pipe;
  u_short parent_nr;
  int weight;
  int qsize;
  int plr;
  ip_flow_id flow_mask;
  int rq_size;
  int rq_elements;
  user64_addr_t rq;
  u_int32_t last_expired;
  int backlogged;
  int w_q;
  int max_th;
  int min_th;
  int max_p;
  u_int c_1;
  u_int c_2;
  u_int c_3;
  u_int c_4;
  user64_addr_t w_q_lookup;
  u_int lookup_depth;
  int lookup_step;
  int lookup_weight;
  int avg_pkt_size;
  int max_pkt_size;
};

/* 7340 */
struct dn_pipe_32
{
  user32_addr_t next;
  int pipe_nr;
  int bandwidth;
  int delay;
  user32_addr_t head;
  user32_addr_t tail;
  dn_heap_32 scheduler_heap;
  dn_heap_32 not_eligible_heap;
  dn_heap_32 idle_heap;
  dn_key V;
  int sum;
  int numbytes;
  dn_key sched_time;
  char if_name[16];
  user32_addr_t ifp;
  int ready;
  dn_flow_set_32 fs;
};

/* 7341 */
struct dn_heap_32
{
  int size;
  int elements;
  int offset;
  user32_addr_t p;
};

/* 7342 */
struct dn_flow_set_32
{
  user32_addr_t next;
  u_short fs_nr;
  u_short flags_fs;
  user32_addr_t pipe;
  u_short parent_nr;
  int weight;
  int qsize;
  int plr;
  ip_flow_id flow_mask;
  int rq_size;
  int rq_elements;
  user32_addr_t rq;
  u_int32_t last_expired;
  int backlogged;
  int w_q;
  int max_th;
  int min_th;
  int max_p;
  u_int c_1;
  u_int c_2;
  u_int c_3;
  u_int c_4;
  user32_addr_t w_q_lookup;
  u_int lookup_depth;
  int lookup_step;
  int lookup_weight;
  int avg_pkt_size;
  int max_pkt_size;
};

/* 7343 */
struct dn_flow_queue_32
{
  user32_addr_t next;
  ip_flow_id id;
  user32_addr_t head;
  user32_addr_t tail;
  u_int len;
  u_int len_bytes;
  u_int32_t numbytes;
  u_int64_t tot_pkts;
  u_int64_t tot_bytes;
  u_int32_t drops;
  int hash_slot;
  int avg;
  int count;
  int random;
  u_int32_t q_time;
  user32_addr_t fs;
  int heap_pos;
  dn_key sched_time;
  dn_key S;
  dn_key F;
};

/* 7344 */
struct dn_flow_queue_64
{
  user64_addr_t next;
  ip_flow_id id;
  user64_addr_t head;
  user64_addr_t tail;
  u_int len;
  u_int len_bytes;
  u_int32_t numbytes;
  u_int64_t tot_pkts;
  u_int64_t tot_bytes;
  u_int32_t drops;
  int hash_slot;
  int avg;
  int count;
  int random;
  u_int32_t q_time;
  user64_addr_t fs;
  int heap_pos;
  dn_key sched_time;
  dn_key S;
  dn_key F;
};

/* 7345 */
struct eventhandler_entry_dummynet_event
{
  eventhandler_entry ee;
  dummynet_event_fn eh_func;
};

/* 7346 */
typedef void (*dummynet_event_fn)(eventhandler_entry_arg, dummynet_event *);

/* 7347 */
struct icmpstat
{
  u_int32_t icps_error;
  u_int32_t icps_oldshort;
  u_int32_t icps_oldicmp;
  u_int32_t icps_outhist[41];
  u_int32_t icps_badcode;
  u_int32_t icps_tooshort;
  u_int32_t icps_checksum;
  u_int32_t icps_badlen;
  u_int32_t icps_reflect;
  u_int32_t icps_inhist[41];
  u_int32_t icps_bmcastecho;
  u_int32_t icps_bmcasttstamp;
};

/* 7348 */
struct icmp_0
{
  u_char icmp_type;
  u_char icmp_code;
  u_short icmp_cksum;
  icmp::$59AB5B6EFDD9E9426C5156B0EB8FC241 icmp_hun;
  icmp::$CC6B9B06932A83563393B6E3088709E8 icmp_dun;
};

/* 7349 */
union icmp::$CC6B9B06932A83563393B6E3088709E8
{
  id_ts id_ts;
  id_ip_0 id_ip;
  icmp_ra_addr id_radv;
  u_int32_t id_mask;
  char id_data[1];
};

/* 7350 */
struct id_ip_0
{
  ip_0 idi_ip;
};

/* 7351 */
typedef uint8_t_0 bitstr_t;

/* 7352 */
struct ipqhead
{
  ipq *tqh_first;
  ipq **tqh_last;
};

/* 7353 */
struct ipq
{
  ipq::$82EEBDFCDF0ED7411982C9DBE114350A ipq_list;
  mbuf *ipq_frags;
  u_char ipq_ttl;
  u_char ipq_p;
  u_short ipq_id;
  in_addr ipq_src;
  in_addr ipq_dst;
  u_int32_t ipq_nfrags;
  uint32_t_0 ipq_csum_flags;
  uint32_t_0 ipq_csum;
};

/* 7354 */
struct ipq::$82EEBDFCDF0ED7411982C9DBE114350A
{
  ipq *tqe_next;
  ipq **tqe_prev;
};

/* 7355 */
struct in_ifaddrhead
{
  in_ifaddr *tqh_first;
  in_ifaddr **tqh_last;
};

/* 7356 */
struct in_ifaddrhashhead
{
  in_ifaddr *tqh_first;
  in_ifaddr **tqh_last;
};

/* 7357 */
struct ipstat
{
  u_int32_t ips_total;
  u_int32_t ips_badsum;
  u_int32_t ips_tooshort;
  u_int32_t ips_toosmall;
  u_int32_t ips_badhlen;
  u_int32_t ips_badlen;
  u_int32_t ips_fragments;
  u_int32_t ips_fragdropped;
  u_int32_t ips_fragtimeout;
  u_int32_t ips_forward;
  u_int32_t ips_fastforward;
  u_int32_t ips_cantforward;
  u_int32_t ips_redirectsent;
  u_int32_t ips_noproto;
  u_int32_t ips_delivered;
  u_int32_t ips_localout;
  u_int32_t ips_odropped;
  u_int32_t ips_reassembled;
  u_int32_t ips_fragmented;
  u_int32_t ips_ofragments;
  u_int32_t ips_cantfrag;
  u_int32_t ips_badoptions;
  u_int32_t ips_noroute;
  u_int32_t ips_badvers;
  u_int32_t ips_rawout;
  u_int32_t ips_toolong;
  u_int32_t ips_notmember;
  u_int32_t ips_nogif;
  u_int32_t ips_badaddr;
  u_int32_t ips_pktdropcntrl;
  u_int32_t ips_rcv_swcsum;
  u_int32_t ips_rcv_swcsum_bytes;
  u_int32_t ips_snd_swcsum;
  u_int32_t ips_snd_swcsum_bytes;
  u_int32_t ips_adj;
  u_int32_t ips_adj_hwcsum_clr;
  u_int32_t ips_rxc_collisions;
  u_int32_t ips_rxc_chained;
  u_int32_t ips_rxc_notchain;
  u_int32_t ips_rxc_chainsz_gt2;
  u_int32_t ips_rxc_chainsz_gt4;
  u_int32_t ips_rxc_notlist;
  u_int32_t ips_raw_sappend_fail;
  u_int32_t ips_necp_policy_drop;
};

/* 7358 */
typedef int ip_dn_io_t(mbuf *, int, int, ip_fw_args *, int);

/* 7359 */
struct ip_linklocal_stat
{
  u_int32_t iplls_in_total;
  u_int32_t iplls_in_badttl;
  u_int32_t iplls_out_total;
  u_int32_t iplls_out_badttl;
};

/* 7360 */
struct ip_srcrt
{
  in_addr dst;
  char nop;
  char srcopt[3];
  in_addr route[10];
};

/* 7361 */
typedef mbuf *(*gre_input_func_t)(mbuf *, int, int);

/* 7362 */
enum ipinput_chain_ret_t : __int32
{
  IPINPUT_DOCHAIN = 0x0,
  IPINPUT_DONTCHAIN = 0x1,
  IPINPUT_FREED = 0x2,
  IPINPUT_DONE = 0x3,
};

/* 7363 */
struct ipfilter
{
  ipfilter::$4622601279818713A24B8483982B21F1 ipf_link;
  ipf_filter ipf_filter;
  ipfilter_list *ipf_head;
  ipfilter::$4622601279818713A24B8483982B21F1 ipf_tbr;
};

/* 7364 */
struct ipfilter::$4622601279818713A24B8483982B21F1
{
  ipfilter *tqe_next;
  ipfilter **tqe_prev;
};

/* 7365 */
struct ipfilter_list
{
  ipfilter *tqh_first;
  ipfilter **tqh_last;
};

/* 7366 */
struct ip_fwd_tag
{
  sockaddr_in *next_hop;
};

/* 7367 */
struct udpiphdr
{
  ipovly ui_i;
  udphdr ui_u;
};

/* 7368 */
struct ipovly
{
  u_char ih_x1[9];
  u_char ih_pr;
  u_short ih_len;
  in_addr ih_src;
  in_addr ih_dst;
};

/* 7369 */
struct ip_timestamp
{
  u_char ipt_code;
  u_char ipt_len;
  u_char ipt_ptr;
  unsigned __int32 ipt_flg : 4;
  unsigned __int32 ipt_oflw : 4;
  ipt_timestamp ipt_timestamp;
};

/* 7370 */
union ipt_timestamp
{
  n_long ipt_time[1];
  ipt_ta ipt_ta[1];
};

/* 7371 */
typedef __uint32_t n_long;

/* 7372 */
struct ipt_ta
{
  in_addr ipt_addr;
  n_long ipt_time;
};

/* 7373 */
struct __attribute__((aligned(8))) ip_fw_in_args
{
  sockaddr_in *fwai_next_hop;
  ip_fw *fwai_ipfw_rule;
  pf_rule *fwai_pf_rule;
  u_int16_t fwai_divert_rule;
};

/* 7374 */
typedef pktchain_elm pktchain_elm_t;

/* 7375 */
struct pktchain_elm
{
  mbuf *pkte_head;
  mbuf *pkte_tail;
  in_addr pkte_saddr;
  in_addr pkte_daddr;
  uint16_t pkte_npkts;
  uint16_t pkte_proto;
  uint32_t_0 pkte_nbytes;
};

/* 7376 */
struct __attribute__((aligned(8))) secasvar
{
  secasvar::$E40ED7F9D5A345CCA2B303426AB523C3 chain;
  secasvar::$E40ED7F9D5A345CCA2B303426AB523C3 spihash;
  int refcnt;
  u_int8_t state;
  u_int8_t alg_auth;
  u_int8_t alg_enc;
  u_int32_t spi;
  u_int32_t flags;
  u_int16_t flags2;
  sadb_key *key_auth;
  sadb_key *key_enc;
  caddr_t iv;
  u_int ivlen;
  void *sched;
  size_t_0 schedlen;
  secreplay *replay;
  __int64 created;
  sadb_lifetime *lft_c;
  sadb_lifetime *lft_h;
  sadb_lifetime *lft_s;
  socket *so;
  u_int32_t seq;
  pid_t pid;
  secashead *sah;
  u_int64_t natt_last_activity;
  u_int16_t remote_ike_port;
  u_int16_t natt_encapsulated_src_port;
  u_int16_t natt_interval;
  u_int16_t natt_offload_interval;
  u_int8_t always_expire;
};

/* 7377 */
struct secasvar::$E40ED7F9D5A345CCA2B303426AB523C3
{
  secasvar *le_next;
  secasvar **le_prev;
};

/* 7378 */
struct sadb_key
{
  u_int16_t sadb_key_len;
  u_int16_t sadb_key_exttype;
  u_int16_t sadb_key_bits;
  u_int16_t sadb_key_reserved;
};

/* 7379 */
struct __attribute__((aligned(8))) secreplay
{
  u_int32_t count;
  u_int wsize;
  u_int32_t seq;
  u_int32_t lastseq;
  caddr_t bitmap;
  int overflow;
};

/* 7380 */
struct sadb_lifetime
{
  u_int16_t sadb_lifetime_len;
  u_int16_t sadb_lifetime_exttype;
  u_int32_t sadb_lifetime_allocations;
  u_int64_t sadb_lifetime_bytes;
  u_int64_t sadb_lifetime_addtime;
  u_int64_t sadb_lifetime_usetime;
};

/* 7381 */
struct secashead
{
  secashead::$E48174521232261277B92F83F24A2C67 chain;
  secasindex saidx;
  sadb_ident *idents;
  sadb_ident *identd;
  ifnet_t ipsec_if;
  u_int outgoing_if;
  u_int8_t dir;
  u_int8_t state;
  _satree savtree[4];
  route_in6 sa_route;
};

/* 7382 */
struct secashead::$E48174521232261277B92F83F24A2C67
{
  secashead *le_next;
  secashead **le_prev;
};

/* 7383 */
struct sadb_ident
{
  u_int16_t sadb_ident_len;
  u_int16_t sadb_ident_exttype;
  u_int16_t sadb_ident_type;
  u_int16_t sadb_ident_reserved;
  u_int64_t sadb_ident_id;
};

/* 7384 */
struct _satree
{
  secasvar *lh_first;
};

/* 7385 */
struct fq_head
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 7386 */
struct in_pktinfo
{
  unsigned int ipi_ifindex;
  in_addr ipi_spec_dst;
  in_addr ipi_addr;
};

/* 7387 */
struct ip_moptions_dbg
{
  ip_moptions imo;
  u_int16_t imo_refhold_cnt;
  u_int16_t imo_refrele_cnt;
  ctrace_t imo_alloc;
  ctrace_t imo_free;
  ctrace_t imo_refhold[32];
  ctrace_t imo_refrele[32];
};

/* 7388 */
union ip_output_list::$7C6A7FE5F9121409A78CF478D738F741
{
  ip_output_list::$7C6A7FE5F9121409A78CF478D738F741::$3F7A3739DEB1CFB66B0E88692FD586BC _anon_0;
  uint32_t_0 raw;
};

/* 7389 */
struct ip_output_list::$7C6A7FE5F9121409A78CF478D738F741::$3F7A3739DEB1CFB66B0E88692FD586BC
{
  __int32 select_srcif : 1;
  __int32 srcbound : 1;
  __int32 nocell : 1;
  __int32 isbroadcast : 1;
  __int32 didfilter : 1;
  __int32 noexpensive : 1;
  __int32 awdl_unrestricted : 1;
};

/* 7390 */
struct ip_output_list::$C4A27D78249C28FC7E52D5100938E0E5
{
  ipsec_output_state ipsec_state;
  route necp_route;
  ip_fw_args args;
  route saved_route;
  ipf_pktopts ipf_pktopts;
};

/* 7391 */
typedef int ip_dn_ctl_t(sockopt_0 *);

/* 7392 */
struct xinpcb
{
  u_int32_t xi_len;
  inpcb_compat xi_inp;
  xsocket xi_socket;
  u_quad_t xi_alignment_hack;
};

/* 7393 */
struct xsocket
{
  u_int32_t xso_len;
  u_int32_t xso_so;
  __int16 so_type;
  __int16 so_options;
  __int16 so_linger;
  __int16 so_state;
  u_int32_t so_pcb;
  int xso_protocol;
  int xso_family;
  __int16 so_qlen;
  __int16 so_incqlen;
  __int16 so_qlimit;
  __int16 so_timeo;
  u_short so_error;
  pid_t so_pgid;
  u_int32_t so_oobmark;
  xsockbuf so_rcv;
  xsockbuf so_snd;
  uid_t so_uid;
};

/* 7394 */
struct tcp_cache_head
{
  tcp_cache_bucket tcp_caches;
  lck_mtx_t tch_mtx;
};

/* 7395 */
struct tcp_cache_bucket
{
  tcp_cache *slh_first;
};

/* 7396 */
struct __attribute__((aligned(8))) tcp_cache
{
  tcp_cache::$A871D4D0CFF7DDA737068CEC7CC50559 list;
  u_int32_t tc_last_access;
  tcp_cache_key tc_key;
  u_int8_t tc_tfo_cookie[16];
  u_int8_t tc_tfo_cookie_len;
};

/* 7397 */
struct tcp_cache::$A871D4D0CFF7DDA737068CEC7CC50559
{
  tcp_cache *sle_next;
};

/* 7398 */
struct tcp_cache_key
{
  sa_family_t tck_family;
  tcp_heuristic_key tck_src;
  in_4_6_addr tck_dst;
};

/* 7399 */
struct __attribute__((aligned(4))) tcp_heuristic_key
{
  tcp_heuristic_key::$329EDD81F8739151EFBE055664441CA9 _anon_0;
  sa_family_t thk_family;
};

/* 7400 */
union tcp_heuristic_key::$329EDD81F8739151EFBE055664441CA9
{
  uint8_t_0 thk_net_signature[20];
  in_4_6_addr thk_ip;
};

/* 7401 */
union in_4_6_addr
{
  in_addr addr;
  in6_addr addr6;
};

/* 7402 */
struct tcp_heuristics_head
{
  tcp_heur_bucket tcp_heuristics;
  lck_mtx_t thh_mtx;
};

/* 7403 */
struct tcp_heur_bucket
{
  tcp_heuristic *slh_first;
};

/* 7404 */
struct __attribute__((aligned(4))) tcp_heuristic
{
  tcp_heuristic::$F112D43497929C82109451F2D7F8EE65 list;
  uint32_t_0 th_last_access;
  tcp_heuristic_key th_key;
  uint8_t_0 th_tfo_data_loss;
  uint8_t_0 th_tfo_req_loss;
  uint8_t_0 th_tfo_data_rst;
  uint8_t_0 th_tfo_req_rst;
  uint8_t_0 th_mptcp_loss;
  uint8_t_0 th_ecn_loss;
  uint8_t_0 th_ecn_aggressive;
  uint8_t_0 th_ecn_droprst;
  uint8_t_0 th_ecn_droprxmt;
  uint8_t_0 th_ecn_synrst;
  uint32_t_0 th_tfo_enabled_time;
  uint32_t_0 th_tfo_backoff_until;
  uint32_t_0 th_tfo_backoff;
  uint32_t_0 th_mptcp_backoff;
  uint32_t_0 th_ecn_backoff;
  unsigned __int8 th_tfo_in_backoff : 1;
  unsigned __int8 th_mptcp_in_backoff : 1;
  char th_val_end[];
};

/* 7405 */
struct tcp_heuristic::$F112D43497929C82109451F2D7F8EE65
{
  tcp_heuristic *sle_next;
};

/* 7406 */
enum mptcp_state : __int32
{
  MPTCPS_CLOSED = 0x0,
  MPTCPS_LISTEN = 0x1,
  MPTCPS_ESTABLISHED = 0x2,
  MPTCPS_CLOSE_WAIT = 0x3,
  MPTCPS_FIN_WAIT_1 = 0x4,
  MPTCPS_CLOSING = 0x5,
  MPTCPS_LAST_ACK = 0x6,
  MPTCPS_FIN_WAIT_2 = 0x7,
  MPTCPS_TIME_WAIT = 0x8,
  MPTCPS_TERMINATE = 0x9,
};

/* 7407 */
struct __attribute__((aligned(8))) tcp_cache_key_src
{
  ifnet *ifp;
  in_4_6_addr laddr;
  in_4_6_addr faddr;
  int af;
};

/* 7408 */
struct mptses::$2881C00AA635AD927766C41535C0246A
{
  mptopt *tqh_first;
  mptopt **tqh_last;
};

/* 7409 */
struct mptopt
{
  mptopt::$2600BFE70C0391359ED0B81EA9C8B4A8 mpo_entry;
  uint32_t_0 mpo_flags;
  int mpo_level;
  int mpo_name;
  int mpo_intval;
};

/* 7410 */
struct mptopt::$2600BFE70C0391359ED0B81EA9C8B4A8
{
  mptopt *tqe_next;
  mptopt **tqe_prev;
};

/* 7411 */
struct mptses::$FC610EC98F68B05D10B892A570698E28
{
  mptsub *tqh_first;
  mptsub **tqh_last;
};

/* 7412 */
struct mptsub::$55BB275FF7178049162E89138B769C56
{
  mptsub *tqe_next;
  mptsub **tqe_prev;
};

/* 7413 */
union mptsub::$FAB93303023E9275B54822C9BD02C0D7
{
  sockaddr mpts_dst;
  sockaddr_in __mpts_dst_v4;
  sockaddr_in6 __mpts_dst_v6;
};

/* 7414 */
union mptses::$C22FFEAE6BF0CD142C1510AF65B6B9A9
{
  sockaddr mpte_src;
  sockaddr_in __mpte_src_v4;
  sockaddr_in6 __mpte_src_v6;
};

/* 7415 */
union mptses::$FB6E1578E2C0C6DC81779A78E15AA342
{
  sockaddr mpte_dst;
  sockaddr_in __mpte_dst_v4;
  sockaddr_in6 __mpte_dst_v6;
};

/* 7416 */
struct mpt_itf_info
{
  uint32_t_0 ifindex;
  unsigned __int32 has_v4_conn : 1;
  unsigned __int32 has_v6_conn : 1;
  unsigned __int32 has_nat64_conn : 1;
  unsigned __int32 no_mptcp_support : 1;
};

/* 7417 */
struct mptcp_itf_stats
{
  uint16_t ifindex;
  uint16_t switches;
  unsigned __int32 is_expensive : 1;
  uint64_t_0 mpis_txbytes;
  uint64_t_0 mpis_rxbytes;
};

/* 7418 */
typedef mptcp_state mptcp_state_t;

/* 7419 */
typedef u_int64_t mptcp_key_t;

/* 7420 */
typedef u_int32_t mptcp_token_t;

/* 7421 */
struct mptcb::$2E56B2518DC8B09911124CBCC5922BAD
{
  mptcp_subf_auth_entry *lh_first;
};

/* 7422 */
struct __attribute__((aligned(8))) mptcp_subf_auth_entry
{
  mptcp_subf_auth_entry::$402F2F27D1BA1D9C55EF02C257101670 msae_next;
  u_int32_t msae_laddr_rand;
  u_int32_t msae_raddr_rand;
  mptcp_addr_id msae_laddr_id;
  mptcp_addr_id msae_raddr_id;
};

/* 7423 */
struct mptcp_subf_auth_entry::$402F2F27D1BA1D9C55EF02C257101670
{
  mptcp_subf_auth_entry *le_next;
  mptcp_subf_auth_entry **le_prev;
};

/* 7424 */
typedef u_int8_t mptcp_addr_id;

/* 7425 */
struct tcpstat
{
  u_int32_t tcps_connattempt;
  u_int32_t tcps_accepts;
  u_int32_t tcps_connects;
  u_int32_t tcps_drops;
  u_int32_t tcps_conndrops;
  u_int32_t tcps_closed;
  u_int32_t tcps_segstimed;
  u_int32_t tcps_rttupdated;
  u_int32_t tcps_delack;
  u_int32_t tcps_timeoutdrop;
  u_int32_t tcps_rexmttimeo;
  u_int32_t tcps_persisttimeo;
  u_int32_t tcps_keeptimeo;
  u_int32_t tcps_keepprobe;
  u_int32_t tcps_keepdrops;
  u_int32_t tcps_sndtotal;
  u_int32_t tcps_sndpack;
  u_int32_t tcps_sndbyte;
  u_int32_t tcps_sndrexmitpack;
  u_int32_t tcps_sndrexmitbyte;
  u_int32_t tcps_sndacks;
  u_int32_t tcps_sndprobe;
  u_int32_t tcps_sndurg;
  u_int32_t tcps_sndwinup;
  u_int32_t tcps_sndctrl;
  u_int32_t tcps_rcvtotal;
  u_int32_t tcps_rcvpack;
  u_int32_t tcps_rcvbyte;
  u_int32_t tcps_rcvbadsum;
  u_int32_t tcps_rcvbadoff;
  u_int32_t tcps_rcvmemdrop;
  u_int32_t tcps_rcvshort;
  u_int32_t tcps_rcvduppack;
  u_int32_t tcps_rcvdupbyte;
  u_int32_t tcps_rcvpartduppack;
  u_int32_t tcps_rcvpartdupbyte;
  u_int32_t tcps_rcvoopack;
  u_int32_t tcps_rcvoobyte;
  u_int32_t tcps_rcvpackafterwin;
  u_int32_t tcps_rcvbyteafterwin;
  u_int32_t tcps_rcvafterclose;
  u_int32_t tcps_rcvwinprobe;
  u_int32_t tcps_rcvdupack;
  u_int32_t tcps_rcvacktoomuch;
  u_int32_t tcps_rcvackpack;
  u_int32_t tcps_rcvackbyte;
  u_int32_t tcps_rcvwinupd;
  u_int32_t tcps_pawsdrop;
  u_int32_t tcps_predack;
  u_int32_t tcps_preddat;
  u_int32_t tcps_pcbcachemiss;
  u_int32_t tcps_cachedrtt;
  u_int32_t tcps_cachedrttvar;
  u_int32_t tcps_cachedssthresh;
  u_int32_t tcps_usedrtt;
  u_int32_t tcps_usedrttvar;
  u_int32_t tcps_usedssthresh;
  u_int32_t tcps_persistdrop;
  u_int32_t tcps_badsyn;
  u_int32_t tcps_mturesent;
  u_int32_t tcps_listendrop;
  u_int32_t tcps_synchallenge;
  u_int32_t tcps_rstchallenge;
  u_int32_t tcps_minmssdrops;
  u_int32_t tcps_sndrexmitbad;
  u_int32_t tcps_badrst;
  u_int32_t tcps_sc_added;
  u_int32_t tcps_sc_retransmitted;
  u_int32_t tcps_sc_dupsyn;
  u_int32_t tcps_sc_dropped;
  u_int32_t tcps_sc_completed;
  u_int32_t tcps_sc_bucketoverflow;
  u_int32_t tcps_sc_cacheoverflow;
  u_int32_t tcps_sc_reset;
  u_int32_t tcps_sc_stale;
  u_int32_t tcps_sc_aborted;
  u_int32_t tcps_sc_badack;
  u_int32_t tcps_sc_unreach;
  u_int32_t tcps_sc_zonefail;
  u_int32_t tcps_sc_sendcookie;
  u_int32_t tcps_sc_recvcookie;
  u_int32_t tcps_hc_added;
  u_int32_t tcps_hc_bucketoverflow;
  u_int32_t tcps_sack_recovery_episode;
  u_int32_t tcps_sack_rexmits;
  u_int32_t tcps_sack_rexmit_bytes;
  u_int32_t tcps_sack_rcv_blocks;
  u_int32_t tcps_sack_send_blocks;
  u_int32_t tcps_sack_sboverflow;
  u_int32_t tcps_bg_rcvtotal;
  u_int32_t tcps_rxtfindrop;
  u_int32_t tcps_fcholdpacket;
  u_int32_t tcps_coalesced_pack;
  u_int32_t tcps_flowtbl_full;
  u_int32_t tcps_flowtbl_collision;
  u_int32_t tcps_lro_twopack;
  u_int32_t tcps_lro_multpack;
  u_int32_t tcps_lro_largepack;
  u_int32_t tcps_limited_txt;
  u_int32_t tcps_early_rexmt;
  u_int32_t tcps_sack_ackadv;
  u_int32_t tcps_rcv_swcsum;
  u_int32_t tcps_rcv_swcsum_bytes;
  u_int32_t tcps_rcv6_swcsum;
  u_int32_t tcps_rcv6_swcsum_bytes;
  u_int32_t tcps_snd_swcsum;
  u_int32_t tcps_snd_swcsum_bytes;
  u_int32_t tcps_snd6_swcsum;
  u_int32_t tcps_snd6_swcsum_bytes;
  u_int32_t tcps_msg_unopkts;
  u_int32_t tcps_msg_unoappendfail;
  u_int32_t tcps_msg_sndwaithipri;
  u_int32_t tcps_invalid_mpcap;
  u_int32_t tcps_invalid_joins;
  u_int32_t tcps_mpcap_fallback;
  u_int32_t tcps_join_fallback;
  u_int32_t tcps_estab_fallback;
  u_int32_t tcps_invalid_opt;
  u_int32_t tcps_mp_outofwin;
  u_int32_t tcps_mp_reducedwin;
  u_int32_t tcps_mp_badcsum;
  u_int32_t tcps_mp_oodata;
  u_int32_t tcps_mp_switches;
  u_int32_t tcps_mp_rcvtotal;
  u_int32_t tcps_mp_rcvbytes;
  u_int32_t tcps_mp_sndpacks;
  u_int32_t tcps_mp_sndbytes;
  u_int32_t tcps_join_rxmts;
  u_int32_t tcps_tailloss_rto;
  u_int32_t tcps_reordered_pkts;
  u_int32_t tcps_recovered_pkts;
  u_int32_t tcps_pto;
  u_int32_t tcps_rto_after_pto;
  u_int32_t tcps_tlp_recovery;
  u_int32_t tcps_tlp_recoverlastpkt;
  u_int32_t tcps_ecn_client_success;
  u_int32_t tcps_ecn_recv_ece;
  u_int32_t tcps_ecn_sent_ece;
  u_int32_t tcps_detect_reordering;
  u_int32_t tcps_delay_recovery;
  u_int32_t tcps_avoid_rxmt;
  u_int32_t tcps_unnecessary_rxmt;
  u_int32_t tcps_nostretchack;
  u_int32_t tcps_rescue_rxmt;
  u_int32_t tcps_pto_in_recovery;
  u_int32_t tcps_pmtudbh_reverted;
  u_int32_t tcps_dsack_disable;
  u_int32_t tcps_dsack_ackloss;
  u_int32_t tcps_dsack_badrexmt;
  u_int32_t tcps_dsack_sent;
  u_int32_t tcps_dsack_recvd;
  u_int32_t tcps_dsack_recvd_old;
  u_int32_t tcps_mp_sel_symtomsd;
  u_int32_t tcps_mp_sel_rtt;
  u_int32_t tcps_mp_sel_rto;
  u_int32_t tcps_mp_sel_peer;
  u_int32_t tcps_mp_num_probes;
  u_int32_t tcps_mp_verdowngrade;
  u_int32_t tcps_drop_after_sleep;
  u_int32_t tcps_probe_if;
  u_int32_t tcps_probe_if_conflict;
  u_int32_t tcps_ecn_client_setup;
  u_int32_t tcps_ecn_server_setup;
  u_int32_t tcps_ecn_server_success;
  u_int32_t tcps_ecn_lost_synack;
  u_int32_t tcps_ecn_lost_syn;
  u_int32_t tcps_ecn_not_supported;
  u_int32_t tcps_ecn_recv_ce;
  u_int32_t tcps_ecn_conn_recv_ce;
  u_int32_t tcps_ecn_conn_recv_ece;
  u_int32_t tcps_ecn_conn_plnoce;
  u_int32_t tcps_ecn_conn_pl_ce;
  u_int32_t tcps_ecn_conn_nopl_ce;
  u_int32_t tcps_ecn_fallback_synloss;
  u_int32_t tcps_ecn_fallback_reorder;
  u_int32_t tcps_ecn_fallback_ce;
  u_int32_t tcps_tfo_syn_data_rcv;
  u_int32_t tcps_tfo_cookie_req_rcv;
  u_int32_t tcps_tfo_cookie_sent;
  u_int32_t tcps_tfo_cookie_invalid;
  u_int32_t tcps_tfo_cookie_req;
  u_int32_t tcps_tfo_cookie_rcv;
  u_int32_t tcps_tfo_syn_data_sent;
  u_int32_t tcps_tfo_syn_data_acked;
  u_int32_t tcps_tfo_syn_loss;
  u_int32_t tcps_tfo_blackhole;
  u_int32_t tcps_tfo_cookie_wrong;
  u_int32_t tcps_tfo_no_cookie_rcv;
  u_int32_t tcps_tfo_heuristics_disable;
  u_int32_t tcps_tfo_sndblackhole;
  u_int32_t tcps_mss_to_default;
  u_int32_t tcps_mss_to_medium;
  u_int32_t tcps_mss_to_low;
  u_int32_t tcps_ecn_fallback_droprst;
  u_int32_t tcps_ecn_fallback_droprxmt;
  u_int32_t tcps_ecn_fallback_synrst;
  u_int32_t tcps_mptcp_rcvmemdrop;
  u_int32_t tcps_mptcp_rcvduppack;
  u_int32_t tcps_mptcp_rcvpackafterwin;
  u_int32_t tcps_timer_drift_le_1_ms;
  u_int32_t tcps_timer_drift_le_10_ms;
  u_int32_t tcps_timer_drift_le_20_ms;
  u_int32_t tcps_timer_drift_le_50_ms;
  u_int32_t tcps_timer_drift_le_100_ms;
  u_int32_t tcps_timer_drift_le_200_ms;
  u_int32_t tcps_timer_drift_le_500_ms;
  u_int32_t tcps_timer_drift_le_1000_ms;
  u_int32_t tcps_timer_drift_gt_1000_ms;
  u_int32_t tcps_mptcp_handover_attempt;
  u_int32_t tcps_mptcp_interactive_attempt;
  u_int32_t tcps_mptcp_aggregate_attempt;
  u_int32_t tcps_mptcp_fp_handover_attempt;
  u_int32_t tcps_mptcp_fp_interactive_attempt;
  u_int32_t tcps_mptcp_fp_aggregate_attempt;
  u_int32_t tcps_mptcp_heuristic_fallback;
  u_int32_t tcps_mptcp_fp_heuristic_fallback;
  u_int32_t tcps_mptcp_handover_success_wifi;
  u_int32_t tcps_mptcp_handover_success_cell;
  u_int32_t tcps_mptcp_interactive_success;
  u_int32_t tcps_mptcp_aggregate_success;
  u_int32_t tcps_mptcp_fp_handover_success_wifi;
  u_int32_t tcps_mptcp_fp_handover_success_cell;
  u_int32_t tcps_mptcp_fp_interactive_success;
  u_int32_t tcps_mptcp_fp_aggregate_success;
  u_int32_t tcps_mptcp_handover_cell_from_wifi;
  u_int32_t tcps_mptcp_handover_wifi_from_cell;
  u_int32_t tcps_mptcp_interactive_cell_from_wifi;
  u_int64_t tcps_mptcp_handover_cell_bytes;
  u_int64_t tcps_mptcp_interactive_cell_bytes;
  u_int64_t tcps_mptcp_aggregate_cell_bytes;
  u_int64_t tcps_mptcp_handover_all_bytes;
  u_int64_t tcps_mptcp_interactive_all_bytes;
  u_int64_t tcps_mptcp_aggregate_all_bytes;
  u_int32_t tcps_mptcp_back_to_wifi;
  u_int32_t tcps_mptcp_wifi_proxy;
  u_int32_t tcps_mptcp_cell_proxy;
  u_int32_t tcps_mptcp_triggered_cell;
};

/* 7426 */
struct __attribute__((aligned(4))) rmxp_tao
{
  tcp_cc tao_cc;
  tcp_cc tao_ccsent;
  u_short tao_mssopt;
};

/* 7427 */
struct tcpopt
{
  u_int32_t to_flags;
  u_int32_t to_tsval;
  u_int32_t to_tsecr;
  u_int16_t to_mss;
  u_int8_t to_requested_s_scale;
  u_int8_t to_nsacks;
  u_char *to_sacks;
  u_char *to_tfo;
};

/* 7428 */
struct tcp_respond_args
{
  unsigned int ifscope;
  unsigned __int32 nocell : 1;
  unsigned __int32 noexpensive : 1;
  unsigned __int32 awdl_unrestricted : 1;
  unsigned __int32 intcoproc_allowed : 1;
};

/* 7429 */
struct tcptemp
{
  u_char tt_ipgen[40];
  tcphdr tt_t;
};

/* 7430 */
struct inp_tp
{
  inpcb inp;
  __attribute__((aligned(16))) tcpcb tcb;
};

/* 7431 */
struct __attribute__((aligned(8))) ip6ctlparam
{
  mbuf *ip6c_m;
  icmp6_hdr *ip6c_icmp6;
  ip6_hdr *ip6c_ip6;
  int ip6c_off;
  sockaddr_in6 *ip6c_src;
  sockaddr_in6 *ip6c_dst;
  in6_addr *ip6c_finaldst;
  void *ip6c_cmdarg;
  u_int8_t ip6c_nxt;
};

/* 7432 */
struct otcpcb
{
  u_int32_t t_segq;
  int t_dupacks;
  u_int32_t unused;
  int t_timer[4];
  u_int32_t t_inpcb;
  int t_state;
  u_int t_flags;
  int t_force;
  tcp_seq snd_una;
  tcp_seq snd_max;
  tcp_seq snd_nxt;
  tcp_seq snd_up;
  tcp_seq snd_wl1;
  tcp_seq snd_wl2;
  tcp_seq iss;
  tcp_seq irs;
  tcp_seq rcv_nxt;
  tcp_seq rcv_adv;
  u_int32_t rcv_wnd;
  tcp_seq rcv_up;
  u_int32_t snd_wnd;
  u_int32_t snd_cwnd;
  u_int32_t snd_ssthresh;
  u_int t_maxopd;
  u_int32_t t_rcvtime;
  u_int32_t t_starttime;
  int t_rtttime;
  tcp_seq t_rtseq;
  int t_rxtcur;
  u_int t_maxseg;
  int t_srtt;
  int t_rttvar;
  int t_rxtshift;
  u_int t_rttmin;
  u_int32_t t_rttupdated;
  u_int32_t max_sndwnd;
  int t_softerror;
  char t_oobflags;
  char t_iobc;
  u_char snd_scale;
  u_char rcv_scale;
  u_char request_r_scale;
  u_char requested_s_scale;
  u_int32_t ts_recent;
  u_int32_t ts_recent_age;
  tcp_seq last_ack_sent;
  tcp_cc cc_send;
  tcp_cc cc_recv;
  tcp_seq snd_recover;
  u_int32_t snd_cwnd_prev;
  u_int32_t snd_ssthresh_prev;
  u_int32_t t_badrxtwin;
};

/* 7433 */
struct xtcpcb64
{
  u_int32_t xt_len;
  xinpcb64 xt_inpcb;
  u_int64_t t_segq;
  int t_dupacks;
  int t_timer[4];
  int t_state;
  u_int t_flags;
  int t_force;
  tcp_seq snd_una;
  tcp_seq snd_max;
  tcp_seq snd_nxt;
  tcp_seq snd_up;
  tcp_seq snd_wl1;
  tcp_seq snd_wl2;
  tcp_seq iss;
  tcp_seq irs;
  tcp_seq rcv_nxt;
  tcp_seq rcv_adv;
  u_int32_t rcv_wnd;
  tcp_seq rcv_up;
  u_int32_t snd_wnd;
  u_int32_t snd_cwnd;
  u_int32_t snd_ssthresh;
  u_int t_maxopd;
  u_int32_t t_rcvtime;
  u_int32_t t_starttime;
  int t_rtttime;
  tcp_seq t_rtseq;
  int t_rxtcur;
  u_int t_maxseg;
  int t_srtt;
  int t_rttvar;
  int t_rxtshift;
  u_int t_rttmin;
  u_int32_t t_rttupdated;
  u_int32_t max_sndwnd;
  int t_softerror;
  char t_oobflags;
  char t_iobc;
  u_char snd_scale;
  u_char rcv_scale;
  u_char request_r_scale;
  u_char requested_s_scale;
  u_int32_t ts_recent;
  u_int32_t ts_recent_age;
  tcp_seq last_ack_sent;
  tcp_cc cc_send;
  tcp_cc cc_recv;
  tcp_seq snd_recover;
  u_int32_t snd_cwnd_prev;
  u_int32_t snd_ssthresh_prev;
  u_int32_t t_badrxtwin;
  u_quad_t xt_alignment_hack;
};

/* 7434 */
struct tcp_notify_ack_complete
{
  u_int32_t notify_pending;
  u_int32_t notify_complete_count;
  tcp_notify_ack_id_t notify_complete_id[10];
};

/* 7435 */
struct __attribute__((packed)) __attribute__((aligned(4))) xtcpcb
{
  u_int32_t xt_len;
  inpcb_compat xt_inp;
  otcpcb xt_tp;
  xsocket xt_socket;
  u_quad_t xt_alignment_hack;
};

/* 7436 */
struct protoctl_ev_val
{
  uint32_t_0 val;
  uint32_t_0 tcp_seq_number;
};

/* 7437 */
struct __attribute__((aligned(8))) tcptimerlist
{
  timerlisthead lhead;
  lck_mtx_t *mtx;
  lck_attr_t *mtx_attr;
  lck_grp_t *mtx_grp;
  lck_grp_attr_t *mtx_grp_attr;
  thread_call_t call;
  uint32_t_0 runtime;
  uint32_t_0 schedtime;
  uint32_t_0 entries;
  uint32_t_0 maxentries;
  boolean_t running;
  boolean_t scheduled;
  uint32_t_0 mode;
  uint32_t_0 pref_mode;
  uint32_t_0 pref_offset;
  uint32_t_0 idleruns;
  tcptimerentry *next_te;
  u_int16_t probe_if_index;
};

/* 7438 */
struct timerlisthead
{
  tcptimerentry *lh_first;
};

/* 7439 */
struct tcptailq
{
  tcpcb *tqh_first;
  tcpcb **tqh_last;
};

/* 7440 */
struct flow_divert_pcb::$7352A7C640BE48758D256F362AC3D5A4
{
  flow_divert_pcb *rbe_left;
  flow_divert_pcb *rbe_right;
  flow_divert_pcb *rbe_parent;
};

/* 7441 */
struct flow_divert_group
{
  lck_rw_t lck;
  fd_pcb_tree pcb_tree;
  uint32_t_0 ctl_unit;
  uint8_t_0 atomic_bits;
  send_queue_head send_queue;
  uint8_t_0 *token_key;
  size_t_0 token_key_size;
  uint32_t_0 flags;
  flow_divert_trie signing_id_trie;
};

/* 7442 */
struct fd_pcb_tree
{
  flow_divert_pcb *rbh_root;
};

/* 7443 */
struct send_queue_head
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 7444 */
struct __attribute__((aligned(8))) flow_divert_trie
{
  flow_divert_trie_node *nodes;
  uint16_t *child_maps;
  uint8_t_0 *bytes;
  void *memory;
  size_t_0 nodes_count;
  size_t_0 child_maps_count;
  size_t_0 bytes_count;
  size_t_0 nodes_free_next;
  size_t_0 child_maps_free_next;
  size_t_0 bytes_free_next;
  uint16_t root;
};

/* 7445 */
struct flow_divert_trie_node
{
  uint16_t start;
  uint16_t length;
  uint16_t child_map;
};

/* 7446 */
struct flow_divert_pcb::$966CA128DF01B7D4483DCAD1B65EE083
{
  flow_divert_pcb *sle_next;
};

/* 7447 */
struct info_tuple
{
  u_int8_t itpl_proto;
  info_tuple::$E3B791DE31F335A6C1826A5BE57FC38F itpl_localaddr;
  info_tuple::$E3B791DE31F335A6C1826A5BE57FC38F itpl_remoteaddr;
};

/* 7448 */
union info_tuple::$E3B791DE31F335A6C1826A5BE57FC38F
{
  sockaddr _itpl_sa;
  sockaddr_in _itpl_sin;
  sockaddr_in6 _itpl_sin6;
};

/* 7449 */
struct tcp_connection_info
{
  u_int8_t tcpi_state;
  u_int8_t tcpi_snd_wscale;
  u_int8_t tcpi_rcv_wscale;
  u_int8_t __pad1;
  u_int32_t tcpi_options;
  u_int32_t tcpi_flags;
  u_int32_t tcpi_rto;
  u_int32_t tcpi_maxseg;
  u_int32_t tcpi_snd_ssthresh;
  u_int32_t tcpi_snd_cwnd;
  u_int32_t tcpi_snd_wnd;
  u_int32_t tcpi_snd_sbbytes;
  u_int32_t tcpi_rcv_wnd;
  u_int32_t tcpi_rttcur;
  u_int32_t tcpi_srtt;
  u_int32_t tcpi_rttvar;
  unsigned __int32 tcpi_tfo_cookie_req : 1;
  unsigned __int32 tcpi_tfo_cookie_rcv : 1;
  unsigned __int32 tcpi_tfo_syn_loss : 1;
  unsigned __int32 tcpi_tfo_syn_data_sent : 1;
  unsigned __int32 tcpi_tfo_syn_data_acked : 1;
  unsigned __int32 tcpi_tfo_syn_data_rcv : 1;
  unsigned __int32 tcpi_tfo_cookie_req_rcv : 1;
  unsigned __int32 tcpi_tfo_cookie_sent : 1;
  unsigned __int32 tcpi_tfo_cookie_invalid : 1;
  unsigned __int32 tcpi_tfo_cookie_wrong : 1;
  unsigned __int32 tcpi_tfo_no_cookie_rcv : 1;
  unsigned __int32 tcpi_tfo_heuristics_disable : 1;
  unsigned __int32 tcpi_tfo_send_blackhole : 1;
  unsigned __int32 tcpi_tfo_recv_blackhole : 1;
  unsigned __int32 tcpi_tfo_onebyte_proxy : 1;
  unsigned __int32 __pad2 : 17;
  u_int64_t tcpi_txpackets;
  u_int64_t tcpi_txbytes;
  u_int64_t tcpi_txretransmitbytes;
  u_int64_t tcpi_rxpackets;
  u_int64_t tcpi_rxbytes;
  u_int64_t tcpi_rxoutoforderbytes;
  u_int64_t tcpi_txretransmitpackets;
};

/* 7450 */
struct tcp_measure_bw_burst
{
  u_int32_t min_burst_size;
  u_int32_t max_burst_size;
};

/* 7451 */
struct tcp_cc_algo
{
  char name[16];
  uint32_t_0 num_sockets;
  uint32_t_0 flags;
  int (*init)(tcpcb *);
  int (*cleanup)(tcpcb *);
  void (*cwnd_init)(tcpcb *);
  void (*congestion_avd)(tcpcb *, tcphdr *);
  void (*ack_rcvd)(tcpcb *, tcphdr *);
  void (*pre_fr)(tcpcb *);
  void (*post_fr)(tcpcb *, tcphdr *);
  void (*after_idle)(tcpcb *);
  void (*after_timeout)(tcpcb *);
  int (*delay_ack)(tcpcb *, tcphdr *);
  void (*switch_to)(tcpcb *, uint16_t);
};

/* 7452 */
struct __attribute__((aligned(8))) tcp_cc_debug_state
{
  u_int64_t ccd_tsns;
  char ccd_srcaddr[46];
  uint16_t ccd_srcport;
  char ccd_destaddr[46];
  uint16_t ccd_destport;
  uint32_t_0 ccd_snd_cwnd;
  uint32_t_0 ccd_snd_wnd;
  uint32_t_0 ccd_snd_ssthresh;
  uint32_t_0 ccd_pipeack;
  uint32_t_0 ccd_rttcur;
  uint32_t_0 ccd_rxtcur;
  uint32_t_0 ccd_srtt;
  uint32_t_0 ccd_event;
  uint32_t_0 ccd_sndcc;
  uint32_t_0 ccd_sndhiwat;
  uint32_t_0 ccd_bytes_acked;
  u_int8_t ccd_cc_index;
  u_int8_t ccd_unused_1__;
  u_int16_t ccd_unused_2__;
  tcp_cc_debug_state::$307661BF5FD9B08D09ACD6C19990A9BB u;
};

/* 7453 */
union tcp_cc_debug_state::$307661BF5FD9B08D09ACD6C19990A9BB
{
  tcp_cc_debug_state::$307661BF5FD9B08D09ACD6C19990A9BB::$4097A884FEA44895A2FD6B11B88DE1B5 cubic_state;
  tcp_cc_debug_state::$307661BF5FD9B08D09ACD6C19990A9BB::$CB44A86870DBF6052921B3D52F71342E ledbat_state;
};

/* 7454 */
struct tcp_cc_debug_state::$307661BF5FD9B08D09ACD6C19990A9BB::$4097A884FEA44895A2FD6B11B88DE1B5
{
  uint32_t_0 ccd_last_max;
  uint32_t_0 ccd_tcp_win;
  uint32_t_0 ccd_target_win;
  uint32_t_0 ccd_avg_lastmax;
  uint32_t_0 ccd_mean_deviation;
};

/* 7455 */
struct tcp_cc_debug_state::$307661BF5FD9B08D09ACD6C19990A9BB::$CB44A86870DBF6052921B3D52F71342E
{
  u_int32_t led_base_rtt;
};

/* 7456 */
struct cbrt_table_entry
{
  double x;
  double cbrt_x;
  double recip_cbrt_x;
  double recip_x;
};

/* 7457 */
union floatdata
{
  float f;
  int32_t x;
};

/* 7458 */
struct __attribute__((aligned(8))) lro_flow
{
  mbuf *lr_mhead;
  mbuf *lr_mtail;
  tcphdr *lr_tcphdr;
  u_int32_t *lr_tsval;
  u_int32_t *lr_tsecr;
  tcp_seq lr_seq;
  unsigned int lr_len;
  in_addr lr_faddr;
  in_addr lr_laddr;
  unsigned __int16 lr_fport;
  unsigned __int16 lr_lport;
  u_int32_t lr_timestamp;
  unsigned __int16 lr_hash_map;
  unsigned __int16 lr_flags;
};

/* 7459 */
struct udpstat
{
  u_int32_t udps_ipackets;
  u_int32_t udps_hdrops;
  u_int32_t udps_badsum;
  u_int32_t udps_badlen;
  u_int32_t udps_noport;
  u_int32_t udps_noportbcast;
  u_int32_t udps_fullsock;
  u_int32_t udpps_pcbcachemiss;
  u_int32_t udpps_pcbhashmiss;
  u_int32_t udps_opackets;
  u_int32_t udps_fastout;
  u_int32_t udps_nosum;
  u_int32_t udps_noportmcast;
  u_int32_t udps_filtermcast;
  u_int32_t udps_rcv_swcsum;
  u_int32_t udps_rcv_swcsum_bytes;
  u_int32_t udps_rcv6_swcsum;
  u_int32_t udps_rcv6_swcsum_bytes;
  u_int32_t udps_snd_swcsum;
  u_int32_t udps_snd_swcsum_bytes;
  u_int32_t udps_snd6_swcsum;
  u_int32_t udps_snd6_swcsum_bytes;
};

/* 7460 */
struct __attribute__((aligned(4))) udp_in6
{
  sockaddr_in6 uin6_sin;
  unsigned __int8 uin6_init_done : 1;
};

/* 7461 */
struct __attribute__((packed)) __attribute__((aligned(1))) udp_ip6
{
  ip6_hdr uip6_ip6;
  unsigned __int8 uip6_init_done : 1;
};

/* 7462 */
struct udp_keepalive_offload
{
  u_char ka_data[32];
  u_int16_t ka_interval;
  u_int8_t ka_data_len;
  u_int8_t ka_type;
};

/* 7463 */
struct $3991E09A7F94D3214EEA90CD91B3B7AF
{
  encaptab *lh_first;
};

/* 7464 */
struct encaptabtag
{
  void **arg;
};

/* 7465 */
struct flow_divert_kctl_rcvd::$108FABA27220A8FC3B9D2C274DE56048
{
  flow_divert_pcb *slh_first;
};

/* 7466 */
struct uuid_search_info
{
  uuid_t target_uuid;
  char *found_signing_id;
  boolean_t found_multiple_signing_ids;
  proc_t_0 found_proc;
};

/* 7467 */
struct $<12358823,1>::$108FABA27220A8FC3B9D2C274DE56048
{
  flow_divert_pcb *slh_first;
};

/* 7468 */
struct flow_divert_packet_header
{
  uint8_t_0 packet_type;
  uint32_t_0 conn_id;
};

/* 7469 */
struct __attribute__((packed)) __attribute__((aligned(2))) mptcp_dsn_opt
{
  mptcp_dss_copt mdss_copt;
  u_int32_t mdss_dsn;
  u_int32_t mdss_subflow_seqn;
  u_int16_t mdss_data_len;
};

/* 7470 */
struct mptcp_dss_copt
{
  u_int8_t mdss_kind;
  u_int8_t mdss_len;
  unsigned __int8 mdss_reserved1 : 4;
  unsigned __int8 mdss_subtype : 4;
  u_int8_t mdss_flags;
};

/* 7471 */
typedef symptoms_advisory symptoms_advisory_t;

/* 7472 */
struct symptoms_advisory
{
  symptoms_advisory::$AB34DCE4DB3E1E45E4D6E866233FA856 _anon_0;
};

/* 7473 */
union symptoms_advisory::$AB34DCE4DB3E1E45E4D6E866233FA856
{
  uint32_t_0 sa_nwk_status_int;
  symptoms_advisory::$AB34DCE4DB3E1E45E4D6E866233FA856::$AE7790C856BBE8FFE1D8AEBD81E730D0 _anon_0;
};

/* 7474 */
struct symptoms_advisory::$AB34DCE4DB3E1E45E4D6E866233FA856::$AE7790C856BBE8FFE1D8AEBD81E730D0
{
  symptoms_advisory::$AB34DCE4DB3E1E45E4D6E866233FA856::$AE7790C856BBE8FFE1D8AEBD81E730D0::$5F0C919A82CF91DE9FE7CF238DF88D04 _anon_0;
  uint16_t sa_unused;
};

/* 7475 */
union symptoms_advisory::$AB34DCE4DB3E1E45E4D6E866233FA856::$AE7790C856BBE8FFE1D8AEBD81E730D0::$5F0C919A82CF91DE9FE7CF238DF88D04
{
  uint16_t sa_nwk_status;
  symptoms_advisory::$AB34DCE4DB3E1E45E4D6E866233FA856::$AE7790C856BBE8FFE1D8AEBD81E730D0::$5F0C919A82CF91DE9FE7CF238DF88D04::$4493D96501FAF3BDB3EAADF1D1AF95A5 _anon_0;
};

/* 7476 */
struct symptoms_advisory::$AB34DCE4DB3E1E45E4D6E866233FA856::$AE7790C856BBE8FFE1D8AEBD81E730D0::$5F0C919A82CF91DE9FE7CF238DF88D04::$4493D96501FAF3BDB3EAADF1D1AF95A5
{
  uint8_t_0 sa_wifi_status;
  uint8_t_0 sa_cell_status;
};

/* 7477 */
typedef mptcp_subflow_event_entry mptsub_ev_entry_t;

/* 7478 */
struct mptcp_subflow_event_entry
{
  uint64_t_0 sofilt_hint_mask;
  ev_ret_t (*sofilt_hint_ev_hdlr)(mptses *, mptsub *, uint64_t_0 *, uint64_t_0);
};

/* 7479 */
enum ev_ret_t : __int32
{
  MPTS_EVRET_DELETE = 0x1,
  MPTS_EVRET_OK = 0x2,
  MPTS_EVRET_CONNECT_PENDING = 0x3,
  MPTS_EVRET_DISCONNECT_FALLBACK = 0x4,
};

/* 7480 */
typedef mptcp_flow mptcp_flow_t;

/* 7481 */
struct __attribute__((aligned(8))) mptcp_flow
{
  size_t_0 flow_len;
  size_t_0 flow_tcpci_offset;
  uint32_t_0 flow_flags;
  sae_connid_t flow_cid;
  sockaddr_storage flow_src;
  sockaddr_storage flow_dst;
  uint32_t_0 flow_relseq;
  int32_t flow_soerror;
  uint32_t_0 flow_probecnt;
  conninfo_tcp_t flow_ci;
};

/* 7482 */
typedef conninfo_tcp conninfo_tcp_t;

/* 7483 */
struct kev_mptcp_data
{
  int value;
};

/* 7484 */
typedef conninfo_mptcp conninfo_mptcp_t;

/* 7485 */
struct conninfo_mptcp
{
  size_t_0 mptcpci_len;
  size_t_0 mptcpci_flow_offset;
  size_t_0 mptcpci_nflows;
  uint32_t_0 mptcpci_state;
  uint32_t_0 mptcpci_mpte_flags;
  uint32_t_0 mptcpci_flags;
  uint32_t_0 mptcpci_ltoken;
  uint32_t_0 mptcpci_rtoken;
  uint32_t_0 mptcpci_notsent_lowat;
  uint64_t_0 mptcpci_snduna;
  uint64_t_0 mptcpci_sndnxt;
  uint64_t_0 mptcpci_sndmax;
  uint64_t_0 mptcpci_lidsn;
  uint32_t_0 mptcpci_sndwnd;
  uint64_t_0 mptcpci_rcvnxt;
  uint64_t_0 mptcpci_rcvatmark;
  uint64_t_0 mptcpci_ridsn;
  uint32_t_0 mptcpci_rcvwnd;
  uint8_t_0 mptcpci_mpte_addrid;
  mptcp_flow_t mptcpci_flows[1];
};

/* 7486 */
struct mptcp_symptoms_ask_uuid
{
  uint32_t_0 cmd;
  uuid_t uuid;
  uint32_t_0 priority;
};

/* 7487 */
struct __attribute__((aligned(8))) conninfo_multipathtcp
{
  uint32_t_0 mptcpci_subflow_count;
  uint32_t_0 mptcpci_switch_count;
  sae_connid_t mptcpci_subflow_connids[4];
  uint64_t_0 mptcpci_init_rxbytes;
  uint64_t_0 mptcpci_init_txbytes;
  mptcp_itf_stats mptcpci_itfstats[4];
  uint32_t_0 mptcpci_flags;
};

/* 7488 */
struct mptcp_remaddr_opt
{
  u_int8_t mr_kind;
  u_int8_t mr_len;
  unsigned __int8 mr_rest : 4;
  unsigned __int8 mr_subtype : 4;
  u_int8_t mr_addr_id;
};

/* 7489 */
struct mptcp_mpcapable_opt_common
{
  u_int8_t mmco_kind;
  u_int8_t mmco_len;
  unsigned __int8 mmco_version : 4;
  unsigned __int8 mmco_subtype : 4;
  u_int8_t mmco_flags;
};

/* 7490 */
struct __attribute__((packed)) __attribute__((aligned(4))) mptcp_mpcapable_opt_rsp
{
  mptcp_mpcapable_opt_common mmc_common;
  mptcp_key_t mmc_localkey;
};

/* 7491 */
struct mptcp_mpjoin_opt_rsp
{
  u_int8_t mmjo_kind;
  u_int8_t mmjo_len;
  u_int8_t mmjo_subtype_bkp;
  u_int8_t mmjo_addr_id;
  __attribute__((packed)) __attribute__((aligned(1))) u_int64_t mmjo_mac;
  u_int32_t mmjo_rand;
};

/* 7492 */
struct mptcp_data_ack_opt
{
  mptcp_dss_copt mdss_copt;
  u_int32_t mdss_ack;
};

/* 7493 */
struct __attribute__((packed)) __attribute__((aligned(2))) mptcp_dss_ack_opt
{
  mptcp_dss_copt mdss_copt;
  u_int32_t mdss_ack;
  u_int32_t mdss_dsn;
  u_int32_t mdss_subflow_seqn;
  u_int16_t mdss_data_len;
};

/* 7494 */
struct __attribute__((packed)) __attribute__((aligned(2))) mptcp_dsn64_opt
{
  mptcp_dss_copt mdss_copt;
  u_int64_t mdss_dsn;
  u_int32_t mdss_subflow_seqn;
  u_int16_t mdss_data_len;
};

/* 7495 */
struct __attribute__((packed)) __attribute__((aligned(4))) mptcp_data_ack64_opt
{
  mptcp_dss_copt mdss_copt;
  u_int64_t mdss_ack;
};

/* 7496 */
struct __attribute__((packed)) __attribute__((aligned(2))) mptcp_dss64_ack32_opt
{
  mptcp_dss_copt mdss_copt;
  u_int32_t mdss_ack;
  u_int64_t mdss_dsn;
  u_int32_t mdss_subflow_seqn;
  u_int16_t mdss_data_len;
};

/* 7497 */
struct __attribute__((packed)) __attribute__((aligned(2))) mptcp_dss32_ack64_opt
{
  mptcp_dss_copt mdss_copt;
  u_int64_t mdss_ack;
  u_int32_t mdss_dsn;
  u_int32_t mdss_subflow_seqn;
  u_int16_t mdss_data_len;
};

/* 7498 */
struct __attribute__((packed)) __attribute__((aligned(2))) mptcp_dss64_ack64_opt
{
  mptcp_dss_copt mdss_copt;
  u_int64_t mdss_ack;
  u_int64_t mdss_dsn;
  u_int32_t mdss_subflow_seqn;
  u_int16_t mdss_data_len;
};

/* 7499 */
struct __attribute__((packed)) __attribute__((aligned(4))) mptcp_fastclose_opt
{
  u_int8_t mfast_kind;
  u_int8_t mfast_len;
  unsigned __int8 mfast_reserved : 4;
  unsigned __int8 mfast_subtype : 4;
  u_int8_t mfast_reserved1;
  u_int64_t mfast_key;
};

/* 7500 */
struct __attribute__((packed)) __attribute__((aligned(4))) mptcp_mpfail_opt
{
  u_int8_t mfail_kind;
  u_int8_t mfail_len;
  unsigned __int8 mfail_reserved : 4;
  unsigned __int8 mfail_subtype : 4;
  u_int8_t mfail_reserved1;
  u_int64_t mfail_dsn;
};

/* 7501 */
struct mptcp_mpjoin_opt_req
{
  u_int8_t mmjo_kind;
  u_int8_t mmjo_len;
  u_int8_t mmjo_subtype_bkp;
  u_int8_t mmjo_addr_id;
  u_int32_t mmjo_peer_token;
  u_int32_t mmjo_rand;
};

/* 7502 */
struct mptcp_mpjoin_opt_rsp2
{
  u_int8_t mmjo_kind;
  u_int8_t mmjo_len;
  unsigned __int8 mmjo_reserved1 : 4;
  unsigned __int8 mmjo_subtype : 4;
  u_int8_t mmjo_reserved2;
  u_int8_t mmjo_mac[20];
};

/* 7503 */
struct mptcp_mpprio_addr_opt
{
  u_int8_t mpprio_kind;
  u_int8_t mpprio_len;
  unsigned __int8 mpprio_flags : 4;
  unsigned __int8 mpprio_subtype : 4;
  u_int8_t mpprio_addrid;
};

/* 7504 */
struct __attribute__((packed)) __attribute__((aligned(4))) mptcp_mpcapable_opt_rsp1
{
  mptcp_mpcapable_opt_common mmc_common;
  mptcp_key_t mmc_localkey;
  mptcp_key_t mmc_remotekey;
};

/* 7505 */
struct ah_algorithm
{
  int (*sumsiz)(secasvar *);
  int (*mature)(secasvar *);
  int keymin;
  int keymax;
  const char *name;
  int (*init)(ah_algorithm_state *, secasvar *);
  void (*update)(ah_algorithm_state *, caddr_t, size_t_0);
  void (*result)(ah_algorithm_state *, caddr_t, size_t_0);
};

/* 7506 */
struct ah_algorithm_state
{
  secasvar *sav;
  void *foo;
};

/* 7507 */
typedef SHA512_CTX_0 SHA384_CTX;

/* 7508 */
typedef SHA512_CTX SHA512_CTX_0;

/* 7509 */
struct SHA512_CTX
{
  ccdigest_ctx ctx[26];
};

/* 7510 */
struct ah
{
  u_int8_t ah_nxt;
  u_int8_t ah_len;
  u_int16_t ah_reserve;
  u_int32_t ah_spi;
};

/* 7511 */
struct newah
{
  u_int8_t ah_nxt;
  u_int8_t ah_len;
  u_int16_t ah_reserve;
  u_int32_t ah_spi;
  u_int32_t ah_seq;
};

/* 7512 */
struct esp_algorithm
{
  size_t_0 padbound;
  int ivlenval;
  int (*mature)(secasvar *);
  int keymin;
  int keymax;
  int (*schedlen)(const esp_algorithm *);
  const char *name;
  int (*ivlen)(const esp_algorithm *, secasvar *);
  int (*decrypt)(mbuf *, size_t_0, secasvar *, const esp_algorithm *, int);
  int (*encrypt)(mbuf *, size_t_0, size_t_0, secasvar *, const esp_algorithm *, int);
  int (*schedule)(const esp_algorithm *, secasvar *);
  int (*blockdecrypt)(const esp_algorithm *, secasvar *, u_int8_t *, u_int8_t *);
  int (*blockencrypt)(const esp_algorithm *, secasvar *, u_int8_t *, u_int8_t *);
  size_t_0 icvlen;
  int (*finalizedecrypt)(secasvar *, u_int8_t *, uint);
  int (*finalizeencrypt)(secasvar *, u_int8_t *, uint);
};

/* 7513 */
struct esp
{
  u_int32_t esp_spi;
};

/* 7514 */
struct newesp
{
  u_int32_t esp_spi;
  u_int32_t esp_seq;
};

/* 7515 */
struct esptail
{
  u_int8_t esp_padlen;
  u_int8_t esp_nxt;
};

/* 7516 */
struct ipsecstat
{
  u_quad_t in_success;
  u_quad_t in_polvio;
  u_quad_t in_nosa;
  u_quad_t in_inval;
  u_quad_t in_nomem;
  u_quad_t in_badspi;
  u_quad_t in_ahreplay;
  u_quad_t in_espreplay;
  u_quad_t in_ahauthsucc;
  u_quad_t in_ahauthfail;
  u_quad_t in_espauthsucc;
  u_quad_t in_espauthfail;
  u_quad_t in_esphist[256];
  u_quad_t in_ahhist[256];
  u_quad_t in_comphist[256];
  u_quad_t out_success;
  u_quad_t out_polvio;
  u_quad_t out_nosa;
  u_quad_t out_inval;
  u_quad_t out_nomem;
  u_quad_t out_noroute;
  u_quad_t out_esphist[256];
  u_quad_t out_ahhist[256];
  u_quad_t out_comphist[256];
};

/* 7517 */
struct aes_ctx
{
  aes_decrypt_ctx decrypt;
  aes_encrypt_ctx encrypt;
};

/* 7518 */
struct aes_decrypt_ctx
{
  cccbc_ctx ctx[18];
};

/* 7519 */
struct aes_gcm_ctx
{
  ccgcm_ctx *decrypt;
  ccgcm_ctx *encrypt;
  ccgcm_ctx ctxt[];
};

/* 7520 */
struct ccgcm_ctx
{
  uint8_t_0 b[16];
};

/* 7521 */
typedef _esp_chachapoly_ctx *esp_chachapoly_ctx_t;

/* 7522 */
struct __attribute__((aligned(4))) _esp_chachapoly_ctx
{
  chacha20poly1305_ctx ccp_ctx;
  uint8_t_0 ccp_salt[4];
  _Bool ccp_implicit_iv;
};

/* 7523 */
typedef ccchacha20poly1305_ctx chacha20poly1305_ctx;

/* 7524 */
struct __attribute__((aligned(8))) ccchacha20poly1305_ctx
{
  ccchacha20_ctx chacha20_ctx;
  ccpoly1305_ctx poly1305_ctx;
  uint64_t_0 aad_nbytes;
  uint64_t_0 text_nbytes;
  uint8_t_0 state;
};

/* 7525 */
struct ccchacha20_ctx
{
  uint32_t_0 state[16];
  uint8_t_0 buffer[64];
  size_t_0 leftover;
};

/* 7526 */
struct ccpoly1305_ctx
{
  uint32_t_0 r0;
  uint32_t_0 r1;
  uint32_t_0 r2;
  uint32_t_0 r3;
  uint32_t_0 r4;
  uint32_t_0 s1;
  uint32_t_0 s2;
  uint32_t_0 s3;
  uint32_t_0 s4;
  uint32_t_0 h0;
  uint32_t_0 h1;
  uint32_t_0 h2;
  uint32_t_0 h3;
  uint32_t_0 h4;
  uint8_t_0 buf[16];
  size_t_0 buf_used;
  uint8_t_0 key[16];
};

/* 7527 */
struct sadb_x_policy
{
  u_int16_t sadb_x_policy_len;
  u_int16_t sadb_x_policy_exttype;
  u_int16_t sadb_x_policy_type;
  u_int8_t sadb_x_policy_dir;
  u_int8_t sadb_x_policy_reserved;
  u_int32_t sadb_x_policy_id;
  u_int32_t sadb_x_policy_reserved2;
};

/* 7528 */
struct __attribute__((aligned(8))) ipsec_tag
{
  socket *socket;
  u_int32_t history_count;
  ipsec_history history[];
};

/* 7529 */
struct ipsec_history
{
  int ih_proto;
  u_int32_t ih_spi;
};

/* 7530 */
struct ip6q
{
  ip6asfrag *ip6q_down;
  ip6asfrag *ip6q_up;
  u_int32_t ip6q_ident;
  u_int8_t ip6q_nxt;
  u_int8_t ip6q_ecn;
  u_int8_t ip6q_ttl;
  in6_addr ip6q_src;
  in6_addr ip6q_dst;
  ip6q *ip6q_next;
  ip6q *ip6q_prev;
  int ip6q_unfrglen;
  int ip6q_nfrag;
  uint32_t_0 ip6q_csum_flags;
  uint32_t_0 ip6q_csum;
};

/* 7531 */
struct __attribute__((aligned(4))) ip6asfrag
{
  ip6asfrag *ip6af_down;
  ip6asfrag *ip6af_up;
  mbuf *ip6af_m;
  int ip6af_offset;
  int ip6af_frglen;
  int ip6af_off;
  u_int16_t ip6af_mff;
};

/* 7532 */
struct fq6_head
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 7533 */
struct icmp6stat
{
  u_quad_t icp6s_error;
  u_quad_t icp6s_canterror;
  u_quad_t icp6s_toofreq;
  u_quad_t icp6s_outhist[256];
  u_quad_t icp6s_badcode;
  u_quad_t icp6s_tooshort;
  u_quad_t icp6s_checksum;
  u_quad_t icp6s_badlen;
  u_quad_t icp6s_reflect;
  u_quad_t icp6s_inhist[256];
  u_quad_t icp6s_nd_toomanyopt;
  icmp6errstat icp6s_outerrhist;
  u_quad_t icp6s_pmtuchg;
  u_quad_t icp6s_nd_badopt;
  u_quad_t icp6s_badns;
  u_quad_t icp6s_badna;
  u_quad_t icp6s_badrs;
  u_quad_t icp6s_badra;
  u_quad_t icp6s_badredirect;
  u_quad_t icp6s_rfc6980_drop;
};

/* 7534 */
struct icmp6errstat
{
  u_quad_t icp6errs_dst_unreach_noroute;
  u_quad_t icp6errs_dst_unreach_admin;
  u_quad_t icp6errs_dst_unreach_beyondscope;
  u_quad_t icp6errs_dst_unreach_addr;
  u_quad_t icp6errs_dst_unreach_noport;
  u_quad_t icp6errs_packet_too_big;
  u_quad_t icp6errs_time_exceed_transit;
  u_quad_t icp6errs_time_exceed_reassembly;
  u_quad_t icp6errs_paramprob_header;
  u_quad_t icp6errs_paramprob_nextheader;
  u_quad_t icp6errs_paramprob_option;
  u_quad_t icp6errs_redirect;
  u_quad_t icp6errs_unknown;
};

/* 7535 */
struct nd_redirect
{
  icmp6_hdr nd_rd_hdr;
  in6_addr nd_rd_target;
  in6_addr nd_rd_dst;
};

/* 7536 */
struct nd_opt_hdr
{
  u_int8_t nd_opt_type;
  u_int8_t nd_opt_len;
};

/* 7537 */
struct nd_opt_rd_hdr
{
  u_int8_t nd_opt_rh_type;
  u_int8_t nd_opt_rh_len;
  u_int16_t nd_opt_rh_reserved1;
  u_int32_t nd_opt_rh_reserved2;
};

/* 7538 */
struct ip6_rthdr0
{
  u_int8_t ip6r0_nxt;
  u_int8_t ip6r0_len;
  u_int8_t ip6r0_type;
  u_int8_t ip6r0_segleft;
  u_int8_t ip6r0_reserved;
  u_int8_t ip6r0_slmap[3];
  in6_addr ip6r0_addr[1];
};

/* 7539 */
struct icmp6_nodeinfo
{
  icmp6_hdr icmp6_ni_hdr;
  u_int8_t icmp6_ni_nonce[8];
};

/* 7540 */
struct ni_reply_fqdn
{
  u_int32_t ni_fqdn_ttl;
  u_int8_t ni_fqdn_namelen;
  u_int8_t ni_fqdn_name[3];
};

/* 7541 */
struct in6_multistep
{
  in6_ifaddr *i_ia;
  in6_multi *i_in6m;
};

/* 7542 */
union nd_opts
{
  nd_opt_hdr *nd_opt_array[16];
  nd_opts::$FE6EC695425D59B78DFE2836A149A671 nd_opt_each;
};

/* 7543 */
struct nd_opts::$FE6EC695425D59B78DFE2836A149A671
{
  nd_opt_hdr *zero;
  nd_opt_hdr *src_lladdr;
  nd_opt_hdr *tgt_lladdr;
  nd_opt_prefix_info *pi_beg;
  nd_opt_rd_hdr *rh;
  nd_opt_mtu *mtu;
  nd_opt_hdr *__res6;
  nd_opt_hdr *__res7;
  nd_opt_hdr *__res8;
  nd_opt_hdr *__res9;
  nd_opt_hdr *__res10;
  nd_opt_hdr *__res11;
  nd_opt_hdr *__res12;
  nd_opt_hdr *__res13;
  nd_opt_nonce *nonce;
  nd_opt_hdr *__res15;
  nd_opt_hdr *search;
  nd_opt_hdr *last;
  int done;
  nd_opt_prefix_info *pi_end;
};

/* 7544 */
struct nd_opt_prefix_info
{
  u_int8_t nd_opt_pi_type;
  u_int8_t nd_opt_pi_len;
  u_int8_t nd_opt_pi_prefix_len;
  u_int8_t nd_opt_pi_flags_reserved;
  u_int32_t nd_opt_pi_valid_time;
  u_int32_t nd_opt_pi_preferred_time;
  u_int32_t nd_opt_pi_reserved2;
  in6_addr nd_opt_pi_prefix;
};

/* 7545 */
struct nd_opt_mtu
{
  u_int8_t nd_opt_mtu_type;
  u_int8_t nd_opt_mtu_len;
  u_int16_t nd_opt_mtu_reserved;
  u_int32_t nd_opt_mtu_mtu;
};

/* 7546 */
struct nd_opt_nonce
{
  u_int8_t nd_opt_nonce_type;
  u_int8_t nd_opt_nonce_len;
  u_int8_t nd_opt_nonce[6];
};

/* 7547 */
struct in6_event2kev
{
  in6_evhdlr_code_t in6_event_code;
  uint32_t_0 in6_event_kev_subclass;
  uint32_t_0 in6_event_kev_code;
  const char *in6_event_str;
};

/* 7548 */
enum in6_evhdlr_code_t : __int32
{
  IN6_ADDR_MARKED_DUPLICATED = 0x0,
  IN6_ADDR_MARKED_DETACHED = 0x1,
  IN6_ADDR_MARKED_DEPRECATED = 0x2,
  IN6_NDP_RTR_EXPIRY = 0x3,
  IN6_NDP_PFX_EXPIRY = 0x4,
  IN6_NDP_ADDR_EXPIRY = 0x5,
  IN6_EVENT_MAX = 0x6,
};

/* 7549 */
struct $DBC46E2ED828A1E44B7C8A51D26895CB
{
  in6_ifaddr_dbg *tqh_first;
  in6_ifaddr_dbg **tqh_last;
};

/* 7550 */
struct in6_ifaddr_dbg
{
  in6_ifaddr in6ifa;
  in6_ifaddr in6ifa_old;
  u_int16_t in6ifa_refhold_cnt;
  u_int16_t in6ifa_refrele_cnt;
  ctrace_t in6ifa_alloc;
  ctrace_t in6ifa_free;
  ctrace_t in6ifa_refhold[32];
  ctrace_t in6ifa_refrele[32];
  in6_ifaddr_dbg::$70A6BFF1EBAA37DE5E9AC8A28AFFF062 in6ifa_trash_link;
};

/* 7551 */
struct in6_ifaddr_dbg::$70A6BFF1EBAA37DE5E9AC8A28AFFF062
{
  in6_ifaddr_dbg *tqe_next;
  in6_ifaddr_dbg **tqe_prev;
};

/* 7552 */
struct in6_event_nwk_wq_entry
{
  nwk_wq_entry nwk_wqe;
  in6_event in6_ev_arg;
};

/* 7553 */
struct __attribute__((aligned(8))) in6_event
{
  in6_evhdlr_code_t in6_event_code;
  ifnet *in6_ifp;
  in6_addr in6_address;
  uint32_t_0 val;
};

/* 7554 */
struct in6_cgareq_32
{
  char cgar_name[16];
  int cgar_flags;
  in6_cga_prepare cgar_cgaprep;
  in6_addrlifetime_32 cgar_lifetime;
};

/* 7555 */
struct in6_cga_prepare
{
  in6_cga_modifier cga_modifier;
  u_int8_t cga_security_level;
  u_int8_t reserved_A[15];
};

/* 7556 */
struct in6_addrlifetime_32
{
  u_int32_t ia6t_expire;
  u_int32_t ia6t_preferred;
  u_int32_t ia6t_vltime;
  u_int32_t ia6t_pltime;
};

/* 7557 */
struct in6_cgareq_64
{
  char cgar_name[16];
  int cgar_flags;
  in6_cga_prepare cgar_cgaprep;
  in6_addrlifetime_64 cgar_lifetime;
};

/* 7558 */
struct in6_addrlifetime_64
{
  u_int64_t ia6t_expire;
  u_int64_t ia6t_preferred;
  u_int32_t ia6t_vltime;
  u_int32_t ia6t_pltime;
};

/* 7559 */
struct in6_aliasreq_32
{
  char ifra_name[16];
  sockaddr_in6 ifra_addr;
  sockaddr_in6 ifra_broadaddr;
  sockaddr_in6 ifra_prefixmask;
  int ifra_flags;
  in6_addrlifetime_32 ifra_lifetime;
};

/* 7560 */
struct in6_aliasreq_64
{
  char ifra_name[16];
  sockaddr_in6 ifra_addr;
  sockaddr_in6 ifra_broadaddr;
  sockaddr_in6 ifra_prefixmask;
  int ifra_flags;
  in6_addrlifetime_64 ifra_lifetime;
};

/* 7561 */
struct in6_llentry
{
  llentry base;
};

/* 7562 */
struct eventhandler_entry_in6_event
{
  eventhandler_entry ee;
  in6_event_fn eh_func;
};

/* 7563 */
typedef void (*in6_event_fn)(eventhandler_entry_arg, in6_evhdlr_code_t, ifnet *, in6_addr *, uint32_t_0);

/* 7564 */
struct in6_aliasreq
{
  char ifra_name[16];
  sockaddr_in6 ifra_addr;
  sockaddr_in6 ifra_broadaddr;
  sockaddr_in6 ifra_prefixmask;
  int ifra_flags;
  in6_addrlifetime ifra_lifetime;
};

/* 7565 */
union in6ctl_associd::$D400CEA0EAE3F7B9597B90F74C16818F
{
  so_aidreq32 a32;
  so_aidreq64 a64;
};

/* 7566 */
union in6ctl_connid::$1D0C90F8F2C37AA52BD186DAB635D25A
{
  so_cidreq32 c32;
  so_cidreq64 c64;
};

/* 7567 */
union in6ctl_conninfo::$136115C98F50BCF5531C7CD96B996F0C
{
  so_cinforeq32 ci32;
  so_cinforeq64 ci64;
};

/* 7568 */
struct in6_cgareq
{
  char cgar_name[16];
  int cgar_flags;
  in6_cga_prepare cgar_cgaprep;
  in6_addrlifetime cgar_lifetime;
};

/* 7569 */
struct in6_lltable_dump_entry::$963272482C3386D1783C24D7B7331398
{
  rt_msghdr rtm;
  sockaddr_in6 sin6;
  uint32_t_0 pad;
  sockaddr_dl sdl;
};

/* 7570 */
struct __attribute__((aligned(4))) kev_in6_data
{
  net_event_data link_data;
  sockaddr_in6 ia_addr;
  sockaddr_in6 ia_net;
  sockaddr_in6 ia_dstaddr;
  sockaddr_in6 ia_prefixmask;
  u_int32_t ia_plen;
  u_int32_t ia6_flags;
  kev_in6_addrlifetime ia_lifetime;
  uint8_t_0 ia_mac[6];
};

/* 7571 */
struct kev_in6_addrlifetime
{
  u_int32_t ia6t_expire;
  u_int32_t ia6t_preferred;
  u_int32_t ia6t_vltime;
  u_int32_t ia6t_pltime;
};

/* 7572 */
struct kev_nd6_event
{
  net_event_data link_data;
  in6_addr in6_address;
  uint32_t_0 val;
};

/* 7573 */
struct in6_cga_singleton
{
  boolean_t cga_initialized;
  lck_mtx_t cga_mutex;
  in6_cga_prepare cga_prepare;
  iovec cga_pubkey;
  iovec cga_privkey;
};

/* 7574 */
struct in6_cga_nodecfg
{
  iovec cga_privkey;
  iovec cga_pubkey;
  in6_cga_prepare cga_prepare;
};

/* 7575 */
struct in6_ifextra
{
  scope6_id scope6_id;
  in6_ifstat in6_ifstat;
  icmp6_ifstat icmp6_ifstat;
  nd_ifinfo nd_ifinfo;
  uint32_t_0 netsig_len;
  u_int8_t netsig[20];
  ipv6_prefix nat64_prefixes[4];
  lltable *ii_llt;
};

/* 7576 */
struct scope6_id
{
  u_int32_t s6id_list[16];
};

/* 7577 */
struct ip6stat
{
  u_quad_t ip6s_total;
  u_quad_t ip6s_tooshort;
  u_quad_t ip6s_toosmall;
  u_quad_t ip6s_fragments;
  u_quad_t ip6s_fragdropped;
  u_quad_t ip6s_fragtimeout;
  u_quad_t ip6s_fragoverflow;
  u_quad_t ip6s_forward;
  u_quad_t ip6s_cantforward;
  u_quad_t ip6s_redirectsent;
  u_quad_t ip6s_delivered;
  u_quad_t ip6s_localout;
  u_quad_t ip6s_odropped;
  u_quad_t ip6s_reassembled;
  u_quad_t ip6s_atmfrag_rcvd;
  u_quad_t ip6s_fragmented;
  u_quad_t ip6s_ofragments;
  u_quad_t ip6s_cantfrag;
  u_quad_t ip6s_badoptions;
  u_quad_t ip6s_noroute;
  u_quad_t ip6s_badvers;
  u_quad_t ip6s_rawout;
  u_quad_t ip6s_badscope;
  u_quad_t ip6s_notmember;
  u_quad_t ip6s_nxthist[256];
  u_quad_t ip6s_m1;
  u_quad_t ip6s_m2m[32];
  u_quad_t ip6s_mext1;
  u_quad_t ip6s_mext2m;
  u_quad_t ip6s_exthdrtoolong;
  u_quad_t ip6s_nogif;
  u_quad_t ip6s_toomanyhdr;
  u_quad_t ip6s_sources_none;
  u_quad_t ip6s_sources_sameif[16];
  u_quad_t ip6s_sources_otherif[16];
  u_quad_t ip6s_sources_samescope[16];
  u_quad_t ip6s_sources_otherscope[16];
  u_quad_t ip6s_sources_deprecated[16];
  u_quad_t ip6s_forward_cachehit;
  u_quad_t ip6s_forward_cachemiss;
  u_quad_t ip6s_sources_rule[16];
  u_quad_t ip6s_sources_skip_expensive_secondary_if;
  u_quad_t ip6s_pktdropcntrl;
  u_quad_t ip6s_adj;
  u_quad_t ip6s_adj_hwcsum_clr;
  u_quad_t ip6s_dad_collide;
  u_quad_t ip6s_dad_loopcount;
  u_quad_t ip6s_necp_policy_drop;
  u_quad_t ip6s_clat464_in_tooshort_drop;
  u_quad_t ip6s_clat464_in_nov6addr_drop;
  u_quad_t ip6s_clat464_in_nov4addr_drop;
  u_quad_t ip6s_clat464_in_v4synthfail_drop;
  u_quad_t ip6s_clat464_in_64transfail_drop;
  u_quad_t ip6s_clat464_in_64proto_transfail_drop;
  u_quad_t ip6s_clat464_in_64frag_transfail_drop;
  u_quad_t ip6s_clat464_in_invalpbuf_drop;
  u_quad_t ip6s_clat464_in_success;
  u_quad_t ip6s_clat464_in_drop;
  u_quad_t ip6s_clat464_in_v4_drop;
  u_quad_t ip6s_clat464_out_nov6addr_drop;
  u_quad_t ip6s_clat464_out_v6synthfail_drop;
  u_quad_t ip6s_clat464_out_46transfail_drop;
  u_quad_t ip6s_clat464_out_46proto_transfail_drop;
  u_quad_t ip6s_clat464_out_46frag_transfail_drop;
  u_quad_t ip6s_clat464_out_invalpbuf_drop;
  u_quad_t ip6s_clat464_out_success;
  u_quad_t ip6s_clat464_out_drop;
  u_quad_t ip6s_clat464_v6addr_conffail;
  u_quad_t ip6s_clat464_plat64_pfx_setfail;
  u_quad_t ip6s_clat464_plat64_pfx_getfail;
};

/* 7578 */
struct ip6_input::$72B9B94BB6156E0B55FF22BA3F115C23
{
  route_in6 rin6;
  ip_fw_args args;
};

/* 7579 */
struct ip6_mtuinfo
{
  sockaddr_in6 ip6m_addr;
  uint32_t_0 ip6m_mtu;
};

/* 7580 */
struct ip6_moptions_dbg
{
  ip6_moptions im6o;
  u_int16_t im6o_refhold_cnt;
  u_int16_t im6o_refrele_cnt;
  ctrace_t im6o_alloc;
  ctrace_t im6o_free;
  ctrace_t im6o_refhold[32];
  ctrace_t im6o_refrele[32];
};

/* 7581 */
union ip6_output_list::$BC8C9BC093D70EE9C2B82F3BDC9976C3
{
  ip6_output_list::$BC8C9BC093D70EE9C2B82F3BDC9976C3::$71969CAECA2E51EDAA74021FB3BC51A2 _anon_0;
  uint32_t_0 raw;
};

/* 7582 */
struct ip6_output_list::$BC8C9BC093D70EE9C2B82F3BDC9976C3::$71969CAECA2E51EDAA74021FB3BC51A2
{
  __int32 select_srcif : 1;
  __int32 hdrsplit : 1;
  __int32 route_selected : 1;
  __int32 dontfrag : 1;
  __int32 needipsec : 1;
  __int32 noipsec : 1;
};

/* 7583 */
struct ip6_output_list::$2A14CE904AB0785486824A91F8E88C04
{
  ipf_pktopts ipf_pktopts;
  ip6_exthdrs exthdrs;
  route_in6 ip6route;
  ipsec_output_state ipsec_state;
  route_in6 necp_route;
  route_in6 saved_route;
  route_in6 saved_ro_pmtu;
  ip_fw_args args;
};

/* 7584 */
struct addrsel_policyhead
{
  addrsel_policyent *tqh_first;
  addrsel_policyent **tqh_last;
};

/* 7585 */
struct addrsel_policyent
{
  addrsel_policyent::$8156222622341E2588907CA2291D4FF5 ape_entry;
  in6_addrpolicy ape_policy;
};

/* 7586 */
struct addrsel_policyent::$8156222622341E2588907CA2291D4FF5
{
  addrsel_policyent *tqe_next;
  addrsel_policyent **tqe_prev;
};

/* 7587 */
struct walkarg_0
{
  sysctl_req *w_req;
};

/* 7588 */
struct ipcomp_algorithm
{
  int (*compress)(mbuf *, mbuf *, size_t_0 *);
  int (*decompress)(mbuf *, mbuf *, size_t_0 *);
  size_t_0 minplen;
};

/* 7589 */
struct ipcomp
{
  u_int8_t comp_nxt;
  u_int8_t comp_flags;
  u_int16_t comp_cpi;
};

/* 7590 */
struct in6_multi_dbg
{
  in6_multi in6m;
  u_int16_t in6m_refhold_cnt;
  u_int16_t in6m_refrele_cnt;
  ctrace_t in6m_refhold[32];
  ctrace_t in6m_refrele[32];
  in6_multi_dbg::$254DF79BCAFA51E0233B7F24E3FA0134 in6m_trash_link;
};

/* 7591 */
struct in6_multi_dbg::$254DF79BCAFA51E0233B7F24E3FA0134
{
  in6_multi_dbg *tqe_next;
  in6_multi_dbg **tqe_prev;
};

/* 7592 */
struct in6_multihead
{
  in6_multi *lh_first;
};

/* 7593 */
struct __attribute__((aligned(8))) in6_msource
{
  in6_msource::$E7B61889CCA5FA064F8FDDDD3A55B40A im6s_link;
  in6_addr im6s_addr;
  uint8_t_0 im6sl_st[2];
};

/* 7594 */
struct in6_msource::$E7B61889CCA5FA064F8FDDDD3A55B40A
{
  ip6_msource *rbe_left;
  ip6_msource *rbe_right;
  ip6_msource *rbe_parent;
};

/* 7595 */
struct mld_tparams
{
  int qpt;
  int it;
  int cst;
  int sct;
};

/* 7596 */
struct ipv6_mreq
{
  in6_addr ipv6mr_multiaddr;
  unsigned int ipv6mr_interface;
};

/* 7597 */
struct ip_mreq
{
  in_addr imr_multiaddr;
  in_addr imr_interface;
};

/* 7598 */
struct $65E12EAB2D705CD2B0BB99A6902D0304
{
  mld_ifinfo *lh_first;
};

/* 7599 */
struct mld_raopt
{
  ip6_hbh hbh;
  ip6_opt pad;
  ip6_opt_router ra;
};

/* 7600 */
struct ip6_opt
{
  u_int8_t ip6o_type;
  u_int8_t ip6o_len;
};

/* 7601 */
struct ip6_opt_router
{
  u_int8_t ip6or_type;
  u_int8_t ip6or_len;
  u_int8_t ip6or_value[2];
};

/* 7602 */
struct mld_in6m_relhead
{
  in6_multi *slh_first;
};

/* 7603 */
struct mld_hdr
{
  icmp6_hdr mld_icmp6_hdr;
  in6_addr mld_addr;
};

/* 7604 */
struct mldv2_query
{
  icmp6_hdr mld_icmp6_hdr;
  in6_addr mld_addr;
  uint8_t_0 mld_misc;
  uint8_t_0 mld_qqi;
  uint16_t mld_numsrc;
};

/* 7605 */
struct mldv2_record
{
  uint8_t_0 mr_type;
  uint8_t_0 mr_datalen;
  uint16_t mr_numsrc;
  in6_addr mr_addr;
};

/* 7606 */
struct mldv2_report
{
  icmp6_hdr mld_icmp6_hdr;
};

/* 7607 */
struct mld_timeout::$8EA3F9881ACADACA113B33344BAA5CDA
{
  in6_multi *slh_first;
};

/* 7608 */
struct mli_remref::$8EA3F9881ACADACA113B33344BAA5CDA
{
  in6_multi *slh_first;
};

/* 7609 */
struct mld_domifdetach::$8EA3F9881ACADACA113B33344BAA5CDA
{
  in6_multi *slh_first;
};

/* 7610 */
struct mld_ifinfo_u
{
  uint32_t_0 mli_ifindex;
  uint32_t_0 mli_version;
  uint32_t_0 mli_v1_timer;
  uint32_t_0 mli_v2_timer;
  uint32_t_0 mli_flags;
  uint32_t_0 mli_rv;
  uint32_t_0 mli_qi;
  uint32_t_0 mli_qri;
  uint32_t_0 mli_uri;
  uint32_t_0 _pad;
};

/* 7611 */
struct llinfo_nd6
{
  llinfo_nd6 *ln_next;
  llinfo_nd6 *ln_prev;
  rtentry *ln_rt;
  ifnet *ln_exclifp;
  mbuf *ln_hold;
  uint32_t_0 ln_asked;
  __int16 ln_state;
  __int16 ln_router;
  u_int32_t ln_flags;
  u_int64_t ln_expire;
  u_int64_t ln_lastused;
  if_llreach *ln_llreach;
};

/* 7612 */
struct nd_prhead
{
  nd_prefix *lh_first;
};

/* 7613 */
struct nd_drhead
{
  nd_defrouter *tqh_first;
  nd_defrouter **tqh_last;
};

/* 7614 */
struct in6_ondireq
{
  char ifname[16];
  in6_ondireq::$E3967025249D3DDF4DFD85442BF16C2E ndi;
};

/* 7615 */
struct __attribute__((aligned(4))) in6_ondireq::$E3967025249D3DDF4DFD85442BF16C2E
{
  u_int32_t linkmtu;
  u_int32_t maxmtu;
  u_int32_t basereachable;
  u_int32_t reachable;
  u_int32_t retrans;
  u_int32_t flags;
  int recalctm;
  u_int8_t chlim;
  u_int8_t receivedra;
};

/* 7616 */
struct in6_ndireq
{
  char ifname[16];
  nd_ifinfo_compat ndi;
};

/* 7617 */
struct __attribute__((aligned(4))) nd_ifinfo_compat
{
  u_int32_t linkmtu;
  u_int32_t maxmtu;
  u_int32_t basereachable;
  u_int32_t reachable;
  u_int32_t retrans;
  u_int32_t flags;
  int recalctm;
  u_int8_t chlim;
  u_int8_t receivedra;
  u_int8_t randomseed0[8];
  u_int8_t randomseed1[8];
  u_int8_t randomid[8];
};

/* 7618 */
struct in6_ndifreq_64
{
  char ifname[16];
  u_long ifindex;
};

/* 7619 */
struct in6_ndifreq_32
{
  char ifname[16];
  u_int32_t ifindex;
};

/* 7620 */
struct nd6svc_arg
{
  int draining;
  uint32_t_0 killed;
  uint32_t_0 aging_lazy;
  uint32_t_0 aging;
  uint32_t_0 sticky;
  uint32_t_0 found;
};

/* 7621 */
struct kev_nd6_ndfailure
{
  net_event_data link_data;
};

/* 7622 */
struct in6_drlist_32
{
  char ifname[16];
  in6_drlist_32::$7997CC9B6F05436777BE6F1FC7CDEC92 defrouter[10];
};

/* 7623 */
struct __attribute__((aligned(4))) in6_drlist_32::$7997CC9B6F05436777BE6F1FC7CDEC92
{
  in6_addr rtaddr;
  u_char flags;
  u_short rtlifetime;
  u_int32_t expire;
  u_short if_index;
};

/* 7624 */
struct in6_drlist_64
{
  char ifname[16];
  in6_drlist_64::$462E99F10CCC44E6B4AA5A15ABF7318C defrouter[10];
};

/* 7625 */
struct __attribute__((aligned(8))) in6_drlist_64::$462E99F10CCC44E6B4AA5A15ABF7318C
{
  in6_addr rtaddr;
  u_char flags;
  u_short rtlifetime;
  u_long expire;
  u_short if_index;
};

/* 7626 */
struct in6_prlist_32
{
  char ifname[16];
  in6_prlist_32::$82DD1901DC481BAD4BB393CAB7C784BC prefix[10];
};

/* 7627 */
struct in6_prlist_32::$82DD1901DC481BAD4BB393CAB7C784BC
{
  in6_addr prefix;
  prf_ra raflags;
  u_char prefixlen;
  u_char origin;
  u_int32_t vltime;
  u_int32_t pltime;
  u_int32_t expire;
  u_short if_index;
  u_short advrtrs;
  in6_addr advrtr[10];
};

/* 7628 */
struct in6_prlist_64
{
  char ifname[16];
  in6_prlist_64::$33EDAF7BDA9BC4F9EC21B480F34DD116 prefix[10];
};

/* 7629 */
struct in6_prlist_64::$33EDAF7BDA9BC4F9EC21B480F34DD116
{
  in6_addr prefix;
  prf_ra raflags;
  u_char prefixlen;
  u_char origin;
  u_long vltime;
  u_long pltime;
  u_long expire;
  u_short if_index;
  u_short advrtrs;
  u_int32_t pad;
  in6_addr advrtr[10];
};

/* 7630 */
struct __attribute__((aligned(8))) in6_defrouter_64
{
  sockaddr_in6 rtaddr;
  u_char flags;
  u_char stateflags;
  u_short rtlifetime;
  u_long expire;
  u_short if_index;
};

/* 7631 */
struct __attribute__((aligned(4))) in6_defrouter_32
{
  sockaddr_in6 rtaddr;
  u_char flags;
  u_char stateflags;
  u_short rtlifetime;
  u_int32_t expire;
  u_short if_index;
};

/* 7632 */
struct __attribute__((aligned(8))) in6_prefix_64
{
  sockaddr_in6 prefix;
  prf_ra raflags;
  u_char prefixlen;
  u_char origin;
  u_long vltime;
  u_long pltime;
  u_long expire;
  u_int32_t flags;
  int refcnt;
  u_short if_index;
  u_short advrtrs;
};

/* 7633 */
struct in6_prefix_32
{
  sockaddr_in6 prefix;
  prf_ra raflags;
  u_char prefixlen;
  u_char origin;
  u_int32_t vltime;
  u_int32_t pltime;
  u_int32_t expire;
  u_int32_t flags;
  int refcnt;
  u_short if_index;
  u_short advrtrs;
};

/* 7634 */
struct nd_prefix_list
{
  nd_prefix_list *next;
  nd_prefix pr;
};

/* 7635 */
struct __attribute__((aligned(8))) kev_nd6_ra_data
{
  u_int32_t mtu;
  u_int32_t list_index;
  u_int32_t list_length;
  u_int32_t flags;
  nd6_ra_prefix prefix;
  u_int32_t pad;
};

/* 7636 */
struct nd6_ra_prefix
{
  sockaddr_in6 prefix;
  prf_ra raflags;
  u_int32_t prefixlen;
  u_int32_t origin;
  u_int64_t vltime;
  u_int64_t pltime;
  u_int64_t expire;
  u_int32_t flags;
  u_int32_t refcnt;
  u_int32_t if_index;
  u_int32_t pad;
};

/* 7637 */
struct in6_nbrinfo_32
{
  char ifname[16];
  in6_addr addr;
  u_int32_t asked;
  int isrouter;
  int state;
  int expire;
};

/* 7638 */
struct __attribute__((aligned(8))) in6_nbrinfo_64
{
  char ifname[16];
  in6_addr addr;
  __int64 asked;
  int isrouter;
  int state;
  int expire;
};

/* 7639 */
struct dadq_head
{
  dadq *tqh_first;
  dadq **tqh_last;
};

/* 7640 */
struct __attribute__((aligned(8))) dadq
{
  lck_mtx_t dad_lock;
  u_int32_t dad_refcount;
  int dad_attached;
  dadq::$4907FD92E34288D5F337B64B57A866E0 dad_list;
  ifaddr *dad_ifa;
  int dad_count;
  int dad_ns_tcount;
  int dad_ns_ocount;
  int dad_ns_icount;
  int dad_na_icount;
  int dad_ns_lcount;
  int dad_loopbackprobe;
  uint8_t_0 dad_lladdr[6];
  uint8_t_0 dad_lladdrlen;
  uint32_t_0 dad_nonce[2];
};

/* 7641 */
struct dadq::$4907FD92E34288D5F337B64B57A866E0
{
  dadq *tqe_next;
  dadq **tqe_prev;
};

/* 7642 */
struct nd_neighbor_solicit
{
  icmp6_hdr nd_ns_hdr;
  in6_addr nd_ns_target;
};

/* 7643 */
struct nd_neighbor_advert
{
  icmp6_hdr nd_na_hdr;
  in6_addr nd_na_target;
};

/* 7644 */
struct kev_nd6_ndalive
{
  net_event_data link_data;
};

/* 7645 */
struct nd6_prproxy_soltgt::$72AA8E7FE869FCABA6DC4B07D23496A6
{
  nd6_prproxy_soltgt *rbe_left;
  nd6_prproxy_soltgt *rbe_right;
  nd6_prproxy_soltgt *rbe_parent;
};

/* 7646 */
struct soltgt_key_s
{
  in6_addr taddr;
};

/* 7647 */
struct nd6_prproxy_soltgt::$5A20F3534B337548D409574BCD0B9A4D
{
  nd6_prproxy_solsrc *tqh_first;
  nd6_prproxy_solsrc **tqh_last;
};

/* 7648 */
struct nd6_prproxy_solsrc
{
  nd6_prproxy_solsrc::$8477DEC7736F8A6197131C45467F84A2 solsrc_tqe;
  in6_addr solsrc_saddr;
  ifnet *solsrc_ifp;
};

/* 7649 */
struct nd6_prproxy_solsrc::$8477DEC7736F8A6197131C45467F84A2
{
  nd6_prproxy_solsrc *tqe_next;
  nd6_prproxy_solsrc **tqe_prev;
};

/* 7650 */
struct nd6_prproxy_prelist_head
{
  nd6_prproxy_prelist *slh_first;
};

/* 7651 */
struct __attribute__((aligned(8))) nd6_prproxy_prelist
{
  nd6_prproxy_prelist::$600714F51F347A2344267D4AC8A4BE07 ndprl_le;
  nd_prefix *ndprl_pr;
  nd_prefix *ndprl_up;
  ifnet *ndprl_fwd_ifp;
  boolean_t ndprl_sol;
  in6_addr ndprl_sol_saddr;
};

/* 7652 */
struct nd6_prproxy_prelist::$600714F51F347A2344267D4AC8A4BE07
{
  nd6_prproxy_prelist *sle_next;
};

/* 7653 */
struct nd6_if_prproxy::$ADF950EB4E3A0F701D398E88E7EDC382
{
  nd6_prproxy_prelist *slh_first;
};

/* 7654 */
struct nd6_prproxy_prelist_update::$ADF950EB4E3A0F701D398E88E7EDC382
{
  nd6_prproxy_prelist *slh_first;
};

/* 7655 */
struct nd6_prproxy_ns_output::$ADF950EB4E3A0F701D398E88E7EDC382
{
  nd6_prproxy_prelist *slh_first;
};

/* 7656 */
struct nd6_prproxy_ns_input::$ADF950EB4E3A0F701D398E88E7EDC382
{
  nd6_prproxy_prelist *slh_first;
};

/* 7657 */
struct nd6_prproxy_na_input::$ADF950EB4E3A0F701D398E88E7EDC382
{
  nd6_prproxy_prelist *slh_first;
};

/* 7658 */
struct nd_router_solicit
{
  icmp6_hdr nd_rs_hdr;
};

/* 7659 */
struct nd_router_advert
{
  icmp6_hdr nd_ra_hdr;
  u_int32_t nd_ra_reachable;
  u_int32_t nd_ra_retransmit;
};

/* 7660 */
struct nd_defrouter_dbg
{
  nd_defrouter nddr_dr;
  uint16_t nddr_refhold_cnt;
  uint16_t nddr_refrele_cnt;
  ctrace_t nddr_refhold[32];
  ctrace_t nddr_refrele[32];
};

/* 7661 */
struct nd_prefix_dbg
{
  nd_prefix ndpr_pr;
  u_int16_t ndpr_refhold_cnt;
  u_int16_t ndpr_refrele_cnt;
  ctrace_t ndpr_refhold[32];
  ctrace_t ndpr_refrele[32];
};

/* 7662 */
struct in6_aliasreq_0
{
  char ifra_name[16];
  sockaddr_in6 ifra_addr;
  sockaddr_in6 ifra_dstaddr;
  sockaddr_in6 ifra_prefixmask;
  int ifra_flags;
  in6_addrlifetime ifra_lifetime;
};

/* 7663 */
struct rip6stat
{
  u_quad_t rip6s_ipackets;
  u_quad_t rip6s_isum;
  u_quad_t rip6s_badsum;
  u_quad_t rip6s_nosock;
  u_quad_t rip6s_nosockmcast;
  u_quad_t rip6s_fullsock;
  u_quad_t rip6s_opackets;
};

/* 7664 */
struct udp6_ctlinput::udp_portonly
{
  u_int16_t uh_sport;
  u_int16_t uh_dport;
};

/* 7665 */
struct randomtab
{
  const int ru_bits;
  const __int64 ru_out;
  const u_int32_t ru_max;
  const u_int32_t ru_gen;
  const u_int32_t ru_n;
  const u_int32_t ru_agen;
  const u_int32_t ru_m;
  const u_int32_t pfacts[4];
  u_int32_t ru_counter;
  u_int32_t ru_msb;
  u_int32_t ru_x;
  u_int32_t ru_seed;
  u_int32_t ru_seed2;
  u_int32_t ru_a;
  u_int32_t ru_b;
  u_int32_t ru_g;
  __int64 ru_reseed;
};

/* 7666 */
struct _sptree
{
  secpolicy *lh_first;
};

/* 7667 */
struct _sahtree
{
  secashead *lh_first;
};

/* 7668 */
struct _regtree
{
  secreg *lh_first;
};

/* 7669 */
struct secreg
{
  secreg::$AC485162D06E13A4FF36C52A06DBBA07 chain;
  socket *so;
};

/* 7670 */
struct secreg::$AC485162D06E13A4FF36C52A06DBBA07
{
  secreg *le_next;
  secreg **le_prev;
};

/* 7671 */
struct _spihash
{
  secasvar *lh_first;
};

/* 7672 */
struct _acqtree
{
  secacq *lh_first;
};

/* 7673 */
struct __attribute__((aligned(8))) secacq
{
  secacq::$374C42E2CDC9884C38E1822966464E79 chain;
  secasindex saidx;
  u_int32_t seq;
  __int64 created;
  int count;
};

/* 7674 */
struct secacq::$374C42E2CDC9884C38E1822966464E79
{
  secacq *le_next;
  secacq **le_prev;
};

/* 7675 */
struct _spacqtree
{
  secspacq *lh_first;
};

/* 7676 */
struct __attribute__((aligned(8))) secspacq
{
  secspacq::$5C84A6D28E3360477527FBF99C92B654 chain;
  secpolicyindex spidx;
  __int64 created;
  int count;
};

/* 7677 */
struct secspacq::$5C84A6D28E3360477527FBF99C92B654
{
  secspacq *le_next;
  secspacq **le_prev;
};

/* 7678 */
struct key_cb
{
  int key_count;
  int any_count;
};

/* 7679 */
struct _keystat
{
  u_int32_t getspi_count;
};

/* 7680 */
struct sadb_msghdr
{
  sadb_msg *msg;
  sadb_ext *ext[30];
  int extoff[30];
  int extlen[30];
};

/* 7681 */
struct sadb_msg
{
  u_int8_t sadb_msg_version;
  u_int8_t sadb_msg_type;
  u_int8_t sadb_msg_errno;
  u_int8_t sadb_msg_satype;
  u_int16_t sadb_msg_len;
  u_int16_t sadb_msg_reserved;
  u_int32_t sadb_msg_seq;
  u_int32_t sadb_msg_pid;
};

/* 7682 */
struct sadb_ext
{
  u_int16_t sadb_ext_len;
  u_int16_t sadb_ext_type;
};

/* 7683 */
enum $<13938771,1>::$7C170E190B4DCB7C043CF919E0E7131A : __int32
{
  NONE_0 = 0x0,
  ADDR = 0x1,
};

/* 7684 */
struct sadb_x_ipsecrequest
{
  u_int16_t sadb_x_ipsecrequest_len;
  u_int16_t sadb_x_ipsecrequest_proto;
  u_int8_t sadb_x_ipsecrequest_mode;
  u_int8_t sadb_x_ipsecrequest_level;
  u_int16_t sadb_x_ipsecrequest_reqid;
};

/* 7685 */
struct sadb_address
{
  u_int16_t sadb_address_len;
  u_int16_t sadb_address_exttype;
  u_int8_t sadb_address_proto;
  u_int8_t sadb_address_prefixlen;
  u_int16_t sadb_address_reserved;
};

/* 7686 */
struct sadb_sa
{
  u_int16_t sadb_sa_len;
  u_int16_t sadb_sa_exttype;
  u_int32_t sadb_sa_spi;
  u_int8_t sadb_sa_replay;
  u_int8_t sadb_sa_state;
  u_int8_t sadb_sa_auth;
  u_int8_t sadb_sa_encrypt;
  u_int32_t sadb_sa_flags;
};

/* 7687 */
struct sadb_prop
{
  u_int16_t sadb_prop_len;
  u_int16_t sadb_prop_exttype;
  u_int8_t sadb_prop_replay;
  u_int8_t sadb_prop_reserved[3];
};

/* 7688 */
struct sadb_comb
{
  u_int8_t sadb_comb_auth;
  u_int8_t sadb_comb_encrypt;
  u_int16_t sadb_comb_flags;
  u_int16_t sadb_comb_auth_minbits;
  u_int16_t sadb_comb_auth_maxbits;
  u_int16_t sadb_comb_encrypt_minbits;
  u_int16_t sadb_comb_encrypt_maxbits;
  u_int32_t sadb_comb_reserved;
  u_int32_t sadb_comb_soft_allocations;
  u_int32_t sadb_comb_hard_allocations;
  u_int64_t sadb_comb_soft_bytes;
  u_int64_t sadb_comb_hard_bytes;
  u_int64_t sadb_comb_soft_addtime;
  u_int64_t sadb_comb_hard_addtime;
  u_int64_t sadb_comb_soft_usetime;
  u_int64_t sadb_comb_hard_usetime;
};

/* 7689 */
struct sadb_x_sa2
{
  u_int16_t sadb_x_sa2_len;
  u_int16_t sadb_x_sa2_exttype;
  u_int8_t sadb_x_sa2_mode;
  sadb_x_sa2::$35880F01BA95B0FFFB707DFDC5AC5360 _anon_0;
  sadb_x_sa2::$121C9EA3A3D7845D460F987907F46D34 _anon_1;
  u_int32_t sadb_x_sa2_sequence;
  u_int32_t sadb_x_sa2_reqid;
};

/* 7690 */
union sadb_x_sa2::$35880F01BA95B0FFFB707DFDC5AC5360
{
  u_int8_t sadb_x_sa2_reserved1;
  u_int8_t sadb_x_sa2_alwaysexpire;
};

/* 7691 */
union sadb_x_sa2::$121C9EA3A3D7845D460F987907F46D34
{
  u_int16_t sadb_x_sa2_reserved2;
  u_int16_t sadb_x_sa2_flags;
};

/* 7692 */
struct sadb_spirange
{
  u_int16_t sadb_spirange_len;
  u_int16_t sadb_spirange_exttype;
  u_int32_t sadb_spirange_min;
  u_int32_t sadb_spirange_max;
  u_int32_t sadb_spirange_reserved;
};

/* 7693 */
struct sadb_x_ipsecif
{
  u_int16_t sadb_x_ipsecif_len;
  u_int16_t sadb_x_ipsecif_exttype;
  char sadb_x_ipsecif_internal_if[24];
  char sadb_x_ipsecif_outgoing_if[24];
  char sadb_x_ipsecif_ipsec_if[24];
  u_int16_t sadb_x_ipsecif_init_disabled;
  u_int16_t reserved;
};

/* 7694 */
struct keycb
{
  rawcb kp_raw;
  int kp_promisc;
  int kp_registered;
};

/* 7695 */
struct sadb_supported
{
  u_int16_t sadb_supported_len;
  u_int16_t sadb_supported_exttype;
  u_int32_t sadb_supported_reserved;
};

/* 7696 */
struct sadb_alg
{
  u_int8_t sadb_alg_id;
  u_int8_t sadb_alg_ivlen;
  u_int16_t sadb_alg_minbits;
  u_int16_t sadb_alg_maxbits;
  u_int16_t sadb_alg_reserved;
};

/* 7697 */
struct __attribute__((aligned(8))) sav_dump_elem
{
  secasvar *sav;
  u_int8_t satype;
};

/* 7698 */
struct sastat
{
  u_int32_t spi;
  u_int32_t created;
  sadb_lifetime lft_c;
};

/* 7699 */
struct sadb_sastat
{
  u_int16_t sadb_sastat_len;
  u_int16_t sadb_sastat_exttype;
  u_int32_t sadb_sastat_dir;
  u_int32_t sadb_sastat_reserved;
  u_int32_t sadb_sastat_list_len;
};

/* 7700 */
struct sadb_session_id
{
  u_int16_t sadb_session_id_len;
  u_int16_t sadb_session_id_exttype;
  u_int64_t sadb_session_id_v[2];
};

/* 7701 */
struct pfkeystat
{
  u_quad_t out_total;
  u_quad_t out_bytes;
  u_quad_t out_msgtype[256];
  u_quad_t out_invlen;
  u_quad_t out_invver;
  u_quad_t out_invmsgtype;
  u_quad_t out_tooshort;
  u_quad_t out_nomem;
  u_quad_t out_dupext;
  u_quad_t out_invexttype;
  u_quad_t out_invsatype;
  u_quad_t out_invaddr;
  u_quad_t in_total;
  u_quad_t in_bytes;
  u_quad_t in_msgtype[256];
  u_quad_t in_msgtarget[3];
  u_quad_t in_nomem;
  u_quad_t sockerr;
};

/* 7702 */
struct rc4_state
{
  u_char perm[256];
  u_char index1;
  u_char index2;
};

/* 7703 */
typedef au_malloc_type au_malloc_type_t;

/* 7704 */
struct au_malloc_type
{
  uint32_t_0 mt_magic;
  const char *mt_shortdesc;
};

/* 7705 */
typedef u_int32_t au_class_t;

/* 7706 */
typedef unsigned __int8 au_ctlmode_t;

/* 7707 */
typedef au_expire_after au_expire_after_t;

/* 7708 */
struct __attribute__((aligned(8))) au_expire_after
{
  time_t age;
  size_t_0 size;
  unsigned __int8 op_type;
};

/* 7709 */
struct audit_fstat
{
  u_int64_t af_filesz;
  u_int64_t af_currsz;
};

/* 7710 */
struct mtx
{
  lck_mtx_t *mtx_lock;
};

/* 7711 */
struct kaudit_queue
{
  kaudit_record *tqh_first;
  kaudit_record **tqh_last;
};

/* 7712 */
struct audit_record
{
  u_int32_t ar_magic;
  int ar_event;
  int ar_retval;
  int ar_errno;
  timespec ar_starttime;
  timespec ar_endtime;
  u_int64_t ar_valid_arg;
  xucred ar_subj_cred;
  uid_t ar_subj_ruid;
  gid_t ar_subj_rgid;
  gid_t ar_subj_egid;
  uid_t ar_subj_auid;
  pid_t ar_subj_asid;
  pid_t ar_subj_pid;
  au_tid ar_subj_term;
  au_tid_addr ar_subj_term_addr;
  au_mask ar_subj_amask;
  uid_t ar_arg_euid;
  uid_t ar_arg_ruid;
  uid_t ar_arg_suid;
  gid_t ar_arg_egid;
  gid_t ar_arg_rgid;
  gid_t ar_arg_sgid;
  pid_t ar_arg_pid;
  pid_t ar_arg_asid;
  au_tid ar_arg_termid;
  au_tid_addr ar_arg_termid_addr;
  uid_t ar_arg_uid;
  uid_t ar_arg_auid;
  gid_t ar_arg_gid;
  groupset ar_arg_groups;
  int ar_arg_fd;
  int ar_arg_fflags;
  mode_t ar_arg_mode;
  uint32_t_0 ar_arg_value32;
  uint64_t_0 ar_arg_value64;
  user_addr_t ar_arg_addr;
  user_size_t ar_arg_len;
  int ar_arg_mask;
  u_int ar_arg_signum;
  char ar_arg_login[255];
  int ar_arg_ctlname[12];
  socket_au_info ar_arg_sockinfo;
  char *ar_arg_upath1;
  char *ar_arg_upath2;
  char *ar_arg_kpath1;
  char *ar_arg_kpath2;
  char *ar_vnode1_mac_labels;
  char *ar_vnode2_mac_labels;
  char *ar_cred_mac_labels;
  char *ar_arg_mac_string;
  char *ar_arg_text;
  void *ar_arg_opaque;
  void *ar_arg_data;
  u_int16_t ar_arg_opq_size;
  u_char ar_arg_data_type;
  u_char ar_arg_data_count;
  au_mask ar_arg_amask;
  vnode_au_info ar_arg_vnode1;
  vnode_au_info ar_arg_vnode2;
  int ar_arg_cmd;
  int ar_arg_svipc_cmd;
  ipc_perm ar_arg_svipc_perm;
  int ar_arg_svipc_id;
  user_addr_t ar_arg_svipc_addr;
  posix_ipc_perm ar_arg_pipc_perm;
  mach_port_name_t ar_arg_mach_port1;
  mach_port_name_t ar_arg_mach_port2;
  auditon_udata ar_arg_auditon;
  char *ar_arg_argv;
  int ar_arg_argc;
  char *ar_arg_envv;
  int ar_arg_envc;
  int ar_arg_exitstatus;
  int ar_arg_exitretval;
  sockaddr_storage ar_arg_sockaddr;
  int ar_arg_fd2;
  mac_audit_record_list_t *ar_mac_records;
  int ar_forced_by_mac;
  au_identity_info ar_arg_identity;
};

/* 7713 */
struct au_tid
{
  dev_t port;
  u_int32_t machine;
};

/* 7714 */
struct groupset
{
  gid_t gidset[16];
  u_int gidset_size;
};

/* 7715 */
struct socket_au_info
{
  int sai_domain;
  int sai_type;
  int sai_protocol;
  sockaddr_storage sai_faddr;
  sockaddr_storage sai_laddr;
};

/* 7716 */
struct vnode_au_info
{
  mode_t vn_mode;
  uid_t vn_uid;
  gid_t vn_gid;
  dev_t vn_dev;
  __int64 vn_fsid;
  __int64 vn_fileid;
  __int64 vn_gen;
};

/* 7717 */
struct ipc_perm
{
  uid_t uid;
  gid_t gid;
  uid_t cuid;
  gid_t cgid;
  mode_t mode;
  unsigned __int16 _seq;
  key_t _key;
};

/* 7718 */
typedef __int32_t key_t;

/* 7719 */
struct __attribute__((aligned(4))) posix_ipc_perm
{
  uid_t pipc_uid;
  gid_t pipc_gid;
  mode_t pipc_mode;
};

/* 7720 */
union auditon_udata
{
  char *au_path;
  int au_cond;
  int au_policy;
  int64_t au_cond64;
  int64_t au_policy64;
  int au_trigger;
  au_evclass_map_t au_evclass;
  au_mask_t au_mask;
  au_asflgs_t au_flags;
  auditinfo_t au_auinfo;
  auditpinfo_t au_aupinfo;
  auditpinfo_addr_t au_aupinfo_addr;
  au_qctrl_t au_qctrl;
  au_qctrl64_t au_qctrl64;
  au_stat_t au_stat;
  au_fstat_t au_fstat;
  auditinfo_addr_t au_kau_info;
  au_ctlmode_t au_ctl_mode;
  au_expire_after_t au_expire_after;
};

/* 7721 */
typedef au_evclass_map au_evclass_map_t;

/* 7722 */
struct au_evclass_map
{
  au_event_t ec_number;
  au_class_t ec_class;
};

/* 7723 */
typedef u_int16_t au_event_t;

/* 7724 */
typedef auditinfo auditinfo_t;

/* 7725 */
struct auditinfo
{
  au_id_t ai_auid;
  au_mask_t ai_mask;
  au_tid_t ai_termid;
  au_asid_t ai_asid;
};

/* 7726 */
typedef au_tid au_tid_t;

/* 7727 */
typedef auditpinfo auditpinfo_t;

/* 7728 */
struct auditpinfo
{
  pid_t ap_pid;
  au_id_t ap_auid;
  au_mask_t ap_mask;
  au_tid_t ap_termid;
  au_asid_t ap_asid;
};

/* 7729 */
typedef auditpinfo_addr auditpinfo_addr_t;

/* 7730 */
struct auditpinfo_addr
{
  pid_t ap_pid;
  au_id_t ap_auid;
  au_mask_t ap_mask;
  au_tid_addr_t ap_termid;
  au_asid_t ap_asid;
  au_asflgs_t ap_flags;
};

/* 7731 */
typedef au_qctrl au_qctrl_t;

/* 7732 */
struct au_qctrl
{
  int aq_hiwater;
  int aq_lowater;
  int aq_bufsz;
  int aq_delay;
  int aq_minfree;
};

/* 7733 */
typedef au_qctrl64 au_qctrl64_t;

/* 7734 */
struct au_qctrl64
{
  u_int64_t aq64_hiwater;
  u_int64_t aq64_lowater;
  u_int64_t aq64_bufsz;
  u_int64_t aq64_delay;
  int64_t aq64_minfree;
};

/* 7735 */
typedef audit_stat au_stat_t;

/* 7736 */
struct audit_stat
{
  unsigned int as_version;
  unsigned int as_numevent;
  int as_generated;
  int as_nonattrib;
  int as_kernel;
  int as_audit;
  int as_auditctl;
  int as_enqueue;
  int as_written;
  int as_wblocked;
  int as_rblocked;
  int as_dropped;
  int as_totalsize;
  unsigned int as_memused;
};

/* 7737 */
typedef audit_fstat au_fstat_t;

/* 7738 */
struct mac_audit_record_list_t
{
  mac_audit_record *lh_first;
};

/* 7739 */
struct mac_audit_record
{
  int type;
  int length;
  u_char *data;
  mac_audit_record::$909EA6562DC36A361E5F75AAA613DE0F records;
};

/* 7740 */
struct mac_audit_record::$909EA6562DC36A361E5F75AAA613DE0F
{
  mac_audit_record *le_next;
  mac_audit_record **le_prev;
};

/* 7741 */
struct __attribute__((aligned(8))) au_identity_info
{
  u_int32_t signer_type;
  char *signing_id;
  u_char signing_id_trunc;
  char *team_id;
  u_char team_id_trunc;
  u_int8_t *cdhash;
  u_int16_t cdhash_len;
};

/* 7742 */
struct kaudit_record::$FBBD764A9CB0DA5B637E57DAFB43AE64
{
  kaudit_record *tqe_next;
  kaudit_record **tqe_prev;
};

/* 7743 */
struct __attribute__((aligned(8))) cv
{
  const char *cv_description;
  int cv_waiters;
};

/* 7744 */
struct rwlock
{
  lck_rw_t *rw_lock;
};

/* 7745 */
struct sockaddr_un
{
  unsigned __int8 sun_len;
  sa_family_t sun_family;
  char sun_path[104];
};

/* 7746 */
struct mac
{
  size_t_0 m_buflen;
  char *m_string;
};

/* 7747 */
struct mhdr
{
  size_t_0 mh_size;
  au_malloc_type_t *mh_type;
  u_long mh_magic;
  char mh_data[];
};

/* 7748 */
struct slck
{
  lck_mtx_t *sl_mtx;
  int sl_locked;
  int sl_waiting;
};

/* 7749 */
struct rlck
{
  lck_mtx_t *rl_mtx;
  uint32_t_0 rl_recurse;
  thread_t rl_thread;
};

/* 7750 */
struct __attribute__((packed)) __attribute__((aligned(1))) hdr_tok_partial
{
  u_char type;
  uint32_t_0 len;
};

/* 7751 */
struct __attribute__((packed)) __attribute__((aligned(1))) trl_tok_partial
{
  u_char type;
  uint16_t magic;
  uint32_t_0 len;
};

/* 7752 */
struct au_record
{
  char used;
  int desc;
  au_record::$2AD404B308714C30C6098488275C262A token_q;
  u_char *data;
  size_t_0 len;
  au_record::$B33F9F666AAF6AC60E051925C4612F39 au_rec_q;
};

/* 7753 */
struct au_record::$2AD404B308714C30C6098488275C262A
{
  au_token *tqh_first;
  au_token **tqh_last;
};

/* 7754 */
struct au_token
{
  u_char *t_data;
  size_t_0 len;
  au_token::$404E14F5F254332DBC0FACEB97F8B150 tokens;
};

/* 7755 */
struct au_token::$404E14F5F254332DBC0FACEB97F8B150
{
  au_token *tqe_next;
  au_token **tqe_prev;
};

/* 7756 */
struct au_record::$B33F9F666AAF6AC60E051925C4612F39
{
  au_record *le_next;
  au_record **le_prev;
};

/* 7757 */
typedef au_token token_t;

/* 7758 */
struct bsm_errno
{
  int be_bsm_errno;
  int be_local_errno;
};

/* 7759 */
typedef bsm_fcntl_cmd bsm_fcntl_cmd_t;

/* 7760 */
struct bsm_fcntl_cmd
{
  u_short bfc_bsm_fcntl_cmd;
  int bfc_local_fcntl_cmd;
};

/* 7761 */
struct bsm_domain
{
  u_short bd_bsm_domain;
  int bd_local_domain;
};

/* 7762 */
struct evclass_list
{
  evclass_list::$99F5AD105F99EB1BE994F5C89EFA14CB head;
};

/* 7763 */
struct evclass_list::$99F5AD105F99EB1BE994F5C89EFA14CB
{
  evclass_elem *lh_first;
};

/* 7764 */
struct evclass_elem
{
  au_event_t event;
  au_class_t class;
  evclass_elem::$DD8EA7F5686DCF5D8BBF23E6C2843B41 entry;
};

/* 7765 */
struct evclass_elem::$DD8EA7F5686DCF5D8BBF23E6C2843B41
{
  evclass_elem *le_next;
  evclass_elem **le_prev;
};

/* 7766 */
struct bsm_socket_type
{
  u_short bst_bsm_socket_type;
  int bst_local_socket_type;
};

/* 7767 */
typedef u_int16_t au_emod_t;

/* 7768 */
struct $B87085309285C12FFBF15D1D6FE22673
{
  audit_pipe *tqh_first;
  audit_pipe **tqh_last;
};

/* 7769 */
struct audit_pipe
{
  int ap_open;
  u_int ap_flags;
  selinfo ap_selinfo;
  pid_t ap_sigio;
  mtx ap_mtx;
  slck ap_sx;
  cv ap_cv;
  u_int ap_qlen;
  u_int ap_qlimit;
  u_int ap_qbyteslen;
  u_int ap_qoffset;
  u_int64_t ap_inserts;
  u_int64_t ap_reads;
  u_int64_t ap_drops;
  int ap_preselect_mode;
  au_mask_t ap_preselect_flags;
  au_mask_t ap_preselect_naflags;
  audit_pipe::$A5D98511A42304D44CFA458110AF0C75 ap_preselect_list;
  audit_pipe::$A5D98511A42304D44CFA458110AF0C75 ap_queue;
  audit_pipe::$6F82D071F9A8EE291CBAB85DF606600F ap_list;
};

/* 7770 */
struct audit_pipe::$A5D98511A42304D44CFA458110AF0C75
{
  audit_pipe_preselect *tqh_first;
  audit_pipe_preselect **tqh_last;
};

/* 7771 */
struct audit_pipe_preselect
{
  au_id_t app_auid;
  au_mask_t app_mask;
  audit_pipe_preselect::$7F4799F96F62C9D5C4E9275A277183A5 app_list;
};

/* 7772 */
struct audit_pipe_preselect::$7F4799F96F62C9D5C4E9275A277183A5
{
  audit_pipe_preselect *tqe_next;
  audit_pipe_preselect **tqe_prev;
};

/* 7773 */
struct audit_pipe_entry
{
  void *ape_record;
  u_int ape_record_len;
  audit_pipe_entry::$0927C174F6D6A61C936D19A480C0EE77 ape_queue;
};

/* 7774 */
struct audit_pipe_entry::$0927C174F6D6A61C936D19A480C0EE77
{
  audit_pipe_entry *tqe_next;
  audit_pipe_entry **tqe_prev;
};

/* 7775 */
struct audit_pipe::$6F82D071F9A8EE291CBAB85DF606600F
{
  audit_pipe *tqe_next;
  audit_pipe **tqe_prev;
};

/* 7776 */
struct auditpipe_ioctl_preselect
{
  au_id_t aip_auid;
  au_mask_t aip_mask;
};

/* 7777 */
struct $2DB5227C69BBF32E8D3BA9AB409137B8
{
  audit_sdev *tqh_first;
  audit_sdev **tqh_last;
};

/* 7778 */
struct audit_sdev
{
  int asdev_open;
  u_int asdev_flags;
  selinfo asdev_selinfo;
  pid_t asdev_sigio;
  au_id_t asdev_auid;
  au_asid_t asdev_asid;
  mtx asdev_mtx;
  slck asdev_sx;
  cv asdev_cv;
  u_int asdev_qlen;
  u_int asdev_qlimit;
  u_int asdev_qbyteslen;
  u_int asdev_qoffset;
  u_int64_t asdev_inserts;
  u_int64_t asdev_reads;
  u_int64_t asdev_drops;
  audit_sdev::$BD4F256814C4D2012637F718FA45EB20 asdev_queue;
  audit_sdev::$D936B0D2610BBF93B1B53ED0A180A7C2 asdev_list;
};

/* 7779 */
struct audit_sdev::$BD4F256814C4D2012637F718FA45EB20
{
  audit_sdev_entry *tqh_first;
  audit_sdev_entry **tqh_last;
};

/* 7780 */
struct audit_sdev_entry
{
  void *ase_record;
  u_int ase_record_len;
  audit_sdev_entry::$30F7DDD93BCBD6B092DFD97F948496E9 ase_queue;
};

/* 7781 */
struct audit_sdev_entry::$30F7DDD93BCBD6B092DFD97F948496E9
{
  audit_sdev_entry *tqe_next;
  audit_sdev_entry **tqe_prev;
};

/* 7782 */
struct audit_sdev::$D936B0D2610BBF93B1B53ED0A180A7C2
{
  audit_sdev *tqe_next;
  audit_sdev **tqe_prev;
};

/* 7783 */
typedef au_sentry au_sentry_t;

/* 7784 */
struct au_sentry
{
  auditinfo_addr_t se_auinfo;
  __int64 se_refcnt;
  __int64 se_procnt;
  ipc_port_t se_port;
  au_sentry::$1B0096E85E409072B347813F97D0431E se_link;
};

/* 7785 */
struct au_sentry::$1B0096E85E409072B347813F97D0431E
{
  au_sentry *le_next;
  au_sentry **le_prev;
};

/* 7786 */
struct au_sentry_head
{
  au_sentry *lh_first;
};

/* 7787 */
struct audit_session_self_args
{
  int32_t dummy;
};

/* 7788 */
struct audit_session_port_args
{
  au_asid_t asid;
  char asid_r_[4];
  user_addr_t portnamep;
  char portnamep_r_[];
};

/* 7789 */
struct audit_session_join_args
{
  mach_port_name_t port;
  char port_r_[4];
};

/* 7790 */
struct audit_args
{
  user_addr_t record;
  int length;
  char length_r_[4];
};

/* 7791 */
struct auditon_args
{
  int cmd;
  char cmd_r_[4];
  user_addr_t data;
  int length;
  char length_r_[4];
};

/* 7792 */
struct getauid_args
{
  user_addr_t auid;
  char auid_r_[];
};

/* 7793 */
struct setauid_args
{
  user_addr_t auid;
  char auid_r_[];
};

/* 7794 */
struct getaudit_addr_args
{
  user_addr_t auditinfo_addr;
  int length;
  char length_r_[4];
};

/* 7795 */
struct setaudit_addr_args
{
  user_addr_t auditinfo_addr;
  int length;
  char length_r_[4];
};

/* 7796 */
struct auditctl_args
{
  user_addr_t path;
  char path_r_[];
};

/* 7797 */
typedef const pthread_callbacks_s *pthread_callbacks_t;

/* 7798 */
struct pthread_callbacks_s
{
  int version;
  uint32_t_0 config_thread_max;
  uint32_t_0 (*get_task_threadmax)(void);
  uint64_t_0 (*proc_get_register)(proc *);
  void (*proc_set_register)(proc *);
  user_addr_t (*proc_get_threadstart)(proc *);
  void (*proc_set_threadstart)(proc *, user_addr_t);
  user_addr_t (*proc_get_wqthread)(proc *);
  void (*proc_set_wqthread)(proc *, user_addr_t);
  int (*proc_get_pthsize)(proc *);
  void (*proc_set_pthsize)(proc *, int);
  thread_t (*task_findtid)(task_t, uint64_t_0);
  void (*thread_deallocate_safe)(thread_t);
  void *__unused_was_proc_get_dispatchqueue_offset;
  void (*proc_set_dispatchqueue_offset)(proc *, uint64_t_0);
  void *__unused_was_proc_get_wqlockptr;
  void *__unused_was_proc_get_wqinitingptr;
  void *__unused_was_proc_get_wqptr;
  wait_result_t (*psynch_wait_prepare)(uintptr_t, turnstile **, thread_t, block_hint_t, uint64_t_0);
  void (*psynch_wait_update_complete)(turnstile *);
  void (*psynch_wait_complete)(uintptr_t, turnstile **);
  void (*psynch_wait_cleanup)(void);
  kern_return_t (*psynch_wait_wakeup)(uintptr_t, ksyn_waitq_element *, turnstile **);
  void (*psynch_wait_update_owner)(uintptr_t, thread_t, turnstile **);
  void *(*proc_get_pthhash)(proc *);
  void (*proc_set_pthhash)(proc *, void *);
  void *__unused_was_uthread_get_threadlist;
  void *__unused_was_uthread_set_threadlist;
  void *__unused_was_uthread_get_sigmask;
  void *__unused_was_uthread_set_sigmask;
  void *(*uthread_get_uukwe)(uthread_0 *);
  void *__unused_was_uthread_get_returnval;
  void (*uthread_set_returnval)(uthread_0 *, int);
  int (*uthread_is_cancelled)(uthread_0 *);
  ipc_space_t (*task_get_ipcspace)(task_t);
  mach_port_name_t (*ipc_port_copyout_send)(ipc_port_t, ipc_space_t);
  kern_return_t (*vm_map_page_info)(vm_map_t, vm_map_offset_t, vm_page_info_flavor_t, vm_page_info_t, mach_msg_type_number_t *);
  void *__unused_was_vm_map_switch;
  kern_return_t (*thread_set_wq_state32)(thread_t, thread_state_t);
  kern_return_t (*thread_set_wq_state64)(thread_t, thread_state_t);
  void (*thread_exception_return)(void);
  void (*thread_bootstrap_return)(void);
  void *__unused_was_absolutetime_to_microtime;
  void *__unused_was_thread_set_workq_pri;
  void *__unused_was_thread_set_workq_qos;
  uthread_0 *(*get_bsdthread_info)(thread_t);
  void *__unused_was_thread_sched_call;
  void *__unused_was_thread_static_param;
  void *__unused_was_thread_create_workq_waiting_parameter;
  kern_return_t (*thread_policy_set_internal)(thread_t, thread_policy_flavor_t, thread_policy_t, mach_msg_type_number_t);
  void *__unused_was_thread_affinity_set;
  void (*unix_syscall_return)(int);
  void *__unused_was_zalloc;
  void *__unused_was_zfree;
  void *__unused_was_zinit;
  void (*__pthread_testcancel)(int);
  kern_return_t (*mach_port_deallocate)(ipc_space_t, mach_port_name_t);
  kern_return_t (*semaphore_signal_internal_trap)(mach_port_name_t);
  vm_map_t (*current_map)(void);
  ipc_port_t (*convert_thread_to_port)(thread_t);
  kern_return_t (*thread_create)(task_t, thread_act_t *);
  kern_return_t (*thread_resume)(thread_act_t);
  void *__unused_was_ml_get_max_cpus;
  void *__unused_was_proc_get_dispatchqueue_serialno_offset;
  void *__unused_was_proc_set_dispatchqueue_serialno_offset;
  void *__unused_was_proc_usynch_thread_qos_add_override_for_resource_check_owner;
  void *__unused_was_proc_set_stack_addr_hint;
  uint32_t_0 (*proc_get_pthread_tsd_offset)(proc *);
  void (*proc_set_pthread_tsd_offset)(proc *, uint32_t_0);
  kern_return_t (*thread_set_tsd_base)(thread_t, mach_vm_offset_t);
  int (*proc_usynch_get_requested_thread_qos)(uthread_0 *);
  uint64_t_0 (*proc_get_mach_thread_self_tsd_offset)(proc *);
  void (*proc_set_mach_thread_self_tsd_offset)(proc *, uint64_t_0);
  kern_return_t (*thread_policy_get)(thread_t, thread_policy_flavor_t, thread_policy_t, mach_msg_type_number_t *, boolean_t *);
  boolean_t (*qos_main_thread_active)(void);
  kern_return_t (*thread_set_voucher_name)(mach_port_name_t);
  boolean_t (*proc_usynch_thread_qos_add_override_for_resource)(task_t, uthread_0 *, uint64_t_0, int, boolean_t, user_addr_t, int);
  boolean_t (*proc_usynch_thread_qos_remove_override_for_resource)(task_t, uthread_0 *, uint64_t_0, user_addr_t, int);
  void *__unused_was_proc_usynch_thread_qos_reset_override_for_resource;
  void *__unused_was_proc_init_wqptr_or_wait;
  uint16_t (*thread_set_tag)(thread_t, uint16_t);
  uint16_t (*thread_get_tag)(thread_t);
  void *__unused_was_proc_usynch_thread_qos_squash_override_for_resource;
  void *__unused_was_task_get_default_manager_qos;
  void *__unused_was_thread_create_workq_waiting;
  user_addr_t (*proc_get_stack_addr_hint)(proc *);
  void (*proc_set_stack_addr_hint)(proc *, user_addr_t);
  void *__unused_was_proc_get_return_to_kernel_offset;
  void (*proc_set_return_to_kernel_offset)(proc *, uint64_t_0);
  void *__unused_was_workloop_fulfill_threadreq;
  void (*thread_will_park_or_terminate)(thread_t);
  void *__unused_was_qos_max_parallelism;
  user_addr_t (*proc_get_user_stack)(proc *);
  void *__unused_was_proc_set_user_stack;
  void *_pad[69];
};

/* 7799 */
typedef const pthread_functions_s *pthread_functions_t;

/* 7800 */
struct pthread_functions_s
{
  int version;
  void (*pthread_init)(void);
  void *__unused_was_fill_procworkqueue;
  void *__unused1;
  void *__unused2;
  void *__unused_was_workqueue_exit;
  void *__unused_was_workqueue_mark_exiting;
  void *__unused_was_workqueue_thread_yielded;
  void (*pth_proc_hashinit)(proc_t);
  void (*pth_proc_hashdelete)(proc_t);
  int (*bsdthread_create)(proc *, user_addr_t, user_addr_t, user_addr_t, user_addr_t, uint32_t_0, user_addr_t *);
  int (*bsdthread_register)(proc *, user_addr_t, user_addr_t, int, user_addr_t, user_addr_t, uint64_t_0, int32_t *);
  int (*bsdthread_terminate)(proc *, user_addr_t, size_t, uint32_t_0, uint32_t_0, int32_t *);
  int (*thread_selfid)(proc *, uint64_t_0 *);
  void *__unused_was_workq_kernreturn;
  void *__unused_was_workq_open;
  int (*psynch_mutexwait)(proc_t, user_addr_t, uint32_t_0, uint32_t_0, uint64_t_0, uint32_t_0, uint32_t_0 *);
  int (*psynch_mutexdrop)(proc_t, user_addr_t, uint32_t_0, uint32_t_0, uint64_t_0, uint32_t_0, uint32_t_0 *);
  int (*psynch_cvbroad)(proc_t, user_addr_t, uint64_t_0, uint64_t_0, uint32_t_0, user_addr_t, uint64_t_0, uint64_t_0, uint32_t_0 *);
  int (*psynch_cvsignal)(proc_t, user_addr_t, uint64_t_0, uint32_t_0, int, user_addr_t, uint64_t_0, uint64_t_0, uint32_t_0, uint32_t_0 *);
  int (*psynch_cvwait)(proc_t, user_addr_t, uint64_t_0, uint32_t_0, user_addr_t, uint64_t_0, uint32_t_0, int64_t, uint32_t_0, uint32_t_0 *);
  int (*psynch_cvclrprepost)(proc_t, user_addr_t, uint32_t_0, uint32_t_0, uint32_t_0, uint32_t_0, uint32_t_0, uint32_t_0, int *);
  int (*psynch_rw_longrdlock)(proc_t, user_addr_t, uint32_t_0, uint32_t_0, uint32_t_0, int, uint32_t_0 *);
  int (*psynch_rw_rdlock)(proc_t, user_addr_t, uint32_t_0, uint32_t_0, uint32_t_0, int, uint32_t_0 *);
  int (*psynch_rw_unlock)(proc_t, user_addr_t, uint32_t_0, uint32_t_0, uint32_t_0, int, uint32_t_0 *);
  int (*psynch_rw_wrlock)(proc_t, user_addr_t, uint32_t_0, uint32_t_0, uint32_t_0, int, uint32_t_0 *);
  int (*psynch_rw_yieldwrlock)(proc_t, user_addr_t, uint32_t_0, uint32_t_0, uint32_t_0, int, uint32_t_0 *);
  void *__unused_was_workqueue_get_sched_callback;
  int (*bsdthread_register2)(proc *, user_addr_t, user_addr_t, uint32_t_0, user_addr_t, user_addr_t, uint32_t_0, uint32_t_0, int32_t *);
  void *__unused_was_bsdthread_ctl;
  void *__unused_was_workq_reqthreads;
  void *__unused_was_thread_qos_from_pthread_priority;
  void *__unused_was_get_pwq_state_kdp;
  void *__unused3;
  void *__unused_was_pthread_priority_canonicalize2;
  void *__unused_was_workq_thread_has_been_unbound;
  void (*pthread_find_owner)(thread_t, stackshot_thread_waitinfo *);
  void *(*pthread_get_thread_kwq)(thread_t);
  void *__unused_was_workq_threadreq;
  int (*workq_handle_stack_events)(proc_t, thread_t, vm_map_t, user_addr_t, mach_port_name_t, user_addr_t, int, int);
  int (*workq_create_threadstack)(proc_t, vm_map_t, mach_vm_offset_t *);
  int (*workq_destroy_threadstack)(proc_t, vm_map_t, mach_vm_offset_t);
  void (*workq_setup_thread)(proc_t, thread_t, vm_map_t, user_addr_t, mach_port_name_t, int, int, int);
  void (*workq_markfree_threadstack)(proc_t, thread_t, vm_map_t, user_addr_t);
  void *_pad[83];
};

/* 7801 */
struct thread_selfid_args
{
  int32_t dummy;
};

/* 7802 */
struct psynch_mutexwait_args
{
  user_addr_t mutex;
  uint32_t_0 mgen;
  char mgen_r_[4];
  uint32_t_0 ugen;
  char ugen_r_[4];
  uint64_t_0 tid;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 7803 */
struct psynch_mutexdrop_args
{
  user_addr_t mutex;
  uint32_t_0 mgen;
  char mgen_r_[4];
  uint32_t_0 ugen;
  char ugen_r_[4];
  uint64_t_0 tid;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 7804 */
struct psynch_rw_longrdlock_args
{
  user_addr_t rwlock;
  uint32_t_0 lgenval;
  char lgenval_r_[4];
  uint32_t_0 ugenval;
  char ugenval_r_[4];
  uint32_t_0 rw_wc;
  char rw_wc_r_[4];
  int flags;
  char flags_r_[4];
};

/* 7805 */
struct psynch_rw_rdlock_args
{
  user_addr_t rwlock;
  uint32_t_0 lgenval;
  char lgenval_r_[4];
  uint32_t_0 ugenval;
  char ugenval_r_[4];
  uint32_t_0 rw_wc;
  char rw_wc_r_[4];
  int flags;
  char flags_r_[4];
};

/* 7806 */
struct psynch_rw_unlock_args
{
  user_addr_t rwlock;
  uint32_t_0 lgenval;
  char lgenval_r_[4];
  uint32_t_0 ugenval;
  char ugenval_r_[4];
  uint32_t_0 rw_wc;
  char rw_wc_r_[4];
  int flags;
  char flags_r_[4];
};

/* 7807 */
struct psynch_rw_unlock2_args
{
  user_addr_t rwlock;
  uint32_t_0 lgenval;
  char lgenval_r_[4];
  uint32_t_0 ugenval;
  char ugenval_r_[4];
  uint32_t_0 rw_wc;
  char rw_wc_r_[4];
  int flags;
  char flags_r_[4];
};

/* 7808 */
struct psynch_rw_wrlock_args
{
  user_addr_t rwlock;
  uint32_t_0 lgenval;
  char lgenval_r_[4];
  uint32_t_0 ugenval;
  char ugenval_r_[4];
  uint32_t_0 rw_wc;
  char rw_wc_r_[4];
  int flags;
  char flags_r_[4];
};

/* 7809 */
struct psynch_rw_yieldwrlock_args
{
  user_addr_t rwlock;
  uint32_t_0 lgenval;
  char lgenval_r_[4];
  uint32_t_0 ugenval;
  char ugenval_r_[4];
  uint32_t_0 rw_wc;
  char rw_wc_r_[4];
  int flags;
  char flags_r_[4];
};

/* 7810 */
struct psynch_rw_upgrade_args
{
  user_addr_t rwlock;
  uint32_t_0 lgenval;
  char lgenval_r_[4];
  uint32_t_0 ugenval;
  char ugenval_r_[4];
  uint32_t_0 rw_wc;
  char rw_wc_r_[4];
  int flags;
  char flags_r_[4];
};

/* 7811 */
struct psynch_rw_downgrade_args
{
  user_addr_t rwlock;
  uint32_t_0 lgenval;
  char lgenval_r_[4];
  uint32_t_0 ugenval;
  char ugenval_r_[4];
  uint32_t_0 rw_wc;
  char rw_wc_r_[4];
  int flags;
  char flags_r_[4];
};

/* 7812 */
struct workq_usec_var
{
  uint32_t_0 usecs;
  uint64_t_0 abstime;
};

/* 7813 */
enum workq_set_self_flags : __int32
{
  WORKQ_SET_SELF_QOS_FLAG = 0x1,
  WORKQ_SET_SELF_VOUCHER_FLAG = 0x2,
  WORKQ_SET_SELF_FIXEDPRIORITY_FLAG = 0x4,
  WORKQ_SET_SELF_TIMESHARE_FLAG = 0x8,
  WORKQ_SET_SELF_WQ_KEVENT_UNBIND = 0x10,
};

/* 7814 */
typedef workq_threadreq_param_s workq_threadreq_param_t;

/* 7815 */
union workq_threadreq_param_s
{
  workq_threadreq_param_s::$B64F0B65CBC5B7C0BF4A91BF1F3C6B17 _anon_0;
  uint64_t_0 trp_value;
};

/* 7816 */
struct workq_threadreq_param_s::$B64F0B65CBC5B7C0BF4A91BF1F3C6B17
{
  uint16_t trp_flags;
  uint8_t_0 trp_pri;
  uint8_t_0 trp_pol;
  unsigned __int32 trp_cpupercent : 8;
  unsigned __int32 trp_refillms : 24;
};

/* 7817 */
struct __attribute__((packed)) __attribute__((aligned(1))) __block_literal_8
{
  void *__isa;
  int __flags;
  int __reserved;
  void (*__FuncPtr)(void);
  __block_descriptor *__descriptor;
  workqueue *wq;
  turnstile_inheritor_t inheritor;
  turnstile_update_flags_t flags;
};

/* 7818 */
struct __block_literal_9
{
  void *__isa;
  int __flags;
  int __reserved;
  void (*__FuncPtr)(void);
  __block_descriptor *__descriptor;
  proc_t p;
  workq_threadreq_t req;
  uthread *uth;
};

/* 7819 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *priority_queue_compare_fn_t_0;

/* 7820 */
typedef thread_extended_policy thread_extended_policy_data_t;

/* 7821 */
struct __block_literal_4_0
{
  void *__isa;
  int __flags;
  int __reserved;
  void (*__FuncPtr)(void);
  __block_descriptor *__descriptor;
  turnstile *workloop_ts;
  workqueue *wq;
};

/* 7822 */
struct __block_literal_11
{
  void *__isa;
  int __flags;
  int __reserved;
  int (*__FuncPtr)(priority_queue_entry_t, priority_queue_entry_t);
  __block_descriptor *__descriptor;
};

/* 7823 */
struct __attribute__((packed)) __attribute__((aligned(1))) __block_literal_7
{
  void *__isa;
  int __flags;
  int __reserved;
  void (*__FuncPtr)(void);
  __block_descriptor *__descriptor;
  turnstile *wl_ts;
  turnstile_inheritor_t inheritor;
  turnstile_update_flags_t flags;
};

/* 7824 */
struct workq_kernreturn_args
{
  int options;
  char options_r_[4];
  user_addr_t item;
  int affinity;
  char affinity_r_[4];
  int prio;
  char prio_r_[4];
};

/* 7825 */
struct proc_workqueueinfo
{
  uint32_t_0 pwq_nthreads;
  uint32_t_0 pwq_runthreads;
  uint32_t_0 pwq_blockedthreads;
  uint32_t_0 pwq_state;
};

/* 7826 */
struct __block_literal_10
{
  void *__isa;
  int __flags;
  int __reserved;
  int (*__FuncPtr)(priority_queue_entry_t, priority_queue_entry_t);
  __block_descriptor *__descriptor;
};

/* 7827 */
struct workq_open_args
{
  int32_t dummy;
};

/* 7828 */
struct __block_literal_1_0
{
  void *__isa;
  int __flags;
  int __reserved;
  void (*__FuncPtr)(void *);
  __block_descriptor *__descriptor;
  proc *p;
};

/* 7829 */
struct __block_literal_2_0
{
  void *__isa;
  int __flags;
  int __reserved;
  void (*__FuncPtr)(void *);
  __block_descriptor *__descriptor;
  proc *p;
};

/* 7830 */
struct __block_literal_3_0
{
  void *__isa;
  int __flags;
  int __reserved;
  void (*__FuncPtr)(void *);
  __block_descriptor *__descriptor;
  proc *p;
};

/* 7831 */
struct bsdthread_ctl_args
{
  user_addr_t cmd;
  user_addr_t arg1;
  user_addr_t arg2;
  user_addr_t arg3;
  char arg3_r_[];
};

/* 7832 */
struct os_reason_0
{
  lck_mtx_t osr_lock;
  unsigned int osr_refcount;
  uint32_t_0 osr_namespace;
  uint64_t_0 osr_code;
  uint64_t_0 osr_flags;
  uint32_t_0 osr_bufsize;
  kcdata_descriptor osr_kcd_descriptor;
  char *osr_kcd_buf;
};

/* 7833 */
struct aio_workq_entry::$A4C2CF190061FC624E73AE0F63EFF201
{
  aio_workq_entry *tqe_next;
  aio_workq_entry **tqe_prev;
};

/* 7834 */
struct __attribute__((aligned(8))) user_aiocb
{
  int aio_fildes;
  off_t aio_offset;
  user_addr_t aio_buf;
  user_size_t aio_nbytes;
  int aio_reqprio;
  user_sigevent aio_sigevent;
  int aio_lio_opcode;
};

/* 7835 */
struct user_sigevent
{
  int sigev_notify;
  int sigev_signo;
  user_sigval sigev_value;
  user_addr_t sigev_notify_function;
  user_addr_t sigev_notify_attributes;
};

/* 7836 */
union user_sigval
{
  user_sigval::$2CE66B4199937F9EDE1CE0F500572B41 size_equivalent;
  user_addr_t sival_ptr;
};

/* 7837 */
struct user_sigval::$2CE66B4199937F9EDE1CE0F500572B41
{
  uint32_t_0 pad;
  int32_t sival_int;
};

/* 7838 */
struct swdevt
{
  dev_t sw_dev;
  int sw_flags;
  int sw_nblks;
  vnode *sw_vp;
};

/* 7839 */
struct pseudo_init
{
  int ps_count;
  int (*ps_func)(int);
};

/* 7840 */
struct __attribute__((aligned(8))) kd_storage_buffers
{
  kd_storage *kdsb_addr;
  uint32_t_0 kdsb_size;
};

/* 7841 */
struct kd_storage
{
  kds_ptr kds_next;
  uint32_t_0 kds_bufindx;
  uint32_t_0 kds_bufcnt;
  uint32_t_0 kds_readlast;
  boolean_t kds_lostevents;
  uint64_t_0 kds_timestamp;
  kd_buf kds_records[2048];
};

/* 7842 */
union kds_ptr
{
  kds_ptr::$7716D3278DF42D9DBDC5E8C603B01DDD _anon_0;
  uint32_t_0 raw;
};

/* 7843 */
struct kds_ptr::$7716D3278DF42D9DBDC5E8C603B01DDD
{
  unsigned __int32 buffer_index : 21;
  unsigned __int16 offset : 11;
};

/* 7844 */
struct kd_buf
{
  uint64_t_0 timestamp;
  kd_buf_argtype arg1;
  kd_buf_argtype arg2;
  kd_buf_argtype arg3;
  kd_buf_argtype arg4;
  kd_buf_argtype arg5;
  uint32_t_0 debugid;
  uint32_t_0 cpuid;
  kd_buf_argtype unused;
};

/* 7845 */
typedef uintptr_t kd_buf_argtype;

/* 7846 */
struct __attribute__((aligned(8))) kd_ctrl_page_t
{
  kds_ptr kds_free_list;
  unsigned __int32 enabled : 1;
  unsigned __int32 _pad0 : 31;
  int kds_inuse_count;
  uint32_t_0 kdebug_flags;
  uint32_t_0 kdebug_slowcheck;
  uint64_t_0 oldest_time;
  kd_iop_t *kdebug_iops;
  uint32_t_0 kdebug_cpus;
};

/* 7847 */
typedef kd_iop kd_iop_t;

/* 7848 */
struct kd_iop
{
  kd_callback_t callback;
  uint32_t_0 cpu_id;
  uint64_t_0 last_timestamp;
  kd_iop *next;
};

/* 7849 */
typedef kd_callback kd_callback_t;

/* 7850 */
struct kd_callback
{
  kd_callback_fn func;
  void *context;
  char iop_name[8];
};

/* 7851 */
typedef void (*kd_callback_fn)(void *, kd_callback_type, void *);

/* 7852 */
enum kd_callback_type : __int32
{
  KD_CALLBACK_KDEBUG_ENABLED = 0x0,
  KD_CALLBACK_KDEBUG_DISABLED = 0x1,
  KD_CALLBACK_SYNC_FLUSH = 0x2,
  KD_CALLBACK_TYPEFILTER_CHANGED = 0x3,
};

/* 7853 */
struct __attribute__((aligned(128))) kd_bufinfo
{
  kds_ptr kd_list_head;
  kds_ptr kd_list_tail;
  boolean_t kd_lostevents;
  uint32_t_0 _pad;
  uint64_t_0 kd_prev_timebase;
  uint32_t_0 num_bufs;
};

/* 7854 */
struct kd_threadmap
{
  uintptr_t thread;
  int valid;
  char command[20];
};

/* 7855 */
typedef uint8_t_0 *typefilter_t;

/* 7856 */
struct kd_cpumap_header
{
  uint32_t_0 version_no;
  uint32_t_0 cpu_count;
};

/* 7857 */
struct kd_cpumap
{
  uint32_t_0 cpu_id;
  uint32_t_0 flags;
  char name[8];
};

/* 7858 */
struct tts
{
  task_t task;
  pid_t pid;
  char task_comm[20];
};

/* 7859 */
typedef krt krt_t;

/* 7860 */
struct krt
{
  kd_threadmap *map;
  int count;
  int maxcount;
  tts *atts;
};

/* 7861 */
struct kdebug_trace64_args
{
  uint32_t_0 code;
  char code_r_[4];
  uint64_t_0 arg1;
  uint64_t_0 arg2;
  uint64_t_0 arg3;
  uint64_t_0 arg4;
  char arg4_r_[];
};

/* 7862 */
struct kd_chunk_header_v3
{
  uint32_t_0 tag;
  uint32_t_0 sub_tag;
  uint64_t_0 length;
};

/* 7863 */
struct kd_regtype
{
  unsigned int type;
  unsigned int value1;
  unsigned int value2;
  unsigned int value3;
  unsigned int value4;
};

/* 7864 */
struct __attribute__((aligned(8))) RAW_header
{
  int version_no;
  int thread_count;
  uint64_t_0 TOD_secs;
  uint32_t_0 TOD_usecs;
};

/* 7865 */
struct kdebug_typefilter_args
{
  user_addr_t addr;
  user_addr_t size;
  char size_r_[];
};

/* 7866 */
struct kdebug_trace_args
{
  uint32_t_0 code;
  char code_r_[4];
  user_ulong_t arg1;
  user_ulong_t arg2;
  user_ulong_t arg3;
  user_ulong_t arg4;
  char arg4_r_[];
};

/* 7867 */
struct kdebug_trace_string_args
{
  uint32_t_0 debugid;
  char debugid_r_[4];
  uint64_t_0 str_id;
  user_addr_t str;
  char str_r_[];
};

/* 7868 */
struct kd_header_v3
{
  uint32_t_0 tag;
  uint32_t_0 sub_tag;
  uint64_t_0 length;
  uint32_t_0 timebase_numer;
  uint32_t_0 timebase_denom;
  uint64_t_0 timestamp;
  uint64_t_0 walltime_secs;
  uint32_t_0 walltime_usecs;
  uint32_t_0 timezone_minuteswest;
  uint32_t_0 timezone_dst;
  uint32_t_0 flags;
};

/* 7869 */
struct kbufinfo_t
{
  int nkdbufs;
  int nolog;
  unsigned int flags;
  int nkdthreads;
  int bufid;
};

/* 7870 */
typedef u_int16_t comp_t;

/* 7871 */
struct acct_args
{
  user_addr_t path;
  char path_r_[];
};

/* 7872 */
struct __attribute__((aligned(4))) acct
{
  char ac_comm[10];
  comp_t ac_utime;
  comp_t ac_stime;
  comp_t ac_etime;
  u_int32_t ac_btime;
  uid_t ac_uid;
  gid_t ac_gid;
  u_int16_t ac_mem;
  comp_t ac_io;
  dev_t ac_tty;
  u_int8_t ac_flag;
};

/* 7873 */
typedef aio_anchor_cb aio_anchor_cb_0;

/* 7874 */
struct aio_anchor_cb
{
  volatile int32_t aio_inflight_count;
  volatile int32_t aio_done_count;
  volatile int32_t aio_total_count;
  int aio_num_workqs;
  aio_workq aio_async_workqs[1];
};

/* 7875 */
struct aio_workq
{
  aio_workq::$362CBD09F9E28B04D136306D2489B7C4 aioq_entries;
  int aioq_count;
  lck_mtx_t aioq_mtx;
  waitq aioq_waitq;
};

/* 7876 */
struct aio_workq::$362CBD09F9E28B04D136306D2489B7C4
{
  aio_workq_entry *tqh_first;
  aio_workq_entry **tqh_last;
};

/* 7877 */
struct aio_suspend_nocancel_args
{
  user_addr_t aiocblist;
  int nent;
  char nent_r_[4];
  user_addr_t timeoutp;
  char timeoutp_r_[];
};

/* 7878 */
typedef aio_lio_context aio_lio_context_0;

/* 7879 */
struct aio_lio_context
{
  int io_waiter;
  int io_issued;
  int io_completed;
};

/* 7880 */
typedef aio_workq_entry aio_workq_entry_0;

/* 7881 */
typedef aio_workq *aio_workq_t;

/* 7882 */
struct user32_aiocb
{
  int aio_fildes;
  __attribute__((packed)) __attribute__((aligned(1))) user32_off_t aio_offset;
  user32_addr_t aio_buf;
  user32_size_t aio_nbytes;
  int aio_reqprio;
  user32_sigevent aio_sigevent;
  int aio_lio_opcode;
};

/* 7883 */
typedef __int64_t user32_off_t;

/* 7884 */
struct user32_sigevent
{
  int sigev_notify;
  int sigev_signo;
  user32_sigval sigev_value;
  user32_addr_t sigev_notify_function;
  user32_addr_t sigev_notify_attributes;
};

/* 7885 */
union user32_sigval
{
  int32_t sival_int;
  user32_addr_t sival_ptr;
};

/* 7886 */
struct __attribute__((aligned(8))) user64_aiocb
{
  int aio_fildes;
  user64_off_t aio_offset;
  user64_addr_t aio_buf;
  user64_size_t aio_nbytes;
  int aio_reqprio;
  user64_sigevent aio_sigevent;
  int aio_lio_opcode;
};

/* 7887 */
typedef __int64_t user64_off_t;

/* 7888 */
struct user64_sigevent
{
  int sigev_notify;
  int sigev_signo;
  user64_sigval sigev_value;
  user64_addr_t sigev_notify_function;
  user64_addr_t sigev_notify_attributes;
};

/* 7889 */
union user64_sigval
{
  user64_sigval::$2CE66B4199937F9EDE1CE0F500572B41 size_equivalent;
  user64_addr_t sival_ptr;
};

/* 7890 */
struct user64_sigval::$2CE66B4199937F9EDE1CE0F500572B41
{
  uint32_t_0 pad;
  int32_t sival_int;
};

/* 7891 */
struct aio_cancel_args
{
  int fd;
  char fd_r_[4];
  user_addr_t aiocbp;
  char aiocbp_r_[];
};

/* 7892 */
struct aio_error_args
{
  user_addr_t aiocbp;
  char aiocbp_r_[];
};

/* 7893 */
struct aio_fsync_args
{
  int op;
  char op_r_[4];
  user_addr_t aiocbp;
  char aiocbp_r_[];
};

/* 7894 */
struct aio_read_args
{
  user_addr_t aiocbp;
  char aiocbp_r_[];
};

/* 7895 */
struct aio_return_args
{
  user_addr_t aiocbp;
  char aiocbp_r_[];
};

/* 7896 */
struct aio_suspend_args
{
  user_addr_t aiocblist;
  int nent;
  char nent_r_[4];
  user_addr_t timeoutp;
  char timeoutp_r_[];
};

/* 7897 */
struct user_timespec
{
  user_time_t tv_sec;
  user_long_t tv_nsec;
};

/* 7898 */
typedef int64_t user_time_t;

/* 7899 */
typedef int64_t user_long_t;

/* 7900 */
struct aio_write_args
{
  user_addr_t aiocbp;
  char aiocbp_r_[];
};

/* 7901 */
struct lio_listio_args
{
  int mode;
  char mode_r_[4];
  user_addr_t aiocblist;
  int nent;
  char nent_r_[4];
  user_addr_t sigp;
  char sigp_r_[];
};

/* 7902 */
struct kauth_listener
{
  kauth_listener::$7F57B40C98799241B9184A99047DA83E kl_link;
  const char *kl_identifier;
  kauth_scope_callback_t kl_callback;
  void *kl_idata;
};

/* 7903 */
struct kauth_listener::$7F57B40C98799241B9184A99047DA83E
{
  kauth_listener *tqe_next;
  kauth_listener **tqe_prev;
};

/* 7904 */
typedef int (*kauth_scope_callback_t)(kauth_cred_t, void *, kauth_action_t, uintptr_t, uintptr_t, uintptr_t, uintptr_t);

/* 7905 */
struct $A27ED9E2C7DE51E38A39A66474776359
{
  kauth_scope *tqh_first;
  kauth_scope **tqh_last;
};

/* 7906 */
struct kauth_scope::$887E2DB01809C5A2E1B3A83889F88E26
{
  kauth_scope *tqe_next;
  kauth_scope **tqe_prev;
};

/* 7907 */
struct kauth_local_listener
{
  kauth_listener_t kll_listenerp;
  kauth_scope_callback_t kll_callback;
  void *kll_idata;
};

/* 7908 */
typedef kauth_listener *kauth_listener_t;

/* 7909 */
typedef kauth_acl_eval *kauth_acl_eval_t;

/* 7910 */
typedef void (*timeout_fcn_t)(void *);

/* 7911 */
struct clockinfo
{
  int hz;
  int tick;
  int tickadj;
  int stathz;
  int profhz;
};

/* 7912 */
struct mythread_state_flavor_t
{
  int flavor;
  mach_msg_type_number_t count;
};

/* 7913 */
struct tir_t
{
  vm_offset_t header;
  int hoffset;
  mythread_state_flavor_t *flavors;
  int tstate_size;
  int flavor_count;
};

/* 7914 */
struct kauth_resolver_unsubmitted_head
{
  kauth_resolver_work *tqh_first;
  kauth_resolver_work **tqh_last;
};

/* 7915 */
struct kauth_resolver_work
{
  kauth_resolver_work::$92B7C8DA27B868D8D2A976F1941C49C2 kr_link;
  kauth_identity_extlookup kr_work;
  uint64_t_0 kr_extend;
  uint32_t_0 kr_seqno;
  int kr_refs;
  int kr_flags;
  int kr_result;
};

/* 7916 */
struct kauth_resolver_work::$92B7C8DA27B868D8D2A976F1941C49C2
{
  kauth_resolver_work *tqe_next;
  kauth_resolver_work **tqe_prev;
};

/* 7917 */
struct __attribute__((aligned(8))) kauth_identity_extlookup
{
  u_int32_t el_seqno;
  u_int32_t el_result;
  u_int32_t el_flags;
  __darwin_pid_t el_info_pid;
  u_int64_t el_extend;
  u_int32_t el_info_reserved_1;
  uid_t el_uid;
  guid_t el_uguid;
  u_int32_t el_uguid_valid;
  ntsid_t el_usid;
  u_int32_t el_usid_valid;
  gid_t el_gid;
  guid_t el_gguid;
  u_int32_t el_gguid_valid;
  ntsid_t el_gsid;
  u_int32_t el_gsid_valid;
  u_int32_t el_member_valid;
  u_int32_t el_sup_grp_cnt;
  gid_t el_sup_groups[16];
};

/* 7918 */
struct kauth_resolver_submitted_head
{
  kauth_resolver_work *tqh_first;
  kauth_resolver_work **tqh_last;
};

/* 7919 */
struct kauth_resolver_done_head
{
  kauth_resolver_work *tqh_first;
  kauth_resolver_work **tqh_last;
};

/* 7920 */
struct kauth_identity_head
{
  kauth_identity *tqh_first;
  kauth_identity **tqh_last;
};

/* 7921 */
struct kauth_identity
{
  kauth_identity::$8BCB4E992748AFA930B873E200EACFC0 ki_link;
  int ki_valid;
  uid_t ki_uid;
  gid_t ki_gid;
  int ki_supgrpcnt;
  gid_t ki_supgrps[16];
  guid_t ki_guid;
  ntsid_t ki_ntsid;
  const char *ki_name;
  time_t ki_groups_expiry;
  time_t ki_guid_expiry;
  time_t ki_ntsid_expiry;
};

/* 7922 */
struct kauth_identity::$8BCB4E992748AFA930B873E200EACFC0
{
  kauth_identity *tqe_next;
  kauth_identity **tqe_prev;
};

/* 7923 */
struct kauth_groups_head
{
  kauth_group_membership *tqh_first;
  kauth_group_membership **tqh_last;
};

/* 7924 */
struct __attribute__((aligned(8))) kauth_group_membership
{
  kauth_group_membership::$CE0D33583C7F864F683A492B4A71209B gm_link;
  uid_t gm_uid;
  gid_t gm_gid;
  time_t gm_expiry;
  int gm_flags;
};

/* 7925 */
struct kauth_group_membership::$CE0D33583C7F864F683A492B4A71209B
{
  kauth_group_membership *tqe_next;
  kauth_group_membership **tqe_prev;
};

/* 7926 */
struct kauth_cred_entry_head
{
  ucred *tqh_first;
  ucred **tqh_last;
};

/* 7927 */
struct supgroups
{
  int *count;
  gid_t *groups;
};

/* 7928 */
struct identitysvc_args
{
  int opcode;
  char opcode_r_[4];
  user_addr_t message;
  char message_r_[];
};

/* 7929 */
struct kauth_cache_sizes
{
  u_int32_t kcs_group_size;
  u_int32_t kcs_id_size;
};

/* 7930 */
typedef au_session au_session_t;

/* 7931 */
typedef uint32_t_0 csr_config_t;

/* 7932 */
struct csrctl_args
{
  uint32_t_0 op;
  char op_r_[4];
  user_addr_t useraddr;
  user_addr_t usersize;
  char usersize_r_[];
};

/* 7933 */
struct __attribute__((aligned(8))) kern_direct_file_io_ref_t
{
  vfs_context_t ctx;
  vnode *vp;
  dev_t device;
  uint32_t_0 blksize;
  off_t filelength;
  char cf;
  char pinned;
  char frozen;
  char wbcranged;
};

/* 7934 */
typedef void (*kern_get_file_extents_callback_t)(void *, uint64_t_0, uint64_t_0);

/* 7935 */
typedef dk_apfs_wbc_range dk_apfs_wbc_range_t;

/* 7936 */
struct dk_apfs_wbc_range
{
  dev_t dev;
  uint32_t_0 count;
  dk_extent_t extents[2];
};

/* 7937 */
struct dk_extent_t
{
  uint64_t_0 offset;
  uint64_t_0 length;
};

/* 7938 */
struct dk_physical_extent_t
{
  uint64_t_0 offset;
  uint64_t_0 length;
  uint8_t_0 reserved0128[12];
  dev_t dev;
};

/* 7939 */
struct dk_unmap_t
{
  dk_extent_t *extents;
  uint32_t_0 extentsCount;
  uint32_t_0 options;
};

/* 7940 */
typedef _dk_cs_pin _dk_cs_pin_t;

/* 7941 */
struct _dk_cs_pin
{
  dk_extent_t cp_extent;
  int64_t cp_flags;
};

/* 7942 */
struct fmsglist
{
  fileglob *lh_first;
};

/* 7943 */
struct fcntl_nocancel_args
{
  int fd;
  char fd_r_[4];
  int cmd;
  char cmd_r_[4];
  user_long_t arg;
  char arg_r_[];
};

/* 7944 */
struct close_nocancel_args
{
  int fd;
  char fd_r_[4];
};

/* 7945 */
struct __attribute__((aligned(8))) pshmnode
{
  off_t mapp_addr;
  user_size_t map_size;
  pshminfo *pinfo;
  unsigned int pshm_usecount;
};

/* 7946 */
struct psemnode
{
  pseminfo *pinfo;
};

/* 7947 */
struct pipe
{
  pipebuf pipe_buffer;
  selinfo pipe_sel;
  pid_t pipe_pgid;
  pipe *pipe_peer;
  u_int pipe_state;
  int pipe_busy;
  pipe::$1D3E450C18944DBC95A59288B453C62E pipe_evlist;
  lck_mtx_t *pipe_mtxp;
  timespec st_atimespec;
  timespec st_mtimespec;
  timespec st_ctimespec;
  label *pipe_label;
};

/* 7948 */
struct pipebuf
{
  u_int cnt;
  u_int in;
  u_int out;
  u_int size;
  caddr_t buffer;
};

/* 7949 */
struct pipe::$1D3E450C18944DBC95A59288B453C62E
{
  eventqelt *tqh_first;
  eventqelt **tqh_last;
};

/* 7950 */
union fstat1::$780A56AAFB9D57B9D4F03874896A25B4
{
  stat sb;
  stat64 sb64;
};

/* 7951 */
union fstat1::$0EA60586FE88ADE112369BB55B1F4C16
{
  user64_stat user64_sb;
  user32_stat user32_sb;
  user64_stat64 user64_sb64;
  user32_stat64 user32_sb64;
};

/* 7952 */
struct getdtablesize_args
{
  int32_t dummy;
};

/* 7953 */
struct dup_args
{
  u_int fd;
  char fd_r_[4];
};

/* 7954 */
struct dup2_args
{
  u_int from;
  char from_r_[4];
  u_int to;
  char to_r_[4];
};

/* 7955 */
struct fcntl_args
{
  int fd;
  char fd_r_[4];
  int cmd;
  char cmd_r_[4];
  user_long_t arg;
  char arg_r_[];
};

/* 7956 */
struct flocktimeout
{
  flock fl;
  timespec timeout;
};

/* 7957 */
typedef fstore fstore_t;

/* 7958 */
struct fstore
{
  unsigned int fst_flags;
  int fst_posmode;
  off_t fst_offset;
  off_t fst_length;
  off_t fst_bytesalloc;
};

/* 7959 */
typedef fpunchhole fpunchhole_t;

/* 7960 */
struct fpunchhole
{
  unsigned int fp_flags;
  unsigned int reserved;
  off_t fp_offset;
  off_t fp_length;
};

/* 7961 */
typedef ftrimactivefile ftrimactivefile_t;

/* 7962 */
struct ftrimactivefile
{
  off_t fta_offset;
  off_t fta_length;
};

/* 7963 */
struct __attribute__((packed)) __attribute__((aligned(4))) radvisory
{
  off_t ra_offset;
  int ra_count;
};

/* 7964 */
struct __attribute__((packed)) __attribute__((aligned(4))) log2phys
{
  unsigned int l2p_flags;
  off_t l2p_contigbytes;
  off_t l2p_devoffset;
};

/* 7965 */
struct user_fopenfrom
{
  unsigned int o_flags;
  mode_t o_mode;
  user_addr_t o_pathname;
};

/* 7966 */
struct user32_fopenfrom
{
  unsigned int o_flags;
  mode_t o_mode;
  user32_addr_t o_pathname;
};

/* 7967 */
struct user_fsignatures
{
  off_t fs_file_start;
  user_addr_t fs_blob_start;
  user_size_t fs_blob_size;
};

/* 7968 */
struct user32_fsignatures
{
  off_t fs_file_start;
  user32_addr_t fs_blob_start;
  user32_size_t fs_blob_size;
};

/* 7969 */
typedef fchecklv fchecklv_t;

/* 7970 */
struct fchecklv
{
  off_t lv_file_start;
  size_t_0 lv_error_message_size;
  void *lv_error_message;
};

/* 7971 */
struct user32_fchecklv
{
  user32_off_t lv_file_start;
  user32_size_t lv_error_message_size;
  user32_addr_t lv_error_message;
};

/* 7972 */
typedef cp_key cp_key_t;

/* 7973 */
struct cp_key
{
  uint8_t_0 len;
  void *key;
};

/* 7974 */
struct close_args
{
  int fd;
  char fd_r_[4];
};

/* 7975 */
struct fstat_extended_args
{
  int fd;
  char fd_r_[4];
  user_addr_t ub;
  user_addr_t xsecurity;
  user_addr_t xsecurity_size;
  char xsecurity_size_r_[];
};

/* 7976 */
struct fstat_args
{
  int fd;
  char fd_r_[4];
  user_addr_t ub;
  char ub_r_[];
};

/* 7977 */
struct fstat64_extended_args
{
  int fd;
  char fd_r_[4];
  user_addr_t ub;
  user_addr_t xsecurity;
  user_addr_t xsecurity_size;
  char xsecurity_size_r_[];
};

/* 7978 */
struct fstat64_args
{
  int fd;
  char fd_r_[4];
  user_addr_t ub;
  char ub_r_[];
};

/* 7979 */
struct fpathconf_args
{
  int fd;
  char fd_r_[4];
  int name;
  char name_r_[4];
};

/* 7980 */
struct flock_args
{
  int fd;
  char fd_r_[4];
  int how;
  char how_r_[4];
};

/* 7981 */
struct fileport_makeport_args
{
  int fd;
  char fd_r_[4];
  user_addr_t portnamep;
  char portnamep_r_[];
};

/* 7982 */
struct fileport_makefd_args
{
  mach_port_name_t port;
  char port_r_[4];
};

/* 7983 */
struct guarded_fileproc
{
  fileproc gf_fileproc;
  u_int gf_magic;
  u_int gf_attrs;
  guardid_t gf_guard;
};

/* 7984 */
typedef __uint64_t guardid_t;

/* 7985 */
struct __attribute__((aligned(8))) gfp_crarg
{
  guardid_t gca_guard;
  u_int gca_attrs;
};

/* 7986 */
struct guarded_kqueue_np_args
{
  user_addr_t guard;
  u_int guardflags;
  char guardflags_r_[4];
};

/* 7987 */
struct guarded_close_np_args
{
  int fd;
  char fd_r_[4];
  user_addr_t guard;
  char guard_r_[];
};

/* 7988 */
struct guarded_write_np_args
{
  int fd;
  char fd_r_[4];
  user_addr_t guard;
  user_addr_t cbuf;
  user_size_t nbyte;
  char nbyte_r_[];
};

/* 7989 */
struct guarded_pwrite_np_args
{
  int fd;
  char fd_r_[4];
  user_addr_t guard;
  user_addr_t buf;
  user_size_t nbyte;
  off_t offset;
  char offset_r_[];
};

/* 7990 */
struct guarded_writev_np_args
{
  int fd;
  char fd_r_[4];
  user_addr_t guard;
  user_addr_t iovp;
  int iovcnt;
  char iovcnt_r_[4];
};

/* 7991 */
struct vfs_attr_0
{
  uint64_t_0 f_supported;
  uint64_t_0 f_active;
  uint64_t_0 f_objcount;
  uint64_t_0 f_filecount;
  uint64_t_0 f_dircount;
  uint64_t_0 f_maxobjcount;
  uint32_t_0 f_bsize;
  __attribute__((packed)) __attribute__((aligned(1))) size_t f_iosize;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_blocks;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_bfree;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_bavail;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_bused;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_files;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 f_ffree;
  fsid_t f_fsid;
  uid_t f_owner;
  vol_capabilities_attr_t f_capabilities;
  vol_attributes_attr_t f_attributes;
  timespec f_create_time;
  timespec f_modify_time;
  timespec f_access_time;
  timespec f_backup_time;
  uint32_t_0 f_fssubtype;
  __attribute__((packed)) __attribute__((aligned(1))) char *f_vol_name;
  uint16_t f_signature;
  uint16_t f_carbon_fsid;
  uuid_t f_uuid;
  uint64_t_0 f_quota;
  uint64_t_0 f_reserved;
};

/* 7992 */
struct __attribute__((packed)) __attribute__((aligned(4))) vfsstatfs_0
{
  uint32_t_0 f_bsize;
  size_t f_iosize;
  uint64_t_0 f_blocks;
  uint64_t_0 f_bfree;
  uint64_t_0 f_bavail;
  uint64_t_0 f_bused;
  uint64_t_0 f_files;
  uint64_t_0 f_ffree;
  fsid_t f_fsid;
  uid_t f_owner;
  uint64_t_0 f_flags;
  char f_fstypename[16];
  char f_mntonname[1024];
  char f_mntfromname[1024];
  uint32_t_0 f_fssubtype;
  void *f_reserved[2];
};

/* 7993 */
struct sockopt_1
{
  sopt_dir sopt_dir;
  int sopt_level;
  int sopt_name;
  user_addr_t sopt_val;
  size_t sopt_valsize;
  proc *sopt_p;
};

/* 7994 */
struct kevtstat
{
  u_int64_t kes_pcbcount;
  u_int64_t kes_gencnt;
  u_int64_t kes_badvendor;
  u_int64_t kes_toobig;
  u_int64_t kes_nomem;
  u_int64_t kes_fullsock;
  u_int64_t kes_posted;
};

/* 7995 */
struct kern_event_head
{
  kern_event_pcb *lh_first;
};

/* 7996 */
struct __attribute__((aligned(8))) kern_event_pcb
{
  lck_mtx_t evp_mtx;
  kern_event_pcb::$90D0C8C7B149A2018541511CBC5EF6B9 evp_link;
  socket *evp_socket;
  u_int32_t evp_vendor_code_filter;
  u_int32_t evp_class_filter;
  u_int32_t evp_subclass_filter;
};

/* 7997 */
struct kern_event_pcb::$90D0C8C7B149A2018541511CBC5EF6B9
{
  kern_event_pcb *le_next;
  kern_event_pcb **le_prev;
};

/* 7998 */
struct kqworkq
{
  kqueue kqwq_kqueue;
  kqtailq kqwq_queue[8];
  kqrequest kqwq_request[8];
};

/* 7999 */
struct kqfile
{
  kqueue kqf_kqueue;
  kqtailq kqf_queue;
  kqtailq kqf_suppressed;
  selinfo kqf_sel;
};

/* 8000 */
typedef os_reason_0 *os_reason_t_0;

/* 8001 */
typedef uthread_0 *uthread_t_0;

/* 8002 */
struct __attribute__((aligned(8))) xkevtpcb
{
  u_int32_t kep_len;
  u_int32_t kep_kind;
  u_int64_t kep_evtpcb;
  u_int32_t kep_vendor_code_filter;
  u_int32_t kep_class_filter;
  u_int32_t kep_subclass_filter;
};

/* 8003 */
struct kev_request
{
  u_int32_t vendor_code;
  u_int32_t kev_class;
  u_int32_t kev_subclass;
};

/* 8004 */
struct kev_vendor_code
{
  u_int32_t vendor_code;
  char vendor_string[200];
};

/* 8005 */
union kqueue_t
{
  kqueue *kq;
  kqworkq *kqwq;
  kqfile *kqf;
  kqworkloop *kqwl;
};

/* 8006 */
struct filt_timer_params
{
  uint64_t_0 deadline;
  uint64_t_0 leeway;
  uint64_t_0 interval;
};

/* 8007 */
struct kevent_qos_s
{
  uint64_t_0 ident;
  int16_t filter;
  uint16_t flags;
  int32_t qos;
  uint64_t_0 udata;
  uint32_t_0 fflags;
  uint32_t_0 xflags;
  int64_t data;
  uint64_t_0 ext[4];
};

/* 8008 */
struct kevent64_s
{
  uint64_t_0 ident;
  int16_t filter;
  uint16_t flags;
  uint32_t_0 fflags;
  int64_t data;
  uint64_t_0 udata;
  uint64_t_0 ext[2];
};

/* 8009 */
struct user32_kevent
{
  uint32_t_0 ident;
  int16_t filter;
  uint16_t flags;
  uint32_t_0 fflags;
  int32_t data;
  user32_addr_t udata;
};

/* 8010 */
struct user64_kevent
{
  uint64_t_0 ident;
  int16_t filter;
  uint16_t flags;
  uint32_t_0 fflags;
  int64_t data;
  user_addr_t udata;
};

/* 8011 */
struct kqueue_workloop_params
{
  int kqwlp_version;
  int kqwlp_flags;
  uint64_t_0 kqwlp_id;
  int kqwlp_sched_pri;
  int kqwlp_sched_pol;
  int kqwlp_cpu_percent;
  int kqwlp_cpu_refillms;
};

/* 8012 */
struct kqueue_dyninfo
{
  kqueue_info kqdi_info;
  uint64_t_0 kqdi_servicer;
  uint64_t_0 kqdi_owner;
  uint32_t_0 kqdi_sync_waiters;
  uint8_t_0 kqdi_sync_waiter_qos;
  uint8_t_0 kqdi_async_qos;
  uint16_t kqdi_request_state;
  uint8_t_0 kqdi_events_qos;
  uint8_t_0 kqdi_pri;
  uint8_t_0 kqdi_pol;
  uint8_t_0 kqdi_cpupercent;
  uint8_t_0 _kqdi_reserved0[4];
  uint64_t_0 _kqdi_reserved1[4];
};

/* 8013 */
struct kqueue_info
{
  vinfo_stat kq_stat;
  uint32_t_0 kq_state;
  uint32_t_0 rfu_1;
};

/* 8014 */
struct vinfo_stat
{
  uint32_t_0 vst_dev;
  uint16_t vst_mode;
  uint16_t vst_nlink;
  uint64_t_0 vst_ino;
  uid_t vst_uid;
  gid_t vst_gid;
  int64_t vst_atime;
  int64_t vst_atimensec;
  int64_t vst_mtime;
  int64_t vst_mtimensec;
  int64_t vst_ctime;
  int64_t vst_ctimensec;
  int64_t vst_birthtime;
  int64_t vst_birthtimensec;
  off_t vst_size;
  int64_t vst_blocks;
  int32_t vst_blksize;
  uint32_t_0 vst_flags;
  uint32_t_0 vst_gen;
  uint32_t_0 vst_rdev;
  int64_t vst_qspare[2];
};

/* 8015 */
struct xsystmgen
{
  u_int32_t xg_len;
  u_int32_t xg_count;
  u_int64_t xg_gen;
  u_int64_t xg_sogen;
};

/* 8016 */
struct kqueue_args
{
  int32_t dummy;
};

/* 8017 */
struct kqueue_workloop_ctl_args
{
  user_addr_t cmd;
  uint64_t_0 options;
  user_addr_t addr;
  user_size_t sz;
  char sz_r_[];
};

/* 8018 */
struct kevent_extinfo
{
  kevent_qos_s kqext_kev;
  uint64_t_0 kqext_sdata;
  int kqext_status;
  int kqext_sfflags;
  uint64_t_0 kqext_reserved[2];
};

/* 8019 */
struct kctl_list
{
  kctl *tqh_first;
  kctl **tqh_last;
};

/* 8020 */
struct __attribute__((aligned(8))) kctl
{
  kctl::$E3A353820EE5DB6BEAFD83BAC2811479 next;
  kern_ctl_ref kctlref;
  char name[96];
  u_int32_t id;
  u_int32_t reg_unit;
  u_int32_t flags;
  u_int32_t recvbufsize;
  u_int32_t sendbufsize;
  ctl_bind_func bind;
  ctl_connect_func connect;
  ctl_disconnect_func disconnect;
  ctl_send_func send;
  ctl_send_list_func send_list;
  ctl_setopt_func setopt;
  ctl_getopt_func getopt;
  ctl_rcvd_func rcvd;
  kctl::$3FBF1EEF9BC82729E312D5117BCD3BEA kcb_head;
  u_int32_t lastunit;
};

/* 8021 */
struct kctl::$E3A353820EE5DB6BEAFD83BAC2811479
{
  kctl *tqe_next;
  kctl **tqe_prev;
};

/* 8022 */
struct kctl::$3FBF1EEF9BC82729E312D5117BCD3BEA
{
  ctl_cb *tqh_first;
  ctl_cb **tqh_last;
};

/* 8023 */
struct __attribute__((aligned(8))) ctl_cb
{
  ctl_cb::$05CA984F454A14A49D91BE4C502233D7 next;
  lck_mtx_t *mtx;
  socket *so;
  kctl *kctl;
  void *userdata;
  sockaddr_ctl sac;
  u_int32_t usecount;
};

/* 8024 */
struct ctl_cb::$05CA984F454A14A49D91BE4C502233D7
{
  ctl_cb *tqe_next;
  ctl_cb **tqe_prev;
};

/* 8025 */
struct kctlstat
{
  u_int64_t kcs_reg_total;
  u_int64_t kcs_reg_count;
  u_int64_t kcs_pcbcount;
  u_int64_t kcs_gencnt;
  u_int64_t kcs_connections;
  u_int64_t kcs_conn_fail;
  u_int64_t kcs_send_fail;
  u_int64_t kcs_send_list_fail;
  u_int64_t kcs_enqueue_fail;
  u_int64_t kcs_enqueue_fullsock;
  u_int64_t kcs_bad_kctlref;
  u_int64_t kcs_tbl_size_too_big;
  u_int64_t kcs_enqdata_mb_alloc_fail;
  u_int64_t kcs_enqdata_sbappend_fail;
};

/* 8026 */
struct xkctl_reg
{
  u_int32_t xkr_len;
  u_int32_t xkr_kind;
  u_int32_t xkr_id;
  u_int32_t xkr_reg_unit;
  u_int32_t xkr_flags;
  u_int64_t xkr_kctlref;
  u_int32_t xkr_recvbufsize;
  u_int32_t xkr_sendbufsize;
  u_int32_t xkr_lastunit;
  u_int32_t xkr_pcbcount;
  u_int64_t xkr_connect;
  u_int64_t xkr_disconnect;
  u_int64_t xkr_send;
  u_int64_t xkr_send_list;
  u_int64_t xkr_setopt;
  u_int64_t xkr_getopt;
  u_int64_t xkr_rcvd;
  char xkr_name[96];
};

/* 8027 */
struct xkctlpcb
{
  u_int32_t xkp_len;
  u_int32_t xkp_kind;
  u_int64_t xkp_kctpcb;
  u_int32_t xkp_unit;
  u_int32_t xkp_kctlid;
  u_int64_t xkp_kctlref;
  char xkp_kctlname[96];
};

/* 8028 */
struct ctl_event_data
{
  u_int32_t ctl_id;
  u_int32_t ctl_unit;
};

/* 8029 */
struct ctl_info
{
  u_int32_t ctl_id;
  char ctl_name[96];
};

/* 8030 */
struct socket_info
{
  vinfo_stat soi_stat;
  uint64_t_0 soi_so;
  uint64_t_0 soi_pcb;
  int soi_type;
  int soi_protocol;
  int soi_family;
  __int16 soi_options;
  __int16 soi_linger;
  __int16 soi_state;
  __int16 soi_qlen;
  __int16 soi_incqlen;
  __int16 soi_qlimit;
  __int16 soi_timeo;
  u_short soi_error;
  uint32_t_0 soi_oobmark;
  sockbuf_info soi_rcv;
  sockbuf_info soi_snd;
  int soi_kind;
  uint32_t_0 rfu_1;
  socket_info::$5E48DB3709E452D2612C620C10D7D237 soi_proto;
};

/* 8031 */
struct sockbuf_info
{
  uint32_t_0 sbi_cc;
  uint32_t_0 sbi_hiwat;
  uint32_t_0 sbi_mbcnt;
  uint32_t_0 sbi_mbmax;
  uint32_t_0 sbi_lowat;
  __int16 sbi_flags;
  __int16 sbi_timeo;
};

/* 8032 */
union socket_info::$5E48DB3709E452D2612C620C10D7D237
{
  in_sockinfo pri_in;
  tcp_sockinfo pri_tcp;
  un_sockinfo pri_un;
  ndrv_info pri_ndrv;
  kern_event_info pri_kern_event;
  kern_ctl_info pri_kern_ctl;
};

/* 8033 */
struct in_sockinfo
{
  int insi_fport;
  int insi_lport;
  uint64_t_0 insi_gencnt;
  uint32_t_0 insi_flags;
  uint32_t_0 insi_flow;
  uint8_t_0 insi_vflag;
  uint8_t_0 insi_ip_ttl;
  uint32_t_0 rfu_1;
  in_sockinfo::$1315A5DC9E1B03051BE012F6A3A02FAD insi_faddr;
  in_sockinfo::$1315A5DC9E1B03051BE012F6A3A02FAD insi_laddr;
  in_sockinfo::$87B2F96B2BBF5D2A8D0A82F072805A1E insi_v4;
  in_sockinfo::$567664DEF8204731C0C3D469EA5CAEA3 insi_v6;
};

/* 8034 */
union in_sockinfo::$1315A5DC9E1B03051BE012F6A3A02FAD
{
  in4in6_addr ina_46;
  in6_addr ina_6;
};

/* 8035 */
struct in4in6_addr
{
  u_int32_t i46a_pad32[3];
  in_addr i46a_addr4;
};

/* 8036 */
struct in_sockinfo::$87B2F96B2BBF5D2A8D0A82F072805A1E
{
  u_char in4_tos;
};

/* 8037 */
struct in_sockinfo::$567664DEF8204731C0C3D469EA5CAEA3
{
  uint8_t_0 in6_hlim;
  int in6_cksum;
  u_short in6_ifindex;
  __int16 in6_hops;
};

/* 8038 */
struct tcp_sockinfo
{
  in_sockinfo tcpsi_ini;
  int tcpsi_state;
  int tcpsi_timer[4];
  int tcpsi_mss;
  uint32_t_0 tcpsi_flags;
  uint32_t_0 rfu_1;
  uint64_t_0 tcpsi_tp;
};

/* 8039 */
struct __attribute__((aligned(4))) un_sockinfo
{
  uint64_t_0 unsi_conn_so;
  uint64_t_0 unsi_conn_pcb;
  un_sockinfo::$D3B3E1C8AA85C5EB39D6CB9B93525567 unsi_addr;
  un_sockinfo::$D3B3E1C8AA85C5EB39D6CB9B93525567 unsi_caddr;
};

/* 8040 */
union un_sockinfo::$D3B3E1C8AA85C5EB39D6CB9B93525567
{
  sockaddr_un ua_sun;
  char ua_dummy[255];
};

/* 8041 */
struct ndrv_info
{
  uint32_t_0 ndrvsi_if_family;
  uint32_t_0 ndrvsi_if_unit;
  char ndrvsi_if_name[16];
};

/* 8042 */
struct kern_event_info
{
  uint32_t_0 kesi_vendor_code_filter;
  uint32_t_0 kesi_class_filter;
  uint32_t_0 kesi_subclass_filter;
};

/* 8043 */
struct kern_ctl_info
{
  uint32_t_0 kcsi_id;
  uint32_t_0 kcsi_reg_unit;
  uint32_t_0 kcsi_flags;
  uint32_t_0 kcsi_recvbufsize;
  uint32_t_0 kcsi_sendbufsize;
  uint32_t_0 kcsi_unit;
  char kcsi_name[96];
};

/* 8044 */
struct execsw
{
  int (*ex_imgact)(image_params *);
  const char *ex_name;
};

/* 8045 */
struct image_params
{
  user_addr_t ip_user_fname;
  user_addr_t ip_user_argv;
  user_addr_t ip_user_envv;
  int ip_seg;
  vnode *ip_vp;
  vnode_attr *ip_vattr;
  vnode_attr *ip_origvattr;
  cpu_type_t ip_origcputype;
  cpu_subtype_t ip_origcpusubtype;
  char *ip_vdata;
  int ip_flags;
  int ip_argc;
  int ip_envc;
  int ip_applec;
  char *ip_startargv;
  char *ip_endargv;
  char *ip_endenvv;
  char *ip_strings;
  char *ip_strendp;
  int ip_argspace;
  int ip_strspace;
  user_size_t ip_arch_offset;
  user_size_t ip_arch_size;
  char ip_interp_buffer[512];
  int ip_interp_sugid_fd;
  vfs_context *ip_vfs_context;
  nameidata *ip_ndp;
  thread_t ip_new_thread;
  label *ip_execlabelp;
  label *ip_scriptlabelp;
  vnode *ip_scriptvp;
  unsigned int ip_csflags;
  int ip_mac_return;
  void *ip_px_sa;
  void *ip_px_sfa;
  void *ip_px_spa;
  void *ip_px_smpx;
  void *ip_px_persona;
  void *ip_cs_error;
  uint64_t_0 ip_dyld_fsid;
  uint64_t_0 ip_dyld_fsobjid;
};

/* 8046 */
enum pspa_t : __int32
{
  PSPA_SPECIAL = 0x0,
  PSPA_EXCEPTION = 0x1,
  PSPA_AU_SESSION = 0x2,
  PSPA_IMP_WATCHPORTS = 0x3,
};

/* 8047 */
enum psfa_t : __int32
{
  PSFA_OPEN = 0x0,
  PSFA_CLOSE = 0x1,
  PSFA_DUP2 = 0x2,
  PSFA_INHERIT = 0x3,
};

/* 8048 */
typedef _posix_spawn_file_actions *_posix_spawn_file_actions_t;

/* 8049 */
struct _posix_spawn_file_actions
{
  int psfa_act_alloc;
  int psfa_act_count;
  _psfa_action_t psfa_act_acts[];
};

/* 8050 */
typedef _psfa_action _psfa_action_t;

/* 8051 */
struct _psfa_action
{
  psfa_t psfaa_type;
  int psfaa_filedes;
  _psfaa_open psfaa_openargs;
};

/* 8052 */
struct __attribute__((aligned(4))) _psfaa_open
{
  int psfao_oflag;
  mode_t psfao_mode;
  char psfao_path[1024];
};

/* 8053 */
typedef _posix_spawn_port_actions *_posix_spawn_port_actions_t;

/* 8054 */
struct _posix_spawn_port_actions
{
  int pspa_alloc;
  int pspa_count;
  _ps_port_action_t pspa_actions[];
};

/* 8055 */
typedef _ps_port_action _ps_port_action_t;

/* 8056 */
struct _ps_port_action
{
  pspa_t port_type;
  exception_mask_t mask;
  mach_port_name_t new_port;
  exception_behavior_t behavior;
  thread_state_flavor_t flavor;
  int which;
};

/* 8057 */
typedef _posix_spawn_mac_policy_extensions *_posix_spawn_mac_policy_extensions_t;

/* 8058 */
struct _posix_spawn_mac_policy_extensions
{
  int psmx_alloc;
  int psmx_count;
  _ps_mac_policy_extension_t psmx_extensions[];
};

/* 8059 */
typedef _ps_mac_policy_extension _ps_mac_policy_extension_t;

/* 8060 */
struct _ps_mac_policy_extension
{
  char policyname[128];
  _ps_mac_policy_extension::$500C09E7AE01ECD1E74D5000BED3FC19 _anon_0;
  uint64_t_0 datalen;
};

/* 8061 */
union _ps_mac_policy_extension::$500C09E7AE01ECD1E74D5000BED3FC19
{
  uint64_t_0 data;
  void *datap;
};

/* 8062 */
struct _posix_spawnattr
{
  __int16 psa_flags;
  __int16 flags_padding;
  sigset_t psa_sigdefault;
  sigset_t psa_sigmask;
  pid_t psa_pgroup;
  cpu_type_t psa_binprefs[4];
  int psa_pcontrol;
  int psa_apptype;
  uint64_t_0 psa_cpumonitor_percent;
  uint64_t_0 psa_cpumonitor_interval;
  uint64_t_0 psa_reserved;
  __int16 psa_jetsam_flags;
  __int16 short_padding;
  int psa_priority;
  int psa_memlimit_active;
  int psa_memlimit_inactive;
  uint64_t_0 psa_qos_clamp;
  uint64_t_0 psa_darwin_role;
  int psa_thread_limit;
  uint64_t_0 psa_max_addr;
  _posix_spawn_port_actions_t psa_ports;
  _posix_spawn_mac_policy_extensions_t psa_mac_extensions;
  _posix_spawn_coalition_info *psa_coalition_info;
  _posix_spawn_persona_info *psa_persona_info;
};

/* 8063 */
struct _posix_spawn_coalition_info
{
  _posix_spawn_coalition_info::$DF911AAEB109DDDBBEAA14237EC92C1B psci_info[2];
};

/* 8064 */
struct _posix_spawn_coalition_info::$DF911AAEB109DDDBBEAA14237EC92C1B
{
  uint64_t_0 psci_id;
  uint32_t_0 psci_role;
  uint32_t_0 psci_reserved1;
  uint64_t_0 psci_reserved2;
};

/* 8065 */
struct _posix_spawn_persona_info
{
  uid_t pspi_id;
  uint32_t_0 pspi_flags;
  uid_t pspi_uid;
  gid_t pspi_gid;
  uint32_t_0 pspi_ngroups;
  gid_t pspi_groups[16];
  uid_t pspi_gmuid;
};

/* 8066 */
struct fat_header
{
  uint32_t_0 magic;
  uint32_t_0 nfat_arch;
};

/* 8067 */
typedef _load_result load_result_t;

/* 8068 */
struct _load_result
{
  user_addr_t mach_header;
  user_addr_t entry_point;
  user_addr_t user_stack;
  mach_vm_size_t user_stack_size;
  user_addr_t user_stack_alloc;
  mach_vm_size_t user_stack_alloc_size;
  mach_vm_address_t all_image_info_addr;
  mach_vm_size_t all_image_info_size;
  int thread_count;
  unsigned __int32 unixproc : 1;
  unsigned __int32 needs_dynlinker : 1;
  unsigned __int32 dynlinker : 1;
  unsigned __int32 validentry : 1;
  unsigned __int32 has_pagezero : 1;
  unsigned __int32 using_lcmain : 1;
  unsigned __int32 is_64bit_addr : 1;
  unsigned __int32 is_64bit_data : 1;
  unsigned int csflags;
  unsigned __int8 uuid[16];
  mach_vm_address_t min_vm_addr;
  mach_vm_address_t max_vm_addr;
  unsigned int platform_binary;
  off_t cs_end_offset;
  void *threadstate;
  size_t_0 threadstate_sz;
};

/* 8069 */
struct __attribute__((aligned(8))) $<15057515,1>::copyout_desc
{
  char *start_string;
  int count;
  user_addr_t *dtrace_cookie;
  boolean_t null_term;
};

/* 8070 */
union $<15057877,1>::$E91CB0426B6D2DEB71BABB301A13C29F
{
  user64_dyld_all_image_infos infos64;
  user32_dyld_all_image_infos infos32;
};

/* 8071 */
struct user__posix_spawn_args_desc
{
  user_size_t attr_size;
  user_addr_t attrp;
  user_size_t file_actions_size;
  user_addr_t file_actions;
  user_size_t port_actions_size;
  user_addr_t port_actions;
  user_size_t mac_extensions_size;
  user_addr_t mac_extensions;
  user_size_t coal_info_size;
  user_addr_t coal_info;
  user_size_t persona_info_size;
  user_addr_t persona_info;
};

/* 8072 */
struct execve_args
{
  user_addr_t fname;
  user_addr_t argp;
  user_addr_t envp;
  char envp_r_[];
};

/* 8073 */
struct __mac_execve_args
{
  user_addr_t fname;
  user_addr_t argp;
  user_addr_t envp;
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 8074 */
struct fat_arch
{
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
  uint32_t_0 offset;
  uint32_t_0 size;
  uint32_t_0 align;
};

/* 8075 */
struct posix_spawn_args
{
  user_addr_t pid;
  user_addr_t path;
  user_addr_t adesc;
  user_addr_t argv;
  user_addr_t envp;
  char envp_r_[];
};

/* 8076 */
struct setpgid_args
{
  int pid;
  char pid_r_[4];
  int pgid;
  char pgid_r_[4];
};

/* 8077 */
struct __kern_sigaction
{
  __kern_sigaction_u __sigaction_u;
  user_addr_t sa_tramp;
  sigset_t sa_mask;
  int sa_flags;
};

/* 8078 */
union __kern_sigaction_u
{
  user_addr_t __sa_handler;
  user_addr_t __sa_sigaction;
};

/* 8079 */
struct user32__posix_spawn_args_desc
{
  uint32_t_0 attr_size;
  uint32_t_0 attrp;
  uint32_t_0 file_actions_size;
  uint32_t_0 file_actions;
  uint32_t_0 port_actions_size;
  uint32_t_0 port_actions;
  uint32_t_0 mac_extensions_size;
  uint32_t_0 mac_extensions;
  uint32_t_0 coal_info_size;
  uint32_t_0 coal_info;
  uint32_t_0 persona_info_size;
  uint32_t_0 persona_info;
};

/* 8080 */
typedef kcdata_iter kcdata_iter_t;

/* 8081 */
struct kcdata_iter
{
  kcdata_item_t item;
  void *end;
};

/* 8082 */
typedef kcdata_item *kcdata_item_t;

/* 8083 */
struct uthread_1
{
  u_int64_t uu_arg[8];
  int uu_rval[2];
  char uu_cursig;
  unsigned int syscall_code;
  int uu_exception;
  mach_exception_code_t uu_code;
  mach_exception_subcode_t uu_subcode;
  uthread_1::$50367DB53BDFBC6199F4EECF93865EAB uu_save;
  _select uu_select;
  int (*uu_continuation)(int);
  int uu_pri;
  int uu_timo;
  caddr_t uu_wchan;
  const char *uu_wmesg;
  proc_2 *uu_proc;
  thread_t uu_thread;
  void *uu_userstate;
  waitq_set *uu_wqset;
  size_t uu_wqstate_sz;
  int uu_flag;
  sigset_t uu_siglist;
  sigset_t uu_sigwait;
  sigset_t uu_sigmask;
  sigset_t uu_oldmask;
  sigset_t uu_vforkmask;
  vfs_context uu_context;
  uthread_1::$F2CEEFC0A7E4032E64E93EE7514027BD uu_list;
  kaudit_record *uu_ar;
  task *uu_aio_task;
  lck_mtx_t *uu_mtx;
  lck_spin_t uu_rethrottle_lock;
  uthread_1::$F2CEEFC0A7E4032E64E93EE7514027BD uu_throttlelist;
  void *uu_throttle_info;
  int uu_on_throttlelist;
  int uu_lowpri_window;
  unsigned __int32 uu_was_rethrottled : 1;
  unsigned __int32 uu_is_throttled : 1;
  unsigned __int32 uu_throttle_bc : 1;
  unsigned __int32 uu_throttle_unused : 29;
  u_int32_t uu_network_marks;
  kern_sigaltstack uu_sigstk;
  vnode_t uu_vreclaims;
  vnode_t uu_cdir;
  int uu_dupfd;
  int uu_defer_reclaims;
  kqrequest *uu_kqr_bound;
  uthread_1::$F2CEEFC0A7E4032E64E93EE7514027BD uu_workq_entry;
  mach_vm_offset_t uu_workq_stackaddr;
  mach_port_name_t uu_workq_thport;
  uu_workq_policy uu_workq_pri;
  uint8_t_0 uu_workq_flags;
  kq_index_t uu_kqueue_override;
  int uu_proc_refcount;
  uint32_t_0 t_dtrace_errno;
  siginfo_t t_dtrace_siginfo;
  uint64_t_0 t_dtrace_resumepid;
  uint8_t_0 t_dtrace_stop;
  uint8_t_0 t_dtrace_sig;
  __tdu _tdu;
  user_addr_t t_dtrace_pc;
  user_addr_t t_dtrace_npc;
  user_addr_t t_dtrace_scrpc;
  user_addr_t t_dtrace_astpc;
  dtrace_ptss_page_entry *t_dtrace_scratch;
  uint64_t_0 t_dtrace_regv;
  void *t_dtrace_syscall_args;
  char *pth_name;
  doc_tombstone *t_tombstone;
  os_reason_0 *uu_exit_reason;
};

/* 8084 */
union uthread_1::$50367DB53BDFBC6199F4EECF93865EAB
{
  _select_data uus_select_data;
  _kqueue_scan uus_kqueue_scan;
  _kevent uus_kevent;
  _kevent_register uus_kevent_register;
  _kauth uus_kauth;
  ksyn_waitq_element uus_kwe;
  _waitid_data uus_waitid_data;
  _wait4_data uus_wait4_data;
  _workq_park_data uus_workq_park_data;
  _ulock_wait_data uus_ulock_wait_data;
};

/* 8085 */
struct proc_2
{
  proc_2::$F7CD29EFCB06A8204041C5EFBF66ECFA p_list;
  void *task;
  proc_2 *p_pptr;
  pid_t p_ppid;
  pid_t p_pgrpid;
  uid_t p_uid;
  gid_t p_gid;
  uid_t p_ruid;
  gid_t p_rgid;
  uid_t p_svuid;
  gid_t p_svgid;
  uint64_t_0 p_uniqueid;
  uint64_t_0 p_puniqueid;
  lck_mtx_t p_mlock;
  pid_t p_pid;
  char p_stat;
  char p_shutdownstate;
  char p_kdebug;
  char p_btrace;
  proc_2::$F7CD29EFCB06A8204041C5EFBF66ECFA p_pglist;
  proc_2::$F7CD29EFCB06A8204041C5EFBF66ECFA p_sibling;
  proc_2::$E2D94DCE889557F41061F387519E1F61 p_children;
  proc_2::$EE87A6540750EE6565D4C3DC2C35BEBF p_uthlist;
  proc_2::$F7CD29EFCB06A8204041C5EFBF66ECFA p_hash;
  proc::$1D3E450C18944DBC95A59288B453C62E p_evlist;
  lck_mtx_t p_fdmlock;
  lck_mtx_t p_ucred_mlock;
  kauth_cred_t p_ucred;
  filedesc *p_fd;
  pstats *p_stats;
  plimit *p_limit;
  sigacts *p_sigacts;
  lck_spin_t p_slock;
  plimit *p_olimit;
  int p_siglist;
  unsigned int p_flag;
  unsigned int p_lflag;
  unsigned int p_listflag;
  unsigned int p_ladvflag;
  int p_refcount;
  int p_childrencnt;
  int p_parentref;
  pid_t p_oppid;
  u_int p_xstat;
  itimerval p_realtimer;
  timeval p_rtime;
  itimerval p_vtimer_user;
  itimerval p_vtimer_prof;
  timeval p_rlim_cpu;
  int p_debugger;
  boolean_t sigwait;
  void *sigwait_thread;
  void *exit_thread;
  void *p_vforkact;
  int p_vforkcnt;
  int p_fpdrainwait;
  pid_t si_pid;
  u_int si_status;
  u_int si_code;
  uid_t si_uid;
  void *vm_shm;
  user_addr_t p_dtrace_argv;
  user_addr_t p_dtrace_envp;
  lck_mtx_t p_dtrace_sprlock;
  uint8_t_0 p_dtrace_stop;
  int p_dtrace_probes;
  u_int p_dtrace_count;
  dtrace_ptss_page *p_dtrace_ptss_pages;
  dtrace_ptss_page_entry *p_dtrace_ptss_free_list;
  dtrace_helpers *p_dtrace_helpers;
  dof_ioctl_data *p_dtrace_lazy_dofs;
  u_int p_argslen;
  int p_argc;
  user_addr_t user_stack;
  vnode *p_textvp;
  off_t p_textoff;
  sigset_t p_sigmask;
  sigset_t p_sigignore;
  sigset_t p_sigcatch;
  u_char p_priority;
  u_char p_resv0;
  char p_nice;
  u_char p_resv1;
  command_t p_comm;
  proc_name_t p_name;
  uint8_t_0 p_xhighbits;
  pid_t p_contproc;
  pgrp *p_pgrp;
  uint32_t_0 p_csflags;
  uint32_t_0 p_pcaction;
  uint8_t_0 p_uuid[16];
  cpu_type_t p_cputype;
  cpu_subtype_t p_cpusubtype;
  int p_aio_total_count;
  int p_aio_active_count;
  proc_2::$362CBD09F9E28B04D136306D2489B7C4 p_aio_activeq;
  proc_2::$362CBD09F9E28B04D136306D2489B7C4 p_aio_doneq;
  klist p_klist;
  rusage_superset *p_ru;
  thread_t p_signalholder;
  thread_t p_transholder;
  int p_sigwaitcnt;
  u_short p_acflag;
  volatile u_short p_vfs_iopolicy;
  user_addr_t p_threadstart;
  user_addr_t p_wqthread;
  int p_pthsize;
  uint32_t_0 p_pth_tsd_offset;
  user_addr_t p_stack_addr_hint;
  workqueue *p_wqptr;
  timeval p_start;
  void *p_rcall;
  int p_ractive;
  int p_idversion;
  void *p_pthhash;
  volatile uint64_t_0 was_throttled;
  volatile uint64_t_0 did_throttle;
  uint64_t_0 p_dispatchqueue_offset;
  uint64_t_0 p_dispatchqueue_serialno_offset;
  uint64_t_0 p_return_to_kernel_offset;
  uint64_t_0 p_mach_thread_self_offset;
  timeval vm_pressure_last_notify_tstamp;
  proc_2::$1EF3E85FBAB8E9D742F71CE3FAD95C87 p_memstat_list;
  uint32_t_0 p_memstat_state;
  int32_t p_memstat_effectivepriority;
  int32_t p_memstat_requestedpriority;
  uint32_t_0 p_memstat_dirty;
  uint64_t_0 p_memstat_userdata;
  uint64_t_0 p_memstat_idledeadline;
  uint64_t_0 p_memstat_idle_start;
  uint64_t_0 p_memstat_idle_delta;
  int32_t p_memstat_memlimit;
  int32_t p_memstat_memlimit_active;
  int32_t p_memstat_memlimit_inactive;
  pid_t p_responsible_pid;
  uint32_t_0 p_user_faults;
  os_reason_0 *p_exit_reason;
  uint64_t_0 p_user_data;
};

/* 8086 */
struct proc_2::$F7CD29EFCB06A8204041C5EFBF66ECFA
{
  proc_2 *le_next;
  proc_2 **le_prev;
};

/* 8087 */
struct proc_2::$E2D94DCE889557F41061F387519E1F61
{
  proc_2 *lh_first;
};

/* 8088 */
struct proc_2::$EE87A6540750EE6565D4C3DC2C35BEBF
{
  uthread_1 *tqh_first;
  uthread_1 **tqh_last;
};

/* 8089 */
struct proc_2::$362CBD09F9E28B04D136306D2489B7C4
{
  aio_workq_entry *tqh_first;
  aio_workq_entry **tqh_last;
};

/* 8090 */
struct proc_2::$1EF3E85FBAB8E9D742F71CE3FAD95C87
{
  proc_2 *tqe_next;
  proc_2 **tqe_prev;
};

/* 8091 */
struct uthread_1::$F2CEEFC0A7E4032E64E93EE7514027BD
{
  uthread_1 *tqe_next;
  uthread_1 **tqe_prev;
};

/* 8092 */
typedef proc_2 *proc_t_1;

/* 8093 */
struct user32_rusage
{
  user32_timeval ru_utime;
  user32_timeval ru_stime;
  user32_long_t ru_maxrss;
  user32_long_t ru_ixrss;
  user32_long_t ru_idrss;
  user32_long_t ru_isrss;
  user32_long_t ru_minflt;
  user32_long_t ru_majflt;
  user32_long_t ru_nswap;
  user32_long_t ru_inblock;
  user32_long_t ru_oublock;
  user32_long_t ru_msgsnd;
  user32_long_t ru_msgrcv;
  user32_long_t ru_nsignals;
  user32_long_t ru_nvcsw;
  user32_long_t ru_nivcsw;
};

/* 8094 */
struct user64_rusage
{
  user64_timeval ru_utime;
  user64_timeval ru_stime;
  user64_long_t ru_maxrss;
  user64_long_t ru_ixrss;
  user64_long_t ru_idrss;
  user64_long_t ru_isrss;
  user64_long_t ru_minflt;
  user64_long_t ru_majflt;
  user64_long_t ru_nswap;
  user64_long_t ru_inblock;
  user64_long_t ru_oublock;
  user64_long_t ru_msgsnd;
  user64_long_t ru_msgrcv;
  user64_long_t ru_nsignals;
  user64_long_t ru_nvcsw;
  user64_long_t ru_nivcsw;
};

/* 8095 */
typedef user_siginfo user_siginfo_t;

/* 8096 */
struct user_siginfo
{
  int si_signo;
  int si_errno;
  int si_code;
  pid_t si_pid;
  uid_t si_uid;
  int si_status;
  user_addr_t si_addr;
  user_sigval si_value;
  user_long_t si_band;
  user_ulong_t pad[7];
};

/* 8097 */
typedef user64_siginfo user64_siginfo_t;

/* 8098 */
struct user64_siginfo
{
  int si_signo;
  int si_errno;
  int si_code;
  pid_t si_pid;
  uid_t si_uid;
  int si_status;
  user64_addr_t si_addr;
  user64_sigval si_value;
  user64_long_t si_band;
  user64_ulong_t __pad[7];
};

/* 8099 */
typedef user32_siginfo user32_siginfo_t;

/* 8100 */
struct user32_siginfo
{
  int si_signo;
  int si_errno;
  int si_code;
  pid_t si_pid;
  uid_t si_uid;
  int si_status;
  user32_addr_t si_addr;
  user32_sigval si_value;
  user32_long_t si_band;
  user32_ulong_t __pad[7];
};

/* 8101 */
struct proc_uniqidentifierinfo
{
  uint8_t_0 p_uuid[16];
  uint64_t_0 p_uniqueid;
  uint64_t_0 p_puniqueid;
  uint64_t_0 p_reserve2;
  uint64_t_0 p_reserve3;
  uint64_t_0 p_reserve4;
};

/* 8102 */
struct __attribute__((packed)) __attribute__((aligned(4))) exit_reason_snapshot
{
  uint32_t_0 ers_namespace;
  uint64_t_0 ers_code;
  uint64_t_0 ers_flags;
};

/* 8103 */
struct abort_with_payload_args
{
  uint32_t_0 reason_namespace;
  char reason_namespace_r_[4];
  uint64_t_0 reason_code;
  user_addr_t payload;
  uint32_t_0 payload_size;
  char payload_size_r_[4];
  user_addr_t reason_string;
  uint64_t_0 reason_flags;
  char reason_flags_r_[];
};

/* 8104 */
struct os_fault_with_payload_args
{
  uint32_t_0 reason_namespace;
  char reason_namespace_r_[4];
  uint64_t_0 reason_code;
  user_addr_t payload;
  uint32_t_0 payload_size;
  char payload_size_r_[4];
  user_addr_t reason_string;
  uint64_t_0 reason_flags;
  char reason_flags_r_[];
};

/* 8105 */
struct exit_args
{
  int rval;
  char rval_r_[4];
};

/* 8106 */
typedef uthread_1 *uthread_t_1;

/* 8107 */
struct wait4_args
{
  int pid;
  char pid_r_[4];
  user_addr_t status;
  int options;
  char options_r_[4];
  user_addr_t rusage;
  char rusage_r_[];
};

/* 8108 */
struct waitid_args
{
  idtype_t idtype;
  char idtype_r_[4];
  id_t id;
  char id_r_[4];
  user_addr_t infop;
  int options;
  char options_r_[4];
};

/* 8109 */
enum ktrace_state : __int32
{
  KTRACE_STATE_OFF = 0x0,
  KTRACE_STATE_FG = 0x1,
  KTRACE_STATE_BG = 0x2,
};

/* 8110 */
typedef proc_1 *proc_t_2;

/* 8111 */
enum overlap_t : __int32
{
  OVERLAP_NONE = 0x0,
  OVERLAP_EQUALS_LOCK = 0x1,
  OVERLAP_CONTAINS_LOCK = 0x2,
  OVERLAP_CONTAINED_BY_LOCK = 0x3,
  OVERLAP_STARTS_BEFORE_LOCK = 0x4,
  OVERLAP_ENDS_AFTER_LOCK = 0x5,
};

/* 8112 */
struct vfork_args
{
  int32_t dummy;
};

/* 8113 */
struct fork_args
{
  int32_t dummy;
};

/* 8114 */
struct __attribute__((aligned(8))) kmzones
{
  size_t_0 kz_elemsize;
  void *kz_zalloczone;
  boolean_t kz_noencrypt;
};

/* 8115 */
struct msync_nocancel_args
{
  user_addr_t addr;
  user_size_t len;
  int flags;
  char flags_r_[4];
};

/* 8116 */
struct msync_args
{
  user_addr_t addr;
  user_size_t len;
  int flags;
  char flags_r_[4];
};

/* 8117 */
struct munmap_args
{
  user_addr_t addr;
  user_size_t len;
  char len_r_[];
};

/* 8118 */
struct mprotect_args
{
  user_addr_t addr;
  user_size_t len;
  int prot;
  char prot_r_[4];
};

/* 8119 */
struct minherit_args
{
  user_addr_t addr;
  user_size_t len;
  int inherit;
  char inherit_r_[4];
};

/* 8120 */
struct madvise_args
{
  user_addr_t addr;
  user_size_t len;
  int behav;
  char behav_r_[4];
};

/* 8121 */
struct mincore_args
{
  user_addr_t addr;
  user_size_t len;
  user_addr_t vec;
  char vec_r_[];
};

/* 8122 */
struct mlock_args
{
  user_addr_t addr;
  user_size_t len;
  char len_r_[];
};

/* 8123 */
struct munlock_args
{
  user_addr_t addr;
  user_size_t len;
  char len_r_[];
};

/* 8124 */
struct mlockall_args
{
  int how;
  char how_r_[4];
};

/* 8125 */
struct munlockall_args
{
  int how;
  char how_r_[4];
};

/* 8126 */
typedef pager_crypt_info pager_crypt_info_t;

/* 8127 */
typedef crypt_file_data crypt_file_data_t;

/* 8128 */
struct crypt_file_data
{
  char *filename;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
};

/* 8129 */
struct persona
{
  os_refcnt_t pna_refcount;
  int32_t pna_valid;
  uid_t pna_id;
  int pna_type;
  char pna_login[256];
  kauth_cred_t pna_cred;
  uid_t pna_pgid;
  int pna_cred_locked;
  persona::$3E7CA51900C3A1FE4E90F731A680CD02 pna_list;
  persona::$1883103594F6EC6683B4E2448DAE2E8F pna_members;
  lck_mtx_t pna_lock;
};

/* 8130 */
struct persona::$3E7CA51900C3A1FE4E90F731A680CD02
{
  persona *le_next;
  persona **le_prev;
};

/* 8131 */
struct persona::$1883103594F6EC6683B4E2448DAE2E8F
{
  proc *lh_first;
};

/* 8132 */
struct uihashhead
{
  uidinfo *lh_first;
};

/* 8133 */
struct uidinfo
{
  uidinfo::$E84F66D121C96EB035EF87AAA994F9F4 ui_hash;
  uid_t ui_uid;
  __int64 ui_proccnt;
};

/* 8134 */
struct uidinfo::$E84F66D121C96EB035EF87AAA994F9F4
{
  uidinfo *le_next;
  uidinfo **le_prev;
};

/* 8135 */
struct pidhashhead
{
  proc *lh_first;
};

/* 8136 */
struct pgrphashhead
{
  pgrp *lh_first;
};

/* 8137 */
struct sesshashhead
{
  session *lh_first;
};

/* 8138 */
struct proclist
{
  proc *lh_first;
};

/* 8139 */
struct __attribute__((aligned(8))) fixjob_iterargs
{
  pgrp *pg;
  session *mysession;
  int entering;
};

/* 8140 */
struct no_paging_space
{
  uint64_t_0 pcs_max_size;
  uint64_t_0 pcs_uniqueid;
  int pcs_pid;
  int pcs_proc_count;
  uint64_t_0 pcs_total_size;
  uint64_t_0 npcs_max_size;
  uint64_t_0 npcs_uniqueid;
  int npcs_pid;
  int npcs_proc_count;
  uint64_t_0 npcs_total_size;
  int apcs_proc_count;
  uint64_t_0 apcs_total_size;
};

/* 8141 */
typedef int (*proc_iterate_fn_t)(proc_t, void *);

/* 8142 */
struct csops_args
{
  pid_t pid;
  char pid_r_[4];
  uint32_t_0 ops;
  char ops_r_[4];
  user_addr_t useraddr;
  user_size_t usersize;
  char usersize_r_[];
};

/* 8143 */
struct proc_trace_log_args
{
  pid_t pid;
  char pid_r_[4];
  uint64_t_0 uniqueid;
  char uniqueid_r_[];
};

/* 8144 */
struct setprivexec_args
{
  int flag;
  char flag_r_[4];
};

/* 8145 */
struct getpid_args
{
  int32_t dummy;
};

/* 8146 */
struct getppid_args
{
  int32_t dummy;
};

/* 8147 */
struct getpgrp_args
{
  int32_t dummy;
};

/* 8148 */
struct getpgid_args
{
  pid_t pid;
  char pid_r_[4];
};

/* 8149 */
struct getsid_args
{
  pid_t pid;
  char pid_r_[4];
};

/* 8150 */
struct getuid_args
{
  int32_t dummy;
};

/* 8151 */
struct geteuid_args
{
  int32_t dummy;
};

/* 8152 */
struct gettid_args
{
  user_addr_t uidp;
  user_addr_t gidp;
  char gidp_r_[];
};

/* 8153 */
struct getgid_args
{
  int32_t dummy;
};

/* 8154 */
struct getegid_args
{
  int32_t dummy;
};

/* 8155 */
struct getgroups_args
{
  u_int gidsetsize;
  char gidsetsize_r_[4];
  user_addr_t gidset;
  char gidset_r_[];
};

/* 8156 */
struct getsgroups_args
{
  user_addr_t setlen;
  user_addr_t guidset;
  char guidset_r_[];
};

/* 8157 */
struct getwgroups_args
{
  user_addr_t setlen;
  user_addr_t guidset;
  char guidset_r_[];
};

/* 8158 */
struct setsid_args
{
  int32_t dummy;
};

/* 8159 */
struct issetugid_args
{
  int32_t dummy;
};

/* 8160 */
struct setuid_args
{
  uid_t uid;
  char uid_r_[4];
};

/* 8161 */
struct seteuid_args
{
  uid_t euid;
  char euid_r_[4];
};

/* 8162 */
struct setreuid_args
{
  uid_t ruid;
  char ruid_r_[4];
  uid_t euid;
  char euid_r_[4];
};

/* 8163 */
struct setgid_args
{
  gid_t gid;
  char gid_r_[4];
};

/* 8164 */
struct setegid_args
{
  gid_t egid;
  char egid_r_[4];
};

/* 8165 */
struct setregid_args
{
  gid_t rgid;
  char rgid_r_[4];
  gid_t egid;
  char egid_r_[4];
};

/* 8166 */
struct settid_with_pid_args
{
  pid_t pid;
  char pid_r_[4];
  int assume;
  char assume_r_[4];
};

/* 8167 */
struct setgroups_args
{
  u_int gidsetsize;
  char gidsetsize_r_[4];
  user_addr_t gidset;
  char gidset_r_[];
};

/* 8168 */
struct setsgroups_args
{
  int setlen;
  char setlen_r_[4];
  user_addr_t guidset;
  char guidset_r_[];
};

/* 8169 */
struct setwgroups_args
{
  int setlen;
  char setlen_r_[4];
  user_addr_t guidset;
  char guidset_r_[];
};

/* 8170 */
struct getlogin_args
{
  user_addr_t namebuf;
  u_int namelen;
  char namelen_r_[4];
};

/* 8171 */
struct setlogin_args
{
  user_addr_t namebuf;
  char namebuf_r_[];
};

/* 8172 */
struct ppgrp_nice_args
{
  proc_t curp;
  int prio;
  int *foundp;
  int *errorp;
};

/* 8173 */
struct puser_nice_args
{
  proc_t curp;
  int prio;
  id_t who;
  int *foundp;
  int *errorp;
};

/* 8174 */
struct _iopol_param_t
{
  int iop_scope;
  int iop_iotype;
  int iop_policy;
};

/* 8175 */
struct getpriority_args
{
  int which;
  char which_r_[4];
  id_t who;
  char who_r_[4];
};

/* 8176 */
struct setrlimit_args
{
  u_int which;
  char which_r_[4];
  user_addr_t rlp;
  char rlp_r_[];
};

/* 8177 */
struct getrlimit_args
{
  u_int which;
  char which_r_[4];
  user_addr_t rlp;
  char rlp_r_[];
};

/* 8178 */
typedef mach_task_basic_info mach_task_basic_info_data_t;

/* 8179 */
typedef task_thread_times_info task_thread_times_info_data_t;

/* 8180 */
typedef task_events_info task_events_info_data_t;

/* 8181 */
struct getrusage_args
{
  int who;
  char who_r_[4];
  user_addr_t rusage;
  char rusage_r_[];
};

/* 8182 */
struct iopolicysys_args
{
  int cmd;
  char cmd_r_[4];
  user_addr_t arg;
  char arg_r_[];
};

/* 8183 */
struct proc_rlimit_control_args
{
  pid_t pid;
  char pid_r_[4];
  int flavor;
  char flavor_r_[4];
  user_addr_t arg;
  char arg_r_[];
};

/* 8184 */
struct proc_rlimit_control_wakeupmon
{
  uint32_t_0 wm_flags;
  int32_t wm_rate;
};

/* 8185 */
struct thread_selfusage_args
{
  int32_t dummy;
};

/* 8186 */
struct sd_iterargs
{
  int signo;
  int setsdstate;
  int countproc;
  int activecount;
};

/* 8187 */
struct sd_filterargs
{
  int delayterm;
  int shutdownstate;
};

/* 8188 */
struct sigsuspend_nocancel_args
{
  sigset_t mask;
  char mask_r_[4];
};

/* 8189 */
struct __old_semwait_signal_nocancel_args
{
  int cond_sem;
  char cond_sem_r_[4];
  int mutex_sem;
  char mutex_sem_r_[4];
  int timeout;
  char timeout_r_[4];
  int relative;
  char relative_r_[4];
  user_addr_t ts;
  char ts_r_[];
};

/* 8190 */
struct __sigwait_nocancel_args
{
  user_addr_t set;
  user_addr_t sig;
  char sig_r_[];
};

/* 8191 */
struct killpg1_iterargs
{
  proc_t curproc;
  kauth_cred_t uc;
  int signum;
  int nfound;
};

/* 8192 */
struct killpg1_filtargs
{
  _Bool posix;
  proc_t curproc;
};

/* 8193 */
struct __user32_sigaction
{
  __user32_sigaction_u __sigaction_u;
  user32_addr_t sa_tramp;
  sigset_t sa_mask;
  int sa_flags;
};

/* 8194 */
union __user32_sigaction_u
{
  user32_addr_t __sa_handler;
  user32_addr_t __sa_sigaction;
};

/* 8195 */
struct __user64_sigaction
{
  __user64_sigaction_u __sigaction_u;
  user64_addr_t sa_tramp;
  sigset_t sa_mask;
  int sa_flags;
};

/* 8196 */
union __user64_sigaction_u
{
  user64_addr_t __sa_handler;
  user64_addr_t __sa_sigaction;
};

/* 8197 */
struct kern_sigaction
{
  __kern_sigaction_u __sigaction_u;
  sigset_t sa_mask;
  int sa_flags;
};

/* 8198 */
struct user32_sigaction
{
  __user32_sigaction_u __sigaction_u;
  sigset_t sa_mask;
  int sa_flags;
};

/* 8199 */
struct user64_sigaction
{
  __user64_sigaction_u __sigaction_u;
  sigset_t sa_mask;
  int sa_flags;
};

/* 8200 */
struct user32_sigaltstack
{
  user32_addr_t ss_sp;
  user32_size_t ss_size;
  int ss_flags;
};

/* 8201 */
struct __attribute__((aligned(8))) user64_sigaltstack
{
  user64_addr_t ss_sp;
  user64_size_t ss_size;
  int ss_flags;
};

/* 8202 */
struct sigaction_args
{
  int signum;
  char signum_r_[4];
  user_addr_t nsa;
  user_addr_t osa;
  char osa_r_[];
};

/* 8203 */
struct sigprocmask_args
{
  int how;
  char how_r_[4];
  user_addr_t mask;
  user_addr_t omask;
  char omask_r_[];
};

/* 8204 */
struct sigpending_args
{
  user_addr_t osv;
  char osv_r_[];
};

/* 8205 */
struct sigsuspend_args
{
  sigset_t mask;
  char mask_r_[4];
};

/* 8206 */
struct __disable_threadsignal_args
{
  int value;
  char value_r_[4];
};

/* 8207 */
struct __pthread_markcancel_args
{
  int thread_port;
  char thread_port_r_[4];
};

/* 8208 */
struct __pthread_canceled_args
{
  int action;
  char action_r_[4];
};

/* 8209 */
struct __old_semwait_signal_args
{
  int cond_sem;
  char cond_sem_r_[4];
  int mutex_sem;
  char mutex_sem_r_[4];
  int timeout;
  char timeout_r_[4];
  int relative;
  char relative_r_[4];
  user_addr_t ts;
  char ts_r_[];
};

/* 8210 */
struct __pthread_kill_args
{
  int thread_port;
  char thread_port_r_[4];
  int sig;
  char sig_r_[4];
};

/* 8211 */
struct __pthread_sigmask_args
{
  int how;
  char how_r_[4];
  user_addr_t set;
  user_addr_t oset;
  char oset_r_[];
};

/* 8212 */
struct __sigwait_args
{
  user_addr_t set;
  user_addr_t sig;
  char sig_r_[];
};

/* 8213 */
struct sigaltstack_args
{
  user_addr_t nss;
  user_addr_t oss;
  char oss_r_[];
};

/* 8214 */
struct kill_args
{
  int pid;
  char pid_r_[4];
  int signum;
  char signum_r_[4];
  int posix;
  char posix_r_[4];
};

/* 8215 */
struct hashinit::generic
{
  hashinit::generic *lh_first;
};

/* 8216 */
struct user32_iovec
{
  uint32_t_0 iov_base;
  uint32_t_0 iov_len;
};

/* 8217 */
struct user64_extern_proc
{
  user64_extern_proc::$BA63073F606BF58C9A449C50D2F91A0C p_un;
  user_addr_t p_vmspace;
  user_addr_t p_sigacts;
  int p_flag;
  char p_stat;
  pid_t p_pid;
  pid_t p_oppid;
  int p_dupfd;
  user_addr_t user_stack;
  user_addr_t exit_thread;
  int p_debugger;
  boolean_t sigwait;
  u_int p_estcpu;
  int p_cpticks;
  fixpt_t p_pctcpu;
  user_addr_t p_wchan;
  user_addr_t p_wmesg;
  u_int p_swtime;
  u_int p_slptime;
  user64_itimerval p_realtimer;
  user64_timeval p_rtime;
  u_quad_t p_uticks;
  u_quad_t p_sticks;
  u_quad_t p_iticks;
  int p_traceflag;
  user_addr_t p_tracep;
  int p_siglist;
  user_addr_t p_textvp;
  int p_holdcnt;
  sigset_t p_sigmask;
  sigset_t p_sigignore;
  sigset_t p_sigcatch;
  u_char p_priority;
  u_char p_usrpri;
  char p_nice;
  char p_comm[17];
  user_addr_t p_pgrp;
  user_addr_t p_addr;
  u_short p_xstat;
  u_short p_acflag;
  user_addr_t p_ru;
};

/* 8218 */
union user64_extern_proc::$BA63073F606BF58C9A449C50D2F91A0C
{
  user64_extern_proc::$BA63073F606BF58C9A449C50D2F91A0C::$5583932551E1F4C626DAD2B062E7312B p_st1;
  user64_timeval __p_starttime;
};

/* 8219 */
struct user64_extern_proc::$BA63073F606BF58C9A449C50D2F91A0C::$5583932551E1F4C626DAD2B062E7312B
{
  user_addr_t __p_forw;
  user_addr_t __p_back;
};

/* 8220 */
struct user64_itimerval
{
  user64_timeval it_interval;
  user64_timeval it_value;
};

/* 8221 */
struct user64_kinfo_proc
{
  user64_extern_proc kp_proc;
  user64_eproc kp_eproc;
};

/* 8222 */
struct __attribute__((aligned(8))) user64_eproc
{
  user_addr_t e_paddr;
  user_addr_t e_sess;
  user64_pcred e_pcred;
  _ucred e_ucred;
  user_vmspace e_vm;
  pid_t e_ppid;
  pid_t e_pgid;
  __int16 e_jobc;
  dev_t e_tdev;
  pid_t e_tpgid;
  user64_addr_t e_tsess;
  char e_wmesg[8];
  segsz_t e_xsize;
  __int16 e_xrssize;
  __int16 e_xccount;
  __int16 e_xswrss;
  int32_t e_flag;
  char e_login[12];
  int32_t e_spare[4];
};

/* 8223 */
struct __attribute__((aligned(8))) user64_pcred
{
  char pc_lock[72];
  user64_addr_t pc_ucred;
  uid_t p_ruid;
  uid_t p_svuid;
  gid_t p_rgid;
  gid_t p_svgid;
  int p_refcnt;
};

/* 8224 */
struct _ucred
{
  int32_t cr_ref;
  uid_t cr_uid;
  __int16 cr_ngroups;
  gid_t cr_groups[16];
};

/* 8225 */
struct user_vmspace
{
  int vm_refcnt;
  user_addr_t vm_shm;
  segsz_t vm_rssize;
  segsz_t vm_swrss;
  segsz_t vm_tsize;
  segsz_t vm_dsize;
  segsz_t vm_ssize;
  user_addr_t vm_taddr;
  user_addr_t vm_daddr;
  user_addr_t vm_maxsaddr;
};

/* 8226 */
typedef int32_t segsz_t;

/* 8227 */
struct __attribute__((packed)) __attribute__((aligned(4))) user32_extern_proc
{
  user32_extern_proc::$8BE2A0D1AAAADD7F682B2CE5DE794084 p_un;
  uint32_t_0 p_vmspace;
  uint32_t_0 p_sigacts;
  int p_flag;
  char p_stat;
  __attribute__((aligned(4))) pid_t p_pid;
  pid_t p_oppid;
  int p_dupfd;
  uint32_t_0 user_stack;
  uint32_t_0 exit_thread;
  int p_debugger;
  boolean_t sigwait;
  u_int p_estcpu;
  int p_cpticks;
  fixpt_t p_pctcpu;
  uint32_t_0 p_wchan;
  uint32_t_0 p_wmesg;
  u_int p_swtime;
  u_int p_slptime;
  user32_itimerval p_realtimer;
  user32_timeval p_rtime;
  u_quad_t p_uticks;
  u_quad_t p_sticks;
  u_quad_t p_iticks;
  int p_traceflag;
  uint32_t_0 p_tracep;
  int p_siglist;
  uint32_t_0 p_textvp;
  int p_holdcnt;
  sigset_t p_sigmask;
  sigset_t p_sigignore;
  sigset_t p_sigcatch;
  u_char p_priority;
  u_char p_usrpri;
  char p_nice;
  char p_comm[17];
  uint32_t_0 p_pgrp;
  uint32_t_0 p_addr;
  u_short p_xstat;
  u_short p_acflag;
  uint32_t_0 p_ru;
};

/* 8228 */
union user32_extern_proc::$8BE2A0D1AAAADD7F682B2CE5DE794084
{
  user32_extern_proc::$8BE2A0D1AAAADD7F682B2CE5DE794084::$51031425CFB4C89F9669AFA379898538 p_st1;
  user32_timeval __p_starttime;
};

/* 8229 */
struct user32_extern_proc::$8BE2A0D1AAAADD7F682B2CE5DE794084::$51031425CFB4C89F9669AFA379898538
{
  uint32_t_0 __p_forw;
  uint32_t_0 __p_back;
};

/* 8230 */
struct user32_itimerval
{
  user32_timeval it_interval;
  user32_timeval it_value;
};

/* 8231 */
struct user32_kinfo_proc
{
  user32_extern_proc kp_proc;
  user32_eproc kp_eproc;
};

/* 8232 */
struct user32_eproc
{
  user32_addr_t e_paddr;
  user32_addr_t e_sess;
  user32_pcred e_pcred;
  _ucred e_ucred;
  user32_vmspace e_vm;
  pid_t e_ppid;
  pid_t e_pgid;
  __int16 e_jobc;
  dev_t e_tdev;
  pid_t e_tpgid;
  user32_addr_t e_tsess;
  char e_wmesg[8];
  segsz_t e_xsize;
  __int16 e_xrssize;
  __int16 e_xccount;
  __int16 e_xswrss;
  int32_t e_flag;
  char e_login[12];
  int32_t e_spare[4];
};

/* 8233 */
struct user32_pcred
{
  char pc_lock[72];
  user32_addr_t pc_ucred;
  uid_t p_ruid;
  uid_t p_svuid;
  gid_t p_rgid;
  gid_t p_svgid;
  int p_refcnt;
};

/* 8234 */
struct user32_vmspace
{
  int vm_refcnt;
  uint32_t_0 vm_shm;
  segsz_t vm_rssize;
  segsz_t vm_swrss;
  segsz_t vm_tsize;
  segsz_t vm_dsize;
  segsz_t vm_ssize;
  uint32_t_0 vm_taddr;
  uint32_t_0 vm_daddr;
  uint32_t_0 vm_maxsaddr;
};

/* 8235 */
struct user32_loadavg
{
  fixpt_t ldavg[3];
  user32_long_t fscale;
};

/* 8236 */
struct user64_loadavg
{
  fixpt_t ldavg[3];
  user64_long_t fscale;
};

/* 8237 */
struct sysdoproc_args
{
  int buflen;
  void *kprocp;
  boolean_t is_64_bit;
  user_addr_t dp;
  size_t_0 needed;
  int sizeof_kproc;
  int *errorp;
  int uidcheck;
  int ruidcheck;
  int ttycheck;
  int uidval;
};

/* 8238 */
struct imgsrc_info
{
  uint32_t_0 ii_height;
  uint32_t_0 ii_flags;
  dev_t ii_dev;
  char ii_reserved[24];
};

/* 8239 */
struct xsw_usage
{
  u_int64_t xsu_total;
  u_int64_t xsu_avail;
  u_int64_t xsu_used;
  u_int32_t xsu_pagesize;
  boolean_t xsu_encrypted;
};

/* 8240 */
typedef int (*sysctl_handler_t)(sysctl_oid *, void *, int, sysctl_req *);

/* 8241 */
struct sysctlbyname_args
{
  user_addr_t name;
  user_size_t namelen;
  user_addr_t old;
  user_addr_t oldlenp;
  user_addr_t new;
  user_size_t newlen;
  char newlen_r_[];
};

/* 8242 */
typedef memstat_bucket memstat_bucket_t;

/* 8243 */
struct __attribute__((aligned(8))) memstat_bucket
{
  memstat_bucket::$81C02D507F129B3073038F296EE4BD63 list;
  int count;
};

/* 8244 */
struct memstat_bucket::$81C02D507F129B3073038F296EE4BD63
{
  proc *tqh_first;
  proc **tqh_last;
};

/* 8245 */
typedef jetsam_snapshot memorystatus_jetsam_snapshot_t;

/* 8246 */
struct jetsam_snapshot
{
  uint64_t_0 snapshot_time;
  uint64_t_0 notification_time;
  uint64_t_0 js_gencount;
  memorystatus_kernel_stats_t stats;
  size_t_0 entry_count;
  memorystatus_jetsam_snapshot_entry_t entries[];
};

/* 8247 */
typedef memorystatus_kernel_stats memorystatus_kernel_stats_t;

/* 8248 */
struct memorystatus_kernel_stats
{
  uint32_t_0 free_pages;
  uint32_t_0 active_pages;
  uint32_t_0 inactive_pages;
  uint32_t_0 throttled_pages;
  uint32_t_0 purgeable_pages;
  uint32_t_0 wired_pages;
  uint32_t_0 speculative_pages;
  uint32_t_0 filebacked_pages;
  uint32_t_0 anonymous_pages;
  uint32_t_0 compressor_pages;
  uint64_t_0 compressions;
  uint64_t_0 decompressions;
  uint64_t_0 total_uncompressed_pages_in_compressor;
  uint64_t_0 zone_map_size;
  uint64_t_0 zone_map_capacity;
  uint64_t_0 largest_zone_size;
  char largest_zone_name[80];
};

/* 8249 */
typedef jetsam_snapshot_entry memorystatus_jetsam_snapshot_entry_t;

/* 8250 */
struct jetsam_snapshot_entry
{
  pid_t pid;
  char name[33];
  int32_t priority;
  uint32_t_0 state;
  uint32_t_0 fds;
  uint8_t_0 uuid[16];
  uint64_t_0 user_data;
  uint64_t_0 killed;
  uint64_t_0 pages;
  uint64_t_0 max_pages_lifetime;
  uint64_t_0 purgeable_pages;
  uint64_t_0 jse_internal_pages;
  uint64_t_0 jse_internal_compressed_pages;
  uint64_t_0 jse_purgeable_nonvolatile_pages;
  uint64_t_0 jse_purgeable_nonvolatile_compressed_pages;
  uint64_t_0 jse_alternate_accounting_pages;
  uint64_t_0 jse_alternate_accounting_compressed_pages;
  uint64_t_0 jse_iokit_mapped_pages;
  uint64_t_0 jse_page_table_pages;
  uint64_t_0 jse_memory_region_count;
  uint64_t_0 jse_gencount;
  uint64_t_0 jse_starttime;
  uint64_t_0 jse_killtime;
  uint64_t_0 jse_idle_delta;
  uint64_t_0 jse_coalition_jetsam_id;
  timeval64 cpu_time;
  uint64_t_0 jse_thaw_count;
};

/* 8251 */
struct jetsam_thread_state
{
  boolean_t inited;
  int memorystatus_wakeup;
  int index;
  thread_t thread;
};

/* 8252 */
typedef $<15532631,1>::memorystatus_internal_properties $<15532631,1>::memorystatus_internal_properties_t;

/* 8253 */
struct __attribute__((aligned(8))) $<15532631,1>::memorystatus_internal_properties
{
  proc_t proc;
  int32_t priority;
};

/* 8254 */
typedef memorystatus_internal_probabilities memorystatus_internal_probabilities_t;

/* 8255 */
struct memorystatus_internal_probabilities
{
  char proc_name[17];
  int use_probability;
};

/* 8256 */
typedef memorystatus_priority_entry memorystatus_priority_entry_t;

/* 8257 */
struct memorystatus_priority_entry
{
  pid_t pid;
  int32_t priority;
  uint64_t_0 user_data;
  int32_t limit;
  uint32_t_0 state;
};

/* 8258 */
typedef memorystatus_properties_entry_v1 memorystatus_properties_entry_v1_t;

/* 8259 */
struct __attribute__((aligned(8))) memorystatus_properties_entry_v1
{
  int version;
  pid_t pid;
  int32_t priority;
  int use_probability;
  uint64_t_0 user_data;
  int32_t limit;
  uint32_t_0 state;
  char proc_name[17];
  char __pad1[3];
};

/* 8260 */
typedef memorystatus_priority_properties memorystatus_priority_properties_t;

/* 8261 */
struct memorystatus_priority_properties
{
  int32_t priority;
  uint64_t_0 user_data;
};

/* 8262 */
typedef memorystatus_memlimit_properties memorystatus_memlimit_properties_t;

/* 8263 */
struct memorystatus_memlimit_properties
{
  int32_t memlimit_active;
  uint32_t_0 memlimit_active_attr;
  int32_t memlimit_inactive;
  uint32_t_0 memlimit_inactive_attr;
};

/* 8264 */
struct memorystatus_get_level_args
{
  user_addr_t level;
  char level_r_[];
};

/* 8265 */
typedef u_int32_t mbuf_flags_t;

/* 8266 */
typedef u_int32_t mbuf_csum_request_flags_t;

/* 8267 */
typedef u_int32_t mbuf_tso_request_flags_t;

/* 8268 */
typedef u_int32_t mbuf_csum_performed_flags_t;

/* 8269 */
typedef void (*mbuf_tx_compl_func)(uintptr_t, ifnet_t, u_int64_t, uintptr_t, uintptr_t, kern_return_t);

/* 8270 */
struct m_drvaux_tag
{
  u_int32_t da_family;
  u_int32_t da_subfamily;
  u_int32_t da_reserved;
  u_int32_t da_length;
};

/* 8271 */
typedef u_int32_t mbuf_how_t;

/* 8272 */
typedef u_int32_t mbuf_type_t;

/* 8273 */
typedef u_int32_t mbuf_tag_id_t;

/* 8274 */
typedef u_int16_t mbuf_tag_type_t;

/* 8275 */
typedef u_int32_t mbuf_pkthdr_aux_flags_t;

/* 8276 */
struct mbuf_buffer_status_t
{
  int32_t buf_interface;
  int32_t buf_sndbuf;
};

/* 8277 */
struct getitimer_args
{
  u_int which;
  char which_r_[4];
  user_addr_t itv;
  char itv_r_[];
};

/* 8278 */
struct gettimeofday_args
{
  user_addr_t tp;
  user_addr_t tzp;
  user_addr_t mach_absolute_time;
  char mach_absolute_time_r_[];
};

/* 8279 */
struct timezone
{
  int tz_minuteswest;
  int tz_dsttime;
};

/* 8280 */
struct settimeofday_args
{
  user_addr_t tv;
  user_addr_t tzp;
  char tzp_r_[];
};

/* 8281 */
struct setitimer_args
{
  u_int which;
  char which_r_[4];
  user_addr_t itv;
  user_addr_t oitv;
  char oitv_r_[];
};

/* 8282 */
struct __mach_bridge_remote_time_args
{
  uint64_t_0 local_timestamp;
  char local_timestamp_r_[];
};

/* 8283 */
struct reboot_args
{
  int opt;
  char opt_r_[4];
  user_addr_t msg;
  char msg_r_[];
};

/* 8284 */
struct usrctl_args
{
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 8285 */
struct $7AB3D3C983D35E38EF22B6AD0B2344B3
{
  mcache *lh_first;
};

/* 8286 */
typedef mcache mcache_t;

/* 8287 */
typedef mcache_audit mcache_audit_t;

/* 8288 */
struct mcache_audit
{
  mcache_audit *mca_next;
  void *mca_addr;
  mcache_t *mca_cache;
  size_t_0 mca_contents_size;
  void *mca_contents;
  void *mca_uptr;
  uint32_t_0 mca_uflags;
  uint32_t_0 mca_next_trn;
  mca_trn mca_trns[2];
};

/* 8289 */
struct mca_trn
{
  thread *mca_thread;
  uint32_t_0 mca_tstamp;
  uint16_t mca_depth;
  void *mca_stack[16];
};

/* 8290 */
struct stack_snapshot_with_config_args
{
  int stackshot_config_version;
  char stackshot_config_version_r_[4];
  user_addr_t stackshot_config;
  user_size_t stackshot_config_size;
  char stackshot_config_size_r_[];
};

/* 8291 */
struct microstackshot_args
{
  user_addr_t tracebuf;
  uint32_t_0 tracebuf_size;
  char tracebuf_size_r_[4];
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 8292 */
struct msgbuf
{
  int msg_magic;
  int msg_size;
  int msg_bufx;
  int msg_bufr;
  char *msg_bufc;
};

/* 8293 */
struct $136068516BC651B608A689A6BE81096B
{
  oslog_stream_buf_entry_s *stqh_first;
  oslog_stream_buf_entry_s **stqh_last;
};

/* 8294 */
struct oslog_stream_buf_entry_s
{
  oslog_stream_buf_entry_s::$C6E552A6C02A2602FCCB9F8C81CDAB76 buf_entries;
  uint64_t_0 timestamp;
  int offset;
  uint16_t size;
  oslog_stream_link_type_t type;
  firehose_tracepoint_s metadata[];
};

/* 8295 */
struct oslog_stream_buf_entry_s::$C6E552A6C02A2602FCCB9F8C81CDAB76
{
  oslog_stream_buf_entry_s *stqe_next;
};

/* 8296 */
typedef uint8_t_0 oslog_stream_link_type_t;

/* 8297 */
struct logsoftc
{
  int sc_state;
  selinfo sc_selp;
  int sc_pgid;
  msgbuf *sc_mbp;
};

/* 8298 */
typedef oslog_stream_buf_entry_s *oslog_stream_buf_entry_t;

/* 8299 */
struct __attribute__((aligned(8))) oslogsoftc
{
  int sc_state;
  selinfo sc_selp;
  int sc_pgid;
};

/* 8300 */
struct __attribute__((aligned(8))) oslog_streamsoftc
{
  int sc_state;
  selinfo sc_selp;
  int sc_pgid;
};

/* 8301 */
typedef firehose_buffer_map_info_s firehose_buffer_map_info_t;

/* 8302 */
struct firehose_buffer_map_info_s
{
  mach_vm_address_t fbmi_addr;
  mach_vm_size_t fbmi_size;
};

/* 8303 */
struct putchar_args
{
  int flags;
  tty *tty;
};

/* 8304 */
struct snprintf_arg
{
  char *str;
  size_t_0 remain;
};

/* 8305 */
struct __attribute__((aligned(8))) sbuf
{
  char *s_buf;
  void *s_unused;
  int s_size;
  int s_len;
  int s_flags;
};

/* 8306 */
struct nosys_args
{
  int32_t dummy;
};

/* 8307 */
struct read_nocancel_args
{
  int fd;
  char fd_r_[4];
  user_addr_t cbuf;
  user_size_t nbyte;
  char nbyte_r_[];
};

/* 8308 */
struct pread_nocancel_args
{
  int fd;
  char fd_r_[4];
  user_addr_t buf;
  user_size_t nbyte;
  off_t offset;
  char offset_r_[];
};

/* 8309 */
struct readv_nocancel_args
{
  int fd;
  char fd_r_[4];
  user_addr_t iovp;
  u_int iovcnt;
  char iovcnt_r_[4];
};

/* 8310 */
struct write_nocancel_args
{
  int fd;
  char fd_r_[4];
  user_addr_t cbuf;
  user_size_t nbyte;
  char nbyte_r_[];
};

/* 8311 */
struct pwrite_nocancel_args
{
  int fd;
  char fd_r_[4];
  user_addr_t buf;
  user_size_t nbyte;
  off_t offset;
  char offset_r_[];
};

/* 8312 */
struct writev_nocancel_args
{
  int fd;
  char fd_r_[4];
  user_addr_t iovp;
  u_int iovcnt;
  char iovcnt_r_[4];
};

/* 8313 */
struct pselect_nocancel_args
{
  int nd;
  char nd_r_[4];
  user_addr_t in;
  user_addr_t ou;
  user_addr_t ex;
  user_addr_t ts;
  user_addr_t mask;
  char mask_r_[];
};

/* 8314 */
struct poll_nocancel_args
{
  user_addr_t fds;
  u_int nfds;
  char nfds_r_[4];
  int timeout;
  char timeout_r_[4];
};

/* 8315 */
struct poll_continue_args
{
  user_addr_t pca_fds;
  u_int pca_nfds;
  u_int pca_rfds;
};

/* 8316 */
struct pollfd
{
  int fd;
  __int16 events;
  __int16 revents;
};

/* 8317 */
union waitevent::$95FDB8FC97A2D8CD4DA9216C62A22218
{
  eventreq64 er64;
  eventreq32 er32;
};

/* 8318 */
struct eventreq32
{
  int er_type;
  int er_handle;
  uint32_t_0 er_data;
  int er_rcnt;
  int er_wcnt;
  int er_ecnt;
  int er_eventbits;
};

/* 8319 */
struct read_args
{
  int fd;
  char fd_r_[4];
  user_addr_t cbuf;
  user_size_t nbyte;
  char nbyte_r_[];
};

/* 8320 */
struct pread_args
{
  int fd;
  char fd_r_[4];
  user_addr_t buf;
  user_size_t nbyte;
  off_t offset;
  char offset_r_[];
};

/* 8321 */
struct readv_args
{
  int fd;
  char fd_r_[4];
  user_addr_t iovp;
  u_int iovcnt;
  char iovcnt_r_[4];
};

/* 8322 */
struct write_args
{
  int fd;
  char fd_r_[4];
  user_addr_t cbuf;
  user_size_t nbyte;
  char nbyte_r_[];
};

/* 8323 */
struct pwrite_args
{
  int fd;
  char fd_r_[4];
  user_addr_t buf;
  user_size_t nbyte;
  off_t offset;
  char offset_r_[];
};

/* 8324 */
struct writev_args
{
  int fd;
  char fd_r_[4];
  user_addr_t iovp;
  u_int iovcnt;
  char iovcnt_r_[4];
};

/* 8325 */
struct ioctl_args
{
  int fd;
  char fd_r_[4];
  user_ulong_t com;
  user_addr_t data;
  char data_r_[];
};

/* 8326 */
struct select_args
{
  int nd;
  char nd_r_[4];
  user_addr_t in;
  user_addr_t ou;
  user_addr_t ex;
  user_addr_t tv;
  char tv_r_[];
};

/* 8327 */
struct pselect_args
{
  int nd;
  char nd_r_[4];
  user_addr_t in;
  user_addr_t ou;
  user_addr_t ex;
  user_addr_t ts;
  user_addr_t mask;
  char mask_r_[];
};

/* 8328 */
struct poll_args
{
  user_addr_t fds;
  u_int nfds;
  char nfds_r_[4];
  int timeout;
  char timeout_r_[4];
};

/* 8329 */
struct watchevent_args
{
  user_addr_t u_req;
  int u_eventmask;
  char u_eventmask_r_[4];
};

/* 8330 */
struct waitevent_args
{
  user_addr_t u_req;
  user_addr_t tv;
  char tv_r_[];
};

/* 8331 */
struct modwatch_args
{
  user_addr_t u_req;
  int u_eventmask;
  char u_eventmask_r_[4];
};

/* 8332 */
struct gethostuuid_args
{
  user_addr_t uuid_buf;
  user_addr_t timeoutp;
  int spi;
  char spi_r_[4];
};

/* 8333 */
struct ledger_args
{
  int cmd;
  char cmd_r_[4];
  user_addr_t arg1;
  user_addr_t arg2;
  user_addr_t arg3;
  char arg3_r_[];
};

/* 8334 */
struct telemetry_args
{
  uint64_t_0 cmd;
  uint64_t_0 deadline;
  uint64_t_0 interval;
  uint64_t_0 leeway;
  uint64_t_0 arg4;
  uint64_t_0 arg5;
  char arg5_r_[];
};

/* 8335 */
struct pipe_garbage
{
  pipe *pg_pipe;
  pipe_garbage *pg_next;
  uint64_t_0 pg_timestamp;
};

/* 8336 */
struct pipe_args
{
  int32_t dummy;
};

/* 8337 */
struct pipe_info
{
  vinfo_stat pipe_stat;
  uint64_t_0 pipe_handle;
  uint64_t_0 pipe_peerhandle;
  int pipe_status;
  int rfu_1;
};

/* 8338 */
struct sysctl_req_1
{
  proc_0 *p;
  int lock;
  user_addr_t oldptr;
  size_t_0 oldlen;
  size_t_0 oldidx;
  int (*oldfunc)(sysctl_req_1 *, const void *, size_t_0);
  user_addr_t newptr;
  size_t_0 newlen;
  size_t_0 newidx;
  int (*newfunc)(sysctl_req_1 *, void *, size_t_0);
};

/* 8339 */
struct coalition_info_args
{
  uint32_t_0 flavor;
  char flavor_r_[4];
  user_addr_t cid;
  user_addr_t buffer;
  user_addr_t bufsize;
  char bufsize_r_[];
};

/* 8340 */
typedef ull_bucket ull_bucket_t;

/* 8341 */
struct ull_bucket
{
  queue_head_t ulb_head;
  lck_spin_t ulb_lock;
};

/* 8342 */
typedef ull ull_t;

/* 8343 */
struct ull
{
  thread_t ull_owner;
  ulk_t ull_key;
  ulk_t ull_saved_key;
  ull_lock_t ull_lock;
  uint ull_bucket_index;
  int32_t ull_nwaiters;
  int32_t ull_max_nwaiters;
  int32_t ull_refcount;
  uint8_t_0 ull_opcode;
  turnstile *ull_turnstile;
  queue_chain_t ull_hash_link;
};

/* 8344 */
struct __attribute__((packed)) __attribute__((aligned(4))) ulk_t
{
  user_addr_t ulk_addr;
  pid_t ulk_pid;
};

/* 8345 */
typedef lck_spin_t ull_lock_t;

/* 8346 */
struct ulock_wait_args
{
  uint32_t_0 operation;
  char operation_r_[4];
  user_addr_t addr;
  uint64_t_0 value;
  uint32_t_0 timeout;
  char timeout_r_[4];
};

/* 8347 */
struct ulock_wake_args
{
  uint32_t_0 operation;
  char operation_r_[4];
  user_addr_t addr;
  uint64_t_0 wake_value;
  char wake_value_r_[];
};

/* 8348 */
struct work_interval_ctl_args
{
  uint32_t_0 operation;
  char operation_r_[4];
  uint64_t_0 work_interval_id;
  user_addr_t arg;
  user_size_t len;
  char len_r_[];
};

/* 8349 */
struct work_interval_notification
{
  uint64_t_0 start;
  uint64_t_0 finish;
  uint64_t_0 deadline;
  uint64_t_0 next_start;
  uint32_t_0 notify_flags;
  uint32_t_0 create_flags;
};

/* 8350 */
struct work_interval_create_params
{
  uint64_t_0 wicp_id;
  uint32_t_0 wicp_port;
  uint32_t_0 wicp_create_flags;
};

/* 8351 */
struct __attribute__((aligned(8))) work_interval_instance
{
  uint64_t_0 wi_interval_id;
  uint64_t_0 wi_instance_id;
  uint64_t_0 wi_start;
  uint64_t_0 wi_finish;
  uint64_t_0 wi_deadline;
  uint64_t_0 wi_complexity;
  uint32_t_0 wi_create_flags;
};

/* 8352 */
struct user_termios
{
  user_tcflag_t c_iflag;
  user_tcflag_t c_oflag;
  user_tcflag_t c_cflag;
  user_tcflag_t c_lflag;
  cc_t c_cc[20];
  user_speed_t c_ispeed;
  user_speed_t c_ospeed;
};

/* 8353 */
typedef __uint64_t user_tcflag_t;

/* 8354 */
typedef __uint64_t user_speed_t;

/* 8355 */
struct termios32
{
  __uint32_t c_iflag;
  __uint32_t c_oflag;
  __uint32_t c_cflag;
  __uint32_t c_lflag;
  cc_t c_cc[20];
  __uint32_t c_ispeed;
  __uint32_t c_ospeed;
};

/* 8356 */
struct speedtab
{
  int sp_speed;
  int sp_code;
};

/* 8357 */
struct sgttyb
{
  char sg_ispeed;
  char sg_ospeed;
  char sg_erase;
  char sg_kill;
  __int16 sg_flags;
};

/* 8358 */
struct tchars
{
  char t_intrc;
  char t_quitc;
  char t_startc;
  char t_stopc;
  char t_eofc;
  char t_brkc;
};

/* 8359 */
struct ltchars
{
  char t_suspc;
  char t_dsuspc;
  char t_rprntc;
  char t_flushc;
  char t_werasc;
  char t_lnextc;
};

/* 8360 */
struct linesw
{
  l_open_t *l_open;
  l_close_t *l_close;
  l_read_t *l_read;
  l_write_t *l_write;
  l_ioctl_t *l_ioctl;
  l_rint_t *l_rint;
  l_start_t *l_start;
  l_modem_t *l_modem;
};

/* 8361 */
typedef int l_open_t(dev_t, tty *);

/* 8362 */
typedef int l_close_t(tty *, int);

/* 8363 */
typedef int l_read_t(tty *, uio *, int);

/* 8364 */
typedef int l_write_t(tty *, uio *, int);

/* 8365 */
typedef int l_ioctl_t(tty *, u_long, caddr_t, int, proc *);

/* 8366 */
typedef int l_rint_t(int, tty *);

/* 8367 */
typedef void l_start_t(tty *);

/* 8368 */
typedef int l_modem_t(tty *, int);

/* 8369 */
struct tty_dev_t
{
  int master;
  int slave;
  unsigned __int32 fix_7828447 : 1;
  unsigned __int32 fix_7070978 : 1;
  unsigned __int32 mac_notify : 1;
  unsigned __int32 open_reset : 1;
  unsigned __int32 _reserved : 28;
  int _pad;
  tty_dev_t *next;
  ptmx_ioctl *(*open)(int, int);
  int (*free)(int, int);
  int (*name)(int, char *, size_t_0);
  void (*revoke)(int, tty *);
};

/* 8370 */
struct ptmx_ioctl
{
  tty *pt_tty;
  int pt_flags;
  selinfo pt_selr;
  selinfo pt_selw;
  u_char pt_send;
  u_char pt_ucntl;
  void *pt_devhandle;
};

/* 8371 */
struct _ptmx_ioctl_state
{
  ptmx_ioctl **pis_ioctl_list;
  int pis_total;
  int pis_free;
};

/* 8372 */
typedef void (*cs_md_init)(void *);

/* 8373 */
typedef void (*cs_md_update)(void *, const void *, size_t_0);

/* 8374 */
typedef void (*cs_md_final)(void *, void *);

/* 8375 */
typedef __SC_SuperBlob CS_SuperBlob;

/* 8376 */
struct __SC_SuperBlob
{
  uint32_t_0 magic;
  uint32_t_0 length;
  uint32_t_0 count;
  CS_BlobIndex index[];
};

/* 8377 */
typedef __BlobIndex CS_BlobIndex;

/* 8378 */
struct __BlobIndex
{
  uint32_t_0 type;
  uint32_t_0 offset;
};

/* 8379 */
typedef __SC_Scatter SC_Scatter;

/* 8380 */
struct __SC_Scatter
{
  uint32_t_0 count;
  uint32_t_0 base;
  uint64_t_0 targetOffset;
  uint64_t_0 spare;
};

/* 8381 */
union cs_hash_union
{
  SHA1_CTX sha1ctxt;
  SHA256_CTX sha256ctx;
  SHA384_CTX sha384ctx;
};

/* 8382 */
typedef uint32_t_0 ubc_setsize_opts_t;

/* 8383 */
typedef const domain_guard *domain_guard_t;

/* 8384 */
struct domain_guard;

/* 8385 */
typedef const domain_unguard *domain_unguard_t;

/* 8386 */
struct domain_unguard;

/* 8387 */
struct protoctl_event_nwk_wq_entry
{
  nwk_wq_entry nwk_wqe;
  protoctl_event protoctl_ev_arg;
};

/* 8388 */
struct __attribute__((aligned(8))) protoctl_event
{
  ifnet *ifp;
  sockaddr_in_4_6 laddr;
  sockaddr_in_4_6 raddr;
  uint32_t_0 protoctl_event_code;
  protoctl_ev_val val;
  uint16_t lport;
  uint16_t rport;
  uint16_t protocol;
};

/* 8389 */
struct eventhandler_entry_protoctl_event
{
  eventhandler_entry ee;
  protoctl_event_fn eh_func;
};

/* 8390 */
typedef void (*protoctl_event_fn)(eventhandler_entry_arg, ifnet *, sockaddr *, sockaddr *, uint16_t, uint16_t, uint8_t_0, uint32_t_0, protoctl_ev_val *);

/* 8391 */
struct mcl_audit_t
{
  mcache_audit_t **cl_audit;
};

/* 8392 */
typedef mcl_slabg mcl_slabg_t;

/* 8393 */
struct mcl_slabg
{
  mcl_slab_t *slg_slab;
};

/* 8394 */
typedef mcl_slab mcl_slab_t;

/* 8395 */
struct mcl_slab
{
  mcl_slab *sl_next;
  u_int8_t sl_class;
  int8_t sl_refcnt;
  int8_t sl_chunks;
  u_int16_t sl_flags;
  u_int16_t sl_len;
  void *sl_base;
  void *sl_head;
  mcl_slab::$C52E35AFA74F795E0D6BEAD3BC949517 sl_link;
};

/* 8396 */
struct mcl_slab::$C52E35AFA74F795E0D6BEAD3BC949517
{
  mcl_slab *tqe_next;
  mcl_slab **tqe_prev;
};

/* 8397 */
struct mleak_table
{
  u_int32_t mleak_capture;
  u_int32_t mleak_sample_factor;
  u_int64_t alloc_collisions;
  u_int64_t trace_collisions;
  u_int64_t alloc_overwrites;
  u_int64_t trace_overwrites;
  u_int64_t alloc_recorded;
  u_int64_t trace_recorded;
  u_int64_t outstanding_allocs;
  u_int64_t total_conflicts;
};

/* 8398 */
struct mb_stat
{
  u_int32_t mbs_cnt;
  u_int32_t mbs_pad;
  mb_class_stat_t mbs_class[1];
};

/* 8399 */
typedef mb_class_stat mb_class_stat_t;

/* 8400 */
struct __attribute__((aligned(8))) mb_class_stat
{
  char mbcl_cname[16];
  u_int32_t mbcl_size;
  u_int32_t mbcl_total;
  u_int32_t mbcl_active;
  u_int32_t mbcl_infree;
  u_int32_t mbcl_slab_cnt;
  u_int32_t mbcl_pad;
  u_int64_t mbcl_alloc_cnt;
  u_int64_t mbcl_free_cnt;
  u_int64_t mbcl_notified;
  u_int64_t mbcl_purge_cnt;
  u_int64_t mbcl_fail_cnt;
  u_int32_t mbcl_ctotal;
  u_int32_t mbcl_release_cnt;
  u_int32_t mbcl_mc_state;
  u_int32_t mbcl_mc_cached;
  u_int32_t mbcl_mc_waiter_cnt;
  u_int32_t mbcl_mc_wretry_cnt;
  u_int32_t mbcl_mc_nwretry_cnt;
  u_int32_t mbcl_peak_reported;
  u_int32_t mbcl_reserved[7];
};

/* 8401 */
struct __attribute__((packed)) __attribute__((aligned(4))) omb_stat
{
  u_int32_t mbs_cnt;
  omb_class_stat mbs_class[1];
};

/* 8402 */
struct omb_class_stat
{
  char mbcl_cname[16];
  u_int32_t mbcl_size;
  u_int32_t mbcl_total;
  u_int32_t mbcl_active;
  u_int32_t mbcl_infree;
  u_int32_t mbcl_slab_cnt;
  __attribute__((packed)) __attribute__((aligned(1))) u_int64_t mbcl_alloc_cnt;
  __attribute__((packed)) __attribute__((aligned(1))) u_int64_t mbcl_free_cnt;
  __attribute__((packed)) __attribute__((aligned(1))) u_int64_t mbcl_notified;
  __attribute__((packed)) __attribute__((aligned(1))) u_int64_t mbcl_purge_cnt;
  __attribute__((packed)) __attribute__((aligned(1))) u_int64_t mbcl_fail_cnt;
  u_int32_t mbcl_ctotal;
  u_int32_t mbcl_release_cnt;
  u_int32_t mbcl_mc_state;
  u_int32_t mbcl_mc_cached;
  u_int32_t mbcl_mc_waiter_cnt;
  u_int32_t mbcl_mc_wretry_cnt;
  u_int32_t mbcl_mc_nwretry_cnt;
  u_int64_t mbcl_reserved[4];
};

/* 8403 */
struct mbstat
{
  u_int32_t m_mbufs;
  u_int32_t m_clusters;
  u_int32_t m_spare;
  u_int32_t m_clfree;
  u_int32_t m_drops;
  u_int32_t m_wait;
  u_int32_t m_drain;
  u_short m_mtypes[256];
  u_int32_t m_mcfail;
  u_int32_t m_mpfail;
  u_int32_t m_msize;
  u_int32_t m_mclbytes;
  u_int32_t m_minclsize;
  u_int32_t m_mlen;
  u_int32_t m_mhlen;
  u_int32_t m_bigclusters;
  u_int32_t m_bigclfree;
  u_int32_t m_bigmclbytes;
};

/* 8404 */
struct mbuf_mtypes_t
{
  mtypes_cpu_t mbs_cpu[1];
};

/* 8405 */
struct mtypes_cpu_t
{
  unsigned int cpu_mtypes[32];
};

/* 8406 */
typedef ncl_tbl ncl_tbl_t;

/* 8407 */
struct __attribute__((aligned(8))) ncl_tbl
{
  uint64_t_0 nt_maxmem;
  uint32_t_0 nt_mbpool;
};

/* 8408 */
struct mbuf_table_t
{
  mbuf_class_t mtbl_class;
  mcache_t *mtbl_cache;
  mcl_slhead mtbl_slablist;
  mcache_obj_t *mtbl_cobjlist;
  mb_class_stat_t *mtbl_stats;
  u_int32_t mtbl_maxsize;
  int mtbl_minlimit;
  int mtbl_maxlimit;
  u_int32_t mtbl_wantpurge;
  uint32_t_0 mtbl_avgtotal;
  u_int32_t mtbl_expand;
};

/* 8409 */
enum mbuf_class_t : __int32
{
  MC_MBUF = 0x0,
  MC_CL = 0x1,
  MC_BIGCL = 0x2,
  MC_16KCL = 0x3,
  MC_MBUF_CL = 0x4,
  MC_MBUF_BIGCL = 0x5,
  MC_MBUF_16KCL = 0x6,
};

/* 8410 */
struct mcl_slhead
{
  mcl_slab *tqh_first;
  mcl_slab **tqh_last;
};

/* 8411 */
struct mbtypes
{
  int mt_type;
  const char *mt_name;
};

/* 8412 */
struct mtracelarge
{
  uint64_t_0 size;
  uint64_t_0 depth;
  uintptr_t addr[16];
};

/* 8413 */
typedef mleak_stat mleak_stat_t;

/* 8414 */
struct mleak_stat
{
  u_int32_t ml_isaddr64;
  u_int32_t ml_cnt;
  mleak_trace_stat_t ml_trace[1];
};

/* 8415 */
typedef mleak_trace_stat mleak_trace_stat_t;

/* 8416 */
struct mleak_trace_stat
{
  u_int64_t mltr_collisions;
  u_int64_t mltr_hitcount;
  u_int64_t mltr_allocs;
  u_int64_t mltr_depth;
  u_int64_t mltr_addr[16];
};

/* 8417 */
struct mtrace
{
  u_int64_t collisions;
  u_int64_t hitcount;
  u_int64_t allocs;
  u_int64_t depth;
  uintptr_t addr[16];
};

/* 8418 */
struct mallocation
{
  mcache_obj_t *element;
  u_int32_t trace_index;
  u_int32_t count;
  u_int64_t hitcount;
};

/* 8419 */
struct mcl_saved_contents_t
{
  u_int8_t sc_mbuf[216];
  mcl_scratch_audit_t sc_scratch;
};

/* 8420 */
struct mcl_scratch_audit_t
{
  thread *msa_thread;
  thread *msa_pthread;
  uint32_t_0 msa_tstamp;
  uint32_t_0 msa_ptstamp;
  uint16_t msa_depth;
  uint16_t msa_pdepth;
  void *msa_stack[16];
  void *msa_pstack[16];
};

/* 8421 */
union mcluster
{
  mcluster *mcl_next;
  char mcl_buf[2048];
};

/* 8422 */
union mbigcluster
{
  mbigcluster *mbc_next;
  char mbc_buf[4096];
};

/* 8423 */
union m16kcluster
{
  m16kcluster *m16kcl_next;
  char m16kcl_buf[16384];
};

/* 8424 */
struct m_taghdr
{
  u_int64_t refcnt;
};

/* 8425 */
struct $AD4C64E7143E72C2CE026DCD90C819F9
{
  socket *stqh_first;
  socket **stqh_last;
};

/* 8426 */
struct soextbkidlestat
{
  u_int32_t so_xbkidle_maxperproc;
  u_int32_t so_xbkidle_time;
  u_int32_t so_xbkidle_rcvhiwat;
  int32_t so_xbkidle_notsupp;
  int32_t so_xbkidle_toomany;
  int32_t so_xbkidle_wantok;
  int32_t so_xbkidle_active;
  int32_t so_xbkidle_nocell;
  int32_t so_xbkidle_notime;
  int32_t so_xbkidle_forced;
  int32_t so_xbkidle_resumed;
  int32_t so_xbkidle_expired;
  int32_t so_xbkidle_resched;
  int32_t so_xbkidle_nodlgtd;
  int32_t so_xbkidle_drained;
};

/* 8427 */
struct __attribute__((aligned(8))) unpcb
{
  unpcb::$AF83A0BDA0C5A25DFBC20E5ACE848C09 unp_link;
  socket *unp_socket;
  vnode *unp_vnode;
  ino_t unp_ino;
  unpcb *unp_conn;
  unp_head unp_refs;
  unpcb::$AF83A0BDA0C5A25DFBC20E5ACE848C09 unp_reflink;
  sockaddr_un *unp_addr;
  int unp_cc;
  int unp_mbcnt;
  unp_gen_t unp_gencnt;
  int unp_flags;
  xucred unp_peercred;
  lck_mtx_t unp_mtx;
  int rw_thrcount;
};

/* 8428 */
struct unpcb::$AF83A0BDA0C5A25DFBC20E5ACE848C09
{
  unpcb *le_next;
  unpcb **le_prev;
};

/* 8429 */
struct unp_head
{
  unpcb *lh_first;
};

/* 8430 */
typedef u_quad_t unp_gen_t;

/* 8431 */
struct kev_socket_event_data
{
  sockaddr_storage kev_sockname;
  sockaddr_storage kev_peername;
};

/* 8432 */
struct linger
{
  int l_onoff;
  int l_linger;
};

/* 8433 */
struct so_nke
{
  unsigned int nke_handle;
  unsigned int nke_where;
  int nke_flags;
  u_int32_t reserved[4];
};

/* 8434 */
struct so_np_extensions
{
  u_int32_t npx_flags;
  u_int32_t npx_mask;
};

/* 8435 */
struct kev_socket_closed
{
  kev_socket_event_data ev_data;
};

/* 8436 */
struct accept_nocancel_args
{
  int s;
  char s_r_[4];
  user_addr_t name;
  user_addr_t anamelen;
  char anamelen_r_[];
};

/* 8437 */
struct connect_nocancel_args
{
  int s;
  char s_r_[4];
  user_addr_t name;
  socklen_t namelen;
  char namelen_r_[4];
};

/* 8438 */
struct sendto_nocancel_args
{
  int s;
  char s_r_[4];
  user_addr_t buf;
  user_size_t len;
  int flags;
  char flags_r_[4];
  user_addr_t to;
  socklen_t tolen;
  char tolen_r_[4];
};

/* 8439 */
struct sendmsg_nocancel_args
{
  int s;
  char s_r_[4];
  user_addr_t msg;
  int flags;
  char flags_r_[4];
};

/* 8440 */
struct recvfrom_nocancel_args
{
  int s;
  char s_r_[4];
  user_addr_t buf;
  user_size_t len;
  int flags;
  char flags_r_[4];
  user_addr_t from;
  user_addr_t fromlenaddr;
  char fromlenaddr_r_[];
};

/* 8441 */
struct recvmsg_nocancel_args
{
  int s;
  char s_r_[4];
  user_addr_t msg;
  int flags;
  char flags_r_[4];
};

/* 8442 */
struct user64_msghdr_x
{
  user64_addr_t msg_name;
  socklen_t msg_namelen;
  user64_addr_t msg_iov;
  int msg_iovlen;
  user64_addr_t msg_control;
  socklen_t msg_controllen;
  int msg_flags;
  user64_size_t msg_datalen;
};

/* 8443 */
struct user32_msghdr_x
{
  user32_addr_t msg_name;
  socklen_t msg_namelen;
  user32_addr_t msg_iov;
  int msg_iovlen;
  user32_addr_t msg_control;
  socklen_t msg_controllen;
  int msg_flags;
  user32_size_t msg_datalen;
};

/* 8444 */
struct __attribute__((aligned(8))) user_sa_endpoints
{
  unsigned int sae_srcif;
  user_addr_t sae_srcaddr;
  socklen_t sae_srcaddrlen;
  user_addr_t sae_dstaddr;
  socklen_t sae_dstaddrlen;
};

/* 8445 */
struct user32_sa_endpoints
{
  unsigned int sae_srcif;
  user32_addr_t sae_srcaddr;
  socklen_t sae_srcaddrlen;
  user32_addr_t sae_dstaddr;
  socklen_t sae_dstaddrlen;
};

/* 8446 */
struct __attribute__((aligned(8))) user64_sa_endpoints
{
  unsigned int sae_srcif;
  user64_addr_t sae_srcaddr;
  socklen_t sae_srcaddrlen;
  user64_addr_t sae_dstaddr;
  socklen_t sae_dstaddrlen;
};

/* 8447 */
struct user_msghdr_x
{
  user_addr_t msg_name;
  socklen_t msg_namelen;
  user_addr_t msg_iov;
  int msg_iovlen;
  user_addr_t msg_control;
  socklen_t msg_controllen;
  int msg_flags;
  size_t_0 msg_datalen;
};

/* 8448 */
struct socket_args
{
  int domain;
  char domain_r_[4];
  int type;
  char type_r_[4];
  int protocol;
  char protocol_r_[4];
};

/* 8449 */
struct bind_args
{
  int s;
  char s_r_[4];
  user_addr_t name;
  socklen_t namelen;
  char namelen_r_[4];
};

/* 8450 */
struct listen_args
{
  int s;
  char s_r_[4];
  int backlog;
  char backlog_r_[4];
};

/* 8451 */
struct accept_args
{
  int s;
  char s_r_[4];
  user_addr_t name;
  user_addr_t anamelen;
  char anamelen_r_[];
};

/* 8452 */
struct connect_args
{
  int s;
  char s_r_[4];
  user_addr_t name;
  socklen_t namelen;
  char namelen_r_[4];
};

/* 8453 */
struct peeloff_args
{
  int s;
  char s_r_[4];
  sae_associd_t aid;
  char aid_r_[4];
};

/* 8454 */
struct socketpair_args
{
  int domain;
  char domain_r_[4];
  int type;
  char type_r_[4];
  int protocol;
  char protocol_r_[4];
  user_addr_t rsv;
  char rsv_r_[];
};

/* 8455 */
struct sendto_args
{
  int s;
  char s_r_[4];
  user_addr_t buf;
  user_size_t len;
  int flags;
  char flags_r_[4];
  user_addr_t to;
  socklen_t tolen;
  char tolen_r_[4];
};

/* 8456 */
struct user_msghdr
{
  user_addr_t msg_name;
  socklen_t msg_namelen;
  user_addr_t msg_iov;
  int msg_iovlen;
  user_addr_t msg_control;
  socklen_t msg_controllen;
  int msg_flags;
};

/* 8457 */
struct sendmsg_args
{
  int s;
  char s_r_[4];
  user_addr_t msg;
  int flags;
  char flags_r_[4];
};

/* 8458 */
struct user32_msghdr
{
  user32_addr_t msg_name;
  socklen_t msg_namelen;
  user32_addr_t msg_iov;
  int msg_iovlen;
  user32_addr_t msg_control;
  socklen_t msg_controllen;
  int msg_flags;
};

/* 8459 */
struct user64_msghdr
{
  user64_addr_t msg_name;
  socklen_t msg_namelen;
  user64_addr_t msg_iov;
  int msg_iovlen;
  user64_addr_t msg_control;
  socklen_t msg_controllen;
  int msg_flags;
};

/* 8460 */
struct sendmsg_x_args
{
  int s;
  char s_r_[4];
  user_addr_t msgp;
  u_int cnt;
  char cnt_r_[4];
  int flags;
  char flags_r_[4];
};

/* 8461 */
struct recvfrom_args
{
  int s;
  char s_r_[4];
  user_addr_t buf;
  user_size_t len;
  int flags;
  char flags_r_[4];
  user_addr_t from;
  user_addr_t fromlenaddr;
  char fromlenaddr_r_[];
};

/* 8462 */
struct recvmsg_args
{
  int s;
  char s_r_[4];
  user_addr_t msg;
  int flags;
  char flags_r_[4];
};

/* 8463 */
struct recvmsg_x_args
{
  int s;
  char s_r_[4];
  user_addr_t msgp;
  u_int cnt;
  char cnt_r_[4];
  int flags;
  char flags_r_[4];
};

/* 8464 */
struct shutdown_args
{
  int s;
  char s_r_[4];
  int how;
  char how_r_[4];
};

/* 8465 */
struct getsockname_args
{
  int fdes;
  char fdes_r_[4];
  user_addr_t asa;
  user_addr_t alen;
  char alen_r_[];
};

/* 8466 */
struct getpeername_args
{
  int fdes;
  char fdes_r_[4];
  user_addr_t asa;
  user_addr_t alen;
  char alen_r_[];
};

/* 8467 */
struct __attribute__((aligned(8))) user_sf_hdtr
{
  user_addr_t headers;
  int hdr_cnt;
  user_addr_t trailers;
  int trl_cnt;
};

/* 8468 */
struct user32_sf_hdtr
{
  user32_addr_t headers;
  int hdr_cnt;
  user32_addr_t trailers;
  int trl_cnt;
};

/* 8469 */
struct __attribute__((aligned(8))) user64_sf_hdtr
{
  user64_addr_t headers;
  int hdr_cnt;
  user64_addr_t trailers;
  int trl_cnt;
};

/* 8470 */
struct unpcb_compat
{
  _unpcb_list_entry unp_link;
  u_int32_t unp_socket;
  u_int32_t unp_vnode;
  u_int32_t unp_ino;
  u_int32_t unp_conn;
  u_int32_t unp_refs;
  _unpcb_list_entry unp_reflink;
  u_int32_t unp_addr;
  int unp_cc;
  int unp_mbcnt;
  unp_gen_t unp_gencnt;
};

/* 8471 */
struct _unpcb_list_entry
{
  u_int32_t le_next;
  u_int32_t le_prev;
};

/* 8472 */
struct __attribute__((packed)) __attribute__((aligned(4))) mdns_ipc_msg_hdr
{
  uint32_t_0 version;
  uint32_t_0 datalen;
  uint32_t_0 ipc_flags;
  uint32_t_0 op;
  mdns_ipc_msg_hdr::$97B4417680BC9836CFBAE7352C2BF25B _anon_0;
  uint32_t_0 reg_index;
};

/* 8473 */
union mdns_ipc_msg_hdr::$97B4417680BC9836CFBAE7352C2BF25B
{
  void *context;
  uint32_t_0 u32[2];
};

/* 8474 */
struct xunpgen
{
  u_int32_t xug_len;
  u_int xug_count;
  unp_gen_t xug_gen;
  so_gen_t xug_sogen;
};

/* 8475 */
struct __attribute__((packed)) __attribute__((aligned(4))) xunpcb
{
  u_int32_t xu_len;
  u_int32_t xu_unpp;
  unpcb_compat xu_unp;
  xunpcb::$1CD38FD62B73E2358200EE541A13E5F2 xu_au;
  xunpcb::$134A01D4555E8939D58F6FDDB5752335 xu_cau;
  xsocket xu_socket;
  u_quad_t xu_alignment_hack;
};

/* 8476 */
union xunpcb::$1CD38FD62B73E2358200EE541A13E5F2
{
  sockaddr_un xuu_addr;
  char xu_dummy1[256];
};

/* 8477 */
union xunpcb::$134A01D4555E8939D58F6FDDB5752335
{
  sockaddr_un xuu_caddr;
  char xu_dummy2[256];
};

/* 8478 */
struct __attribute__((packed)) __attribute__((aligned(4))) xunpcb64
{
  u_int32_t xu_len;
  u_int64_t xu_unpp;
  xunpcb64_list_entry xunp_link;
  u_int64_t xunp_socket;
  u_int64_t xunp_vnode;
  u_int64_t xunp_ino;
  u_int64_t xunp_conn;
  u_int64_t xunp_refs;
  xunpcb64_list_entry xunp_reflink;
  int xunp_cc;
  int xunp_mbcnt;
  unp_gen_t xunp_gencnt;
  int xunp_flags;
  xunpcb64::$1CD38FD62B73E2358200EE541A13E5F2 xu_au;
  xunpcb64::$134A01D4555E8939D58F6FDDB5752335 xu_cau;
  xsocket64 xu_socket;
};

/* 8479 */
struct xunpcb64_list_entry
{
  u_int64_t le_next;
  u_int64_t le_prev;
};

/* 8480 */
union xunpcb64::$1CD38FD62B73E2358200EE541A13E5F2
{
  sockaddr_un xuu_addr;
  char xu_dummy1[256];
};

/* 8481 */
union xunpcb64::$134A01D4555E8939D58F6FDDB5752335
{
  sockaddr_un xuu_caddr;
  char xu_dummy2[256];
};

/* 8482 */
struct shminfo
{
  int64_t shmmax;
  int64_t shmmin;
  int64_t shmmni;
  int64_t shmseg;
  int64_t shmall;
};

/* 8483 */
struct shmid_kernel
{
  user_shmid_ds u;
  label *label;
};

/* 8484 */
struct __attribute__((packed)) __attribute__((aligned(4))) user_shmid_ds
{
  ipc_perm shm_perm;
  user_size_t shm_segsz;
  pid_t shm_lpid;
  pid_t shm_cpid;
  __int16 shm_nattch;
  __attribute__((aligned(4))) user_time_t shm_atime;
  user_time_t shm_dtime;
  user_time_t shm_ctime;
  user_addr_t shm_internal;
};

/* 8485 */
struct __attribute__((aligned(8))) shmmap_state
{
  mach_vm_address_t va;
  int shmid;
};

/* 8486 */
struct shm_handle
{
  void *shm_object;
  memory_object_size_t shm_handle_size;
  shm_handle *shm_handle_next;
};

/* 8487 */
struct user32_shmid_ds
{
  ipc_perm shm_perm;
  uint32_t_0 shm_segsz;
  pid_t shm_lpid;
  pid_t shm_cpid;
  __int16 shm_nattch;
  uint32_t_0 shm_atime;
  uint32_t_0 shm_dtime;
  uint32_t_0 shm_ctime;
  user32_addr_t shm_internal;
};

/* 8488 */
union IPCS_shm_sysctl::$8CCE190138F403BC54BE7E41A1853F40
{
  user32_IPCS_command u32;
  user_IPCS_command u64;
};

/* 8489 */
struct user32_IPCS_command
{
  int ipcs_magic;
  int ipcs_op;
  int ipcs_cursor;
  int ipcs_datalen;
  user32_addr_t ipcs_data;
};

/* 8490 */
struct user_IPCS_command
{
  int ipcs_magic;
  int ipcs_op;
  int ipcs_cursor;
  int ipcs_datalen;
  user_addr_t ipcs_data;
};

/* 8491 */
struct shmget_args
{
  key_t key;
  char key_r_[4];
  user_size_t size;
  int shmflg;
  char shmflg_r_[4];
};

/* 8492 */
struct shmdt_args
{
  user_addr_t shmaddr;
  char shmaddr_r_[];
};

/* 8493 */
struct shmat_args
{
  int shmid;
  char shmid_r_[4];
  user_addr_t shmaddr;
  int shmflg;
  char shmflg_r_[4];
};

/* 8494 */
struct shmctl_args
{
  int shmid;
  char shmid_r_[4];
  int cmd;
  char cmd_r_[4];
  user_addr_t buf;
  char buf_r_[];
};

/* 8495 */
struct seminfo
{
  int semmap;
  int semmni;
  int semmns;
  int semmnu;
  int semmsl;
  int semopm;
  int semume;
  int semusz;
  int semvmx;
  int semaem;
};

/* 8496 */
struct semid_kernel
{
  user_semid_ds u;
  label *label;
};

/* 8497 */
struct __attribute__((aligned(8))) user_semid_ds
{
  ipc_perm sem_perm;
  sem *sem_base;
  unsigned __int16 sem_nsems;
  user_time_t sem_otime;
  __int32_t sem_pad1;
  user_time_t sem_ctime;
  __int32_t sem_pad2;
  __int32_t sem_pad3[4];
};

/* 8498 */
struct sem
{
  unsigned __int16 semval;
  pid_t sempid;
  unsigned __int16 semncnt;
  unsigned __int16 semzcnt;
};

/* 8499 */
struct sem_undo
{
  int un_next_idx;
  proc *un_proc;
  __int16 un_cnt;
  undo *un_ent;
};

/* 8500 */
struct undo
{
  __int16 une_adjval;
  __int16 une_num;
  int une_id;
  undo *une_next;
};

/* 8501 */
typedef user_semun user_semun_t;

/* 8502 */
union user_semun
{
  user_addr_t buf;
  user_addr_t array;
};

/* 8503 */
struct user32_semid_ds
{
  ipc_perm sem_perm;
  int32_t sem_base;
  unsigned __int16 sem_nsems;
  user32_time_t sem_otime;
  int32_t sem_pad1;
  user32_time_t sem_ctime;
  int32_t sem_pad2;
  int32_t sem_pad3[4];
};

/* 8504 */
struct user64_semid_ds
{
  ipc_perm sem_perm;
  int32_t sem_base;
  unsigned __int16 sem_nsems;
  user64_time_t sem_otime;
  int32_t sem_pad1;
  __attribute__((packed)) __attribute__((aligned(1))) user64_time_t sem_ctime;
  int32_t sem_pad2;
  int32_t sem_pad3[4];
};

/* 8505 */
union IPCS_sem_sysctl::$8CCE190138F403BC54BE7E41A1853F40
{
  user32_IPCS_command u32;
  user_IPCS_command u64;
};

/* 8506 */
struct semsys_args
{
  u_int which;
  char which_r_[4];
  int a2;
  char a2_r_[4];
  int a3;
  char a3_r_[4];
  int a4;
  char a4_r_[4];
  int a5;
  char a5_r_[4];
};

/* 8507 */
struct semctl_args
{
  int semid;
  char semid_r_[4];
  int semnum;
  char semnum_r_[4];
  int cmd;
  char cmd_r_[4];
  user_addr_t arg;
  char arg_r_[];
};

/* 8508 */
struct semget_args
{
  key_t key;
  char key_r_[4];
  int nsems;
  char nsems_r_[4];
  int semflg;
  char semflg_r_[4];
};

/* 8509 */
struct semop_args
{
  int semid;
  char semid_r_[4];
  user_addr_t sops;
  int nsops;
  char nsops_r_[4];
};

/* 8510 */
struct sembuf
{
  unsigned __int16 sem_num;
  __int16 sem_op;
  __int16 sem_flg;
};

/* 8511 */
struct msginfo
{
  int msgmax;
  int msgmni;
  int msgmnb;
  int msgtql;
  int msgssz;
  int msgseg;
};

/* 8512 */
struct msg
{
  msg *msg_next;
  __int64 msg_type;
  unsigned __int16 msg_ts;
  __int16 msg_spot;
  label *label;
};

/* 8513 */
struct msgmap
{
  __int16 next;
};

/* 8514 */
struct msqid_kernel
{
  user_msqid_ds u;
  label *label;
};

/* 8515 */
struct __attribute__((aligned(8))) user_msqid_ds
{
  ipc_perm msg_perm;
  msg *msg_first;
  msg *msg_last;
  user_msglen_t msg_cbytes;
  user_msgqnum_t msg_qnum;
  user_msglen_t msg_qbytes;
  pid_t msg_lspid;
  pid_t msg_lrpid;
  user_time_t msg_stime;
  __int32_t msg_pad1;
  user_time_t msg_rtime;
  __int32_t msg_pad2;
  user_time_t msg_ctime;
  __int32_t msg_pad3;
  __int32_t msg_pad4[4];
};

/* 8516 */
typedef user_ulong_t user_msglen_t;

/* 8517 */
typedef user_ulong_t user_msgqnum_t;

/* 8518 */
struct msgsnd_nocancel_args
{
  int msqid;
  char msqid_r_[4];
  user_addr_t msgp;
  user_size_t msgsz;
  int msgflg;
  char msgflg_r_[4];
};

/* 8519 */
struct msgrcv_nocancel_args
{
  int msqid;
  char msqid_r_[4];
  user_addr_t msgp;
  user_size_t msgsz;
  user_long_t msgtyp;
  int msgflg;
  char msgflg_r_[4];
};

/* 8520 */
struct user32_msqid_ds
{
  ipc_perm msg_perm;
  __int32_t msg_first;
  __int32_t msg_last;
  user32_msglen_t msg_cbytes;
  user32_msgqnum_t msg_qnum;
  user32_msglen_t msg_qbytes;
  pid_t msg_lspid;
  pid_t msg_lrpid;
  user32_time_t msg_stime;
  __int32_t msg_pad1;
  user32_time_t msg_rtime;
  __int32_t msg_pad2;
  user32_time_t msg_ctime;
  __int32_t msg_pad3;
  __int32_t msg_pad4[4];
};

/* 8521 */
typedef user32_ulong_t user32_msglen_t;

/* 8522 */
typedef user32_ulong_t user32_msgqnum_t;

/* 8523 */
struct __attribute__((packed)) __attribute__((aligned(4))) user64_msqid_ds
{
  ipc_perm msg_perm;
  __int32_t msg_first;
  __int32_t msg_last;
  user64_msglen_t msg_cbytes;
  user64_msgqnum_t msg_qnum;
  user64_msglen_t msg_qbytes;
  pid_t msg_lspid;
  pid_t msg_lrpid;
  user64_time_t msg_stime;
  __int32_t msg_pad1;
  user64_time_t msg_rtime;
  __int32_t msg_pad2;
  user64_time_t msg_ctime;
  __int32_t msg_pad3;
  __int32_t msg_pad4[4];
};

/* 8524 */
typedef user64_ulong_t user64_msglen_t;

/* 8525 */
typedef user64_ulong_t user64_msgqnum_t;

/* 8526 */
union IPCS_msg_sysctl::$8CCE190138F403BC54BE7E41A1853F40
{
  user32_IPCS_command u32;
  user_IPCS_command u64;
};

/* 8527 */
struct msgsys_args
{
  u_int which;
  char which_r_[4];
  int a2;
  char a2_r_[4];
  int a3;
  char a3_r_[4];
  int a4;
  char a4_r_[4];
  int a5;
  char a5_r_[4];
};

/* 8528 */
struct msgctl_args
{
  int msqid;
  char msqid_r_[4];
  int cmd;
  char cmd_r_[4];
  user_addr_t buf;
  char buf_r_[];
};

/* 8529 */
struct msgget_args
{
  key_t key;
  char key_r_[4];
  int msgflg;
  char msgflg_r_[4];
};

/* 8530 */
struct msgsnd_args
{
  int msqid;
  char msqid_r_[4];
  user_addr_t msgp;
  user_size_t msgsz;
  int msgflg;
  char msgflg_r_[4];
};

/* 8531 */
struct msgrcv_args
{
  int msqid;
  char msqid_r_[4];
  user_addr_t msgp;
  user_size_t msgsz;
  user_long_t msgtyp;
  int msgflg;
  char msgflg_r_[4];
};

/* 8532 */
typedef int load_return_t;

/* 8533 */
struct $<16520520,1>::$FAD783685432F6A494D61E003852D84A
{
  mach_header __header;
  load_result_t __myresult;
  macho_data __macho_data;
};

/* 8534 */
struct macho_data
{
  nameidata __nid;
  macho_vnode_header __header;
};

/* 8535 */
union macho_vnode_header
{
  mach_header mach_header;
  fat_header fat_header;
  char __pad[512];
};

/* 8536 */
struct entry_point_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint64_t_0 entryoff;
  uint64_t_0 stacksize;
};

/* 8537 */
struct dylinker_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  lc_str name;
};

/* 8538 */
union lc_str
{
  uint32_t_0 offset;
};

/* 8539 */
struct linkedit_data_command_0
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint32_t_0 dataoff;
  uint32_t_0 datasize;
};

/* 8540 */
struct encryption_info_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint32_t_0 cryptoff;
  uint32_t_0 cryptsize;
  uint32_t_0 cryptid;
};

/* 8541 */
union $<16544199,1>::$89D0C6911A12B90E66E09871C1ACE72F
{
  section s32;
  section_64_0 s64;
};

/* 8542 */
struct section
{
  char sectname[16];
  char segname[16];
  uint32_t_0 addr;
  uint32_t_0 size;
  uint32_t_0 offset;
  uint32_t_0 align;
  uint32_t_0 reloff;
  uint32_t_0 nreloc;
  uint32_t_0 flags;
  uint32_t_0 reserved1;
  uint32_t_0 reserved2;
};

/* 8543 */
struct psemhashhead
{
  psemcache *lh_first;
};

/* 8544 */
struct __attribute__((aligned(8))) psemcache
{
  psemcache::$3B831F8740E148600E17D23DD8599EAD psem_hash;
  pseminfo *pseminfo;
  int psem_nlen;
  char psem_name[32];
};

/* 8545 */
struct psemcache::$3B831F8740E148600E17D23DD8599EAD
{
  psemcache *le_next;
  psemcache **le_prev;
};

/* 8546 */
struct pseminfo
{
  unsigned int psem_flags;
  unsigned int psem_usecount;
  mode_t psem_mode;
  uid_t psem_uid;
  gid_t psem_gid;
  char psem_name[32];
  semaphore_t psem_semobject;
  label *psem_label;
  pid_t psem_creator_pid;
  uint64_t_0 psem_creator_uniqueid;
};

/* 8547 */
struct psemstats
{
  __int64 goodhits;
  __int64 neghits;
  __int64 badhits;
  __int64 falsehits;
  __int64 miss;
  __int64 longnames;
};

/* 8548 */
struct sem_wait_nocancel_args
{
  user_addr_t sem;
  char sem_r_[];
};

/* 8549 */
struct __attribute__((aligned(8))) psemname
{
  char *psem_nameptr;
  __int64 psem_namelen;
  u_int32_t psem_hash;
};

/* 8550 */
struct sem_unlink_args
{
  user_addr_t name;
  char name_r_[];
};

/* 8551 */
struct sem_close_args
{
  user_addr_t sem;
  char sem_r_[];
};

/* 8552 */
struct sem_wait_args
{
  user_addr_t sem;
  char sem_r_[];
};

/* 8553 */
struct sem_trywait_args
{
  user_addr_t sem;
  char sem_r_[];
};

/* 8554 */
struct sem_post_args
{
  user_addr_t sem;
  char sem_r_[];
};

/* 8555 */
struct psem_info
{
  vinfo_stat psem_stat;
  char psem_name[1024];
};

/* 8556 */
struct pshmhashhead
{
  pshmcache *lh_first;
};

/* 8557 */
struct __attribute__((aligned(8))) pshmcache
{
  pshmcache::$B91CA58BC651FC6F6C790D75FA14096A pshm_hash;
  pshminfo *pshminfo;
  int pshm_nlen;
  char pshm_name[32];
};

/* 8558 */
struct pshmcache::$B91CA58BC651FC6F6C790D75FA14096A
{
  pshmcache *le_next;
  pshmcache **le_prev;
};

/* 8559 */
struct pshminfo
{
  unsigned int pshm_flags;
  unsigned int pshm_usecount;
  off_t pshm_length;
  mode_t pshm_mode;
  uid_t pshm_uid;
  gid_t pshm_gid;
  char pshm_name[32];
  pshmobj *pshm_memobjects;
  label *pshm_label;
};

/* 8560 */
struct pshmobj
{
  void *pshmo_memobject;
  memory_object_size_t pshmo_size;
  pshmobj *pshmo_next;
};

/* 8561 */
struct pshmstats
{
  __int64 goodhits;
  __int64 neghits;
  __int64 badhits;
  __int64 falsehits;
  __int64 miss;
  __int64 longnames;
};

/* 8562 */
struct pshmname
{
  char *pshm_nameptr;
  __int64 pshm_namelen;
  u_long pshm_hash;
};

/* 8563 */
struct shm_open_args
{
  user_addr_t name;
  int oflag;
  char oflag_r_[4];
  int mode;
  char mode_r_[4];
};

/* 8564 */
struct shm_unlink_args
{
  user_addr_t name;
  char name_r_[];
};

/* 8565 */
struct pshm_info
{
  vinfo_stat pshm_stat;
  uint64_t_0 pshm_mappaddr;
  char pshm_name[1024];
};

/* 8566 */
typedef void (*sock_evupcall)(socket_t, void *, u_int32_t);

/* 8567 */
struct socket_filter_list
{
  socket_filter *tqh_first;
  socket_filter **tqh_last;
};

/* 8568 */
struct socket_filter::$29DEED09B8CF87D935AF213D229FE320
{
  socket_filter *tqe_next;
  socket_filter **tqe_prev;
};

/* 8569 */
struct sflt_filter
{
  sflt_handle sf_handle;
  int sf_flags;
  char *sf_name;
  sf_unregistered_func sf_unregistered;
  sf_attach_func sf_attach;
  sf_detach_func sf_detach;
  sf_notify_func sf_notify;
  sf_getpeername_func sf_getpeername;
  sf_getsockname_func sf_getsockname;
  sf_data_in_func sf_data_in;
  sf_data_out_func sf_data_out;
  sf_connect_in_func sf_connect_in;
  sf_connect_out_func sf_connect_out;
  sf_bind_func sf_bind;
  sf_setoption_func sf_setoption;
  sf_getoption_func sf_getoption;
  sf_listen_func sf_listen;
  sf_ioctl_func sf_ioctl;
  sflt_filter_ext sf_ext;
};

/* 8570 */
typedef u_int32_t sflt_handle;

/* 8571 */
typedef void (*sf_unregistered_func)(sflt_handle);

/* 8572 */
typedef errno_t (*sf_attach_func)(void **, socket_t);

/* 8573 */
typedef void (*sf_detach_func)(void *, socket_t);

/* 8574 */
typedef void (*sf_notify_func)(void *, socket_t, sflt_event_t, void *);

/* 8575 */
typedef u_int32_t sflt_event_t;

/* 8576 */
typedef int (*sf_getpeername_func)(void *, socket_t, sockaddr **);

/* 8577 */
typedef int (*sf_getsockname_func)(void *, socket_t, sockaddr **);

/* 8578 */
typedef errno_t (*sf_data_in_func)(void *, socket_t, const sockaddr *, mbuf_t *, mbuf_t *, sflt_data_flag_t);

/* 8579 */
typedef u_int32_t sflt_data_flag_t;

/* 8580 */
typedef errno_t (*sf_data_out_func)(void *, socket_t, const sockaddr *, mbuf_t *, mbuf_t *, sflt_data_flag_t);

/* 8581 */
typedef errno_t (*sf_connect_in_func)(void *, socket_t, const sockaddr *);

/* 8582 */
typedef errno_t (*sf_connect_out_func)(void *, socket_t, const sockaddr *);

/* 8583 */
typedef errno_t (*sf_bind_func)(void *, socket_t, const sockaddr *);

/* 8584 */
typedef errno_t (*sf_setoption_func)(void *, socket_t, sockopt_t);

/* 8585 */
typedef sockopt *sockopt_t;

/* 8586 */
typedef errno_t (*sf_getoption_func)(void *, socket_t, sockopt_t);

/* 8587 */
typedef errno_t (*sf_listen_func)(void *, socket_t);

/* 8588 */
typedef errno_t (*sf_ioctl_func)(void *, socket_t, unsigned __int64, const char *);

/* 8589 */
struct sflt_filter_ext
{
  unsigned int sf_ext_len;
  sf_accept_func sf_ext_accept;
  void *sf_ext_rsvd[5];
};

/* 8590 */
typedef errno_t (*sf_accept_func)(void *, socket_t, socket_t, const sockaddr *, const sockaddr *);

/* 8591 */
struct solist
{
  solist *next;
  socket *so;
};

/* 8592 */
typedef u_int8_t sockopt_dir;

/* 8593 */
struct proc_fdinfo
{
  int32_t proc_fd;
  uint32_t_0 proc_fdtype;
};

/* 8594 */
struct proc_fileportinfo
{
  uint32_t_0 proc_fileport;
  uint32_t_0 proc_fdtype;
};

/* 8595 */
struct proc_bsdinfo
{
  uint32_t_0 pbi_flags;
  uint32_t_0 pbi_status;
  uint32_t_0 pbi_xstatus;
  uint32_t_0 pbi_pid;
  uint32_t_0 pbi_ppid;
  uid_t pbi_uid;
  gid_t pbi_gid;
  uid_t pbi_ruid;
  gid_t pbi_rgid;
  uid_t pbi_svuid;
  gid_t pbi_svgid;
  uint32_t_0 rfu_1;
  char pbi_comm[16];
  char pbi_name[32];
  uint32_t_0 pbi_nfiles;
  uint32_t_0 pbi_pgid;
  uint32_t_0 pbi_pjobc;
  uint32_t_0 e_tdev;
  uint32_t_0 e_tpgid;
  int32_t pbi_nice;
  uint64_t_0 pbi_start_tvsec;
  uint64_t_0 pbi_start_tvusec;
};

/* 8596 */
struct proc_taskinfo
{
  uint64_t_0 pti_virtual_size;
  uint64_t_0 pti_resident_size;
  uint64_t_0 pti_total_user;
  uint64_t_0 pti_total_system;
  uint64_t_0 pti_threads_user;
  uint64_t_0 pti_threads_system;
  int32_t pti_policy;
  int32_t pti_faults;
  int32_t pti_pageins;
  int32_t pti_cow_faults;
  int32_t pti_messages_sent;
  int32_t pti_messages_received;
  int32_t pti_syscalls_mach;
  int32_t pti_syscalls_unix;
  int32_t pti_csw;
  int32_t pti_threadnum;
  int32_t pti_numrunning;
  int32_t pti_priority;
};

/* 8597 */
struct proc_threadwithpathinfo
{
  proc_threadinfo pt;
  vnode_info_path pvip;
};

/* 8598 */
struct proc_threadinfo
{
  uint64_t_0 pth_user_time;
  uint64_t_0 pth_system_time;
  int32_t pth_cpu_usage;
  int32_t pth_policy;
  int32_t pth_run_state;
  int32_t pth_flags;
  int32_t pth_sleep_time;
  int32_t pth_curpri;
  int32_t pth_priority;
  int32_t pth_maxpriority;
  char pth_name[64];
};

/* 8599 */
struct vnode_info_path
{
  vnode_info vip_vi;
  char vip_path[1024];
};

/* 8600 */
struct vnode_info
{
  vinfo_stat vi_stat;
  int vi_type;
  int vi_pad;
  fsid_t vi_fsid;
};

/* 8601 */
struct proc_bsdshortinfo
{
  uint32_t_0 pbsi_pid;
  uint32_t_0 pbsi_ppid;
  uint32_t_0 pbsi_pgid;
  uint32_t_0 pbsi_status;
  char pbsi_comm[16];
  uint32_t_0 pbsi_flags;
  uid_t pbsi_uid;
  gid_t pbsi_gid;
  uid_t pbsi_ruid;
  gid_t pbsi_rgid;
  uid_t pbsi_svuid;
  gid_t pbsi_svgid;
  uint32_t_0 pbsi_rfu;
};

/* 8602 */
struct proc_archinfo
{
  cpu_type_t p_cputype;
  cpu_subtype_t p_cpusubtype;
};

/* 8603 */
struct proc_pidcoalitioninfo
{
  uint64_t_0 coalition_id[2];
  uint64_t_0 reserved1;
  uint64_t_0 reserved2;
  uint64_t_0 reserved3;
};

/* 8604 */
struct proc_exitreasoninfo
{
  uint32_t_0 eri_namespace;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 eri_code;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 eri_flags;
  uint32_t_0 eri_reason_buf_size;
  uint64_t_0 eri_kcd_buf;
};

/* 8605 */
struct proc_exitreasonbasicinfo
{
  uint32_t_0 beri_namespace;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 beri_code;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 beri_flags;
  uint32_t_0 beri_reason_buf_size;
};

/* 8606 */
struct proc_bsdinfowithuniqid
{
  proc_bsdinfo pbsd;
  proc_uniqidentifierinfo p_uniqidentifier;
};

/* 8607 */
struct proc_taskallinfo
{
  proc_bsdinfo pbsd;
  proc_taskinfo ptinfo;
};

/* 8608 */
struct fileport_info_args
{
  int fia_flavor;
  user_addr_t fia_buffer;
  uint32_t_0 fia_buffersize;
  int32_t *fia_retval;
};

/* 8609 */
struct proc_originatorinfo
{
  uuid_t originator_uuid;
  pid_t originator_pid;
  uint64_t_0 p_reserve2;
  uint64_t_0 p_reserve3;
  uint64_t_0 p_reserve4;
};

/* 8610 */
struct vnode_fdinfowithpath
{
  proc_fileinfo pfi;
  vnode_info_path pvip;
};

/* 8611 */
struct proc_fileinfo
{
  uint32_t_0 fi_openflags;
  uint32_t_0 fi_status;
  off_t fi_offset;
  int32_t fi_type;
  uint32_t_0 fi_guardflags;
};

/* 8612 */
struct socket_fdinfo
{
  proc_fileinfo pfi;
  socket_info psi;
};

/* 8613 */
struct pshm_fdinfo
{
  proc_fileinfo pfi;
  pshm_info pshminfo;
};

/* 8614 */
struct pipe_fdinfo
{
  proc_fileinfo pfi;
  pipe_info pipeinfo;
};

/* 8615 */
struct vnode_fdinfo
{
  proc_fileinfo pfi;
  vnode_info pvi;
};

/* 8616 */
struct psem_fdinfo
{
  proc_fileinfo pfi;
  psem_info pseminfo;
};

/* 8617 */
struct kqueue_fdinfo
{
  proc_fileinfo pfi;
  kqueue_info kqueueinfo;
};

/* 8618 */
struct channel_fdinfo
{
  proc_fileinfo pfi;
  proc_channel_info channelinfo;
};

/* 8619 */
struct proc_channel_info
{
  uuid_t chi_instance;
  uint32_t_0 chi_port;
  uint32_t_0 chi_type;
  uint32_t_0 chi_flags;
  uint32_t_0 rfu_1;
};

/* 8620 */
struct proc_regioninfo
{
  uint32_t_0 pri_protection;
  uint32_t_0 pri_max_protection;
  uint32_t_0 pri_inheritance;
  uint32_t_0 pri_flags;
  uint64_t_0 pri_offset;
  uint32_t_0 pri_behavior;
  uint32_t_0 pri_user_wired_count;
  uint32_t_0 pri_user_tag;
  uint32_t_0 pri_pages_resident;
  uint32_t_0 pri_pages_shared_now_private;
  uint32_t_0 pri_pages_swapped_out;
  uint32_t_0 pri_pages_dirtied;
  uint32_t_0 pri_ref_count;
  uint32_t_0 pri_shadow_depth;
  uint32_t_0 pri_share_mode;
  uint32_t_0 pri_private_pages_resident;
  uint32_t_0 pri_shared_pages_resident;
  uint32_t_0 pri_obj_id;
  uint32_t_0 pri_depth;
  uint64_t_0 pri_address;
  uint64_t_0 pri_size;
};

/* 8621 */
struct proc_regionwithpathinfo
{
  proc_regioninfo prp_prinfo;
  vnode_info_path prp_vip;
};

/* 8622 */
struct proc_vnodepathinfo
{
  vnode_info_path pvi_cdir;
  vnode_info_path pvi_rdir;
};

/* 8623 */
struct fileport_fdtype_args
{
  proc_fileportinfo *ffa_pfi;
  proc_fileportinfo *ffa_pfi_end;
};

/* 8624 */
struct atalk;

/* 8625 */
typedef proc_policy_cpuusage_attr proc_policy_cpuusage_attr_t;

/* 8626 */
struct proc_policy_cpuusage_attr
{
  uint32_t_0 ppattr_cpu_attr;
  uint32_t_0 ppattr_cpu_percentage;
  uint64_t_0 ppattr_cpu_attr_interval;
  uint64_t_0 ppattr_cpu_attr_deadline;
};

/* 8627 */
struct system_override_args
{
  uint64_t_0 timeout;
  uint64_t_0 flags;
  char flags_r_[];
};

/* 8628 */
struct eventhandler_entry_generic
{
  eventhandler_entry ee;
  void (*func)(void);
};

/* 8629 */
typedef int pager_return_t;

/* 8630 */
struct dk_set_tier_t
{
  dk_extent_t *extents;
  uint32_t_0 extentsCount;
  uint8_t_0 tier;
  uint8_t_0 reserved0104[3];
};

/* 8631 */
struct swapon_args
{
  int32_t dummy;
};

/* 8632 */
struct pid_for_task_args
{
  mach_port_name_t t;
  char t_r_[4];
  user_addr_t pid;
  char pid_r_[];
};

/* 8633 */
struct task_for_pid_args
{
  mach_port_name_t target_tport;
  char target_tport_r_[4];
  int pid;
  char pid_r_[4];
  user_addr_t t;
  char t_r_[];
};

/* 8634 */
struct task_name_for_pid_args
{
  mach_port_name_t target_tport;
  char target_tport_r_[4];
  int pid;
  char pid_r_[4];
  user_addr_t t;
  char t_r_[];
};

/* 8635 */
struct pid_suspend_args
{
  int pid;
  char pid_r_[4];
};

/* 8636 */
struct pid_resume_args
{
  int pid;
  char pid_r_[4];
};

/* 8637 */
struct pid_shutdown_sockets_args
{
  int pid;
  char pid_r_[4];
  int level;
  char level_r_[4];
};

/* 8638 */
struct shared_region_check_np_args
{
  user_addr_t start_address;
  char start_address_r_[];
};

/* 8639 */
struct vm_pressure_monitor_args
{
  int wait_for_pressure;
  char wait_for_pressure_r_[4];
  int nsecs_monitored;
  char nsecs_monitored_r_[4];
  user_addr_t pages_reclaimed;
  char pages_reclaimed_r_[];
};

/* 8640 */
struct kas_info_args
{
  int selector;
  char selector_r_[4];
  user_addr_t value;
  user_addr_t size;
  char size_r_[];
};

/* 8641 */
struct macx_backing_store_recovery_args
{
  int pid;
  char pid_r_[4];
};

/* 8642 */
struct macx_backing_store_suspend_args
{
  boolean_t suspend;
  char suspend_r_[4];
};

/* 8643 */
struct macx_triggers_args
{
  int hi_water;
  char hi_water_r_[4];
  int low_water;
  char low_water_r_[4];
  int flags;
  char flags_r_[4];
  mach_port_t alert_port;
  char alert_port_r_[];
};

/* 8644 */
struct macx_swapon_args
{
  uint64_t_0 filename;
  int flags;
  char flags_r_[4];
  int size;
  char size_r_[4];
  int priority;
  char priority_r_[4];
};

/* 8645 */
struct macx_swapoff_args
{
  uint64_t_0 filename;
  int flags;
  char flags_r_[4];
};

/* 8646 */
typedef _dk_cs_unmap _dk_cs_unmap_t;

/* 8647 */
struct _dk_cs_unmap
{
  dk_extent_t *extents;
  uint32_t_0 extentsCount;
  uint32_t_0 options;
};

/* 8648 */
typedef int64_t l_fp;

/* 8649 */
typedef timer_call_0 timer_call_data_t_0;

/* 8650 */
struct __attribute__((aligned(8))) ntptimeval
{
  timespec time;
  __int64 maxerror;
  __int64 esterror;
  __int64 tai;
  int time_state;
};

/* 8651 */
struct ntp_gettime_args
{
  user_addr_t ntvp;
  char ntvp_r_[];
};

/* 8652 */
struct user64_ntptimeval
{
  user64_timespec time;
  user64_long_t maxerror;
  user64_long_t esterror;
  user64_long_t tai;
  __int64_t time_state;
};

/* 8653 */
struct user32_ntptimeval
{
  user32_timespec time;
  user32_long_t maxerror;
  user32_long_t esterror;
  user32_long_t tai;
  __int32_t time_state;
};

/* 8654 */
struct ntp_adjtime_args
{
  user_addr_t tp;
  char tp_r_[];
};

/* 8655 */
struct timex
{
  unsigned int modes;
  __int64 offset;
  __int64 freq;
  __int64 maxerror;
  __int64 esterror;
  int status;
  __int64 constant;
  __int64 precision;
  __int64 tolerance;
  __int64 ppsfreq;
  __int64 jitter;
  int shift;
  __int64 stabil;
  __int64 jitcnt;
  __int64 calcnt;
  __int64 errcnt;
  __int64 stbcnt;
};

/* 8656 */
struct user64_timex
{
  u_int32_t modes;
  user64_long_t offset;
  user64_long_t freq;
  user64_long_t maxerror;
  user64_long_t esterror;
  __int32_t status;
  user64_long_t constant;
  user64_long_t precision;
  user64_long_t tolerance;
  user64_long_t ppsfreq;
  user64_long_t jitter;
  __int32_t shift;
  user64_long_t stabil;
  user64_long_t jitcnt;
  user64_long_t calcnt;
  user64_long_t errcnt;
  user64_long_t stbcnt;
};

/* 8657 */
struct user32_timex
{
  u_int32_t modes;
  user32_long_t offset;
  user32_long_t freq;
  user32_long_t maxerror;
  user32_long_t esterror;
  __int32_t status;
  user32_long_t constant;
  user32_long_t precision;
  user32_long_t tolerance;
  user32_long_t ppsfreq;
  user32_long_t jitter;
  __int32_t shift;
  user32_long_t stabil;
  user32_long_t jitcnt;
  user32_long_t calcnt;
  user32_long_t errcnt;
  user32_long_t stbcnt;
};

/* 8658 */
struct adjtime_args
{
  user_addr_t delta;
  user_addr_t olddelta;
  char olddelta_r_[];
};

/* 8659 */
struct cblock
{
  cblock *c_next;
  char c_quote[8];
  char c_info[48];
};

/* 8660 */
struct domains_head
{
  domain *tqh_first;
  domain **tqh_last;
};

/* 8661 */
struct callout;

/* 8662 */
struct chunklist_pubkey
{
  const _Bool isprod;
  const uint8_t_0 key[256];
};

/* 8663 */
struct __attribute__((packed)) __attribute__((aligned(4))) chunklist_hdr
{
  uint32_t_0 cl_magic;
  uint32_t_0 cl_header_size;
  uint8_t_0 cl_file_ver;
  uint8_t_0 cl_chunk_method;
  uint8_t_0 cl_sig_method;
  uint8_t_0 __unused1;
  uint64_t_0 cl_chunk_count;
  uint64_t_0 cl_chunk_offset;
  uint64_t_0 cl_sig_offset;
};

/* 8664 */
struct rsa_pub_ctx
{
  ccrsa_pub_ctx key[66];
};

/* 8665 */
struct ccrsa_pub_ctx
{
  cc_size pb_n;
  cc_unit pb_options;
  ccmod_func_t pb_mod_prime;
  cc_unit pb_ccn[];
};

/* 8666 */
typedef size_t_0 cc_size;

/* 8667 */
typedef void (*ccmod_func_t)(cc_ws_t, cczp_const_t, cc_unit *, const cc_unit *);

/* 8668 */
typedef $A5EA4F421C66A1486B18233068EB4896 *cc_ws_t;

/* 8669 */
struct $A5EA4F421C66A1486B18233068EB4896
{
  cc_unit *start;
  cc_unit *end;
};

/* 8670 */
typedef const cczp *cczp_const_t;

/* 8671 */
struct cczp
{
  cc_size n;
  cc_unit options;
  ccmod_func_t mod_prime;
  cc_unit ccn[];
};

/* 8672 */
struct chunklist_chunk
{
  uint32_t_0 chunk_size;
  uint8_t_0 chunk_sha256[32];
};

/* 8673 */
enum kperf_request : __int32
{
  REQ_SAMPLING = 0x0,
  REQ_RESET = 0x1,
  REQ_ACTION_COUNT = 0x2,
  REQ_ACTION_SAMPLERS = 0x3,
  REQ_ACTION_USERDATA = 0x4,
  REQ_ACTION_FILTER_BY_TASK = 0x5,
  REQ_ACTION_FILTER_BY_PID = 0x6,
  REQ_ACTION_UCALLSTACK_DEPTH = 0x7,
  REQ_ACTION_KCALLSTACK_DEPTH = 0x8,
  REQ_TIMER_COUNT = 0x9,
  REQ_TIMER_PERIOD = 0xA,
  REQ_TIMER_PET = 0xB,
  REQ_TIMER_ACTION = 0xC,
  REQ_KDBG_CSWITCH = 0xD,
  REQ_BLESS = 0xE,
  REQ_BLESS_PREEMPT = 0xF,
  REQ_PET_IDLE_RATE = 0x10,
  REQ_LIGHTWEIGHT_PET = 0x11,
  REQ_KDEBUG_FILTER = 0x12,
  REQ_KDEBUG_ACTION = 0x13,
  REQ_LAZY_WAIT_TIME_THRESHOLD = 0x14,
  REQ_LAZY_WAIT_ACTION = 0x15,
  REQ_LAZY_CPU_TIME_THRESHOLD = 0x16,
  REQ_LAZY_CPU_ACTION = 0x17,
};

/* 8674 */
enum kperf_limit_request : __int32
{
  REQ_LIM_PERIOD_NS = 0x0,
  REQ_LIM_BG_PERIOD_NS = 0x1,
  REQ_LIM_PET_PERIOD_NS = 0x2,
  REQ_LIM_BG_PET_PERIOD_NS = 0x3,
};

/* 8675 */
struct proc_uuid_policy_hashhead
{
  proc_uuid_policy_entry *lh_first;
};

/* 8676 */
struct __attribute__((aligned(8))) proc_uuid_policy_entry
{
  proc_uuid_policy_entry::$D462AD3FC541ED4375601BD060B8E9D4 entries;
  uuid_t uuid;
  uint32_t_0 flags;
};

/* 8677 */
struct proc_uuid_policy_entry::$D462AD3FC541ED4375601BD060B8E9D4
{
  proc_uuid_policy_entry *le_next;
  proc_uuid_policy_entry **le_prev;
};

/* 8678 */
struct proc_uuid_policy_args
{
  uint32_t_0 operation;
  char operation_r_[4];
  user_addr_t uuid;
  user_size_t uuidlen;
  uint32_t_0 flags;
  char flags_r_[4];
};

/* 8679 */
typedef int64_t register_t;

/* 8680 */
struct null_node_hashhead
{
  null_node *lh_first;
};

/* 8681 */
struct __attribute__((aligned(8))) null_node
{
  null_node::$8746E5B16D076ECB2AABAFD2112C5EEA null_hash;
  vnode *null_lowervp;
  vnode *null_vnode;
  uint32_t_0 null_lowervid;
  uint32_t_0 null_myvid;
  uint32_t_0 null_flags;
};

/* 8682 */
struct null_node::$8746E5B16D076ECB2AABAFD2112C5EEA
{
  null_node *le_next;
  null_node **le_prev;
};

/* 8683 */
struct null_mount
{
  vnode *nullm_rootvp;
  vnode *nullm_secondvp;
  vnode *nullm_thirdcovervp;
  vnode *nullm_lowerrootvp;
  uint32_t_0 nullm_lowerrootvid;
  lck_mtx_t nullm_lock;
  uint64_t_0 nullm_flags;
};

/* 8684 */
struct mac_policy_conf
{
  const char *mpc_name;
  const char *mpc_fullname;
  const char *const *mpc_labelnames;
  unsigned int mpc_labelname_count;
  const mac_policy_ops *mpc_ops;
  int mpc_loadtime_flags;
  int *mpc_field_off;
  int mpc_runtime_flags;
  mac_policy_conf *mpc_list;
  void *mpc_data;
};

/* 8685 */
struct mac_policy_ops
{
  mpo_audit_check_postselect_t *mpo_audit_check_postselect;
  mpo_audit_check_preselect_t *mpo_audit_check_preselect;
  mpo_bpfdesc_label_associate_t *mpo_bpfdesc_label_associate;
  mpo_bpfdesc_label_destroy_t *mpo_bpfdesc_label_destroy;
  mpo_bpfdesc_label_init_t *mpo_bpfdesc_label_init;
  mpo_bpfdesc_check_receive_t *mpo_bpfdesc_check_receive;
  mpo_cred_check_label_update_execve_t *mpo_cred_check_label_update_execve;
  mpo_cred_check_label_update_t *mpo_cred_check_label_update;
  mpo_cred_check_visible_t *mpo_cred_check_visible;
  mpo_cred_label_associate_fork_t *mpo_cred_label_associate_fork;
  mpo_cred_label_associate_kernel_t *mpo_cred_label_associate_kernel;
  mpo_cred_label_associate_t *mpo_cred_label_associate;
  mpo_cred_label_associate_user_t *mpo_cred_label_associate_user;
  mpo_cred_label_destroy_t *mpo_cred_label_destroy;
  mpo_cred_label_externalize_audit_t *mpo_cred_label_externalize_audit;
  mpo_cred_label_externalize_t *mpo_cred_label_externalize;
  mpo_cred_label_init_t *mpo_cred_label_init;
  mpo_cred_label_internalize_t *mpo_cred_label_internalize;
  mpo_cred_label_update_execve_t *mpo_cred_label_update_execve;
  mpo_cred_label_update_t *mpo_cred_label_update;
  mpo_devfs_label_associate_device_t *mpo_devfs_label_associate_device;
  mpo_devfs_label_associate_directory_t *mpo_devfs_label_associate_directory;
  mpo_devfs_label_copy_t *mpo_devfs_label_copy;
  mpo_devfs_label_destroy_t *mpo_devfs_label_destroy;
  mpo_devfs_label_init_t *mpo_devfs_label_init;
  mpo_devfs_label_update_t *mpo_devfs_label_update;
  mpo_file_check_change_offset_t *mpo_file_check_change_offset;
  mpo_file_check_create_t *mpo_file_check_create;
  mpo_file_check_dup_t *mpo_file_check_dup;
  mpo_file_check_fcntl_t *mpo_file_check_fcntl;
  mpo_file_check_get_offset_t *mpo_file_check_get_offset;
  mpo_file_check_get_t *mpo_file_check_get;
  mpo_file_check_inherit_t *mpo_file_check_inherit;
  mpo_file_check_ioctl_t *mpo_file_check_ioctl;
  mpo_file_check_lock_t *mpo_file_check_lock;
  mpo_file_check_mmap_downgrade_t *mpo_file_check_mmap_downgrade;
  mpo_file_check_mmap_t *mpo_file_check_mmap;
  mpo_file_check_receive_t *mpo_file_check_receive;
  mpo_file_check_set_t *mpo_file_check_set;
  mpo_file_label_init_t *mpo_file_label_init;
  mpo_file_label_destroy_t *mpo_file_label_destroy;
  mpo_file_label_associate_t *mpo_file_label_associate;
  mpo_ifnet_check_label_update_t *mpo_ifnet_check_label_update;
  mpo_ifnet_check_transmit_t *mpo_ifnet_check_transmit;
  mpo_ifnet_label_associate_t *mpo_ifnet_label_associate;
  mpo_ifnet_label_copy_t *mpo_ifnet_label_copy;
  mpo_ifnet_label_destroy_t *mpo_ifnet_label_destroy;
  mpo_ifnet_label_externalize_t *mpo_ifnet_label_externalize;
  mpo_ifnet_label_init_t *mpo_ifnet_label_init;
  mpo_ifnet_label_internalize_t *mpo_ifnet_label_internalize;
  mpo_ifnet_label_update_t *mpo_ifnet_label_update;
  mpo_ifnet_label_recycle_t *mpo_ifnet_label_recycle;
  mpo_inpcb_check_deliver_t *mpo_inpcb_check_deliver;
  mpo_inpcb_label_associate_t *mpo_inpcb_label_associate;
  mpo_inpcb_label_destroy_t *mpo_inpcb_label_destroy;
  mpo_inpcb_label_init_t *mpo_inpcb_label_init;
  mpo_inpcb_label_recycle_t *mpo_inpcb_label_recycle;
  mpo_inpcb_label_update_t *mpo_inpcb_label_update;
  mpo_iokit_check_device_t *mpo_iokit_check_device;
  mpo_ipq_label_associate_t *mpo_ipq_label_associate;
  mpo_ipq_label_compare_t *mpo_ipq_label_compare;
  mpo_ipq_label_destroy_t *mpo_ipq_label_destroy;
  mpo_ipq_label_init_t *mpo_ipq_label_init;
  mpo_ipq_label_update_t *mpo_ipq_label_update;
  mpo_file_check_library_validation_t *mpo_file_check_library_validation;
  mpo_vnode_notify_setacl_t *mpo_vnode_notify_setacl;
  mpo_vnode_notify_setattrlist_t *mpo_vnode_notify_setattrlist;
  mpo_vnode_notify_setextattr_t *mpo_vnode_notify_setextattr;
  mpo_vnode_notify_setflags_t *mpo_vnode_notify_setflags;
  mpo_vnode_notify_setmode_t *mpo_vnode_notify_setmode;
  mpo_vnode_notify_setowner_t *mpo_vnode_notify_setowner;
  mpo_vnode_notify_setutimes_t *mpo_vnode_notify_setutimes;
  mpo_vnode_notify_truncate_t *mpo_vnode_notify_truncate;
  mpo_mbuf_label_associate_bpfdesc_t *mpo_mbuf_label_associate_bpfdesc;
  mpo_mbuf_label_associate_ifnet_t *mpo_mbuf_label_associate_ifnet;
  mpo_mbuf_label_associate_inpcb_t *mpo_mbuf_label_associate_inpcb;
  mpo_mbuf_label_associate_ipq_t *mpo_mbuf_label_associate_ipq;
  mpo_mbuf_label_associate_linklayer_t *mpo_mbuf_label_associate_linklayer;
  mpo_mbuf_label_associate_multicast_encap_t *mpo_mbuf_label_associate_multicast_encap;
  mpo_mbuf_label_associate_netlayer_t *mpo_mbuf_label_associate_netlayer;
  mpo_mbuf_label_associate_socket_t *mpo_mbuf_label_associate_socket;
  mpo_mbuf_label_copy_t *mpo_mbuf_label_copy;
  mpo_mbuf_label_destroy_t *mpo_mbuf_label_destroy;
  mpo_mbuf_label_init_t *mpo_mbuf_label_init;
  mpo_mount_check_fsctl_t *mpo_mount_check_fsctl;
  mpo_mount_check_getattr_t *mpo_mount_check_getattr;
  mpo_mount_check_label_update_t *mpo_mount_check_label_update;
  mpo_mount_check_mount_t *mpo_mount_check_mount;
  mpo_mount_check_remount_t *mpo_mount_check_remount;
  mpo_mount_check_setattr_t *mpo_mount_check_setattr;
  mpo_mount_check_stat_t *mpo_mount_check_stat;
  mpo_mount_check_umount_t *mpo_mount_check_umount;
  mpo_mount_label_associate_t *mpo_mount_label_associate;
  mpo_mount_label_destroy_t *mpo_mount_label_destroy;
  mpo_mount_label_externalize_t *mpo_mount_label_externalize;
  mpo_mount_label_init_t *mpo_mount_label_init;
  mpo_mount_label_internalize_t *mpo_mount_label_internalize;
  mpo_netinet_fragment_t *mpo_netinet_fragment;
  mpo_netinet_icmp_reply_t *mpo_netinet_icmp_reply;
  mpo_netinet_tcp_reply_t *mpo_netinet_tcp_reply;
  mpo_pipe_check_ioctl_t *mpo_pipe_check_ioctl;
  mpo_pipe_check_kqfilter_t *mpo_pipe_check_kqfilter;
  mpo_pipe_check_label_update_t *mpo_pipe_check_label_update;
  mpo_pipe_check_read_t *mpo_pipe_check_read;
  mpo_pipe_check_select_t *mpo_pipe_check_select;
  mpo_pipe_check_stat_t *mpo_pipe_check_stat;
  mpo_pipe_check_write_t *mpo_pipe_check_write;
  mpo_pipe_label_associate_t *mpo_pipe_label_associate;
  mpo_pipe_label_copy_t *mpo_pipe_label_copy;
  mpo_pipe_label_destroy_t *mpo_pipe_label_destroy;
  mpo_pipe_label_externalize_t *mpo_pipe_label_externalize;
  mpo_pipe_label_init_t *mpo_pipe_label_init;
  mpo_pipe_label_internalize_t *mpo_pipe_label_internalize;
  mpo_pipe_label_update_t *mpo_pipe_label_update;
  mpo_policy_destroy_t *mpo_policy_destroy;
  mpo_policy_init_t *mpo_policy_init;
  mpo_policy_initbsd_t *mpo_policy_initbsd;
  mpo_policy_syscall_t *mpo_policy_syscall;
  mpo_system_check_sysctlbyname_t *mpo_system_check_sysctlbyname;
  mpo_proc_check_inherit_ipc_ports_t *mpo_proc_check_inherit_ipc_ports;
  mpo_vnode_check_rename_t *mpo_vnode_check_rename;
  mpo_kext_check_query_t *mpo_kext_check_query;
  mpo_proc_notify_exec_complete_t *mpo_proc_notify_exec_complete;
  mpo_reserved_hook_t *mpo_reserved5;
  mpo_reserved_hook_t *mpo_reserved6;
  mpo_proc_check_expose_task_t *mpo_proc_check_expose_task;
  mpo_proc_check_set_host_special_port_t *mpo_proc_check_set_host_special_port;
  mpo_proc_check_set_host_exception_port_t *mpo_proc_check_set_host_exception_port;
  mpo_exc_action_check_exception_send_t *mpo_exc_action_check_exception_send;
  mpo_exc_action_label_associate_t *mpo_exc_action_label_associate;
  mpo_exc_action_label_populate_t *mpo_exc_action_label_populate;
  mpo_exc_action_label_destroy_t *mpo_exc_action_label_destroy;
  mpo_exc_action_label_init_t *mpo_exc_action_label_init;
  mpo_exc_action_label_update_t *mpo_exc_action_label_update;
  mpo_vnode_check_trigger_resolve_t *mpo_vnode_check_trigger_resolve;
  mpo_reserved_hook_t *mpo_reserved1;
  mpo_reserved_hook_t *mpo_reserved2;
  mpo_reserved_hook_t *mpo_reserved3;
  mpo_skywalk_flow_check_connect_t *mpo_skywalk_flow_check_connect;
  mpo_skywalk_flow_check_listen_t *mpo_skywalk_flow_check_listen;
  mpo_posixsem_check_create_t *mpo_posixsem_check_create;
  mpo_posixsem_check_open_t *mpo_posixsem_check_open;
  mpo_posixsem_check_post_t *mpo_posixsem_check_post;
  mpo_posixsem_check_unlink_t *mpo_posixsem_check_unlink;
  mpo_posixsem_check_wait_t *mpo_posixsem_check_wait;
  mpo_posixsem_label_associate_t *mpo_posixsem_label_associate;
  mpo_posixsem_label_destroy_t *mpo_posixsem_label_destroy;
  mpo_posixsem_label_init_t *mpo_posixsem_label_init;
  mpo_posixshm_check_create_t *mpo_posixshm_check_create;
  mpo_posixshm_check_mmap_t *mpo_posixshm_check_mmap;
  mpo_posixshm_check_open_t *mpo_posixshm_check_open;
  mpo_posixshm_check_stat_t *mpo_posixshm_check_stat;
  mpo_posixshm_check_truncate_t *mpo_posixshm_check_truncate;
  mpo_posixshm_check_unlink_t *mpo_posixshm_check_unlink;
  mpo_posixshm_label_associate_t *mpo_posixshm_label_associate;
  mpo_posixshm_label_destroy_t *mpo_posixshm_label_destroy;
  mpo_posixshm_label_init_t *mpo_posixshm_label_init;
  mpo_proc_check_debug_t *mpo_proc_check_debug;
  mpo_proc_check_fork_t *mpo_proc_check_fork;
  mpo_proc_check_get_task_name_t *mpo_proc_check_get_task_name;
  mpo_proc_check_get_task_t *mpo_proc_check_get_task;
  mpo_proc_check_getaudit_t *mpo_proc_check_getaudit;
  mpo_proc_check_getauid_t *mpo_proc_check_getauid;
  mpo_proc_check_getlcid_t *mpo_proc_check_getlcid;
  mpo_proc_check_mprotect_t *mpo_proc_check_mprotect;
  mpo_proc_check_sched_t *mpo_proc_check_sched;
  mpo_proc_check_setaudit_t *mpo_proc_check_setaudit;
  mpo_proc_check_setauid_t *mpo_proc_check_setauid;
  mpo_proc_check_setlcid_t *mpo_proc_check_setlcid;
  mpo_proc_check_signal_t *mpo_proc_check_signal;
  mpo_proc_check_wait_t *mpo_proc_check_wait;
  mpo_proc_label_destroy_t *mpo_proc_label_destroy;
  mpo_proc_label_init_t *mpo_proc_label_init;
  mpo_socket_check_accept_t *mpo_socket_check_accept;
  mpo_socket_check_accepted_t *mpo_socket_check_accepted;
  mpo_socket_check_bind_t *mpo_socket_check_bind;
  mpo_socket_check_connect_t *mpo_socket_check_connect;
  mpo_socket_check_create_t *mpo_socket_check_create;
  mpo_socket_check_deliver_t *mpo_socket_check_deliver;
  mpo_socket_check_kqfilter_t *mpo_socket_check_kqfilter;
  mpo_socket_check_label_update_t *mpo_socket_check_label_update;
  mpo_socket_check_listen_t *mpo_socket_check_listen;
  mpo_socket_check_receive_t *mpo_socket_check_receive;
  mpo_socket_check_received_t *mpo_socket_check_received;
  mpo_socket_check_select_t *mpo_socket_check_select;
  mpo_socket_check_send_t *mpo_socket_check_send;
  mpo_socket_check_stat_t *mpo_socket_check_stat;
  mpo_socket_check_setsockopt_t *mpo_socket_check_setsockopt;
  mpo_socket_check_getsockopt_t *mpo_socket_check_getsockopt;
  mpo_socket_label_associate_accept_t *mpo_socket_label_associate_accept;
  mpo_socket_label_associate_t *mpo_socket_label_associate;
  mpo_socket_label_copy_t *mpo_socket_label_copy;
  mpo_socket_label_destroy_t *mpo_socket_label_destroy;
  mpo_socket_label_externalize_t *mpo_socket_label_externalize;
  mpo_socket_label_init_t *mpo_socket_label_init;
  mpo_socket_label_internalize_t *mpo_socket_label_internalize;
  mpo_socket_label_update_t *mpo_socket_label_update;
  mpo_socketpeer_label_associate_mbuf_t *mpo_socketpeer_label_associate_mbuf;
  mpo_socketpeer_label_associate_socket_t *mpo_socketpeer_label_associate_socket;
  mpo_socketpeer_label_destroy_t *mpo_socketpeer_label_destroy;
  mpo_socketpeer_label_externalize_t *mpo_socketpeer_label_externalize;
  mpo_socketpeer_label_init_t *mpo_socketpeer_label_init;
  mpo_system_check_acct_t *mpo_system_check_acct;
  mpo_system_check_audit_t *mpo_system_check_audit;
  mpo_system_check_auditctl_t *mpo_system_check_auditctl;
  mpo_system_check_auditon_t *mpo_system_check_auditon;
  mpo_system_check_host_priv_t *mpo_system_check_host_priv;
  mpo_system_check_nfsd_t *mpo_system_check_nfsd;
  mpo_system_check_reboot_t *mpo_system_check_reboot;
  mpo_system_check_settime_t *mpo_system_check_settime;
  mpo_system_check_swapoff_t *mpo_system_check_swapoff;
  mpo_system_check_swapon_t *mpo_system_check_swapon;
  mpo_socket_check_ioctl_t *mpo_socket_check_ioctl;
  mpo_sysvmsg_label_associate_t *mpo_sysvmsg_label_associate;
  mpo_sysvmsg_label_destroy_t *mpo_sysvmsg_label_destroy;
  mpo_sysvmsg_label_init_t *mpo_sysvmsg_label_init;
  mpo_sysvmsg_label_recycle_t *mpo_sysvmsg_label_recycle;
  mpo_sysvmsq_check_enqueue_t *mpo_sysvmsq_check_enqueue;
  mpo_sysvmsq_check_msgrcv_t *mpo_sysvmsq_check_msgrcv;
  mpo_sysvmsq_check_msgrmid_t *mpo_sysvmsq_check_msgrmid;
  mpo_sysvmsq_check_msqctl_t *mpo_sysvmsq_check_msqctl;
  mpo_sysvmsq_check_msqget_t *mpo_sysvmsq_check_msqget;
  mpo_sysvmsq_check_msqrcv_t *mpo_sysvmsq_check_msqrcv;
  mpo_sysvmsq_check_msqsnd_t *mpo_sysvmsq_check_msqsnd;
  mpo_sysvmsq_label_associate_t *mpo_sysvmsq_label_associate;
  mpo_sysvmsq_label_destroy_t *mpo_sysvmsq_label_destroy;
  mpo_sysvmsq_label_init_t *mpo_sysvmsq_label_init;
  mpo_sysvmsq_label_recycle_t *mpo_sysvmsq_label_recycle;
  mpo_sysvsem_check_semctl_t *mpo_sysvsem_check_semctl;
  mpo_sysvsem_check_semget_t *mpo_sysvsem_check_semget;
  mpo_sysvsem_check_semop_t *mpo_sysvsem_check_semop;
  mpo_sysvsem_label_associate_t *mpo_sysvsem_label_associate;
  mpo_sysvsem_label_destroy_t *mpo_sysvsem_label_destroy;
  mpo_sysvsem_label_init_t *mpo_sysvsem_label_init;
  mpo_sysvsem_label_recycle_t *mpo_sysvsem_label_recycle;
  mpo_sysvshm_check_shmat_t *mpo_sysvshm_check_shmat;
  mpo_sysvshm_check_shmctl_t *mpo_sysvshm_check_shmctl;
  mpo_sysvshm_check_shmdt_t *mpo_sysvshm_check_shmdt;
  mpo_sysvshm_check_shmget_t *mpo_sysvshm_check_shmget;
  mpo_sysvshm_label_associate_t *mpo_sysvshm_label_associate;
  mpo_sysvshm_label_destroy_t *mpo_sysvshm_label_destroy;
  mpo_sysvshm_label_init_t *mpo_sysvshm_label_init;
  mpo_sysvshm_label_recycle_t *mpo_sysvshm_label_recycle;
  mpo_proc_notify_exit_t *mpo_proc_notify_exit;
  mpo_mount_check_snapshot_revert_t *mpo_mount_check_snapshot_revert;
  mpo_vnode_check_getattr_t *mpo_vnode_check_getattr;
  mpo_mount_check_snapshot_create_t *mpo_mount_check_snapshot_create;
  mpo_mount_check_snapshot_delete_t *mpo_mount_check_snapshot_delete;
  mpo_vnode_check_clone_t *mpo_vnode_check_clone;
  mpo_proc_check_get_cs_info_t *mpo_proc_check_get_cs_info;
  mpo_proc_check_set_cs_info_t *mpo_proc_check_set_cs_info;
  mpo_iokit_check_hid_control_t *mpo_iokit_check_hid_control;
  mpo_vnode_check_access_t *mpo_vnode_check_access;
  mpo_vnode_check_chdir_t *mpo_vnode_check_chdir;
  mpo_vnode_check_chroot_t *mpo_vnode_check_chroot;
  mpo_vnode_check_create_t *mpo_vnode_check_create;
  mpo_vnode_check_deleteextattr_t *mpo_vnode_check_deleteextattr;
  mpo_vnode_check_exchangedata_t *mpo_vnode_check_exchangedata;
  mpo_vnode_check_exec_t *mpo_vnode_check_exec;
  mpo_vnode_check_getattrlist_t *mpo_vnode_check_getattrlist;
  mpo_vnode_check_getextattr_t *mpo_vnode_check_getextattr;
  mpo_vnode_check_ioctl_t *mpo_vnode_check_ioctl;
  mpo_vnode_check_kqfilter_t *mpo_vnode_check_kqfilter;
  mpo_vnode_check_label_update_t *mpo_vnode_check_label_update;
  mpo_vnode_check_link_t *mpo_vnode_check_link;
  mpo_vnode_check_listextattr_t *mpo_vnode_check_listextattr;
  mpo_vnode_check_lookup_t *mpo_vnode_check_lookup;
  mpo_vnode_check_open_t *mpo_vnode_check_open;
  mpo_vnode_check_read_t *mpo_vnode_check_read;
  mpo_vnode_check_readdir_t *mpo_vnode_check_readdir;
  mpo_vnode_check_readlink_t *mpo_vnode_check_readlink;
  mpo_vnode_check_rename_from_t *mpo_vnode_check_rename_from;
  mpo_vnode_check_rename_to_t *mpo_vnode_check_rename_to;
  mpo_vnode_check_revoke_t *mpo_vnode_check_revoke;
  mpo_vnode_check_select_t *mpo_vnode_check_select;
  mpo_vnode_check_setattrlist_t *mpo_vnode_check_setattrlist;
  mpo_vnode_check_setextattr_t *mpo_vnode_check_setextattr;
  mpo_vnode_check_setflags_t *mpo_vnode_check_setflags;
  mpo_vnode_check_setmode_t *mpo_vnode_check_setmode;
  mpo_vnode_check_setowner_t *mpo_vnode_check_setowner;
  mpo_vnode_check_setutimes_t *mpo_vnode_check_setutimes;
  mpo_vnode_check_stat_t *mpo_vnode_check_stat;
  mpo_vnode_check_truncate_t *mpo_vnode_check_truncate;
  mpo_vnode_check_unlink_t *mpo_vnode_check_unlink;
  mpo_vnode_check_write_t *mpo_vnode_check_write;
  mpo_vnode_label_associate_devfs_t *mpo_vnode_label_associate_devfs;
  mpo_vnode_label_associate_extattr_t *mpo_vnode_label_associate_extattr;
  mpo_vnode_label_associate_file_t *mpo_vnode_label_associate_file;
  mpo_vnode_label_associate_pipe_t *mpo_vnode_label_associate_pipe;
  mpo_vnode_label_associate_posixsem_t *mpo_vnode_label_associate_posixsem;
  mpo_vnode_label_associate_posixshm_t *mpo_vnode_label_associate_posixshm;
  mpo_vnode_label_associate_singlelabel_t *mpo_vnode_label_associate_singlelabel;
  mpo_vnode_label_associate_socket_t *mpo_vnode_label_associate_socket;
  mpo_vnode_label_copy_t *mpo_vnode_label_copy;
  mpo_vnode_label_destroy_t *mpo_vnode_label_destroy;
  mpo_vnode_label_externalize_audit_t *mpo_vnode_label_externalize_audit;
  mpo_vnode_label_externalize_t *mpo_vnode_label_externalize;
  mpo_vnode_label_init_t *mpo_vnode_label_init;
  mpo_vnode_label_internalize_t *mpo_vnode_label_internalize;
  mpo_vnode_label_recycle_t *mpo_vnode_label_recycle;
  mpo_vnode_label_store_t *mpo_vnode_label_store;
  mpo_vnode_label_update_extattr_t *mpo_vnode_label_update_extattr;
  mpo_vnode_label_update_t *mpo_vnode_label_update;
  mpo_vnode_notify_create_t *mpo_vnode_notify_create;
  mpo_vnode_check_signature_t *mpo_vnode_check_signature;
  mpo_vnode_check_uipc_bind_t *mpo_vnode_check_uipc_bind;
  mpo_vnode_check_uipc_connect_t *mpo_vnode_check_uipc_connect;
  mpo_proc_check_run_cs_invalid_t *mpo_proc_check_run_cs_invalid;
  mpo_proc_check_suspend_resume_t *mpo_proc_check_suspend_resume;
  mpo_thread_userret_t *mpo_thread_userret;
  mpo_iokit_check_set_properties_t *mpo_iokit_check_set_properties;
  mpo_system_check_chud_t *mpo_system_check_chud;
  mpo_vnode_check_searchfs_t *mpo_vnode_check_searchfs;
  mpo_priv_check_t *mpo_priv_check;
  mpo_priv_grant_t *mpo_priv_grant;
  mpo_proc_check_map_anon_t *mpo_proc_check_map_anon;
  mpo_vnode_check_fsgetpath_t *mpo_vnode_check_fsgetpath;
  mpo_iokit_check_open_t *mpo_iokit_check_open;
  mpo_proc_check_ledger_t *mpo_proc_check_ledger;
  mpo_vnode_notify_rename_t *mpo_vnode_notify_rename;
  mpo_vnode_check_setacl_t *mpo_vnode_check_setacl;
  mpo_vnode_notify_deleteextattr_t *mpo_vnode_notify_deleteextattr;
  mpo_system_check_kas_info_t *mpo_system_check_kas_info;
  mpo_vnode_check_lookup_preflight_t *mpo_vnode_check_lookup_preflight;
  mpo_vnode_notify_open_t *mpo_vnode_notify_open;
  mpo_system_check_info_t *mpo_system_check_info;
  mpo_pty_notify_grant_t *mpo_pty_notify_grant;
  mpo_pty_notify_close_t *mpo_pty_notify_close;
  mpo_vnode_find_sigs_t *mpo_vnode_find_sigs;
  mpo_kext_check_load_t *mpo_kext_check_load;
  mpo_kext_check_unload_t *mpo_kext_check_unload;
  mpo_proc_check_proc_info_t *mpo_proc_check_proc_info;
  mpo_vnode_notify_link_t *mpo_vnode_notify_link;
  mpo_iokit_check_filter_properties_t *mpo_iokit_check_filter_properties;
  mpo_iokit_check_get_property_t *mpo_iokit_check_get_property;
};

/* 8686 */
typedef int mpo_audit_check_postselect_t(kauth_cred_t, unsigned __int16, void *, int, int);

/* 8687 */
typedef int mpo_audit_check_preselect_t(kauth_cred_t, unsigned __int16, void *);

/* 8688 */
typedef void mpo_bpfdesc_label_associate_t(kauth_cred_t, bpf_d *, label *);

/* 8689 */
typedef void mpo_bpfdesc_label_destroy_t(label *);

/* 8690 */
typedef void mpo_bpfdesc_label_init_t(label *);

/* 8691 */
typedef int mpo_bpfdesc_check_receive_t(bpf_d *, label *, ifnet *, label *);

/* 8692 */
typedef int mpo_cred_check_label_update_execve_t(kauth_cred_t, vnode *, off_t, vnode *, label *, label *, label *, proc *, void *, size_t_0);

/* 8693 */
typedef int mpo_cred_check_label_update_t(kauth_cred_t, label *);

/* 8694 */
typedef int mpo_cred_check_visible_t(kauth_cred_t, kauth_cred_t);

/* 8695 */
typedef void mpo_cred_label_associate_fork_t(kauth_cred_t, proc_t);

/* 8696 */
typedef void mpo_cred_label_associate_kernel_t(kauth_cred_t);

/* 8697 */
typedef void mpo_cred_label_associate_t(kauth_cred_t, kauth_cred_t);

/* 8698 */
typedef void mpo_cred_label_associate_user_t(kauth_cred_t);

/* 8699 */
typedef void mpo_cred_label_destroy_t(label *);

/* 8700 */
typedef int mpo_cred_label_externalize_audit_t(label *, char *, sbuf *);

/* 8701 */
typedef int mpo_cred_label_externalize_t(label *, char *, sbuf *);

/* 8702 */
typedef void mpo_cred_label_init_t(label *);

/* 8703 */
typedef int mpo_cred_label_internalize_t(label *, char *, char *);

/* 8704 */
typedef int mpo_cred_label_update_execve_t(kauth_cred_t, kauth_cred_t, proc *, vnode *, off_t, vnode *, label *, label *, label *, u_int *, void *, size_t_0, int *);

/* 8705 */
typedef void mpo_cred_label_update_t(kauth_cred_t, label *);

/* 8706 */
typedef void mpo_devfs_label_associate_device_t(dev_t, devnode *, label *, const char *);

/* 8707 */
typedef void mpo_devfs_label_associate_directory_t(const char *, int, devnode *, label *, const char *);

/* 8708 */
typedef void mpo_devfs_label_copy_t(label *, label *);

/* 8709 */
typedef void mpo_devfs_label_destroy_t(label *);

/* 8710 */
typedef void mpo_devfs_label_init_t(label *);

/* 8711 */
typedef void mpo_devfs_label_update_t(mount *, devnode *, label *, vnode *, label *);

/* 8712 */
typedef int mpo_file_check_change_offset_t(kauth_cred_t, fileglob *, label *);

/* 8713 */
typedef int mpo_file_check_create_t(kauth_cred_t);

/* 8714 */
typedef int mpo_file_check_dup_t(kauth_cred_t, fileglob *, label *, int);

/* 8715 */
typedef int mpo_file_check_fcntl_t(kauth_cred_t, fileglob *, label *, int, user_long_t);

/* 8716 */
typedef int mpo_file_check_get_offset_t(kauth_cred_t, fileglob *, label *);

/* 8717 */
typedef int mpo_file_check_get_t(kauth_cred_t, fileglob *, char *, int);

/* 8718 */
typedef int mpo_file_check_inherit_t(kauth_cred_t, fileglob *, label *);

/* 8719 */
typedef int mpo_file_check_ioctl_t(kauth_cred_t, fileglob *, label *, unsigned int);

/* 8720 */
typedef int mpo_file_check_lock_t(kauth_cred_t, fileglob *, label *, int, flock *);

/* 8721 */
typedef void mpo_file_check_mmap_downgrade_t(kauth_cred_t, fileglob *, label *, int *);

/* 8722 */
typedef int mpo_file_check_mmap_t(kauth_cred_t, fileglob *, label *, int, int, uint64_t_0, int *);

/* 8723 */
typedef int mpo_file_check_receive_t(kauth_cred_t, fileglob *, label *);

/* 8724 */
typedef int mpo_file_check_set_t(kauth_cred_t, fileglob *, char *, int);

/* 8725 */
typedef void mpo_file_label_init_t(label *);

/* 8726 */
typedef void mpo_file_label_destroy_t(label *);

/* 8727 */
typedef void mpo_file_label_associate_t(kauth_cred_t, fileglob *, label *);

/* 8728 */
typedef int mpo_ifnet_check_label_update_t(kauth_cred_t, ifnet *, label *, label *);

/* 8729 */
typedef int mpo_ifnet_check_transmit_t(ifnet *, label *, mbuf *, label *, int, int);

/* 8730 */
typedef void mpo_ifnet_label_associate_t(ifnet *, label *);

/* 8731 */
typedef void mpo_ifnet_label_copy_t(label *, label *);

/* 8732 */
typedef void mpo_ifnet_label_destroy_t(label *);

/* 8733 */
typedef int mpo_ifnet_label_externalize_t(label *, char *, sbuf *);

/* 8734 */
typedef void mpo_ifnet_label_init_t(label *);

/* 8735 */
typedef int mpo_ifnet_label_internalize_t(label *, char *, char *);

/* 8736 */
typedef void mpo_ifnet_label_update_t(kauth_cred_t, ifnet *, label *, label *);

/* 8737 */
typedef void mpo_ifnet_label_recycle_t(label *);

/* 8738 */
typedef int mpo_inpcb_check_deliver_t(inpcb *, label *, mbuf *, label *, int, int);

/* 8739 */
typedef void mpo_inpcb_label_associate_t(socket *, label *, inpcb *, label *);

/* 8740 */
typedef void mpo_inpcb_label_destroy_t(label *);

/* 8741 */
typedef int mpo_inpcb_label_init_t(label *, int);

/* 8742 */
typedef void mpo_inpcb_label_recycle_t(label *);

/* 8743 */
typedef void mpo_inpcb_label_update_t(socket *, label *, inpcb *, label *);

/* 8744 */
typedef int mpo_iokit_check_device_t(char *, mac_module_data *);

/* 8745 */
struct mac_module_data
{
  void *base_addr;
  unsigned int size;
  unsigned int count;
  mac_module_data_element data[1];
};

/* 8746 */
struct mac_module_data_element
{
  unsigned int key_size;
  unsigned int value_size;
  unsigned int value_type;
  char *key;
  char *value;
};

/* 8747 */
typedef void mpo_ipq_label_associate_t(mbuf *, label *, ipq *, label *);

/* 8748 */
typedef int mpo_ipq_label_compare_t(mbuf *, label *, ipq *, label *);

/* 8749 */
typedef void mpo_ipq_label_destroy_t(label *);

/* 8750 */
typedef int mpo_ipq_label_init_t(label *, int);

/* 8751 */
typedef void mpo_ipq_label_update_t(mbuf *, label *, ipq *, label *);

/* 8752 */
typedef int mpo_file_check_library_validation_t(proc *, fileglob *, off_t, user_long_t, size_t_0);

/* 8753 */
typedef void mpo_vnode_notify_setacl_t(kauth_cred_t, vnode *, label *, kauth_acl *);

/* 8754 */
typedef void mpo_vnode_notify_setattrlist_t(kauth_cred_t, vnode *, label *, attrlist *);

/* 8755 */
typedef void mpo_vnode_notify_setextattr_t(kauth_cred_t, vnode *, label *, const char *, uio *);

/* 8756 */
typedef void mpo_vnode_notify_setflags_t(kauth_cred_t, vnode *, label *, u_long);

/* 8757 */
typedef void mpo_vnode_notify_setmode_t(kauth_cred_t, vnode *, label *, mode_t);

/* 8758 */
typedef void mpo_vnode_notify_setowner_t(kauth_cred_t, vnode *, label *, uid_t, gid_t);

/* 8759 */
typedef void mpo_vnode_notify_setutimes_t(kauth_cred_t, vnode *, label *, timespec, timespec);

/* 8760 */
typedef void mpo_vnode_notify_truncate_t(kauth_cred_t, kauth_cred_t, vnode *, label *);

/* 8761 */
typedef void mpo_mbuf_label_associate_bpfdesc_t(bpf_d *, label *, mbuf *, label *);

/* 8762 */
typedef void mpo_mbuf_label_associate_ifnet_t(ifnet *, label *, mbuf *, label *);

/* 8763 */
typedef void mpo_mbuf_label_associate_inpcb_t(inpcb *, label *, mbuf *, label *);

/* 8764 */
typedef void mpo_mbuf_label_associate_ipq_t(ipq *, label *, mbuf *, label *);

/* 8765 */
typedef void mpo_mbuf_label_associate_linklayer_t(ifnet *, label *, mbuf *, label *);

/* 8766 */
typedef void mpo_mbuf_label_associate_multicast_encap_t(mbuf *, label *, ifnet *, label *, mbuf *, label *);

/* 8767 */
typedef void mpo_mbuf_label_associate_netlayer_t(mbuf *, label *, mbuf *, label *);

/* 8768 */
typedef void mpo_mbuf_label_associate_socket_t(socket_t, label *, mbuf *, label *);

/* 8769 */
typedef void mpo_mbuf_label_copy_t(label *, label *);

/* 8770 */
typedef void mpo_mbuf_label_destroy_t(label *);

/* 8771 */
typedef int mpo_mbuf_label_init_t(label *, int);

/* 8772 */
typedef int mpo_mount_check_fsctl_t(kauth_cred_t, mount *, label *, unsigned int);

/* 8773 */
typedef int mpo_mount_check_getattr_t(kauth_cred_t, mount *, label *, vfs_attr *);

/* 8774 */
typedef int mpo_mount_check_label_update_t(kauth_cred_t, mount *, label *);

/* 8775 */
typedef int mpo_mount_check_mount_t(kauth_cred_t, vnode *, label *, componentname *, const char *);

/* 8776 */
typedef int mpo_mount_check_remount_t(kauth_cred_t, mount *, label *);

/* 8777 */
typedef int mpo_mount_check_setattr_t(kauth_cred_t, mount *, label *, vfs_attr *);

/* 8778 */
typedef int mpo_mount_check_stat_t(kauth_cred_t, mount *, label *);

/* 8779 */
typedef int mpo_mount_check_umount_t(kauth_cred_t, mount *, label *);

/* 8780 */
typedef void mpo_mount_label_associate_t(kauth_cred_t, mount *, label *);

/* 8781 */
typedef void mpo_mount_label_destroy_t(label *);

/* 8782 */
typedef int mpo_mount_label_externalize_t(label *, char *, sbuf *);

/* 8783 */
typedef void mpo_mount_label_init_t(label *);

/* 8784 */
typedef int mpo_mount_label_internalize_t(label *, char *, char *);

/* 8785 */
typedef void mpo_netinet_fragment_t(mbuf *, label *, mbuf *, label *);

/* 8786 */
typedef void mpo_netinet_icmp_reply_t(mbuf *, label *);

/* 8787 */
typedef void mpo_netinet_tcp_reply_t(mbuf *, label *);

/* 8788 */
typedef int mpo_pipe_check_ioctl_t(kauth_cred_t, pipe *, label *, unsigned int);

/* 8789 */
typedef int mpo_pipe_check_kqfilter_t(kauth_cred_t, knote *, pipe *, label *);

/* 8790 */
typedef int mpo_pipe_check_label_update_t(kauth_cred_t, pipe *, label *, label *);

/* 8791 */
typedef int mpo_pipe_check_read_t(kauth_cred_t, pipe *, label *);

/* 8792 */
typedef int mpo_pipe_check_select_t(kauth_cred_t, pipe *, label *, int);

/* 8793 */
typedef int mpo_pipe_check_stat_t(kauth_cred_t, pipe *, label *);

/* 8794 */
typedef int mpo_pipe_check_write_t(kauth_cred_t, pipe *, label *);

/* 8795 */
typedef void mpo_pipe_label_associate_t(kauth_cred_t, pipe *, label *);

/* 8796 */
typedef void mpo_pipe_label_copy_t(label *, label *);

/* 8797 */
typedef void mpo_pipe_label_destroy_t(label *);

/* 8798 */
typedef int mpo_pipe_label_externalize_t(label *, char *, sbuf *);

/* 8799 */
typedef void mpo_pipe_label_init_t(label *);

/* 8800 */
typedef int mpo_pipe_label_internalize_t(label *, char *, char *);

/* 8801 */
typedef void mpo_pipe_label_update_t(kauth_cred_t, pipe *, label *, label *);

/* 8802 */
typedef void mpo_policy_destroy_t(mac_policy_conf *);

/* 8803 */
typedef void mpo_policy_init_t(mac_policy_conf *);

/* 8804 */
typedef void mpo_policy_initbsd_t(mac_policy_conf *);

/* 8805 */
typedef int mpo_policy_syscall_t(proc *, int, user_addr_t);

/* 8806 */
typedef int mpo_system_check_sysctlbyname_t(kauth_cred_t, const char *, int *, u_int, user_addr_t, size_t_0, user_addr_t, size_t_0);

/* 8807 */
typedef int mpo_proc_check_inherit_ipc_ports_t(proc *, vnode *, off_t, vnode *, off_t, vnode *);

/* 8808 */
typedef int mpo_vnode_check_rename_t(kauth_cred_t, vnode *, label *, vnode *, label *, componentname *, vnode *, label *, vnode *, label *, componentname *);

/* 8809 */
typedef int mpo_kext_check_query_t(kauth_cred_t);

/* 8810 */
typedef void mpo_proc_notify_exec_complete_t(proc *);

/* 8811 */
typedef void mpo_reserved_hook_t(void);

/* 8812 */
typedef int mpo_proc_check_expose_task_t(kauth_cred_t, proc *);

/* 8813 */
typedef int mpo_proc_check_set_host_special_port_t(kauth_cred_t, int, ipc_port *);

/* 8814 */
typedef int mpo_proc_check_set_host_exception_port_t(kauth_cred_t, unsigned int);

/* 8815 */
typedef int mpo_exc_action_check_exception_send_t(label *, exception_action *, label *);

/* 8816 */
typedef void mpo_exc_action_label_associate_t(exception_action *, label *);

/* 8817 */
typedef void mpo_exc_action_label_populate_t(label *, proc *);

/* 8818 */
typedef void mpo_exc_action_label_destroy_t(label *);

/* 8819 */
typedef int mpo_exc_action_label_init_t(label *);

/* 8820 */
typedef int mpo_exc_action_label_update_t(exception_action *, label *, label *);

/* 8821 */
typedef int mpo_vnode_check_trigger_resolve_t(kauth_cred_t, vnode *, label *, componentname *);

/* 8822 */
typedef int mpo_skywalk_flow_check_connect_t(kauth_cred_t, void *, const sockaddr *, int, int);

/* 8823 */
typedef int mpo_skywalk_flow_check_listen_t(kauth_cred_t, void *, const sockaddr *, int, int);

/* 8824 */
typedef int mpo_posixsem_check_create_t(kauth_cred_t, const char *);

/* 8825 */
typedef int mpo_posixsem_check_open_t(kauth_cred_t, pseminfo *, label *);

/* 8826 */
typedef int mpo_posixsem_check_post_t(kauth_cred_t, pseminfo *, label *);

/* 8827 */
typedef int mpo_posixsem_check_unlink_t(kauth_cred_t, pseminfo *, label *, const char *);

/* 8828 */
typedef int mpo_posixsem_check_wait_t(kauth_cred_t, pseminfo *, label *);

/* 8829 */
typedef void mpo_posixsem_label_associate_t(kauth_cred_t, pseminfo *, label *, const char *);

/* 8830 */
typedef void mpo_posixsem_label_destroy_t(label *);

/* 8831 */
typedef void mpo_posixsem_label_init_t(label *);

/* 8832 */
typedef int mpo_posixshm_check_create_t(kauth_cred_t, const char *);

/* 8833 */
typedef int mpo_posixshm_check_mmap_t(kauth_cred_t, pshminfo *, label *, int, int);

/* 8834 */
typedef int mpo_posixshm_check_open_t(kauth_cred_t, pshminfo *, label *, int);

/* 8835 */
typedef int mpo_posixshm_check_stat_t(kauth_cred_t, pshminfo *, label *);

/* 8836 */
typedef int mpo_posixshm_check_truncate_t(kauth_cred_t, pshminfo *, label *, off_t);

/* 8837 */
typedef int mpo_posixshm_check_unlink_t(kauth_cred_t, pshminfo *, label *, const char *);

/* 8838 */
typedef void mpo_posixshm_label_associate_t(kauth_cred_t, pshminfo *, label *, const char *);

/* 8839 */
typedef void mpo_posixshm_label_destroy_t(label *);

/* 8840 */
typedef void mpo_posixshm_label_init_t(label *);

/* 8841 */
typedef int mpo_proc_check_debug_t(kauth_cred_t, proc *);

/* 8842 */
typedef int mpo_proc_check_fork_t(kauth_cred_t, proc *);

/* 8843 */
typedef int mpo_proc_check_get_task_name_t(kauth_cred_t, proc *);

/* 8844 */
typedef int mpo_proc_check_get_task_t(kauth_cred_t, proc *);

/* 8845 */
typedef int mpo_proc_check_getaudit_t(kauth_cred_t);

/* 8846 */
typedef int mpo_proc_check_getauid_t(kauth_cred_t);

/* 8847 */
typedef int mpo_proc_check_getlcid_t(proc *, proc *, pid_t);

/* 8848 */
typedef int mpo_proc_check_mprotect_t(kauth_cred_t, proc *, user_addr_t, user_size_t, int);

/* 8849 */
typedef int mpo_proc_check_sched_t(kauth_cred_t, proc *);

/* 8850 */
typedef int mpo_proc_check_setaudit_t(kauth_cred_t, auditinfo_addr *);

/* 8851 */
typedef int mpo_proc_check_setauid_t(kauth_cred_t, uid_t);

/* 8852 */
typedef int mpo_proc_check_setlcid_t(proc *, proc *, pid_t, pid_t);

/* 8853 */
typedef int mpo_proc_check_signal_t(kauth_cred_t, proc *, int);

/* 8854 */
typedef int mpo_proc_check_wait_t(kauth_cred_t, proc *);

/* 8855 */
typedef void mpo_proc_label_destroy_t(label *);

/* 8856 */
typedef void mpo_proc_label_init_t(label *);

/* 8857 */
typedef int mpo_socket_check_accept_t(kauth_cred_t, socket_t, label *);

/* 8858 */
typedef int mpo_socket_check_accepted_t(kauth_cred_t, socket_t, label *, sockaddr *);

/* 8859 */
typedef int mpo_socket_check_bind_t(kauth_cred_t, socket_t, label *, sockaddr *);

/* 8860 */
typedef int mpo_socket_check_connect_t(kauth_cred_t, socket_t, label *, sockaddr *);

/* 8861 */
typedef int mpo_socket_check_create_t(kauth_cred_t, int, int, int);

/* 8862 */
typedef int mpo_socket_check_deliver_t(socket_t, label *, mbuf *, label *);

/* 8863 */
typedef int mpo_socket_check_kqfilter_t(kauth_cred_t, knote *, socket_t, label *);

/* 8864 */
typedef int mpo_socket_check_label_update_t(kauth_cred_t, socket_t, label *, label *);

/* 8865 */
typedef int mpo_socket_check_listen_t(kauth_cred_t, socket_t, label *);

/* 8866 */
typedef int mpo_socket_check_receive_t(kauth_cred_t, socket_t, label *);

/* 8867 */
typedef int mpo_socket_check_received_t(kauth_cred_t, socket *, label *, sockaddr *);

/* 8868 */
typedef int mpo_socket_check_select_t(kauth_cred_t, socket_t, label *, int);

/* 8869 */
typedef int mpo_socket_check_send_t(kauth_cred_t, socket_t, label *, sockaddr *);

/* 8870 */
typedef int mpo_socket_check_stat_t(kauth_cred_t, socket_t, label *);

/* 8871 */
typedef int mpo_socket_check_setsockopt_t(kauth_cred_t, socket_t, label *, sockopt *);

/* 8872 */
typedef int mpo_socket_check_getsockopt_t(kauth_cred_t, socket_t, label *, sockopt *);

/* 8873 */
typedef void mpo_socket_label_associate_accept_t(socket_t, label *, socket_t, label *);

/* 8874 */
typedef void mpo_socket_label_associate_t(kauth_cred_t, socket_t, label *);

/* 8875 */
typedef void mpo_socket_label_copy_t(label *, label *);

/* 8876 */
typedef void mpo_socket_label_destroy_t(label *);

/* 8877 */
typedef int mpo_socket_label_externalize_t(label *, char *, sbuf *);

/* 8878 */
typedef int mpo_socket_label_init_t(label *, int);

/* 8879 */
typedef int mpo_socket_label_internalize_t(label *, char *, char *);

/* 8880 */
typedef void mpo_socket_label_update_t(kauth_cred_t, socket_t, label *, label *);

/* 8881 */
typedef void mpo_socketpeer_label_associate_mbuf_t(mbuf *, label *, socket_t, label *);

/* 8882 */
typedef void mpo_socketpeer_label_associate_socket_t(socket_t, label *, socket_t, label *);

/* 8883 */
typedef void mpo_socketpeer_label_destroy_t(label *);

/* 8884 */
typedef int mpo_socketpeer_label_externalize_t(label *, char *, sbuf *);

/* 8885 */
typedef int mpo_socketpeer_label_init_t(label *, int);

/* 8886 */
typedef int mpo_system_check_acct_t(kauth_cred_t, vnode *, label *);

/* 8887 */
typedef int mpo_system_check_audit_t(kauth_cred_t, void *, int);

/* 8888 */
typedef int mpo_system_check_auditctl_t(kauth_cred_t, vnode *, label *);

/* 8889 */
typedef int mpo_system_check_auditon_t(kauth_cred_t, int);

/* 8890 */
typedef int mpo_system_check_host_priv_t(kauth_cred_t);

/* 8891 */
typedef int mpo_system_check_nfsd_t(kauth_cred_t);

/* 8892 */
typedef int mpo_system_check_reboot_t(kauth_cred_t, int);

/* 8893 */
typedef int mpo_system_check_settime_t(kauth_cred_t);

/* 8894 */
typedef int mpo_system_check_swapoff_t(kauth_cred_t, vnode *, label *);

/* 8895 */
typedef int mpo_system_check_swapon_t(kauth_cred_t, vnode *, label *);

/* 8896 */
typedef int mpo_socket_check_ioctl_t(kauth_cred_t, socket_t, unsigned int, label *);

/* 8897 */
typedef void mpo_sysvmsg_label_associate_t(kauth_cred_t, msqid_kernel *, label *, msg *, label *);

/* 8898 */
typedef void mpo_sysvmsg_label_destroy_t(label *);

/* 8899 */
typedef void mpo_sysvmsg_label_init_t(label *);

/* 8900 */
typedef void mpo_sysvmsg_label_recycle_t(label *);

/* 8901 */
typedef int mpo_sysvmsq_check_enqueue_t(kauth_cred_t, msg *, label *, msqid_kernel *, label *);

/* 8902 */
typedef int mpo_sysvmsq_check_msgrcv_t(kauth_cred_t, msg *, label *);

/* 8903 */
typedef int mpo_sysvmsq_check_msgrmid_t(kauth_cred_t, msg *, label *);

/* 8904 */
typedef int mpo_sysvmsq_check_msqctl_t(kauth_cred_t, msqid_kernel *, label *, int);

/* 8905 */
typedef int mpo_sysvmsq_check_msqget_t(kauth_cred_t, msqid_kernel *, label *);

/* 8906 */
typedef int mpo_sysvmsq_check_msqrcv_t(kauth_cred_t, msqid_kernel *, label *);

/* 8907 */
typedef int mpo_sysvmsq_check_msqsnd_t(kauth_cred_t, msqid_kernel *, label *);

/* 8908 */
typedef void mpo_sysvmsq_label_associate_t(kauth_cred_t, msqid_kernel *, label *);

/* 8909 */
typedef void mpo_sysvmsq_label_destroy_t(label *);

/* 8910 */
typedef void mpo_sysvmsq_label_init_t(label *);

/* 8911 */
typedef void mpo_sysvmsq_label_recycle_t(label *);

/* 8912 */
typedef int mpo_sysvsem_check_semctl_t(kauth_cred_t, semid_kernel *, label *, int);

/* 8913 */
typedef int mpo_sysvsem_check_semget_t(kauth_cred_t, semid_kernel *, label *);

/* 8914 */
typedef int mpo_sysvsem_check_semop_t(kauth_cred_t, semid_kernel *, label *, size_t_0);

/* 8915 */
typedef void mpo_sysvsem_label_associate_t(kauth_cred_t, semid_kernel *, label *);

/* 8916 */
typedef void mpo_sysvsem_label_destroy_t(label *);

/* 8917 */
typedef void mpo_sysvsem_label_init_t(label *);

/* 8918 */
typedef void mpo_sysvsem_label_recycle_t(label *);

/* 8919 */
typedef int mpo_sysvshm_check_shmat_t(kauth_cred_t, shmid_kernel *, label *, int);

/* 8920 */
typedef int mpo_sysvshm_check_shmctl_t(kauth_cred_t, shmid_kernel *, label *, int);

/* 8921 */
typedef int mpo_sysvshm_check_shmdt_t(kauth_cred_t, shmid_kernel *, label *);

/* 8922 */
typedef int mpo_sysvshm_check_shmget_t(kauth_cred_t, shmid_kernel *, label *, int);

/* 8923 */
typedef void mpo_sysvshm_label_associate_t(kauth_cred_t, shmid_kernel *, label *);

/* 8924 */
typedef void mpo_sysvshm_label_destroy_t(label *);

/* 8925 */
typedef void mpo_sysvshm_label_init_t(label *);

/* 8926 */
typedef void mpo_sysvshm_label_recycle_t(label *);

/* 8927 */
typedef void mpo_proc_notify_exit_t(proc *);

/* 8928 */
typedef int mpo_mount_check_snapshot_revert_t(kauth_cred_t, mount *, const char *);

/* 8929 */
typedef int mpo_vnode_check_getattr_t(kauth_cred_t, kauth_cred_t, vnode *, label *, vnode_attr *);

/* 8930 */
typedef int mpo_mount_check_snapshot_create_t(kauth_cred_t, mount *, const char *);

/* 8931 */
typedef int mpo_mount_check_snapshot_delete_t(kauth_cred_t, mount *, const char *);

/* 8932 */
typedef int mpo_vnode_check_clone_t(kauth_cred_t, vnode *, label *, vnode *, label *, componentname *);

/* 8933 */
typedef int mpo_proc_check_get_cs_info_t(kauth_cred_t, proc *, unsigned int);

/* 8934 */
typedef int mpo_proc_check_set_cs_info_t(kauth_cred_t, proc *, unsigned int);

/* 8935 */
typedef int mpo_iokit_check_hid_control_t(kauth_cred_t);

/* 8936 */
typedef int mpo_vnode_check_access_t(kauth_cred_t, vnode *, label *, int);

/* 8937 */
typedef int mpo_vnode_check_chdir_t(kauth_cred_t, vnode *, label *);

/* 8938 */
typedef int mpo_vnode_check_chroot_t(kauth_cred_t, vnode *, label *, componentname *);

/* 8939 */
typedef int mpo_vnode_check_create_t(kauth_cred_t, vnode *, label *, componentname *, vnode_attr *);

/* 8940 */
typedef int mpo_vnode_check_deleteextattr_t(kauth_cred_t, vnode *, label *, const char *);

/* 8941 */
typedef int mpo_vnode_check_exchangedata_t(kauth_cred_t, vnode *, label *, vnode *, label *);

/* 8942 */
typedef int mpo_vnode_check_exec_t(kauth_cred_t, vnode *, vnode *, label *, label *, label *, componentname *, u_int *, void *, size_t_0);

/* 8943 */
typedef int mpo_vnode_check_getattrlist_t(kauth_cred_t, vnode *, label *, attrlist *);

/* 8944 */
typedef int mpo_vnode_check_getextattr_t(kauth_cred_t, vnode *, label *, const char *, uio *);

/* 8945 */
typedef int mpo_vnode_check_ioctl_t(kauth_cred_t, vnode *, label *, unsigned int);

/* 8946 */
typedef int mpo_vnode_check_kqfilter_t(kauth_cred_t, kauth_cred_t, knote *, vnode *, label *);

/* 8947 */
typedef int mpo_vnode_check_label_update_t(ucred *, vnode *, label *, label *);

/* 8948 */
typedef int mpo_vnode_check_link_t(kauth_cred_t, vnode *, label *, vnode *, label *, componentname *);

/* 8949 */
typedef int mpo_vnode_check_listextattr_t(kauth_cred_t, vnode *, label *);

/* 8950 */
typedef int mpo_vnode_check_lookup_t(kauth_cred_t, vnode *, label *, componentname *);

/* 8951 */
typedef int mpo_vnode_check_open_t(kauth_cred_t, vnode *, label *, int);

/* 8952 */
typedef int mpo_vnode_check_read_t(kauth_cred_t, kauth_cred_t, vnode *, label *);

/* 8953 */
typedef int mpo_vnode_check_readdir_t(kauth_cred_t, vnode *, label *);

/* 8954 */
typedef int mpo_vnode_check_readlink_t(kauth_cred_t, vnode *, label *);

/* 8955 */
typedef int mpo_vnode_check_rename_from_t(kauth_cred_t, vnode *, label *, vnode *, label *, componentname *);

/* 8956 */
typedef int mpo_vnode_check_rename_to_t(kauth_cred_t, vnode *, label *, vnode *, label *, int, componentname *);

/* 8957 */
typedef int mpo_vnode_check_revoke_t(kauth_cred_t, vnode *, label *);

/* 8958 */
typedef int mpo_vnode_check_select_t(kauth_cred_t, vnode *, label *, int);

/* 8959 */
typedef int mpo_vnode_check_setattrlist_t(kauth_cred_t, vnode *, label *, attrlist *);

/* 8960 */
typedef int mpo_vnode_check_setextattr_t(kauth_cred_t, vnode *, label *, const char *, uio *);

/* 8961 */
typedef int mpo_vnode_check_setflags_t(kauth_cred_t, vnode *, label *, u_long);

/* 8962 */
typedef int mpo_vnode_check_setmode_t(kauth_cred_t, vnode *, label *, mode_t);

/* 8963 */
typedef int mpo_vnode_check_setowner_t(kauth_cred_t, vnode *, label *, uid_t, gid_t);

/* 8964 */
typedef int mpo_vnode_check_setutimes_t(kauth_cred_t, vnode *, label *, timespec, timespec);

/* 8965 */
typedef int mpo_vnode_check_stat_t(ucred *, ucred *, vnode *, label *);

/* 8966 */
typedef int mpo_vnode_check_truncate_t(kauth_cred_t, kauth_cred_t, vnode *, label *);

/* 8967 */
typedef int mpo_vnode_check_unlink_t(kauth_cred_t, vnode *, label *, vnode *, label *, componentname *);

/* 8968 */
typedef int mpo_vnode_check_write_t(kauth_cred_t, kauth_cred_t, vnode *, label *);

/* 8969 */
typedef void mpo_vnode_label_associate_devfs_t(mount *, label *, devnode *, label *, vnode *, label *);

/* 8970 */
typedef int mpo_vnode_label_associate_extattr_t(mount *, label *, vnode *, label *);

/* 8971 */
typedef void mpo_vnode_label_associate_file_t(ucred *, mount *, label *, fileglob *, label *, vnode *, label *);

/* 8972 */
typedef void mpo_vnode_label_associate_pipe_t(ucred *, pipe *, label *, vnode *, label *);

/* 8973 */
typedef void mpo_vnode_label_associate_posixsem_t(ucred *, pseminfo *, label *, vnode *, label *);

/* 8974 */
typedef void mpo_vnode_label_associate_posixshm_t(ucred *, pshminfo *, label *, vnode *, label *);

/* 8975 */
typedef void mpo_vnode_label_associate_singlelabel_t(mount *, label *, vnode *, label *);

/* 8976 */
typedef void mpo_vnode_label_associate_socket_t(kauth_cred_t, socket_t, label *, vnode *, label *);

/* 8977 */
typedef void mpo_vnode_label_copy_t(label *, label *);

/* 8978 */
typedef void mpo_vnode_label_destroy_t(label *);

/* 8979 */
typedef int mpo_vnode_label_externalize_audit_t(label *, char *, sbuf *);

/* 8980 */
typedef int mpo_vnode_label_externalize_t(label *, char *, sbuf *);

/* 8981 */
typedef void mpo_vnode_label_init_t(label *);

/* 8982 */
typedef int mpo_vnode_label_internalize_t(label *, char *, char *);

/* 8983 */
typedef void mpo_vnode_label_recycle_t(label *);

/* 8984 */
typedef int mpo_vnode_label_store_t(kauth_cred_t, vnode *, label *, label *);

/* 8985 */
typedef int mpo_vnode_label_update_extattr_t(mount *, label *, vnode *, label *, const char *);

/* 8986 */
typedef void mpo_vnode_label_update_t(kauth_cred_t, vnode *, label *, label *);

/* 8987 */
typedef int mpo_vnode_notify_create_t(kauth_cred_t, mount *, label *, vnode *, label *, vnode *, label *, componentname *);

/* 8988 */
typedef int mpo_vnode_check_signature_t(vnode *, label *, cpu_type_t, cs_blob *, unsigned int *, unsigned int *, int, char **, size_t_0 *);

/* 8989 */
typedef int mpo_vnode_check_uipc_bind_t(kauth_cred_t, vnode *, label *, componentname *, vnode_attr *);

/* 8990 */
typedef int mpo_vnode_check_uipc_connect_t(kauth_cred_t, vnode *, label *, socket_t);

/* 8991 */
typedef int mpo_proc_check_run_cs_invalid_t(proc *);

/* 8992 */
typedef int mpo_proc_check_suspend_resume_t(kauth_cred_t, proc *, int);

/* 8993 */
typedef void mpo_thread_userret_t(thread *);

/* 8994 */
typedef int mpo_iokit_check_set_properties_t(kauth_cred_t, io_object_t_0, io_object_t_0);

/* 8995 */
typedef OSObject *io_object_t_0;

/* 8996 */
typedef int mpo_system_check_chud_t(kauth_cred_t);

/* 8997 */
typedef int mpo_vnode_check_searchfs_t(kauth_cred_t, vnode *, label *, attrlist *);

/* 8998 */
typedef int mpo_priv_check_t(kauth_cred_t, int);

/* 8999 */
typedef int mpo_priv_grant_t(kauth_cred_t, int);

/* 9000 */
typedef int mpo_proc_check_map_anon_t(proc *, kauth_cred_t, user_addr_t, user_size_t, int, int, int *);

/* 9001 */
typedef int mpo_vnode_check_fsgetpath_t(kauth_cred_t, vnode *, label *);

/* 9002 */
typedef int mpo_iokit_check_open_t(kauth_cred_t, io_object_t_0, unsigned int);

/* 9003 */
typedef int mpo_proc_check_ledger_t(kauth_cred_t, proc *, int);

/* 9004 */
typedef void mpo_vnode_notify_rename_t(kauth_cred_t, vnode *, label *, vnode *, label *, componentname *);

/* 9005 */
typedef int mpo_vnode_check_setacl_t(kauth_cred_t, vnode *, label *, kauth_acl *);

/* 9006 */
typedef void mpo_vnode_notify_deleteextattr_t(kauth_cred_t, vnode *, label *, const char *);

/* 9007 */
typedef int mpo_system_check_kas_info_t(kauth_cred_t, int);

/* 9008 */
typedef int mpo_vnode_check_lookup_preflight_t(kauth_cred_t, vnode *, label *, const char *, size_t_0);

/* 9009 */
typedef void mpo_vnode_notify_open_t(kauth_cred_t, vnode *, label *, int);

/* 9010 */
typedef int mpo_system_check_info_t(kauth_cred_t, const char *);

/* 9011 */
typedef void mpo_pty_notify_grant_t(proc_t, tty *, dev_t, label *);

/* 9012 */
typedef void mpo_pty_notify_close_t(proc_t, tty *, dev_t, label *);

/* 9013 */
typedef int mpo_vnode_find_sigs_t(proc *, vnode *, off_t, label *);

/* 9014 */
typedef int mpo_kext_check_load_t(kauth_cred_t, const char *);

/* 9015 */
typedef int mpo_kext_check_unload_t(kauth_cred_t, const char *);

/* 9016 */
typedef int mpo_proc_check_proc_info_t(kauth_cred_t, proc *, int, int);

/* 9017 */
typedef void mpo_vnode_notify_link_t(kauth_cred_t, vnode *, label *, vnode *, label *, componentname *);

/* 9018 */
typedef int mpo_iokit_check_filter_properties_t(kauth_cred_t, io_object_t_0);

/* 9019 */
typedef int mpo_iokit_check_get_property_t(kauth_cred_t, io_object_t_0, const char *);

/* 9020 */
typedef int (*vop_t)(void *);

/* 9021 */
struct vnop_generic_args
{
  vnodeop_desc *a_desc;
};

/* 9022 */
struct netns_namespaces_tree
{
  ns *rbh_root;
};

/* 9023 */
struct ns
{
  ns::$733CE669549D9B34F0890629218111F5 ns_link;
  void *ns_addr_key;
  ns::$247CFFB12D4DF299A9FE6271A1ADD316 _anon_0;
  uint8_t_0 ns_addr_len;
  uint8_t_0 ns_proto;
  in_port_t ns_last_ephemeral_port_down;
  in_port_t ns_last_ephemeral_port_up;
  uint8_t_0 ns_is_freeable;
  uint32_t_0 ns_n_reservations;
  ns_reservation_tree ns_reservations;
};

/* 9024 */
struct ns::$733CE669549D9B34F0890629218111F5
{
  ns *rbe_left;
  ns *rbe_right;
  ns *rbe_parent;
};

/* 9025 */
union ns::$247CFFB12D4DF299A9FE6271A1ADD316
{
  uint32_t_0 ns_addr[4];
  in_addr ns_inaddr;
  in6_addr ns_in6addr;
};

/* 9026 */
struct ns_reservation_tree
{
  ns_reservation *rbh_root;
};

/* 9027 */
struct __attribute__((aligned(8))) ns_reservation
{
  ns_reservation::$FA625A755515D3BD661962DF90FCE1C3 nsr_link;
  in_port_t nsr_port;
  uint16_t nsr_refs[4];
};

/* 9028 */
struct ns_reservation::$FA625A755515D3BD661962DF90FCE1C3
{
  ns_reservation *rbe_left;
  ns_reservation *rbe_right;
  ns_reservation *rbe_parent;
};

/* 9029 */
struct $D835C1FB80356427E73262EF64749CA4
{
  ns_token *slh_first;
};

/* 9030 */
struct ns_token::$94144F569DE4E034BC7886B704988F3A
{
  ns_token *sle_next;
};

/* 9031 */
union ns_token::$EA1443DE44B6A93871234987818F4977
{
  uint32_t_0 nt_addr[4];
  in_addr nt_inaddr;
  in6_addr nt_in6addr;
};

/* 9032 */
struct $<17089878,1>::__ip_addr
{
  $<17089878,1>::__ip_addr::$334FE406C5B0C3483A1C9B028DF2B80F _ipa;
};

/* 9033 */
union $<17089878,1>::__ip_addr::$334FE406C5B0C3483A1C9B028DF2B80F
{
  in_addr _v4;
  in6_addr _v6;
  uint8_t_0 _addr8[16];
  uint16_t _addr16[8];
  uint32_t_0 _addr32[4];
  uint64_t_0 _addr64[2];
};

/* 9034 */
struct __attribute__((aligned(16))) netns_ctl_dump_header
{
  netns_ctl_dump_header::$25455D43E76D7139E5011169F9E17AFB _anon_0;
  uint8_t_0 ncdh_addr_len;
  uint8_t_0 ncdh_proto;
  uint8_t_0 ncdh_n_records;
};

/* 9035 */
union netns_ctl_dump_header::$25455D43E76D7139E5011169F9E17AFB
{
  uint32_t_0 ncdh_addr[4];
  in_addr ncdh_inaddr;
  in6_addr ncdh_in6addr;
};

/* 9036 */
struct __attribute__((aligned(16))) netns_ctl_dump_record
{
  in_port_t ncdr_port;
  in_port_t ncdr_port_end;
  uint32_t_0 ncdr_skywalk_refs;
  uint32_t_0 ncdr_bsd_refs;
  uint32_t_0 ncdr_pf_refs;
  uint32_t_0 ncdr_listener_refs;
};

/* 9037 */
struct proc_3
{
  proc_3::$75DE801D7744798391C2104614267E73 p_list;
  void *task;
  proc_3 *p_pptr;
  pid_t p_ppid;
  pid_t p_pgrpid;
  uid_t p_uid;
  gid_t p_gid;
  uid_t p_ruid;
  gid_t p_rgid;
  uid_t p_svuid;
  gid_t p_svgid;
  uint64_t_0 p_uniqueid;
  uint64_t_0 p_puniqueid;
  lck_mtx_t p_mlock;
  pid_t p_pid;
  char p_stat;
  char p_shutdownstate;
  char p_kdebug;
  char p_btrace;
  proc_3::$75DE801D7744798391C2104614267E73 p_pglist;
  proc_3::$75DE801D7744798391C2104614267E73 p_sibling;
  proc_3::$CF0746172ACBB3666A1209B9880E3347 p_children;
  proc::$2F8731EE5CEE647440942FF11E8E160C p_uthlist;
  proc_3::$75DE801D7744798391C2104614267E73 p_hash;
  proc_3::$1D3E450C18944DBC95A59288B453C62E p_evlist;
  lck_mtx_t p_fdmlock;
  lck_mtx_t p_ucred_mlock;
  kauth_cred_t p_ucred;
  filedesc *p_fd;
  pstats *p_stats;
  plimit *p_limit;
  sigacts *p_sigacts;
  lck_spin_t p_slock;
  plimit *p_olimit;
  int p_siglist;
  unsigned int p_flag;
  unsigned int p_lflag;
  unsigned int p_listflag;
  unsigned int p_ladvflag;
  int p_refcount;
  int p_childrencnt;
  int p_parentref;
  pid_t p_oppid;
  u_int p_xstat;
  itimerval p_realtimer;
  timeval p_rtime;
  itimerval p_vtimer_user;
  itimerval p_vtimer_prof;
  timeval p_rlim_cpu;
  int p_debugger;
  boolean_t sigwait;
  void *sigwait_thread;
  void *exit_thread;
  void *p_vforkact;
  int p_vforkcnt;
  int p_fpdrainwait;
  pid_t si_pid;
  u_int si_status;
  u_int si_code;
  uid_t si_uid;
  void *vm_shm;
  user_addr_t p_dtrace_argv;
  user_addr_t p_dtrace_envp;
  lck_mtx_t p_dtrace_sprlock;
  uint8_t_0 p_dtrace_stop;
  int p_dtrace_probes;
  u_int p_dtrace_count;
  dtrace_ptss_page *p_dtrace_ptss_pages;
  dtrace_ptss_page_entry *p_dtrace_ptss_free_list;
  dtrace_helpers *p_dtrace_helpers;
  dof_ioctl_data *p_dtrace_lazy_dofs;
  u_int p_argslen;
  int p_argc;
  user_addr_t user_stack;
  vnode *p_textvp;
  off_t p_textoff;
  sigset_t p_sigmask;
  sigset_t p_sigignore;
  sigset_t p_sigcatch;
  u_char p_priority;
  u_char p_resv0;
  char p_nice;
  u_char p_resv1;
  command_t p_comm;
  proc_name_t p_name;
  uint8_t_0 p_xhighbits;
  pid_t p_contproc;
  pgrp *p_pgrp;
  uint32_t_0 p_csflags;
  uint32_t_0 p_pcaction;
  uint8_t_0 p_uuid[16];
  cpu_type_t p_cputype;
  cpu_subtype_t p_cpusubtype;
  int p_aio_total_count;
  int p_aio_active_count;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_activeq;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_doneq;
  klist p_klist;
  rusage_superset *p_ru;
  thread_t p_signalholder;
  thread_t p_transholder;
  int p_sigwaitcnt;
  u_short p_acflag;
  volatile u_short p_vfs_iopolicy;
  user_addr_t p_threadstart;
  user_addr_t p_wqthread;
  int p_pthsize;
  uint32_t_0 p_pth_tsd_offset;
  user_addr_t p_stack_addr_hint;
  workqueue *p_wqptr;
  timeval p_start;
  void *p_rcall;
  int p_ractive;
  int p_idversion;
  void *p_pthhash;
  volatile uint64_t_0 was_throttled;
  volatile uint64_t_0 did_throttle;
  uint64_t_0 p_dispatchqueue_offset;
  uint64_t_0 p_dispatchqueue_serialno_offset;
  uint64_t_0 p_return_to_kernel_offset;
  uint64_t_0 p_mach_thread_self_offset;
  timeval vm_pressure_last_notify_tstamp;
  proc_3::$35A4377DEB90BFA5D04A23782E55D93B p_memstat_list;
  uint32_t_0 p_memstat_state;
  int32_t p_memstat_effectivepriority;
  int32_t p_memstat_requestedpriority;
  uint32_t_0 p_memstat_dirty;
  uint64_t_0 p_memstat_userdata;
  uint64_t_0 p_memstat_idledeadline;
  uint64_t_0 p_memstat_idle_start;
  uint64_t_0 p_memstat_idle_delta;
  int32_t p_memstat_memlimit;
  int32_t p_memstat_memlimit_active;
  int32_t p_memstat_memlimit_inactive;
  pid_t p_responsible_pid;
  uint32_t_0 p_user_faults;
  os_reason_0 *p_exit_reason;
  uint64_t_0 p_user_data;
};

/* 9038 */
struct proc_3::$75DE801D7744798391C2104614267E73
{
  proc_3 *le_next;
  proc_3 **le_prev;
};

/* 9039 */
struct proc_3::$CF0746172ACBB3666A1209B9880E3347
{
  proc_3 *lh_first;
};

/* 9040 */
struct proc_3::$1D3E450C18944DBC95A59288B453C62E
{
  eventqelt *tqh_first;
  eventqelt **tqh_last;
};

/* 9041 */
struct proc_3::$35A4377DEB90BFA5D04A23782E55D93B
{
  proc_3 *tqe_next;
  proc_3 **tqe_prev;
};

/* 9042 */
typedef proc_3 *proc_t_3;

/* 9043 */
union sk_gen_guard_id::$ED8714228B9813C365299562867087A5
{
  uint8_t_0 _u8[8];
  uint16_t _u16[4];
  uint64_t_0 _u64;
};

/* 9044 */
struct kqueue_0
{
  kqueue::$70A14970C11ADA6070297E3AF7234A27 _anon_0;
  kqtailq kq_queue[];
};

/* 9045 */
struct kqueue::$70A14970C11ADA6070297E3AF7234A27
{
  waitq_set kq_wqs;
  lck_spin_t kq_lock;
  uint16_t kq_state;
  uint16_t kq_level;
  uint32_t_0 kq_count;
  proc_0 *kq_p;
  knote_locks kq_knlocks;
  lck_spin_t kq_reqlock;
};

/* 9046 */
typedef const sk_protect *sk_protect_t;

/* 9047 */
struct sk_protect;

/* 9048 */
struct ch_event_result
{
  uint32_t_0 tx_data;
  uint32_t_0 rx_data;
};

/* 9049 */
struct ch_init
{
  uint32_t_0 ci_version;
  uint32_t_0 ci_ch_mode;
  ring_id_t ci_ch_ring_id;
  nexus_port_t ci_nx_port;
  uuid_t ci_nx_uuid;
  user_addr_t ci_key;
  uint32_t_0 ci_key_len;
  uint32_t_0 __ci_align;
  ch_ev_thresh ci_tx_lowat;
  ch_ev_thresh ci_rx_lowat;
  guardid_t ci_guard;
};

/* 9050 */
struct __user_packet
{
  __user_quantum pkt_qum;
  __packet pkt_com;
  const uint16_t pkt_bufs_max;
  const uint16_t pkt_bufs_cnt;
  __user_buflet pkt_bufs[1];
};

/* 9051 */
struct skmem_arena_nexus
{
  skmem_arena arn_cmn;
  uint32_t_0 arn_mode;
  nexus_meta_type_t arn_md_type;
  nexus_meta_subtype_t arn_md_subtype;
  kern_pbufpool *arn_pp;
  skmem_cache *arn_schema_cache;
  skmem_cache *arn_ring_cache;
  void *arn_ksd_start;
  void *arn_ksd_curr;
  void *arn_ksd_end;
  void *arn_usd_start;
  void *arn_usd_curr;
  int arn_ksd_nodefunct;
  void *arn_stats_obj;
  __flowadv_entry *arn_flowadv_obj;
  void *arn_nexusadv_obj;
};

/* 9052 */
struct __flowadv_entry
{
  __flowadv_entry::$A59BBDEE8FF03A21FCB05E73CC5FA94A _anon_0;
  volatile uint32_t_0 fae_flags;
  uint32_t_0 __fae_pad;
};

/* 9053 */
union __flowadv_entry::$A59BBDEE8FF03A21FCB05E73CC5FA94A
{
  uint64_t_0 fae_id_64[2];
  uint32_t_0 fae_id_32[4];
  uuid_t fae_id;
};

/* 9054 */
typedef channel_ring_stats *channel_ring_stats_t;

/* 9055 */
typedef channel_ring_user_stats *channel_ring_user_stats_t;

/* 9056 */
enum sync_mode_t : __int32
{
  CHANNEL_SYNC_TX = 0x0,
  CHANNEL_SYNC_RX = 0x1,
  CHANNEL_SYNC_UPP = 0x2,
};

/* 9057 */
struct __channel_open_args
{
  user_addr_t init;
  uint32_t_0 init_len;
  char init_len_r_[4];
};

/* 9058 */
struct __channel_get_info_args
{
  int c;
  char c_r_[4];
  user_addr_t cinfo;
  uint32_t_0 cinfolen;
  char cinfolen_r_[4];
};

/* 9059 */
struct __channel_sync_args
{
  int c;
  char c_r_[4];
  int mode;
  char mode_r_[4];
  int flags;
  char flags_r_[4];
};

/* 9060 */
typedef uint32_t_0 sync_flags_t;

/* 9061 */
struct __channel_get_opt_args
{
  int c;
  char c_r_[4];
  uint32_t_0 opt;
  char opt_r_[4];
  user_addr_t aoptval;
  user_addr_t aoptlen;
  char aoptlen_r_[];
};

/* 9062 */
struct __channel_set_opt_args
{
  int c;
  char c_r_[4];
  uint32_t_0 opt;
  char opt_r_[4];
  user_addr_t aoptval;
  uint32_t_0 optlen;
  char optlen_r_[4];
};

/* 9063 */
struct $915E17DE312D24210714EB56579DD800
{
  skmem_arena *tqh_first;
  skmem_arena **tqh_last;
};

/* 9064 */
enum sk_stats_arena_type_t : __int32
{
  SAR_TYPE_NEXUS = 0x0,
  SAR_TYPE_NECP = 0x1,
  SAR_TYPE_SYSTEM = 0x2,
};

/* 9065 */
enum sk_stats_region_id_t : __int32
{
  SREG_SCHEMA = 0x0,
  SREG_RING = 0x1,
  SREG_BUF = 0x2,
  SREG_MDU = 0x3,
  SREG_USD = 0x4,
  SREG_USTATS = 0x5,
  SREG_FLOWADV = 0x6,
  SREG_NEXUSADV = 0x7,
  SREG_SYSCTLS = 0x8,
  SREG_MDK = 0x9,
  SREG_KSD = 0xA,
  SREG_KSTATS = 0xB,
  SREG_MAX = 0xC,
};

/* 9066 */
struct skmem_arena_necp
{
  skmem_arena arc_cmn;
  skmem_cache *arc_kstats_cache;
};

/* 9067 */
struct skmem_arena_system
{
  skmem_arena ars_cmn;
  void *ars_sysctls_obj;
  size_t_0 ars_sysctls_objsize;
};

/* 9068 */
struct sk_stats_arena
{
  char sar_name[64];
  sk_stats_arena_type_t sar_type;
  uint64_t_0 sar_mapsize;
  sk_stats_region sar_regions[12];
  pid_t sar_mapped_pids[8];
};

/* 9069 */
struct sk_stats_region
{
  char sreg_name[64];
  uuid_t sreg_uuid;
  sk_stats_region_id_t sreg_id;
  uint32_t_0 sreg_mode;
  uint64_t_0 sreg_r_seg_size;
  uint64_t_0 sreg_c_seg_size;
  uint64_t_0 sreg_seg_cnt;
  uint64_t_0 sreg_r_obj_size;
  uint64_t_0 sreg_r_obj_cnt;
  uint64_t_0 sreg_c_obj_size;
  uint64_t_0 sreg_c_obj_cnt;
  uint64_t_0 sreg_seg_objs;
  uint64_t_0 sreg_meminuse;
  uint64_t_0 sreg_w_meminuse;
  uint64_t_0 sreg_memtotal;
  uint64_t_0 sreg_seginuse;
  uint64_t_0 sreg_rescale;
  uint64_t_0 sreg_alloc;
  uint64_t_0 sreg_free;
};

/* 9070 */
struct $4F4428C18C09D1BC003532EF8C22772E
{
  skmem_cache *tqh_first;
  skmem_cache **tqh_last;
};

/* 9071 */
struct skmem_bufctl_audit
{
  skmem_bufctl_audit::$2C3CEE6268418EB1CB0180DAD16792BD bc_link;
  void *bc_addr;
  void *bc_addrm;
  skmem_slab *bc_slab;
  uint32_t_0 bc_idx;
  thread *bc_thread;
  uint32_t_0 bc_timestamp;
  uint32_t_0 bc_depth;
  void *bc_stack[16];
};

/* 9072 */
struct skmem_bufctl_audit::$2C3CEE6268418EB1CB0180DAD16792BD
{
  skmem_bufctl *sle_next;
};

/* 9073 */
struct $27E8266088BA36FC395B925F9F2C4E2F
{
  skmem_region *tqh_first;
  skmem_region **tqh_last;
};

/* 9074 */
struct kern_nexus_tree
{
  kern_nexus *rbh_root;
};

/* 9075 */
typedef channel_ring_mem_info *channel_ring_mem_info_t_0;

/* 9076 */
struct channel_ring_mem_info
{
  uint64_t_0 crmi_buf_mem_total;
  uint64_t_0 crmi_buf_mem_inuse;
};

/* 9077 */
struct $673B130B6ED281220ABAFCC3FBD64251
{
  nxctl *stqh_first;
  nxctl **stqh_last;
};

/* 9078 */
struct $63A0C26149F5918A39CBEEA4E5BA4B9C
{
  kern_nexus_provider *stqh_first;
  kern_nexus_provider **stqh_last;
};

/* 9079 */
typedef $A60AAC4CC04A752D1B91862A17C83801 *nexus_provider_info_t;

/* 9080 */
struct __attribute__((aligned(64))) $A60AAC4CC04A752D1B91862A17C83801
{
  uuid_t npi_prov_uuid;
  nxprov_params npi_prov_params;
  uint32_t_0 npi_instance_uuids_count;
  uint32_t_0 __npi_align_reserved;
  uuid_t npi_instance_uuids[];
};

/* 9081 */
typedef $1279B82E72B35E190A4B1D41789873FE *nexus_channel_info_t;

/* 9082 */
struct $1279B82E72B35E190A4B1D41789873FE
{
  uuid_t nci_instance_uuid;
  uint32_t_0 nci_channel_entries_count;
  uint32_t_0 __nci_align_reserved;
  nexus_channel_entry nci_channel_entries[];
};

/* 9083 */
struct nexus_channel_entry
{
  uuid_t nce_uuid;
  uint32_t_0 nce_flags;
  pid_t nce_pid;
  int nce_fd;
  nexus_port_t nce_port;
  uint32_t_0 nce_tx_rings;
  uint32_t_0 nce_rx_rings;
  uint32_t_0 __nce_align_reserved;
  nexus_channel_ring_entry nce_ring_entries[];
};

/* 9084 */
struct nexus_channel_ring_entry
{
  ring_id_t ncre_ring_id;
  uint32_t_0 __ncre_align_reserved;
  channel_ring_stats ncre_stats;
  channel_ring_mem_info ncre_mem_info;
  channel_ring_user_stats ncre_user_stats;
  channel_ring_error_stats ncre_error_stats;
};

/* 9085 */
typedef nexus_channel_entry *nexus_channel_entry_t;

/* 9086 */
typedef nexus_channel_ring_entry *nexus_channel_ring_entry_t;

/* 9087 */
struct nxprov_reg
{
  uint32_t_0 nxpreg_version;
  uint32_t_0 nxpreg_requested;
  nxprov_params nxpreg_params;
};

/* 9088 */
struct nx_bind_req
{
  uuid_t nb_nx_uuid;
  nexus_port_t nb_port;
  uint32_t_0 nb_flags;
  uuid_t nb_exec_uuid;
  user_addr_t nb_key;
  uint32_t_0 nb_key_len;
  pid_t nb_pid;
};

/* 9089 */
struct nx_unbind_req
{
  uuid_t nu_nx_uuid;
  nexus_port_t nu_port;
};

/* 9090 */
struct nxprov_reg_ent
{
  uuid_t npre_prov_uuid;
  nxprov_params npre_prov_params;
};

/* 9091 */
struct nxprov_list_req
{
  uint32_t_0 nrl_num_regs;
  uint32_t_0 __nrl_align;
  user_addr_t nrl_regs;
};

/* 9092 */
struct nx_list_req
{
  uuid_t nl_prov_uuid;
  uint32_t_0 nl_num_nx_uuids;
  uint32_t_0 __nl_align;
  user_addr_t nl_nx_uuids;
};

/* 9093 */
struct ch_list_req
{
  uuid_t cl_nx_uuid;
  uint32_t_0 cl_num_ch_uuids;
  uint32_t_0 __cl_align;
  user_addr_t cl_ch_uuids;
};

/* 9094 */
typedef void kern_nexus_walktree_f_t(kern_nexus *, void *);

/* 9095 */
struct $559B711C9C421E1B9E55B6D28422F825
{
  nxdom *stqh_first;
  nxdom **stqh_last;
};

/* 9096 */
struct $CFBE631746A5C2203B85038967CFC87E
{
  kern_nexus_domain_provider *stqh_first;
  kern_nexus_domain_provider **stqh_last;
};

/* 9097 */
typedef $661FB4391FF4515D5D476DF0CEEBB7E4 nexus_attr_type_t;

/* 9098 */
struct __attribute__((aligned(8))) nx_spec_req
{
  nx_spec_req::$FDD67073A28384DD3E4A8A778A62A523 nsr_u;
  uint32_t_0 nsr_flags;
  uuid_t nsr_if_uuid;
};

/* 9099 */
union nx_spec_req::$FDD67073A28384DD3E4A8A778A62A523
{
  char nsru_name[64];
  uuid_t nsru_uuid;
  ifnet *nsru_ifp;
};

/* 9100 */
struct nxprov_adjusted_params
{
  nexus_meta_subtype_t *adj_md_subtype;
  boolean_t *adj_md_cache;
  uint32_t_0 *adj_stats_size;
  uint32_t_0 *adj_flowadv_max;
  uint32_t_0 *adj_nexusadv_size;
  uint32_t_0 *adj_caps;
  uint32_t_0 *adj_tx_rings;
  uint32_t_0 *adj_rx_rings;
  uint32_t_0 *adj_tx_slots;
  uint32_t_0 *adj_rx_slots;
  uint32_t_0 *adj_alloc_rings;
  uint32_t_0 *adj_free_rings;
  uint32_t_0 *adj_alloc_slots;
  uint32_t_0 *adj_free_slots;
  uint32_t_0 *adj_buf_size;
  skmem_region_params *adj_buf_srp;
};

/* 9101 */
struct __nexus_open_args
{
  user_addr_t init;
  uint32_t_0 init_len;
  char init_len_r_[4];
};

/* 9102 */
struct nxctl_init
{
  uint32_t_0 ni_version;
  uint32_t_0 __ni_align;
  guardid_t ni_guard;
};

/* 9103 */
struct __nexus_register_args
{
  int ctl;
  char ctl_r_[4];
  user_addr_t reg;
  uint32_t_0 reg_len;
  char reg_len_r_[4];
  user_addr_t prov_uuid;
  uint32_t_0 prov_uuid_len;
  char prov_uuid_len_r_[4];
};

/* 9104 */
struct __nexus_deregister_args
{
  int ctl;
  char ctl_r_[4];
  user_addr_t prov_uuid;
  uint32_t_0 prov_uuid_len;
  char prov_uuid_len_r_[4];
};

/* 9105 */
struct __nexus_create_args
{
  int ctl;
  char ctl_r_[4];
  user_addr_t prov_uuid;
  uint32_t_0 prov_uuid_len;
  char prov_uuid_len_r_[4];
  user_addr_t nx_uuid;
  uint32_t_0 nx_uuid_len;
  char nx_uuid_len_r_[4];
};

/* 9106 */
struct __nexus_destroy_args
{
  int ctl;
  char ctl_r_[4];
  user_addr_t nx_uuid;
  uint32_t_0 nx_uuid_len;
  char nx_uuid_len_r_[4];
};

/* 9107 */
struct __nexus_get_opt_args
{
  int ctl;
  char ctl_r_[4];
  uint32_t_0 opt;
  char opt_r_[4];
  user_addr_t aoptval;
  user_addr_t aoptlen;
  char aoptlen_r_[];
};

/* 9108 */
struct __nexus_set_opt_args
{
  int ctl;
  char ctl_r_[4];
  uint32_t_0 opt;
  char opt_r_[4];
  user_addr_t aoptval;
  uint32_t_0 optlen;
  char optlen_r_[4];
};

/* 9109 */
struct sk_stats_flow_switch
{
  uuid_t sfs_nx_uuid;
  char sfs_if_name[16];
  fsw_stats sfs_fsws;
};

/* 9110 */
struct nx_ns_req
{
  nexus_port_t nnr_nx_port;
  sockaddr_in_4_6 nnr_saddr;
  sockaddr_in_4_6 nnr_daddr;
  uint8_t_0 nnr_protocol;
  uint16_t nnr_flags;
  uuid_t nnr_rule_id;
  packet_svc_class_t nnr_svc_class;
  __attribute__((aligned(8))) uuid_t nnr_euuid;
  uint32_t_0 nnr_policy_id;
  pid_t nnr_epid;
  flowadv_idx_t nnr_flowadv_idx;
};

/* 9111 */
struct __nx_stats_channel_errors
{
  channel_ring_error_stats_t nxs_cres;
};

/* 9112 */
typedef channel_ring_error_stats *channel_ring_error_stats_t;

/* 9113 */
struct br_ft
{
  br_ft_pkt ft_pkts[256];
  uint16_t ft_dsts[256];
  br_ft_q ft_qs[];
};

/* 9114 */
struct __attribute__((aligned(8))) br_ft_pkt
{
  __kern_packet *ft_pkt_ptr;
  mach_vm_address_t ft_pkt_buf;
  slot_idx_t ft_pkt_sidx;
  uint16_t ft_pkt_flags;
  uint16_t ft_pkt_len;
  uint16_t ft_pkt_next;
};

/* 9115 */
struct br_ft_q
{
  uint16_t ft_q_head;
  uint16_t ft_q_tail;
  uint16_t ft_q_len;
};

/* 9116 */
struct fsw_bridge_context
{
  fsw_hash_ent bc_ht[1024];
};

/* 9117 */
struct fsw_hash_ent
{
  uint64_t_0 mac;
  uint64_t_0 ports;
};

/* 9118 */
struct ms_vp_dev_ft
{
  ms_ft_pkt ft_pkts[16];
  uint16_t ft_dsts[16];
  ms_ft_q ft_qs[];
};

/* 9119 */
struct ms_ft_q
{
  uint16_t ft_q_head;
  uint16_t ft_q_tail;
  uint16_t ft_q_len;
};

/* 9120 */
struct sk_stats_flow_adv
{
  uuid_t sfa_nx_uuid;
  char sfa_if_name[16];
  pid_t sfa_owner_pid;
  uint32_t_0 sfa_entries_count;
  sk_stats_flow_adv_ent sfa_entries[];
};

/* 9121 */
struct sk_stats_flow_adv_ent
{
  uuid_t sfae_flow_id;
  uint32_t_0 sfae_flags;
};

/* 9122 */
struct __attribute__((aligned(64))) sk_stats_flow_owner
{
  uuid_t sfo_nx_uuid;
  char sfo_if_name[16];
  uint32_t_0 sfo_bucket_idx;
  char sfo_name[32];
  pid_t sfo_pid;
  nexus_port_t sfo_nx_port;
  boolean_t sfo_nx_port_pid_bound;
  boolean_t sfo_nx_port_destroyed;
};

/* 9123 */
struct sk_stats_flow_route
{
  uuid_t sfr_nx_uuid;
  uuid_t sfr_uuid;
  char sfr_if_name[16];
  uint32_t_0 sfr_bucket_idx;
  uint32_t_0 sfr_id_bucket_idx;
  uint32_t_0 sfr_flags;
  uint32_t_0 sfr_usecnt;
  int64_t sfr_expire;
  sockaddr_in_4_6 sfr_laddr;
  sockaddr_in_4_6 sfr_faddr;
  sockaddr_in_4_6 sfr_gaddr;
  __attribute__((aligned(64))) uint8_t_0 sfr_ether_dhost[6];
};

/* 9124 */
struct __attribute__((aligned(64))) sk_stats_userstack
{
  uuid_t sus_nx_uuid;
  char sus_if_name[16];
  pid_t sus_owner_pid;
  ip_stats sus_ip;
  ip6_stats sus_ip6;
  tcp_stats sus_tcp;
  udp_stats sus_udp;
};

/* 9125 */
struct mbufq
{
  mbuf *mq_first;
  mbuf **mq_last;
};

/* 9126 */
struct $<17946648,1>::$F7EE2BCDF497922BB1A049E7116B6B09
{
  flow_entry_dead *lh_first;
};

/* 9127 */
struct flow_entry_dead
{
  flow_entry_dead::$C6A53116AD0C5D1E5126AE38711773CB fed_link;
  boolean_t fed_want_nonviable;
  boolean_t fed_want_clonotify;
  flow_entry_dead::$9E3C66A1E5C8C622F966CC9706D1B5A9 _anon_0;
};

/* 9128 */
struct flow_entry_dead::$C6A53116AD0C5D1E5126AE38711773CB
{
  flow_entry_dead *le_next;
  flow_entry_dead **le_prev;
};

/* 9129 */
union flow_entry_dead::$9E3C66A1E5C8C622F966CC9706D1B5A9
{
  uint64_t_0 fed_rule_id_64[2];
  uint32_t_0 fed_rule_id_32[4];
  uuid_t fed_rule_id;
};

/* 9130 */
struct __attribute__((aligned(8))) ipf
{
  ipf *ipf_down;
  ipf *ipf_up;
  __kern_packet *ipf_pkt;
  int ipf_len;
  int ipf_off;
  uint16_t ipf_mff;
};

/* 9131 */
struct __attribute__((aligned(8))) ipfq
{
  ipf *ipfq_down;
  ipf *ipfq_up;
  ipfq *ipfq_next;
  ipfq *ipfq_prev;
  uint64_t_0 ipfq_timestamp;
  ipf_key ipfq_key;
  uint16_t ipfq_nfrag;
  uint16_t ipfq_unfraglen;
};

/* 9132 */
struct __attribute__((aligned(4))) ipf_key
{
  uint64_t_0 ipfk_addr[4];
  uint32_t_0 ipfk_ident;
  uint16_t ipfk_len;
};

/* 9133 */
struct netagent_nexus_agent
{
  netagent agent;
  netagent_nexus nexus_data;
};

/* 9134 */
struct netagent_nexus
{
  u_int32_t frame_type;
  u_int32_t endpoint_assignment_type;
  u_int32_t endpoint_request_types[16];
  u_int32_t endpoint_resolution_type_pairs[32];
  u_int32_t nexus_flags;
};

/* 9135 */
union flow_pkt_classify::$DC1E9D6CA7CCB9C04024811CB167C724
{
  ip *_iph;
  ip6_hdr *_ip6;
};

/* 9136 */
union flow_pkt_classify::$A04639B5D124E61AB3E8EA325CB5D1E5
{
  tcphdr *_tcph;
  udphdr *_udph;
};

/* 9137 */
struct flow_mgr_context_tree
{
  flow_mgr_context *rbh_root;
};

/* 9138 */
union flow_mgr_get_frib_by_uuid::$287B4826B530EF1748BF6B7EC66D19FD
{
  uuid_t uuid;
  uint64_t_0 u64[2];
};

/* 9139 */
typedef int (*flow_route_resolve_fn_t)(void *, flow_route *, ms_ft_pkt *, proc_0 *);

/* 9140 */
typedef void (*flow_route_ctor_fn_t)(void *, flow_route *);

/* 9141 */
struct __attribute__((aligned(8))) nexus_monitor_adapter
{
  nexus_adapter mna_up;
  nexus_adapter *mna_pna;
  uint32_t_0 mna_first[2];
  uint32_t_0 mna_last[2];
  uint32_t_0 mna_mode;
};

/* 9142 */
struct nx_netif
{
  nexus_netif_adapter *nif_na;
  kern_nexus *nif_nx;
  nxbind *nif_dev_nxb;
  nxbind *nif_host_nxb;
  uuid_t nif_uuid;
  netif_stats nif_stats;
};

/* 9143 */
struct __attribute__((aligned(64))) kern_pbufpool_memory_info
{
  uint32_t_0 kpm_flags;
  uint32_t_0 kpm_packets;
  uint32_t_0 kpm_max_frags;
  uint32_t_0 kpm_buflets;
  uint32_t_0 kpm_bufsize;
  uint32_t_0 kpm_bufsegs;
  uint32_t_0 kpm_buf_seg_size;
};

/* 9144 */
struct __attribute__((aligned(64))) sk_stats_net_if
{
  uuid_t sns_nx_uuid;
  char sns_if_name[16];
  netif_stats sns_nifs;
};

/* 9145 */
struct nexus_netif_compat_adapter
{
  nexus_netif_adapter nca_up;
};

/* 9146 */
struct nx_upipe
{
  nexus_adapter *nup_pna;
  uint32_t_0 nup_pna_users;
  nxbind *nup_cli_nxb;
  nxbind *nup_srv_nxb;
};

/* 9147 */
struct nexus_kpipe_adapter
{
  nexus_adapter kna_up;
};

/* 9148 */
typedef uint32_t_0 packet_csum_flags_t;

/* 9149 */
enum kern_packet_traffic_class_t : __int32
{
  KPKT_TC_UNSPEC = 0xFFFFFFFF,
  KPKT_TC_BE = 0x0,
  KPKT_TC_BK = 0x1,
  KPKT_TC_VI = 0x2,
  KPKT_TC_VO = 0x3,
  KPKT_TC_MAX = 0x4,
};

/* 9150 */
typedef uint32_t_0 kern_obj_idx_seg_t;

/* 9151 */
typedef uint32_t_0 kern_packet_idx_t;

/* 9152 */
struct __metadata_preamble
{
  uint64_t_0 _mdp_pad[2];
  mach_vm_offset_t mdp_obj_roff;
  uint64_t_0 mdp_redzone;
};

/* 9153 */
typedef uint32_t_0 kern_segment_idx_t;

/* 9154 */
struct xstate_info_t
{
  int flavor;
  natural_t state_count;
  size_t_0 mcontext_size;
};

/* 9155 */
union sendsig::$DF2903066F8422AD0F87D30DD6B6A9C5
{
  mcontext_avx32 mctx_avx32;
  mcontext_avx64 mctx_avx64;
  mcontext_avx512_32 mctx_avx512_32;
  mcontext_avx512_64 mctx_avx512_64;
};

/* 9156 */
struct mcontext_avx32
{
  i386_exception_state es;
  i386_thread_state ss;
  i386_avx_state fs;
};

/* 9157 */
struct __attribute__((aligned(8))) mcontext_avx64
{
  x86_exception_state64 es;
  x86_thread_state64 ss;
  x86_avx_state64 fs;
};

/* 9158 */
struct mcontext_avx512_32
{
  i386_exception_state es;
  i386_thread_state ss;
  i386_avx512_state fs;
};

/* 9159 */
struct __attribute__((aligned(8))) mcontext_avx512_64
{
  x86_exception_state64 es;
  x86_thread_state64 ss;
  x86_avx512_state64 fs;
};

/* 9160 */
union sigreturn::$DF2903066F8422AD0F87D30DD6B6A9C5
{
  mcontext_avx32 mctx_avx32;
  mcontext_avx64 mctx_avx64;
  mcontext_avx512_32 mctx_avx512_32;
  mcontext_avx512_64 mctx_avx512_64;
};

/* 9161 */
struct user_ucontext64
{
  int uc_onstack;
  sigset_t uc_sigmask;
  user64_sigaltstack uc_stack;
  user_addr_t uc_link;
  user_size_t uc_mcsize;
  user_addr_t uc_mcontext64;
};

/* 9162 */
struct user_ucontext32
{
  int uc_onstack;
  sigset_t uc_sigmask;
  user32_sigaltstack uc_stack;
  user32_addr_t uc_link;
  user32_size_t uc_mcsize;
  user32_addr_t uc_mcontext;
};

/* 9163 */
struct sigframe32
{
  int retaddr;
  user32_addr_t catcher;
  int sigstyle;
  int sig;
  user32_addr_t sinfo;
  user32_addr_t uctx;
  user32_addr_t token;
};

/* 9164 */
struct sigreturn_args
{
  user_addr_t uctx;
  int infostyle;
  char infostyle_r_[4];
  user_addr_t token;
  char token_r_[];
};

/* 9165 */
typedef x86_saved_state_t savearea_t;

/* 9166 */
struct dtrace_getpcstack::frame;

/* 9167 */
struct frame
{
  frame *backchain;
  uintptr_t retaddr;
};

/* 9168 */
typedef xcArg xcArg_t;

/* 9169 */
struct xcArg
{
  processorid_t cpu;
  dtrace_xcall_t f;
  void *arg;
};

/* 9170 */
typedef uintptr_t greg_t;

/* 9171 */
enum dis_isize : __int32
{
  DIS_ISIZE_INSTR = 0x0,
  DIS_ISIZE_OPERAND = 0x1,
};

/* 9172 */
typedef dis_isize dis_isize_t;

/* 9173 */
typedef unsigned int model_t;

/* 9174 */
typedef dis86 dis86_t;

/* 9175 */
struct dis86
{
  uint_t d86_mode;
  uint_t d86_error;
  uint_t d86_len;
  int d86_rmindex;
  uint_t d86_memsize;
  char d86_bytes[16];
  char d86_mnem[256];
  uint_t d86_numopnds;
  uint_t d86_rex_prefix;
  char *d86_seg_prefix;
  uint_t d86_opnd_size;
  uint_t d86_addr_size;
  uint_t d86_got_modrm;
  uint_t d86_vsib;
  d86opnd d86_opnd[4];
  int (*d86_check_func)(void *);
  int (*d86_get_byte)(void *);
  void *d86_data;
};

/* 9176 */
struct d86opnd
{
  char d86_opnd[256];
  char d86_prefix[8];
  uint_t d86_mode;
  uint_t d86_value_size;
  uint64_t_0 d86_value;
};

/* 9177 */
typedef instable instable_t;

/* 9178 */
struct __attribute__((aligned(8))) instable
{
  instable *it_indirect;
  uchar_t it_adrmode;
  unsigned __int32 it_invalid64 : 1;
  unsigned __int32 it_always64 : 1;
  unsigned __int32 it_invalid32 : 1;
  unsigned __int32 it_stackop : 1;
  unsigned __int32 it_vexwoxmm : 1;
  unsigned __int32 it_avxsuf : 1;
};

/* 9179 */
typedef dis_gather_regs dis_gather_regs_t;

/* 9180 */
struct dis_gather_regs
{
  uint_t dgr_arg0;
  uint_t dgr_arg1;
  uint_t dgr_arg2;
  const char *dgr_suffix;
};

/* 9181 */
typedef unsigned int mac_policy_handle_t;

/* 9182 */
struct $63DD3E276F8FE962DA02A685B1F010B0
{
  devsw_lock *tqh_first;
  devsw_lock **tqh_last;
};

/* 9183 */
struct devsw_lock
{
  devsw_lock::$F56EDCD8FAE6CB1B993CC0FEF52732CF dl_list;
  thread *dl_thread;
  dev_t dl_dev;
  int dl_mode;
};

/* 9184 */
struct devsw_lock::$F56EDCD8FAE6CB1B993CC0FEF52732CF
{
  devsw_lock *tqe_next;
  devsw_lock **tqe_prev;
};

/* 9185 */
typedef devsw_lock *devsw_lock_t;

/* 9186 */
typedef char SInt8;

/* 9187 */
typedef __int16 SInt16;

/* 9188 */
typedef lck_mtx_t IOLock;

/* 9189 */
struct __cppobj OSMetaClassMeta : OSMetaClass
{
};

/* 9190 */
enum OSCollection::$2CDB96CCA8D2F83C027438288B0D455B : __int32
{
  kImmutable = 0x1,
  kSort = 0x2,
  kMASK = 0xFFFFFFFF,
};

/* 9191 */
enum OSString::$249D9758A91D997F6D5C7DC92B459C3D : __int32
{
  kMaxStringLength = 0x3FFFE,
};

/* 9192 */
enum OSKext::$7575D426D215597622439CEA6956E374 : __int32
{
  kPrintKextsLock = 0x1,
  kPrintKextsUnslide = 0x2,
  kPrintKextsTerse = 0x4,
};

/* 9193 */
struct StalledData
{
  const char *kextIdentifier;
  OSReturn result;
  unsigned int capacity;
  unsigned int count;
  OSMetaClass **classes;
};

/* 9194 */
enum $D967D9B18C25CC88B1065157F60A7831 : __int32
{
  kCompletedBootstrap = 0x0,
  kNoDictionaries = 0x1,
  kMakingDictionaries = 0x2,
};

/* 9195 */
enum OSMetaClass::applyToInstances::$9A62FF0E1A5B7DDD237F4982E696FDD3 : __int32
{
  kLocalDepth = 0x18,
};

/* 9196 */
typedef subs_entry_t subs_entry_t_0;

/* 9197 */
struct __attribute__((aligned(8))) subs_entry_t
{
  const char *substring;
  char substitute;
};

/* 9198 */
typedef _loaded_kext_summary_header OSKextLoadedKextSummaryHeader;

/* 9199 */
struct _loaded_kext_summary_header
{
  uint32_t_0 version;
  uint32_t_0 entry_size;
  uint32_t_0 numSummaries;
  uint32_t_0 reserved;
  OSKextLoadedKextSummary summaries[];
};

/* 9200 */
struct proc_4
{
  proc_4::$72088A5D48F5330D5563C47ADC554248 p_list;
  void *task;
  proc_4 *p_pptr;
  pid_t p_ppid;
  pid_t p_pgrpid;
  uid_t p_uid;
  gid_t p_gid;
  uid_t p_ruid;
  gid_t p_rgid;
  uid_t p_svuid;
  gid_t p_svgid;
  uint64_t_0 p_uniqueid;
  uint64_t_0 p_puniqueid;
  lck_mtx_t p_mlock;
  pid_t p_pid;
  char p_stat;
  char p_shutdownstate;
  char p_kdebug;
  char p_btrace;
  proc_4::$72088A5D48F5330D5563C47ADC554248 p_pglist;
  proc_4::$72088A5D48F5330D5563C47ADC554248 p_sibling;
  proc_4::$B9E07EBA4DA7BC393DB8627D5A115972 p_children;
  proc::$2F8731EE5CEE647440942FF11E8E160C p_uthlist;
  proc_4::$72088A5D48F5330D5563C47ADC554248 p_hash;
  proc::$1D3E450C18944DBC95A59288B453C62E p_evlist;
  lck_mtx_t p_fdmlock;
  lck_mtx_t p_ucred_mlock;
  kauth_cred_t_0 p_ucred;
  filedesc *p_fd;
  pstats *p_stats;
  plimit *p_limit;
  sigacts *p_sigacts;
  lck_spin_t p_slock;
  plimit *p_olimit;
  int p_siglist;
  unsigned int p_flag;
  unsigned int p_lflag;
  unsigned int p_listflag;
  unsigned int p_ladvflag;
  int p_refcount;
  int p_childrencnt;
  int p_parentref;
  pid_t p_oppid;
  u_int p_xstat;
  itimerval p_realtimer;
  timeval p_rtime;
  itimerval p_vtimer_user;
  itimerval p_vtimer_prof;
  timeval p_rlim_cpu;
  int p_debugger;
  boolean_t sigwait;
  void *sigwait_thread;
  void *exit_thread;
  void *p_vforkact;
  int p_vforkcnt;
  int p_fpdrainwait;
  pid_t si_pid;
  u_int si_status;
  u_int si_code;
  uid_t si_uid;
  void *vm_shm;
  user_addr_t p_dtrace_argv;
  user_addr_t p_dtrace_envp;
  lck_mtx_t p_dtrace_sprlock;
  uint8_t_0 p_dtrace_stop;
  int p_dtrace_probes;
  u_int p_dtrace_count;
  dtrace_ptss_page *p_dtrace_ptss_pages;
  dtrace_ptss_page_entry *p_dtrace_ptss_free_list;
  dtrace_helpers *p_dtrace_helpers;
  dof_ioctl_data *p_dtrace_lazy_dofs;
  u_int p_argslen;
  int p_argc;
  user_addr_t user_stack;
  vnode_0 *p_textvp;
  off_t p_textoff;
  sigset_t p_sigmask;
  sigset_t p_sigignore;
  sigset_t p_sigcatch;
  u_char p_priority;
  u_char p_resv0;
  char p_nice;
  u_char p_resv1;
  command_t p_comm;
  proc_name_t p_name;
  uint8_t_0 p_xhighbits;
  pid_t p_contproc;
  pgrp *p_pgrp;
  uint32_t_0 p_csflags;
  uint32_t_0 p_pcaction;
  uint8_t_0 p_uuid[16];
  cpu_type_t p_cputype;
  cpu_subtype_t p_cpusubtype;
  int p_aio_total_count;
  int p_aio_active_count;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_activeq;
  proc::$362CBD09F9E28B04D136306D2489B7C4 p_aio_doneq;
  klist p_klist;
  rusage_superset *p_ru;
  thread_t p_signalholder;
  thread_t p_transholder;
  int p_sigwaitcnt;
  u_short p_acflag;
  volatile u_short p_vfs_iopolicy;
  user_addr_t p_threadstart;
  user_addr_t p_wqthread;
  int p_pthsize;
  uint32_t_0 p_pth_tsd_offset;
  user_addr_t p_stack_addr_hint;
  workqueue *p_wqptr;
  timeval p_start;
  void *p_rcall;
  int p_ractive;
  int p_idversion;
  void *p_pthhash;
  volatile uint64_t_0 was_throttled;
  volatile uint64_t_0 did_throttle;
  uint64_t_0 p_dispatchqueue_offset;
  uint64_t_0 p_dispatchqueue_serialno_offset;
  uint64_t_0 p_return_to_kernel_offset;
  uint64_t_0 p_mach_thread_self_offset;
  timeval vm_pressure_last_notify_tstamp;
  proc_4::$5FEEE30B2BA423759ADF459D38BFC1AA p_memstat_list;
  uint32_t_0 p_memstat_state;
  int32_t p_memstat_effectivepriority;
  int32_t p_memstat_requestedpriority;
  uint32_t_0 p_memstat_dirty;
  uint64_t_0 p_memstat_userdata;
  uint64_t_0 p_memstat_idledeadline;
  uint64_t_0 p_memstat_idle_start;
  uint64_t_0 p_memstat_idle_delta;
  int32_t p_memstat_memlimit;
  int32_t p_memstat_memlimit_active;
  int32_t p_memstat_memlimit_inactive;
  pid_t p_responsible_pid;
  uint32_t_0 p_user_faults;
  os_reason *p_exit_reason;
  uint64_t_0 p_user_data;
};

/* 9201 */
struct proc_4::$72088A5D48F5330D5563C47ADC554248
{
  proc_4 *le_next;
  proc_4 **le_prev;
};

/* 9202 */
struct proc_4::$B9E07EBA4DA7BC393DB8627D5A115972
{
  proc_4 *lh_first;
};

/* 9203 */
typedef ucred_0 *kauth_cred_t_0;

/* 9204 */
struct ucred_0
{
  ucred_0::$D5F0295BD6D7FA0A44E49984C50B1E7B cr_link;
  u_long cr_ref;
  ucred::posix_cred cr_posix;
  label *cr_label;
  au_session cr_audit;
};

/* 9205 */
struct ucred_0::$D5F0295BD6D7FA0A44E49984C50B1E7B
{
  ucred_0 *tqe_next;
  ucred_0 **tqe_prev;
};

/* 9206 */
struct ucred::posix_cred
{
  uid_t cr_uid;
  uid_t cr_ruid;
  uid_t cr_svuid;
  __int16 cr_ngroups;
  gid_t cr_groups[16];
  gid_t cr_rgid;
  gid_t cr_svgid;
  uid_t cr_gmuid;
  int cr_flags;
};

/* 9207 */
struct vnode_0
{
  lck_mtx_t v_lock;
  vnode_0::$29DBFE6B101CAE715B83563BB372FC84 v_freelist;
  vnode_0::$29DBFE6B101CAE715B83563BB372FC84 v_mntvnodes;
  vnode::$174C9EE912997FA19B92470DBE7919E6 v_ncchildren;
  vnode::$40FB4DAF873A4E8D045823299B10568B v_nclinks;
  vnode_t_0 v_defer_reclaimlist;
  uint32_t_0 v_listflag;
  uint32_t_0 v_flag;
  uint16_t v_lflag;
  uint8_t_0 v_iterblkflags;
  uint8_t_0 v_references;
  int32_t v_kusecount;
  int32_t v_usecount;
  int32_t v_iocount;
  void *v_owner;
  uint16_t v_type;
  uint16_t v_tag;
  uint32_t_0 v_id;
  vnode::$340B5204D89BD86505F81B6C292395C1 v_un;
  buflists v_cleanblkhd;
  buflists v_dirtyblkhd;
  klist v_knotes;
  kauth_cred_t_0 v_cred;
  kauth_action_t v_authorized_actions;
  int v_cred_timestamp;
  int v_nc_generation;
  int32_t v_numoutput;
  int32_t v_writecount;
  const char *v_name;
  vnode_t_0 v_parent;
  lockf *v_lockf;
  int (**v_op)(void *);
  mount_t v_mount;
  void *v_data;
  label *v_label;
  vnode_resolve_t v_resolve;
};

/* 9208 */
struct vnode_0::$29DBFE6B101CAE715B83563BB372FC84
{
  vnode_0 *tqe_next;
  vnode_0 **tqe_prev;
};

/* 9209 */
typedef vnode_0 *vnode_t_0;

/* 9210 */
struct __attribute__((aligned(8))) componentname_0
{
  uint32_t_0 cn_nameiop;
  uint32_t_0 cn_flags;
  void *cn_reserved1;
  void *cn_reserved2;
  char *cn_pnbuf;
  int cn_pnlen;
  char *cn_nameptr;
  int cn_namelen;
  uint32_t_0 cn_hash;
  uint32_t_0 cn_consume;
};

/* 9211 */
struct proc_4::$5FEEE30B2BA423759ADF459D38BFC1AA
{
  proc_4 *tqe_next;
  proc_4 **tqe_prev;
};

/* 9212 */
typedef lck_mtx_t lck_mtx_t_1;

/* 9213 */
typedef _IORecursiveLock IORecursiveLock;

/* 9214 */
struct __attribute__((aligned(8))) _IORecursiveLock
{
  lck_mtx_t mutex;
  lck_grp_t *group;
  thread_t thread;
  UInt32 count;
};

/* 9215 */
typedef kxld_context KXLDContext;

/* 9216 */
struct kxld_context
{
  KXLDKext *kext;
  KXLDArray *section_order;
  KXLDArray objects;
  KXLDArray dependencies;
  KXLDDict defined_symbols_by_name;
  KXLDDict defined_cxx_symbols_by_value;
  KXLDDict obsolete_symbols_by_name;
  KXLDDict vtables_by_name;
  KXLDFlags flags;
  KXLDAllocateCallback allocate_callback;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
};

/* 9217 */
enum kxld_allocate_flags : __int32
{
  kKxldAllocateDefault = 0x0,
  kKxldAllocateWritable = 0x1,
};

/* 9218 */
enum kxld_log_subsystem : __int32
{
  kKxldLogLinking = 0x0,
  kKxldLogPatching = 0x1,
};

/* 9219 */
enum kxld_log_level : __int32
{
  kKxldLogExplicit = 0x0,
  kKxldLogErr = 0x1,
  kKxldLogWarn = 0x2,
  kKxldLogBasic = 0x3,
  kKxldLogDetail = 0x4,
  kKxldLogDebug = 0x5,
};

/* 9220 */
enum firehose_tracepoint_code_t : __int32
{
  firehose_tracepoint_code_load = 0x1,
  firehose_tracepoint_code_unload = 0x2,
};

/* 9221 */
enum firehose_tracepoint_namespace_t_0 : __int8
{
  firehose_tracepoint_namespace_activity = 0x2,
  firehose_tracepoint_namespace_trace = 0x3,
  firehose_tracepoint_namespace_log = 0x4,
  firehose_tracepoint_namespace_metadata = 0x5,
  firehose_tracepoint_namespace_signpost = 0x6,
  firehose_tracepoint_namespace_loss = 0x7,
};

/* 9222 */
enum firehose_tracepoint_flags_t_0 : __int16
{
  _firehose_tracepoint_flags_base_has_current_aid = 0x1,
  _firehose_tracepoint_flags_pc_style_none = 0x0,
  _firehose_tracepoint_flags_pc_style_main_exe = 0x2,
  _firehose_tracepoint_flags_pc_style_shared_cache = 0x4,
  _firehose_tracepoint_flags_pc_style_main_plugin = 0x6,
  _firehose_tracepoint_flags_pc_style_absolute = 0x8,
  _firehose_tracepoint_flags_pc_style_uuid_relative = 0xA,
  _firehose_tracepoint_flags_pc_style__unused6 = 0xC,
  _firehose_tracepoint_flags_pc_style__unused7 = 0xE,
  _firehose_tracepoint_flags_base_has_unique_pid = 0x10,
};

/* 9223 */
enum firehose_activity_flags_t : __int64
{
  firehose_activity_flags_default = 0x0,
  firehose_activity_flags_info_mode = 0x1,
  firehose_activity_flags_debug_mode = 0x2,
  firehose_activity_flags_stream_live_mode = 0x4,
  firehose_activity_flags_precise_timestamp = 0x80,
};

/* 9224 */
typedef uint64_t_0 kxld_addr_t;

/* 9225 */
typedef _BooterKextFileInfo _BooterKextFileInfo_0;

/* 9226 */
struct _BooterKextFileInfo
{
  uint32_t_0 infoDictPhysAddr;
  uint32_t_0 infoDictLength;
  uint32_t_0 executablePhysAddr;
  uint32_t_0 executableLength;
  uint32_t_0 bundlePathPhysAddr;
  uint32_t_0 bundlePathLength;
};

/* 9227 */
typedef mkext_header mkext_header_0;

/* 9228 */
struct mkext_header
{
  uint32_t_0 magic;
  uint32_t_0 signature;
  uint32_t_0 length;
  uint32_t_0 adler32;
  uint32_t_0 version;
  uint32_t_0 numkexts;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
  mkext_kext_0 kext[1];
};

/* 9229 */
typedef mkext_kext mkext_kext_0;

/* 9230 */
struct mkext_kext
{
  mkext_file_0 plist;
  mkext_file_0 module;
};

/* 9231 */
typedef mkext_file mkext_file_0;

/* 9232 */
struct mkext_file
{
  uint32_t_0 offset;
  uint32_t_0 compsize;
  uint32_t_0 realsize;
  uint32_t_0 modifiedsecs;
};

/* 9233 */
typedef mkext_basic_header mkext_basic_header_0;

/* 9234 */
struct mkext_basic_header
{
  uint32_t_0 magic;
  uint32_t_0 signature;
  uint32_t_0 length;
  uint32_t_0 adler32;
  uint32_t_0 version;
  uint32_t_0 numkexts;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
};

/* 9235 */
typedef mkext2_header mkext2_header_0;

/* 9236 */
struct mkext2_header
{
  uint32_t_0 magic;
  uint32_t_0 signature;
  uint32_t_0 length;
  uint32_t_0 adler32;
  uint32_t_0 version;
  uint32_t_0 numkexts;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
  uint32_t_0 plist_offset;
  uint32_t_0 plist_compressed_size;
  uint32_t_0 plist_full_size;
};

/* 9237 */
typedef MkextEntryRef MkextEntryRef_0;

/* 9238 */
struct MkextEntryRef
{
  mkext_basic_header_0 *mkext;
  void *fileinfo;
};

/* 9239 */
typedef mkext2_file_entry mkext2_file_entry_0;

/* 9240 */
struct mkext2_file_entry
{
  uint32_t_0 compressed_size;
  uint32_t_0 full_size;
  uint8_t_0 data[];
};

/* 9241 */
struct relocation_info
{
  int32_t r_address;
  unsigned __int32 r_symbolnum : 24;
  unsigned __int32 r_pcrel : 1;
  unsigned __int32 r_length : 2;
  unsigned __int32 r_extern : 1;
  unsigned __int32 r_type : 4;
};

/* 9242 */
typedef kxld_dependency KXLDDependency;

/* 9243 */
struct __attribute__((aligned(8))) kxld_dependency
{
  u_char *kext;
  u_long kext_size;
  char *kext_name;
  u_char *interface;
  u_long interface_size;
  char *interface_name;
  boolean_t is_direct_dependency;
};

/* 9244 */
struct OSKextGrabPgoStruct
{
  bool metadata;
  uint64_t_0 *pSize;
  char *pBuffer;
  uint64_t_0 bufferSize;
  int err;
  list_head list_head;
};

/* 9245 */
typedef osLogDataHeader osLogDataHeaderRef;

/* 9246 */
struct osLogDataHeader
{
  uint32_t_0 version;
  uint32_t_0 sect_count;
  osLogDataHeader::$664DB59FAE05AF96AEB9FBAAF657C0AC sections[];
};

/* 9247 */
struct osLogDataHeader::$664DB59FAE05AF96AEB9FBAAF657C0AC
{
  uint32_t_0 sect_offset;
  uint32_t_0 sect_size;
};

/* 9248 */
typedef z_mem z_mem_0;

/* 9249 */
struct z_mem
{
  uint32_t_0 alloc_size;
  uint8_t_0 data[];
};

/* 9250 */
struct pgo_metadata_footer
{
  uint32_t_0 number_of_pairs;
  uint32_t_0 offset_to_pairs;
  uint32_t_0 magic;
};

/* 9251 */
struct firehose_tracepoint_id_u::$724A451BC1430DECB1492D3769BC7433
{
  firehose_tracepoint_namespace_t_0 _namespace;
  firehose_tracepoint_type_t _type;
  firehose_tracepoint_flags_t_0 _flags;
  uint32_t_0 _code;
};

/* 9252 */
struct firehose_trace_uuid_info_s
{
  uuid_t ftui_uuid;
  uint64_t_0 ftui_address;
  uint64_t_0 ftui_size;
  char ftui_path[];
};

/* 9253 */
typedef firehose_trace_uuid_info_s *firehose_trace_uuid_info_t;

/* 9254 */
typedef kxld_allocate_flags KXLDAllocateFlags;

/* 9255 */
typedef kxld_log_subsystem KXLDLogSubsystem;

/* 9256 */
typedef kxld_log_level KXLDLogLevel;

/* 9257 */
struct __attribute__((packed)) __attribute__((aligned(1))) __block_literal_1_1
{
  void *__isa;
  int __flags;
  int __reserved;
  bool (*__FuncPtr)(const OSSymbol *, OSObject *);
  __block_descriptor *__descriptor;
  OSArray *kextIdentifiers;
  OSArray *infoKeys;
  OSDictionary *result;
  uint32_t_0 idCount;
  bool onlyLoaded;
};

/* 9258 */
typedef void (*structor_t)(void);

/* 9259 */
struct __cppobj OSSerializer : OSObject
{
  void *target;
  void *ref;
  OSSerializerCallback callback;
};

/* 9260 */
typedef bool (*OSSerializerCallback)(void *, void *, OSSerialize *);

/* 9261 */
struct __cppobj OSSerializer::MetaClass : OSMetaClass
{
};

/* 9262 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *OSSerializerBlock;

/* 9263 */
struct OSSymbolPool
{
  int (**_vptr$OSSymbolPool)(void);
  OSSymbolPool::Bucket *buckets;
  unsigned int nBuckets;
  unsigned int count;
  lck_mtx_t *poolGate;
};

/* 9264 */
struct OSSymbolPool::Bucket
{
  unsigned int count;
  OSSymbol **symbolP;
};

/* 9265 */
struct OSSymbolPoolState
{
  unsigned int i;
  unsigned int j;
};

/* 9266 */
typedef object object_t;

/* 9267 */
struct object
{
  object *next;
  object *prev;
  void *object;
  int size;
  object::$233FB13E3A5DEDFF1CD0A99A28689D56 u;
};

/* 9268 */
union object::$233FB13E3A5DEDFF1CD0A99A28689D56
{
  void *key;
  __int64 offset;
};

/* 9269 */
typedef char yytype_int8;

/* 9270 */
typedef unsigned __int8 yytype_uint8;

/* 9271 */
typedef __int16 yytype_int16;

/* 9272 */
typedef parser_state parser_state_t;

/* 9273 */
struct parser_state
{
  const char *parseBuffer;
  int parseBufferIndex;
  int lineNumber;
  object_t *objects;
  object_t *freeObjects;
  OSDictionary *tags;
  OSString **errorString;
  OSObject *parsedObject;
  int parsedObjectCount;
  int retrievedObjectCount;
};

/* 9274 */
enum OSUnserializeBinary::$CAA1B80F3686E702158CA225089D6099 : __int32
{
  objsCapacityMax = 0x1000000,
};

/* 9275 */
enum OSUnserializeBinary::$A15A9D67F9BCCCB0D86748D5A96657EE : __int32
{
  stackCapacityMax = 0x40,
};

/* 9276 */
enum OSKextVersionStage : __int32
{
  kOSKextVersionStageInvalid = 0x0,
  kOSKextVersionStageDevelopment = 0x1,
  kOSKextVersionStageAlpha = 0x3,
  kOSKextVersionStageBeta = 0x5,
  kOSKextVersionStageCandidate = 0x7,
  kOSKextVersionStageRelease = 0x9,
};

/* 9277 */
struct $<19585476,1>::$232B99CC9AB384F58FA1994C2CA8B195
{
  int base;
  int len;
};

/* 9278 */
typedef os_log_buffer_s *os_log_buffer_t;

/* 9279 */
struct os_log_buffer_s
{
  uint8_t_0 flags;
  uint8_t_0 arg_cnt;
  uint8_t_0 content[];
};

/* 9280 */
typedef os_log_buffer_value_s *os_log_buffer_value_t;

/* 9281 */
struct os_log_buffer_value_s
{
  unsigned __int8 flags : 4;
  unsigned __int8 type : 4;
  uint8_t_0 size;
  uint8_t_0 value[];
};

/* 9282 */
typedef uint8_t_0 os_log_value_type_t;

/* 9283 */
typedef uint8_t_0 os_log_type_t;

/* 9284 */
struct __attribute__((aligned(4))) os_log_buffer_context_s
{
  os_log_t log;
  os_log_buffer_t buffer;
  uint8_t_0 *pubdata;
  uint8_t_0 *privdata;
  char *comp;
  size_t comp_off;
  size_t comp_sz;
  uint16_t content_off;
  uint16_t content_sz;
  uint16_t pubdata_off;
  uint16_t pubdata_sz;
  uint16_t privdata_off;
  uint16_t privdata_sz;
  uint8_t_0 arg_idx;
  int arg_content_sz;
  _Bool need_size;
  _Bool shimmed;
};

/* 9285 */
typedef os_log_buffer_context_s *os_log_buffer_context_t;

/* 9286 */
struct __attribute__((aligned(8))) os_log_format_value_s
{
  os_log_format_types_u type;
  os_log_value_type_t ctype;
  uint16_t size;
};

/* 9287 */
union os_log_format_types_u
{
  uint16_t u16;
  uint32_t_0 u32;
  uint64_t_0 u64;
  char ch;
  __int16 s;
  int i;
  void *p;
  char *pch;
  size_t z;
  intmax_t im;
  ptrdiff_t pd;
  __int64 l;
  __int64 ll;
};

/* 9288 */
typedef __int64 intmax_t;

/* 9289 */
typedef unsigned __int64 firehose_activity_flags_t_0;

/* 9290 */
typedef uint16_t _firehose_tracepoint_flags_activity_t;

/* 9291 */
struct os_log_arginfo_s
{
  uint16_t offset;
  uint16_t length;
};

/* 9292 */
typedef memory_order memory_order_0;

/* 9293 */
struct os_refgrp;

/* 9294 */
typedef uLong uLongf;

/* 9295 */
typedef unsigned int u4;

/* 9296 */
typedef config_s config;

/* 9297 */
struct config_s
{
  ush good_length;
  ush max_lazy;
  ush nice_length;
  ush max_chain;
  compress_func func;
};

/* 9298 */
typedef unsigned __int16 ush;

/* 9299 */
typedef block_state (*compress_func)(deflate_state *, int);

/* 9300 */
enum block_state : __int32
{
  need_more = 0x0,
  block_done = 0x1,
  finish_started = 0x2,
  finish_done = 0x3,
};

/* 9301 */
typedef internal_state_0 deflate_state;

/* 9302 */
struct internal_state_0
{
  z_streamp_0 strm;
  z_input_func zinput;
  z_output_func zoutput;
  int status;
  Bytef *pending_buf;
  ulg pending_buf_size;
  Bytef *pending_out;
  uInt pending;
  int wrap;
  gz_headerp gzhead;
  uInt gzindex;
  Byte method;
  int last_flush;
  uInt w_size;
  uInt w_bits;
  uInt w_mask;
  Bytef *window;
  ulg window_size;
  Posf *prev;
  Posf *head;
  uInt ins_h;
  uInt hash_size;
  uInt hash_bits;
  uInt hash_mask;
  uInt hash_shift;
  __int64 block_start;
  uInt match_length;
  IPos prev_match;
  int match_available;
  uInt strstart;
  uInt match_start;
  uInt lookahead;
  uInt prev_length;
  uInt max_chain_length;
  uInt max_lazy_match;
  int level;
  int strategy;
  uInt good_match;
  int nice_match;
  ct_data_s dyn_ltree[573];
  ct_data_s dyn_dtree[61];
  ct_data_s bl_tree[39];
  tree_desc_s l_desc;
  tree_desc_s d_desc;
  tree_desc_s bl_desc;
  ush bl_count[16];
  int heap[573];
  int heap_len;
  int heap_max;
  uch depth[573];
  uchf *l_buf;
  uInt lit_bufsize;
  uInt last_lit;
  ushf *d_buf;
  ulg opt_len;
  ulg static_len;
  uInt matches;
  int last_eob_len;
  ush bi_buf;
  int bi_valid;
};

/* 9303 */
typedef z_stream_0 *z_streamp_0;

/* 9304 */
typedef z_stream_s_0 z_stream_0;

/* 9305 */
struct z_stream_s_0
{
  Bytef *next_in;
  uInt avail_in;
  uLong total_in;
  Bytef *next_out;
  uInt avail_out;
  uLong total_out;
  char *msg;
  internal_state_0 *state;
  alloc_func zalloc;
  free_func zfree;
  voidpf opaque;
  int data_type;
  uLong adler;
  uLong reserved;
};

/* 9306 */
typedef int (*z_input_func)(z_streamp_0, Bytef *, unsigned int);

/* 9307 */
typedef unsigned __int64 ulg;

/* 9308 */
typedef gz_header *gz_headerp;

/* 9309 */
typedef gz_header_s gz_header;

/* 9310 */
struct __attribute__((aligned(8))) gz_header_s
{
  int text;
  uLong time;
  int xflags;
  int os;
  Bytef *extra;
  uInt extra_len;
  uInt extra_max;
  Bytef *name;
  uInt name_max;
  Bytef *comment;
  uInt comm_max;
  int hcrc;
  int done;
};

/* 9311 */
typedef Pos Posf;

/* 9312 */
typedef ush Pos;

/* 9313 */
typedef unsigned int IPos;

/* 9314 */
struct ct_data_s
{
  ct_data_s::$6E6EA6B1B47F7F69683B41CD99E76C0A fc;
  ct_data_s::$4F0F685EC8FA33D55D00A49514E362B1 dl;
};

/* 9315 */
union ct_data_s::$6E6EA6B1B47F7F69683B41CD99E76C0A
{
  ush freq;
  ush code;
};

/* 9316 */
union ct_data_s::$4F0F685EC8FA33D55D00A49514E362B1
{
  ush dad;
  ush len;
};

/* 9317 */
struct tree_desc_s
{
  ct_data *dyn_tree;
  int max_code;
  static_tree_desc *stat_desc;
};

/* 9318 */
typedef ct_data_s ct_data;

/* 9319 */
typedef static_tree_desc_s static_tree_desc;

/* 9320 */
struct static_tree_desc_s
{
  int dummy;
};

/* 9321 */
typedef unsigned __int8 uch;

/* 9322 */
typedef uch uchf;

/* 9323 */
typedef ush ushf;

/* 9324 */
typedef char charf;

/* 9325 */
struct code
{
  unsigned __int8 op;
  unsigned __int8 bits;
  unsigned __int16 val;
};

/* 9326 */
enum inflate_mode : __int32
{
  HEAD = 0x0,
  FLAGS = 0x1,
  TIME = 0x2,
  OS = 0x3,
  EXLEN = 0x4,
  EXTRA = 0x5,
  NAME = 0x6,
  COMMENT = 0x7,
  HCRC = 0x8,
  DICTID = 0x9,
  DICT = 0xA,
  TYPE = 0xB,
  TYPEDO = 0xC,
  STORED = 0xD,
  COPY = 0xE,
  TABLE = 0xF,
  LENLENS = 0x10,
  CODELENS = 0x11,
  LEN = 0x12,
  LENEXT = 0x13,
  DIST = 0x14,
  DISTEXT = 0x15,
  MATCH = 0x16,
  LIT = 0x17,
  CHECK = 0x18,
  LENGTH = 0x19,
  DONE = 0x1A,
  BAD = 0x1B,
  MEM = 0x1C,
  SYNC_0 = 0x1D,
};

/* 9327 */
enum $25482703D64D4CE23300719B33F77FB3 : __int32
{
  CODES = 0x0,
  LENS = 0x1,
  DISTS = 0x2,
};

/* 9328 */
struct inflate_state
{
  inflate_mode mode;
  int last;
  int wrap;
  int havedict;
  int flags;
  unsigned int dmax;
  unsigned __int64 check;
  unsigned __int64 total;
  gz_headerp head;
  unsigned int wbits;
  unsigned int wsize;
  unsigned int whave;
  unsigned int write;
  unsigned __int8 *window;
  unsigned __int64 hold;
  unsigned int bits;
  unsigned int length;
  unsigned int offset;
  unsigned int extra;
  const code *lencode;
  const code *distcode;
  unsigned int lenbits;
  unsigned int distbits;
  unsigned int ncode;
  unsigned int nlen;
  unsigned int ndist;
  unsigned int have;
  code *next;
  unsigned __int16 lens[320];
  unsigned __int16 work[288];
  code codes[2048];
};

/* 9329 */
typedef unsigned int (*in_func)(void *, unsigned __int8 **);

/* 9330 */
typedef int (*out_func)(void *, unsigned __int8 *, unsigned int);

/* 9331 */
typedef $25482703D64D4CE23300719B33F77FB3 codetype;

/* 9332 */
typedef static_tree_desc_s_0 static_tree_desc_0;

/* 9333 */
struct __attribute__((aligned(8))) static_tree_desc_s_0
{
  const ct_data *static_tree;
  const intf *extra_bits;
  int extra_base;
  int elems;
  int max_length;
};

/* 9334 */
typedef int intf;

/* 9335 */
typedef tree_desc_s_0 tree_desc;

/* 9336 */
struct tree_desc_s_0
{
  ct_data *dyn_tree;
  int max_code;
  static_tree_desc_0 *stat_desc;
};

/* 9337 */
typedef internal_state_1 deflate_state_0;

/* 9338 */
struct internal_state_1
{
  z_streamp_0 strm;
  z_input_func zinput;
  z_output_func zoutput;
  int status;
  Bytef *pending_buf;
  ulg pending_buf_size;
  Bytef *pending_out;
  uInt pending;
  int wrap;
  gz_headerp gzhead;
  uInt gzindex;
  Byte method;
  int last_flush;
  uInt w_size;
  uInt w_bits;
  uInt w_mask;
  Bytef *window;
  ulg window_size;
  Posf *prev;
  Posf *head;
  uInt ins_h;
  uInt hash_size;
  uInt hash_bits;
  uInt hash_mask;
  uInt hash_shift;
  __int64 block_start;
  uInt match_length;
  IPos prev_match;
  int match_available;
  uInt strstart;
  uInt match_start;
  uInt lookahead;
  uInt prev_length;
  uInt max_chain_length;
  uInt max_lazy_match;
  int level;
  int strategy;
  uInt good_match;
  int nice_match;
  ct_data_s dyn_ltree[573];
  ct_data_s dyn_dtree[61];
  ct_data_s bl_tree[39];
  tree_desc_s_0 l_desc;
  tree_desc_s_0 d_desc;
  tree_desc_s_0 bl_desc;
  ush bl_count[16];
  int heap[573];
  int heap_len;
  int heap_max;
  uch depth[573];
  uchf *l_buf;
  uInt lit_bufsize;
  uInt last_lit;
  ushf *d_buf;
  ulg opt_len;
  ulg static_len;
  uInt matches;
  int last_eob_len;
  ush bi_buf;
  int bi_valid;
};

/* 9339 */
typedef crypto_functions *crypto_functions_t;

/* 9340 */
struct crypto_functions
{
  ccdigest_init_fn_t ccdigest_init_fn;
  ccdigest_update_fn_t ccdigest_update_fn;
  ccdigest_final_fn_t ccdigest_final_fn;
  ccdigest_fn_t ccdigest_fn;
  const ccdigest_info_0 *ccmd5_di;
  const ccdigest_info_0 *ccsha1_di;
  const ccdigest_info_0 *ccsha256_di;
  const ccdigest_info_0 *ccsha384_di;
  const ccdigest_info_0 *ccsha512_di;
  cchmac_init_fn_t cchmac_init_fn;
  cchmac_update_fn_t cchmac_update_fn;
  cchmac_final_fn_t cchmac_final_fn;
  cchmac_fn_t cchmac_fn;
  const ccmode_ecb *ccaes_ecb_encrypt;
  const ccmode_ecb *ccaes_ecb_decrypt;
  const ccmode_cbc *ccaes_cbc_encrypt;
  const ccmode_cbc *ccaes_cbc_decrypt;
  const ccmode_ctr *ccaes_ctr_crypt;
  const ccmode_xts *ccaes_xts_encrypt;
  const ccmode_xts *ccaes_xts_decrypt;
  const ccmode_gcm *ccaes_gcm_encrypt;
  const ccmode_gcm *ccaes_gcm_decrypt;
  ccgcm_init_with_iv_fn_t ccgcm_init_with_iv_fn;
  ccgcm_inc_iv_fn_t ccgcm_inc_iv_fn;
  ccchacha20poly1305_fns_t ccchacha20poly1305_fns;
  const ccmode_ecb *ccdes_ecb_encrypt;
  const ccmode_ecb *ccdes_ecb_decrypt;
  const ccmode_cbc *ccdes_cbc_encrypt;
  const ccmode_cbc *ccdes_cbc_decrypt;
  const ccmode_ecb *cctdes_ecb_encrypt;
  const ccmode_ecb *cctdes_ecb_decrypt;
  const ccmode_cbc *cctdes_cbc_encrypt;
  const ccmode_cbc *cctdes_cbc_decrypt;
  const ccrc4_info *ccrc4_info;
  const ccmode_ecb *ccblowfish_ecb_encrypt;
  const ccmode_ecb *ccblowfish_ecb_decrypt;
  const ccmode_ecb *cccast_ecb_encrypt;
  const ccmode_ecb *cccast_ecb_decrypt;
  ccdes_key_is_weak_fn_t ccdes_key_is_weak_fn;
  ccdes_key_set_odd_parity_fn_t ccdes_key_set_odd_parity_fn;
  ccpad_xts_encrypt_fn_t ccpad_xts_encrypt_fn;
  ccpad_xts_decrypt_fn_t ccpad_xts_decrypt_fn;
  ccpad_cts3_crypt_fn_t ccpad_cts3_encrypt_fn;
  ccpad_cts3_crypt_fn_t ccpad_cts3_decrypt_fn;
  ccrng_fn_t ccrng_fn;
  ccrsa_make_pub_fn_t ccrsa_make_pub_fn;
  ccrsa_verify_pkcs1v15_fn_t ccrsa_verify_pkcs1v15_fn;
};

/* 9341 */
typedef void (*ccdigest_init_fn_t)(const ccdigest_info_0 *, ccdigest_ctx_t);

/* 9342 */
typedef void (*ccdigest_update_fn_t)(const ccdigest_info_0 *, ccdigest_ctx_t, unsigned __int64, const void *);

/* 9343 */
typedef void (*ccdigest_final_fn_t)(const ccdigest_info_0 *, ccdigest_ctx_t, void *);

/* 9344 */
typedef void (*ccdigest_fn_t)(const ccdigest_info_0 *, unsigned __int64, const void *, void *);

/* 9345 */
typedef void (*cchmac_init_fn_t)(const ccdigest_info_0 *, cchmac_ctx_t, unsigned __int64, const void *);

/* 9346 */
typedef void (*cchmac_update_fn_t)(const ccdigest_info_0 *, cchmac_ctx_t, unsigned __int64, const void *);

/* 9347 */
typedef void (*cchmac_final_fn_t)(const ccdigest_info_0 *, cchmac_ctx_t, unsigned __int8 *);

/* 9348 */
typedef void (*cchmac_fn_t)(const ccdigest_info_0 *, unsigned __int64, const void *, unsigned __int64, const void *, unsigned __int8 *);

/* 9349 */
struct ccmode_ecb
{
  size_t_0 size;
  size_t_0 block_size;
  int (*init)(const ccmode_ecb *, ccecb_ctx *, size_t_0, const void *);
  int (*ecb)(const ccecb_ctx *, size_t_0, const void *, void *);
};

/* 9350 */
struct ccecb_ctx
{
  uint8_t_0 b[16];
};

/* 9351 */
struct ccmode_ctr
{
  size_t_0 size;
  size_t_0 block_size;
  size_t_0 ecb_block_size;
  int (*init)(const ccmode_ctr *, ccctr_ctx *, size_t_0, const void *, const void *);
  int (*setctr)(const ccmode_ctr *, ccctr_ctx *, const void *);
  int (*ctr)(ccctr_ctx *, size_t_0, const void *, void *);
  const void *custom;
};

/* 9352 */
struct ccctr_ctx
{
  uint8_t_0 b[16];
};

/* 9353 */
struct ccmode_xts
{
  size_t_0 size;
  size_t_0 tweak_size;
  size_t_0 block_size;
  int (*init)(const ccmode_xts *, ccxts_ctx *, size_t_0, const void *, const void *);
  void (*key_sched)(const ccmode_xts *, ccxts_ctx *, size_t_0, const void *, const void *);
  int (*set_tweak)(const ccxts_ctx *, ccxts_tweak *, const void *);
  void *(*xts)(const ccxts_ctx *, ccxts_tweak *, size_t_0, const void *, void *);
  const void *custom;
  const void *custom1;
};

/* 9354 */
struct ccxts_tweak
{
  uint8_t_0 b[16];
};

/* 9355 */
struct ccmode_gcm
{
  size_t_0 size;
  int encdec;
  size_t_0 block_size;
  int (*init)(const ccmode_gcm *, ccgcm_ctx *, size_t_0, const void *);
  int (*set_iv)(ccgcm_ctx *, size_t_0, const void *);
  int (*gmac)(ccgcm_ctx *, size_t_0, const void *);
  int (*gcm)(ccgcm_ctx *, size_t_0, const void *, void *);
  int (*finalize)(ccgcm_ctx *, size_t_0, void *);
  int (*reset)(ccgcm_ctx *);
  const void *custom;
};

/* 9356 */
typedef int (*ccgcm_init_with_iv_fn_t)(const ccmode_gcm *, ccgcm_ctx *, size_t_0, const void *, const void *);

/* 9357 */
typedef int (*ccgcm_inc_iv_fn_t)(const ccmode_gcm *, ccgcm_ctx *, void *);

/* 9358 */
typedef const ccchacha20poly1305_fns *ccchacha20poly1305_fns_t;

/* 9359 */
struct ccchacha20poly1305_fns
{
  const ccchacha20poly1305_info *(*info)(void);
  int (*init)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, const uint8_t_0 *);
  int (*reset)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *);
  int (*setnonce)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, const uint8_t_0 *);
  int (*incnonce)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, uint8_t_0 *);
  int (*aad)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, size_t_0, const void *);
  int (*encrypt)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, size_t_0, const void *, void *);
  int (*finalize)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, uint8_t_0 *);
  int (*decrypt)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, size_t_0, const void *, void *);
  int (*verify)(const ccchacha20poly1305_info *, ccchacha20poly1305_ctx *, const uint8_t_0 *);
};

/* 9360 */
struct ccchacha20poly1305_info
{
  __int8 gap0[1];
};

/* 9361 */
struct ccrc4_info
{
  size_t_0 size;
  void (*init)(ccrc4_ctx *, size_t_0, const void *);
  void (*crypt)(ccrc4_ctx *, size_t_0, const void *, void *);
};

/* 9362 */
struct ccrc4_ctx
{
  uint8_t_0 b[16];
};

/* 9363 */
typedef int (*ccdes_key_is_weak_fn_t)(void *, unsigned __int64);

/* 9364 */
typedef void (*ccdes_key_set_odd_parity_fn_t)(void *, unsigned __int64);

/* 9365 */
typedef void (*ccpad_xts_encrypt_fn_t)(const ccmode_xts *, ccxts_ctx *, unsigned __int64, const void *, void *);

/* 9366 */
typedef void (*ccpad_xts_decrypt_fn_t)(const ccmode_xts *, ccxts_ctx *, unsigned __int64, const void *, void *);

/* 9367 */
typedef size_t_0 (*ccpad_cts3_crypt_fn_t)(const ccmode_cbc *, cccbc_ctx *, cccbc_iv *, size_t_0, const void *, void *);

/* 9368 */
typedef ccrng_state *(*ccrng_fn_t)(int *);

/* 9369 */
struct ccrng_state
{
  int (*generate)(ccrng_state *, size_t_0, void *);
};

/* 9370 */
typedef int (*ccrsa_make_pub_fn_t)(ccrsa_pub_ctx_t, size_t_0, const uint8_t_0 *, size_t_0, const uint8_t_0 *);

/* 9371 */
typedef ccrsa_pub_ctx *ccrsa_pub_ctx_t;

/* 9372 */
typedef int (*ccrsa_verify_pkcs1v15_fn_t)(ccrsa_pub_ctx_t, const uint8_t_0 *, size_t_0, const uint8_t_0 *, size_t_0, const uint8_t_0 *, _Bool *);

/* 9373 */
typedef kern_return_t (*InKernelPerformSHA1Func)(void *, const void *, size_t_0, u_int32_t *, u_int32_t, u_int32_t *, Boolean_0);

/* 9374 */
typedef _img4_interface img4_interface_t;

/* 9375 */
struct _img4_interface
{
  const uint32_t_0 i4if_version;
  const img4_init_t i4if_init;
  const img4_set_custom_tag_handler_t i4if_set_custom_tag_handler;
  const img4_get_trusted_payload_t i4if_get_trusted_payload;
  const img4_get_trusted_external_payload_t i4if_get_trusted_external_payload;
  const img4_get_entitlement_bool_t i4if_get_entitlement_bool;
  const img4_get_object_entitlement_bool_t i4if_get_object_entitlement_bool;
  const img4_destroy_t i4if_destroy;
  _img4_interface::$35CEBF3DCB2E31864D1182BBC71F7F75 i4if_v1;
  void *__reserved[23];
};

/* 9376 */
typedef errno_t (*img4_init_t)(img4_t *, img4_flags_t, const uint8_t_0 *, size_t_0, img4_destructor_t);

/* 9377 */
typedef _img4 img4_t;

/* 9378 */
struct _img4
{
  _img4_opaque_data_64 __opaque;
};

/* 9379 */
typedef char _img4_opaque_data_64[656];

/* 9380 */
typedef uint64_t_0 img4_flags_t;

/* 9381 */
typedef void (*img4_destructor_t)(void *, size_t_0);

/* 9382 */
typedef void (*img4_set_custom_tag_handler_t)(img4_t *, const img4_custom_tag_t *, size_t_0);

/* 9383 */
typedef _img4_custom_tag img4_custom_tag_t;

/* 9384 */
struct _img4_custom_tag
{
  img4_tag_t i4ct_tag;
  img4_section_t i4ct_section;
  img4_custom_tag_handler_t i4ct_handler;
};

/* 9385 */
typedef uint32_t_0 img4_tag_t;

/* 9386 */
typedef uint8_t_0 img4_section_t;

/* 9387 */
typedef errno_t (*img4_custom_tag_handler_t)(img4_tag_t, img4_section_t, void *);

/* 9388 */
typedef errno_t (*img4_get_trusted_payload_t)(img4_t *, img4_tag_t, const img4_environment_t *, void *, const uint8_t_0 **, size_t_0 *);

/* 9389 */
typedef _img4_environment img4_environment_t;

/* 9390 */
struct _img4_environment
{
  img4_struct_version_t i4e_version;
  const char *i4e_name;
  img4_environment_get_crypto_t i4e_crypto;
  img4_environment_get_uint32_t i4e_cert_epoch;
  img4_environment_get_uint32_t i4e_board_id;
  img4_environment_get_uint32_t i4e_chip_id;
  img4_environment_get_uint64_t i4e_ecid;
  img4_environment_get_uint32_t i4e_security_domain;
  img4_environment_get_bool_t i4e_cert_prod;
  img4_environment_get_bool_t i4e_cert_security;
  img4_environment_get_data_t i4e_ap_nonce_hash;
  img4_environment_get_bool_t i4e_prevent_mixnmatch;
  img4_environment_get_data_t i4e_boot_manifest_hash;
  img4_environment_get_bool_t i4e_eff_prod;
  img4_environment_get_bool_t i4e_eff_security;
  img4_environment_get_bool_t i4e_ap_nonce_trust;
};

/* 9391 */
typedef uint16_t img4_struct_version_t;

/* 9392 */
typedef errno_t (*img4_environment_get_crypto_t)(const img4_environment_t *, const img4_crypto_t **, const void *);

/* 9393 */
typedef _img4_crypto img4_crypto_t;

/* 9394 */
struct _img4_crypto
{
  const char *i4c_name;
  img4_crypto_selector_t i4c_select;
  uint32_t_0 i4c_hash_len;
  uint32_t_0 i4c_truncated_hash_len;
  const void *__opaque;
};

/* 9395 */
typedef const ccdigest_info *(*img4_crypto_selector_t)(void);

/* 9396 */
typedef errno_t (*img4_environment_get_uint32_t)(const img4_environment_t *, uint32_t_0 *, const void *);

/* 9397 */
typedef errno_t (*img4_environment_get_uint64_t)(const img4_environment_t *, uint64_t_0 *, const void *);

/* 9398 */
typedef errno_t (*img4_environment_get_bool_t)(const img4_environment_t *, _Bool *, const void *);

/* 9399 */
typedef errno_t (*img4_environment_get_data_t)(const img4_environment_t *, uint8_t_0 *, uint32_t_0 *, const void *);

/* 9400 */
typedef errno_t (*img4_get_trusted_external_payload_t)(img4_t *, img4_payload_t *, const img4_environment_t *, void *, const uint8_t_0 **, size_t_0 *);

/* 9401 */
typedef _img4_payload img4_payload_t;

/* 9402 */
struct _img4_payload
{
  _img4_payload_opaque_data_64 __opaque;
};

/* 9403 */
typedef char _img4_payload_opaque_data_64[488];

/* 9404 */
typedef _Bool (*img4_get_entitlement_bool_t)(img4_t *, img4_tag_t);

/* 9405 */
typedef _Bool (*img4_get_object_entitlement_bool_t)(img4_t *, img4_tag_t, img4_tag_t);

/* 9406 */
typedef void (*img4_destroy_t)(img4_t *);

/* 9407 */
struct _img4_interface::$35CEBF3DCB2E31864D1182BBC71F7F75
{
  const img4_environment_t *environment_platform;
  const img4_environment_t *environment_ppl;
};

/* 9408 */
enum kxld_flags : __int32
{
  kKxldFlagDefault = 0x0,
  kKXLDFlagIncludeRelocs = 0x1,
};

/* 9409 */
typedef kxld_object KXLDObject;

/* 9410 */
struct kxld_object
{
  u_char *file;
  u_long size;
  const char *name;
  uint32_t_0 filetype;
  cpu_type_t cputype;
  cpu_subtype_t cpusubtype;
  KXLDArray segs;
  KXLDArray sects;
  KXLDArray extrelocs;
  KXLDArray locrelocs;
  KXLDRelocator relocator;
  KXLDuuid uuid;
  KXLDversionmin versionmin;
  KXLDsrcversion srcversion;
  KXLDSymtab *symtab;
  dysymtab_command_0 *dysymtab_hdr;
  KXLDsplitinfolc splitinfolc;
  splitKextLinkInfo_0 split_info;
  kxld_addr_t link_addr;
  u_long output_buffer_size;
  boolean_t is_kernel;
  boolean_t is_final_image;
  boolean_t is_linked;
  boolean_t got_is_created;
};

/* 9411 */
typedef kxld_kext KXLDKext;

/* 9412 */
struct kxld_kext
{
  KXLDObject *kext;
  KXLDObject *interface;
  KXLDArray vtables;
  KXLDDict vtable_index;
  boolean_t vtables_created;
  boolean_t vtable_index_created;
};

/* 9413 */
typedef kxld_array KXLDArray;

/* 9414 */
struct kxld_array
{
  kxld_array_head pools;
  size_t_0 itemsize;
  size_t_0 pool_capacity;
  u_int pool_maxitems;
  u_int nitems;
  u_int maxitems;
  u_int npools;
};

/* 9415 */
struct kxld_array_head
{
  kxld_array_pool *stqh_first;
  kxld_array_pool **stqh_last;
};

/* 9416 */
struct __attribute__((aligned(8))) kxld_array_pool
{
  kxld_array_pool::$E31467C226A680F76377CA8BE65342C4 entries;
  u_char *buffer;
  u_int nitems;
};

/* 9417 */
struct kxld_array_pool::$E31467C226A680F76377CA8BE65342C4
{
  kxld_array_pool *stqe_next;
};

/* 9418 */
typedef kxld_dict KXLDDict;

/* 9419 */
struct kxld_dict
{
  KXLDArray buckets;
  KXLDArray resize_buckets;
  kxld_dict_hash hash;
  kxld_dict_cmp cmp;
  u_int num_entries;
  u_int resize_threshold;
};

/* 9420 */
typedef u_int (*kxld_dict_hash)(const KXLDDict *, const void *);

/* 9421 */
typedef u_int (*kxld_dict_cmp)(const void *, const void *);

/* 9422 */
typedef kxld_flags KXLDFlags;

/* 9423 */
typedef kxld_addr_t (*KXLDAllocateCallback)(size_t_0, KXLDAllocateFlags *, void *);

/* 9424 */
typedef splitKextLinkInfo splitKextLinkInfo_0;

/* 9425 */
struct splitKextLinkInfo
{
  u_char *kextExecutable;
  size_t_0 kextSize;
  u_char *linkedKext;
  size_t_0 linkedKextSize;
  uint64_t_0 vmaddr_TEXT;
  uint64_t_0 vmaddr_TEXT_EXEC;
  uint64_t_0 vmaddr_DATA;
  uint64_t_0 vmaddr_DATA_CONST;
  uint64_t_0 vmaddr_LINKEDIT;
  uint64_t_0 vmaddr_LLVM_COV;
  uint32_t_0 kaslr_offsets_count;
  uint32_t_0 *kaslr_offsets;
};

/* 9426 */
typedef void (*KXLDLoggingCallback)(KXLDLogSubsystem, KXLDLogLevel, const char *, __va_list_tag *, void *);

/* 9427 */
typedef kxld_array_pool KXLDArrayPool;

/* 9428 */
typedef kxld_array_head KXLDArrayHead;

/* 9429 */
enum DictEntryState : __int32
{
  EMPTY = 0x0,
  USED = 0x1,
  DELETED = 0x2,
};

/* 9430 */
typedef dict_entry DictEntry;

/* 9431 */
struct __attribute__((aligned(8))) dict_entry
{
  const void *key;
  void *value;
  DictEntryState state;
};

/* 9432 */
typedef kxld_vtable KXLDVTable;

/* 9433 */
struct __attribute__((aligned(8))) kxld_vtable
{
  u_char *vtable;
  const char *name;
  KXLDArray entries;
  boolean_t is_patched;
};

/* 9434 */
typedef kxld_sym KXLDSym;

/* 9435 */
struct kxld_sym
{
  char *name;
  char *alias;
  kxld_addr_t base_addr;
  kxld_addr_t link_addr;
  kxld_addr_t got_addr;
  uint16_t desc;
  uint8_t_0 type;
  uint8_t_0 sectnum;
  uint8_t_0 relocated_sectnum;
  unsigned __int32 is_absolute : 1;
  unsigned __int32 is_section : 1;
  unsigned __int32 is_undefined : 1;
  unsigned __int32 is_indirect : 1;
  unsigned __int32 is_common : 1;
  unsigned __int32 is_external : 1;
  unsigned __int32 is_stab : 1;
  unsigned __int32 is_weak : 1;
  unsigned __int32 is_resolved : 1;
  unsigned __int32 is_obsolete : 1;
  unsigned __int32 is_replaced : 1;
  unsigned __int32 is_got : 1;
  unsigned __int32 is_cxx : 1;
  unsigned __int32 is_pure_virtual : 1;
  unsigned __int32 is_class_vtable : 1;
  unsigned __int32 is_meta_vtable : 1;
  unsigned __int32 is_padslot : 1;
  unsigned __int32 is_metaclass : 1;
  unsigned __int32 is_super_metaclass_pointer : 1;
  unsigned __int32 is_thumb : 1;
};

/* 9436 */
typedef kxld_symtab_iterator KXLDSymtabIterator;

/* 9437 */
struct __attribute__((aligned(8))) kxld_symtab_iterator
{
  const KXLDSymtab *symtab;
  u_int idx;
  KXLDSymPredicateTest test;
  boolean_t negate;
};

/* 9438 */
typedef kxld_symtab KXLDSymtab;

/* 9439 */
struct __attribute__((aligned(8))) kxld_symtab
{
  KXLDArray syms;
  KXLDDict cxx_index;
  KXLDDict name_index;
  char *strings;
  u_int strsize;
  boolean_t cxx_index_initialized;
  boolean_t name_index_initialized;
};

/* 9440 */
typedef boolean_t (*KXLDSymPredicateTest)(const KXLDSym *);

/* 9441 */
typedef kxld_reloc KXLDReloc;

/* 9442 */
struct kxld_reloc
{
  u_int address;
  u_int pair_address;
  u_int target;
  u_int pair_target;
  unsigned __int32 target_type : 3;
  unsigned __int32 pair_target_type : 3;
  unsigned __int32 reloc_type : 4;
  unsigned __int32 length : 2;
  unsigned __int32 pcrel : 1;
};

/* 9443 */
typedef kxld_sect KXLDSect;

/* 9444 */
struct kxld_sect
{
  char sectname[16];
  char segname[16];
  u_char *data;
  KXLDArray relocs;
  kxld_addr_t base_addr;
  kxld_addr_t link_addr;
  kxld_size_t size;
  u_int sectnum;
  u_int flags;
  u_int align;
  u_int reserved1;
  u_int reserved2;
  boolean_t allocated;
};

/* 9445 */
typedef uint64_t_0 kxld_size_t;

/* 9446 */
enum reloc_type_x86_64 : __int32
{
  X86_64_RELOC_UNSIGNED = 0x0,
  X86_64_RELOC_SIGNED = 0x1,
  X86_64_RELOC_BRANCH = 0x2,
  X86_64_RELOC_GOT_LOAD = 0x3,
  X86_64_RELOC_GOT = 0x4,
  X86_64_RELOC_SUBTRACTOR = 0x5,
  X86_64_RELOC_SIGNED_1 = 0x6,
  X86_64_RELOC_SIGNED_2 = 0x7,
  X86_64_RELOC_SIGNED_4 = 0x8,
  X86_64_RELOC_TLV = 0x9,
};

/* 9447 */
struct scattered_relocation_info
{
  unsigned __int32 r_address : 24;
  unsigned __int32 r_type : 4;
  unsigned __int32 r_length : 2;
  unsigned __int32 r_pcrel : 1;
  unsigned __int32 r_scattered : 1;
  int32_t r_value;
};

/* 9448 */
typedef kxld_relocator KXLDRelocator;

/* 9449 */
struct kxld_relocator
{
  RelocHasPair reloc_has_pair;
  RelocGetPairType reloc_get_pair_type;
  RelocHasGot reloc_has_got;
  ProcessReloc process_reloc;
  const kxld_symtab *symtab;
  const kxld_array *sectarray;
  const kxld_dict *vtables;
  const kxld_vtable *current_vtable;
  u_char *file;
  u_int function_align;
  boolean_t is_32_bit;
  boolean_t swap;
  boolean_t may_scatter;
};

/* 9450 */
typedef boolean_t (*RelocHasPair)(u_int);

/* 9451 */
typedef u_int (*RelocGetPairType)(u_int);

/* 9452 */
typedef boolean_t (*RelocHasGot)(u_int);

/* 9453 */
typedef kern_return_t (*ProcessReloc)(const KXLDRelocator *, u_char *, u_int, u_int, kxld_addr_t, kxld_addr_t, kxld_addr_t, u_int, kxld_addr_t, kxld_addr_t, boolean_t);

/* 9454 */
typedef kxld_vtable_entry KXLDVTableEntry;

/* 9455 */
union kxld_vtable_entry
{
  kxld_vtable_patched_entry patched;
  kxld_vtable_unpatched_entry unpatched;
};

/* 9456 */
struct kxld_vtable_patched_entry
{
  char *name;
  kxld_addr_t addr;
};

/* 9457 */
struct kxld_vtable_unpatched_entry
{
  const kxld_sym *sym;
  kxld_reloc *reloc;
};

/* 9458 */
typedef kxld_seg KXLDSeg;

/* 9459 */
struct __attribute__((aligned(8))) kxld_seg
{
  char segname[16];
  kxld_addr_t base_addr;
  kxld_addr_t link_addr;
  kxld_size_t vmsize;
  kxld_size_t fileoff;
  KXLDArray sects;
  u_int flags;
  vm_prot_t maxprot;
  vm_prot_t initprot;
};

/* 9460 */
enum kxld_versionmin_platforms : __int32
{
  kKxldVersionMinMacOSX = 0x0,
  kKxldVersionMiniPhoneOS = 0x1,
  kKxldVersionMinAppleTVOS = 0x2,
  kKxldVersionMinWatchOS = 0x3,
  kKxldVersionMinBridgeOS = 0x4,
};

/* 9461 */
struct version_min_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint32_t_0 version;
  uint32_t_0 sdk;
};

/* 9462 */
struct build_version_command
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint32_t_0 platform;
  uint32_t_0 minos;
  uint32_t_0 sdk;
  uint32_t_0 ntools;
};

/* 9463 */
struct source_version_command_0
{
  uint32_t_0 cmd;
  uint32_t_0 cmdsize;
  uint64_t_0 version;
};

/* 9464 */
typedef kmod_info_32_v1 kmod_info_32_v1_t;

/* 9465 */
struct kmod_info_32_v1
{
  uint32_t_0 next_addr;
  int32_t info_version;
  uint32_t_0 id;
  uint8_t_0 name[64];
  uint8_t_0 version[64];
  int32_t reference_count;
  uint32_t_0 reference_list_addr;
  uint32_t_0 address;
  uint32_t_0 size;
  uint32_t_0 hdr_size;
  uint32_t_0 start_addr;
  uint32_t_0 stop_addr;
};

/* 9466 */
typedef kmod_info_64_v1 kmod_info_64_v1_t;

/* 9467 */
struct __attribute__((packed)) __attribute__((aligned(4))) kmod_info_64_v1
{
  uint64_t_0 next_addr;
  int32_t info_version;
  uint32_t_0 id;
  uint8_t_0 name[64];
  uint8_t_0 version[64];
  int32_t reference_count;
  uint64_t_0 reference_list_addr;
  uint64_t_0 address;
  uint64_t_0 size;
  uint64_t_0 hdr_size;
  uint64_t_0 start_addr;
  uint64_t_0 stop_addr;
};

/* 9468 */
typedef kxld_uuid KXLDuuid;

/* 9469 */
struct kxld_uuid
{
  u_char uuid[16];
  boolean_t has_uuid;
};

/* 9470 */
typedef kxld_versionmin KXLDversionmin;

/* 9471 */
struct kxld_versionmin
{
  kxld_versionmin_platforms platform;
  uint32_t_0 version;
  boolean_t has_versionmin;
};

/* 9472 */
typedef kxld_srcversion KXLDsrcversion;

/* 9473 */
struct __attribute__((aligned(8))) kxld_srcversion
{
  uint64_t_0 version;
  boolean_t has_srcversion;
};

/* 9474 */
typedef kxld_splitinfolc KXLDsplitinfolc;

/* 9475 */
struct kxld_splitinfolc
{
  uint32_t_0 cmdsize;
  uint32_t_0 dataoff;
  uint32_t_0 datasize;
  boolean_t has_splitinfolc;
};

/* 9476 */
struct Block_layout
{
  void *isa;
  volatile int32_t flags;
  int32_t reserved;
  BlockInvokeFunction invoke;
  Block_descriptor_1 *descriptor;
};

/* 9477 */
typedef void (*BlockInvokeFunction)(void *, ...);

/* 9478 */
struct Block_descriptor_1
{
  uintptr_t reserved;
  uintptr_t size;
};

/* 9479 */
struct Block_descriptor_2
{
  BlockCopyFunction copy;
  BlockDisposeFunction dispose;
};

/* 9480 */
typedef void (*BlockCopyFunction)(void *, const void *);

/* 9481 */
typedef void (*BlockDisposeFunction)(const void *);

/* 9482 */
struct Block_descriptor_3
{
  const char *signature;
  const char *layout;
};

/* 9483 */
struct Block_byref
{
  void *isa;
  Block_byref *forwarding;
  volatile int32_t flags;
  uint32_t_0 size;
};

/* 9484 */
struct Block_byref_2
{
  BlockByrefKeepFunction byref_keep;
  BlockByrefDestroyFunction byref_destroy;
};

/* 9485 */
typedef void (*BlockByrefKeepFunction)(Block_byref *, Block_byref *);

/* 9486 */
typedef void (*BlockByrefDestroyFunction)(Block_byref *);

/* 9487 */
struct Block_byref_3
{
  const char *layout;
};

/* 9488 */
typedef Block_callbacks_RR Block_callbacks_RR_0;

/* 9489 */
struct Block_callbacks_RR
{
  size_t_0 size;
  void (*retain)(const void *);
  void (*release)(const void *);
  void (*destructInstance)(const void *);
};

/* 9490 */
enum hibernate_write_image::$C5BD6FC6A887CE95827D34876FAF0AE6 : __int32
{
  kWired = 0x2,
  kEncrypt = 0x1,
  kWiredEncrypt = 0x3,
  kWiredClear = 0x2,
  kUnwiredEncrypt = 0x1,
};

/* 9491 */
typedef IOHibernateVars IOHibernateVars_0;

/* 9492 */
struct IOHibernateVars
{
  hibernate_page_list_t_0 *page_list;
  hibernate_page_list_t_0 *page_list_wired;
  hibernate_page_list_t_0 *page_list_pal;
  IOBufferMemoryDescriptor *ioBuffer;
  IOBufferMemoryDescriptor *srcBuffer;
  IOBufferMemoryDescriptor *handoffBuffer;
  IOMemoryDescriptor *previewBuffer;
  OSData *previewData;
  OSObject *saveBootDevice;
  IOPolledFileIOVars *fileVars;
  uint64_t_0 fileMinSize;
  uint64_t_0 fileMaxSize;
  vm_offset_t videoMapping;
  vm_size_t videoAllocSize;
  vm_size_t videoMapSize;
  uint8_t_0 *consoleMapping;
  uint8_t_0 haveFastBoot;
  uint8_t_0 saveBootAudioVolume;
  uint8_t_0 hwEncrypt;
  uint8_t_0 wiredCryptKey[16];
  uint8_t_0 cryptKey[16];
  size_t_0 volumeCryptKeySize;
  uint8_t_0 volumeCryptKey[64];
};

/* 9493 */
struct __cppobj __attribute__((aligned(8))) IOBufferMemoryDescriptor : IOGeneralMemoryDescriptor
{
  IOBufferMemoryDescriptor::ExpansionData *reserved;
  void *_buffer;
  vm_size_t _capacity;
  vm_offset_t _alignment;
  IOOptionBits _options;
  uintptr_t _internalReserved;
  unsigned int _internalFlags;
};

/* 9494 */
struct __cppobj IOGeneralMemoryDescriptor : IOMemoryDescriptor
{
  IOGeneralMemoryDescriptor::Ranges _ranges;
  unsigned int _rangesCount;
  task_t _task;
  IOGeneralMemoryDescriptor::$FCCA6D6D7FD4ECDFF3C741EB9D4E2074 _singleRange;
  unsigned int _wireCount;
  bool _initialized;
  OSData *_memoryEntries;
  unsigned int _pages;
  ppnum_t _highestPage;
  uint32_t_0 __iomd_reservedA;
  uint32_t_0 __iomd_reservedB;
  IOLock *_prepareLock;
};

/* 9495 */
struct __attribute__((aligned(8))) IOMemoryDescriptorReserved
{
  IOMemoryDescriptorDevicePager dp;
  uint64_t_0 preparationID;
  uint64_t_0 kernReserved[4];
  vm_tag_t kernelTag;
  vm_tag_t userTag;
};

/* 9496 */
struct IOMemoryDescriptorDevicePager
{
  void *devicePager;
  unsigned __int32 pagerContig : 1;
  unsigned __int32 unused : 31;
  IOMemoryDescriptor *memory;
};

/* 9497 */
struct IOMemoryReference
{
  volatile SInt32 refCount;
  vm_prot_t prot;
  uint32_t_0 capacity;
  uint32_t_0 count;
  IOMemoryReference *mapRef;
  IOMemoryEntry entries[];
};

/* 9498 */
struct IOMemoryEntry
{
  ipc_port_t entry;
  int64_t offset;
  uint64_t_0 size;
};

/* 9499 */
typedef IOByteCount64 IOByteCount;

/* 9500 */
typedef UInt64 IOByteCount64;

/* 9501 */
union IOGeneralMemoryDescriptor::Ranges
{
  IOVirtualRange *v;
  IOAddressRange *v64;
  IOPhysicalRange *p;
  void *uio;
};

/* 9502 */
struct IOVirtualRange
{
  IOVirtualAddress address;
  IOByteCount length;
};

/* 9503 */
typedef mach_vm_address_t IOVirtualAddress;

/* 9504 */
typedef IOVirtualRange IOAddressRange;

/* 9505 */
struct IOPhysicalRange
{
  IOPhysicalAddress address;
  IOByteCount length;
};

/* 9506 */
typedef IOPhysicalAddress64 IOPhysicalAddress;

/* 9507 */
typedef UInt64 IOPhysicalAddress64;

/* 9508 */
union IOGeneralMemoryDescriptor::$FCCA6D6D7FD4ECDFF3C741EB9D4E2074
{
  IOVirtualRange v;
  IOPhysicalRange p;
};

/* 9509 */
struct IOBufferMemoryDescriptor::ExpansionData
{
  IOMemoryMap *map;
};

/* 9510 */
struct __cppobj __attribute__((aligned(8))) IOMemoryMap : OSObject
{
  IOMemoryDescriptor *fMemory;
  IOMemoryMap *fSuperMap;
  mach_vm_size_t fOffset;
  mach_vm_address_t fAddress;
  mach_vm_size_t fLength;
  task_t fAddressTask;
  vm_map_t fAddressMap;
  IOOptionBits fOptions;
  upl_t fRedirUPL;
  ipc_port_t fRedirEntry;
  IOMemoryDescriptor *fOwner;
  uint8_t_0 fUserClientUnmap;
};

/* 9511 */
struct __attribute__((aligned(8))) IOPolledFileIOVars
{
  IOPolledFilePollers *pollers;
  kern_direct_file_io_ref_t *fileRef;
  OSData *fileExtents;
  uint64_t_0 block0;
  IOByteCount blockSize;
  uint64_t_0 maxiobytes;
  IOByteCount bufferLimit;
  uint8_t_0 *buffer;
  IOByteCount bufferSize;
  IOByteCount bufferOffset;
  IOByteCount bufferHalf;
  IOByteCount extentRemaining;
  IOByteCount lastRead;
  IOByteCount readEnd;
  uint32_t_0 flags;
  uint64_t_0 fileSize;
  uint64_t_0 position;
  uint64_t_0 extentPosition;
  uint64_t_0 encryptStart;
  uint64_t_0 encryptEnd;
  uint64_t_0 cryptBytes;
  AbsoluteTime cryptTime;
  IOPolledFileExtent_0 *extentMap;
  IOPolledFileExtent_0 *currentExtent;
  bool allocated;
};

/* 9512 */
struct __cppobj __attribute__((aligned(8))) IOPolledFilePollers : OSObject
{
  IOService *media;
  OSArray *pollers;
  IOBufferMemoryDescriptor *ioBuffer;
  bool abortable;
  bool io;
  IOReturn ioStatus;
  uint32_t_0 openCount;
};

/* 9513 */
struct __cppobj IOService : IORegistryEntry
{
  IOService::ExpansionData *reserved;
  IOService *__provider;
  SInt32 __providerGeneration;
  IOService *__owner;
  IOOptionBits __state[2];
  uint64_t_0 __timeBusy;
  uint64_t_0 __accumBusy;
  IOServicePM *pwrMgt;
  bool initialized;
  void *pm_vars;
  int _numInterruptSources;
  IOInterruptSource_0 *_interruptSources;
};

/* 9514 */
struct __attribute__((aligned(8))) IOService::ExpansionData
{
  uint64_t_0 authorizationID;
  IOLock *interruptStatisticsLock;
  IOInterruptAccountingReporter *interruptStatisticsArray;
  int interruptStatisticsArrayCount;
};

/* 9515 */
struct IOInterruptAccountingReporter
{
  IOSimpleReporter *reporter;
  IOInterruptAccountingData *statistics;
};

/* 9516 */
struct __cppobj IOSimpleReporter : IOReporter
{
};

/* 9517 */
struct __cppobj IOReporter : OSObject:96
{
  IOReportChannelType _channelType;
  uint64_t_0 _driver_id;
  IOReportElement *_elements;
  int *_enableCounts;
  uint16_t _channelDimension;
  int _nElements;
  int _nChannels;
  OSArray *_channelNames;
  bool _reporterIsLocked;
  bool _reporterConfigIsLocked;
  IOReportElement *_swapElements;
  int *_swapEnableCounts;
  IOReportUnit _unit;
  int _enabled;
  IOLock *_configLock;
  IOInterruptState _interruptState;
  IOSimpleLock *_reporterLock;
};

/* 9518 */
struct IOReportChannelType
{
  uint8_t_0 report_format;
  uint8_t_0 reserved;
  uint16_t categories;
  uint16_t nelements;
  int16_t element_idx;
};

/* 9519 */
struct IOReportElement
{
  uint64_t_0 provider_id;
  uint64_t_0 channel_id;
  IOReportChannelType channel_type;
  uint64_t_0 timestamp;
  IOReportElementValues values;
};

/* 9520 */
struct IOReportElementValues
{
  uint64_t_0 v[4];
};

/* 9521 */
typedef uint64_t_0 IOReportUnit;

/* 9522 */
typedef boolean_t IOInterruptState;

/* 9523 */
typedef lck_spin_t IOSimpleLock;

/* 9524 */
struct IOInterruptAccountingData
{
  OSObject *owner;
  queue_chain_t chain;
  int interruptIndex;
  volatile uint64_t_0 interruptStatistics[10];
};

/* 9525 */
struct __cppobj IOServicePM : OSObject
{
  queue_chain_t WorkChain;
  queue_head_t RequestHead;
  IOService *Owner;
  IOPMinformeeList *InterestedDrivers;
  IOReturn DriverTimer;
  uint32_t_0 MachineState;
  thread_call_t AckTimer;
  thread_call_t SettleTimer;
  thread_call_t IdleTimer;
  thread_call_t WatchdogTimer;
  thread_call_t SpinDumpTimer;
  IOLock *WatchdogLock;
  OSArray *BlockedArray;
  uint64_t_0 PendingResponseDeadline;
  uint64_t_0 WatchdogDeadline;
  uint32_t_0 SettleTimeUS;
  uint32_t_0 IdleTimerGeneration;
  IOPMPowerChangeFlags HeadNoteChangeFlags;
  IOPMPowerStateIndex HeadNotePowerState;
  IOPMPSEntry *HeadNotePowerArrayEntry;
  IOPMPowerFlags HeadNoteDomainFlags;
  IOPMPowerFlags HeadNoteDomainTargetFlags;
  IOPowerConnection *HeadNoteParentConnection;
  IOPMPowerFlags HeadNoteParentFlags;
  uint32_t_0 HeadNotePendingAcks;
  IOLock *PMLock;
  unsigned __int32 InitialPowerChange : 1;
  unsigned __int32 InitialSetPowerState : 1;
  unsigned __int32 DeviceOverrideEnabled : 1;
  unsigned __int32 DoNotPowerDown : 1;
  unsigned __int32 ParentsKnowState : 1;
  unsigned __int32 StrictTreeOrder : 1;
  unsigned __int32 IdleTimerStopped : 1;
  unsigned __int32 AdjustPowerScheduled : 1;
  unsigned __int32 IsPreChange : 1;
  unsigned __int32 DriverCallBusy : 1;
  unsigned __int32 PCDFunctionOverride : 1;
  unsigned __int32 IdleTimerIgnored : 1;
  unsigned __int32 HasAdvisoryDesire : 1;
  unsigned __int32 AdvisoryTickleUsed : 1;
  unsigned __int32 ResetPowerStateOnWake : 1;
  AbsoluteTime DeviceActiveTimestamp;
  AbsoluteTime MaxPowerStateEntryTime;
  AbsoluteTime MaxPowerStateExitTime;
  IOLock *ActivityLock;
  unsigned __int64 IdleTimerPeriod;
  unsigned __int64 IdleTimerMinPowerState;
  unsigned __int64 NextIdleTimerPeriod;
  AbsoluteTime IdleTimerStartTime;
  IOPMPowerStateIndex DeviceDesire;
  IOPMPowerStateIndex DesiredPowerState;
  IOPMPowerFlags PreviousRequestPowerFlags;
  const char *Name;
  IOPMPowerStateIndex NumberOfPowerStates;
  IOPMPowerStateIndex HighestPowerState;
  IOPMPSEntry *PowerStates;
  IOService *ControllingDriver;
  IOPMPowerStateIndex CurrentPowerState;
  IOPMPowerFlags ParentsCurrentPowerFlags;
  IOPMPowerStateIndex MaxPowerState;
  IOPMPowerFlags MergedOutputPowerFlags;
  OSArray *ResponseArray;
  OSArray *NotifyClientArray;
  UInt16 SerialNumber;
  int OutOfBandParameter;
  AbsoluteTime DriverCallStartTime;
  IOPMPowerFlags CurrentCapabilityFlags;
  unsigned __int64 CurrentPowerConsumption;
  IOPMPowerStateIndex TempClampPowerState;
  OSArray *NotifyChildArray;
  OSDictionary *PowerClients;
  thread_call_t DriverCallEntry;
  void *DriverCallParamPtr;
  IOItemCount DriverCallParamCount;
  IOItemCount DriverCallParamSlots;
  uint32_t_0 DriverCallReason;
  uint32_t_0 OutOfBandMessage;
  uint32_t_0 TempClampCount;
  uint32_t_0 OverrideMaxPowerState;
  uint32_t_0 DeviceUsablePowerState;
  IOPMPowerStateIndex ActivityTicklePowerState;
  IOPMPowerStateIndex AdvisoryTicklePowerState;
  uint32_t_0 ActivityTickleCount;
  unsigned __int32 DeviceWasActive : 1;
  unsigned __int32 AdvisoryTickled : 1;
  uint32_t_0 WaitReason;
  uint32_t_0 SavedMachineState;
  IOServicePM::$40978F72CC1F2BB38D983A5BB8E461D9 LockedFlags;
  queue_head_t PMDriverCallQueue;
  OSSet *InsertInterestSet;
  OSSet *RemoveInterestSet;
  uint32_t_0 ReportClientCnt;
  void *ReportBuf;
  IOPMActions PMActions;
};

/* 9526 */
struct __cppobj IOPMinformeeList : OSObject
{
  IOPMinformee *firstItem;
  unsigned __int64 length;
};

/* 9527 */
struct __cppobj __attribute__((aligned(8))) IOPMinformee : OSObject
{
  IOService *whatObject;
  int32_t timer;
  IOPMinformee *nextInList;
  AbsoluteTime startTime;
  bool active;
};

/* 9528 */
typedef uint32_t_0 IOPMPowerChangeFlags;

/* 9529 */
typedef unsigned __int64 IOPMPowerStateIndex;

/* 9530 */
struct IOPMPSEntry
{
  IOPMPowerFlags capabilityFlags;
  IOPMPowerFlags outputPowerFlags;
  IOPMPowerFlags inputPowerFlags;
  uint32_t_0 staticPower;
  uint32_t_0 settleUpTime;
  uint32_t_0 settleDownTime;
  IOPMPowerStateIndex stateOrder;
  IOPMPowerStateIndex stateOrderToIndex;
};

/* 9531 */
typedef unsigned __int64 IOPMPowerFlags;

/* 9532 */
struct __cppobj __attribute__((aligned(8))) IOPowerConnection : IOService
{
  bool stateKnown;
  IOPMPowerFlags currentPowerFlags;
  unsigned __int64 desiredDomainState;
  bool requestFlag;
  unsigned __int64 preventIdleSleepFlag;
  unsigned __int64 preventSystemSleepFlag;
  bool awaitingAck;
  bool readyFlag;
  bool delayChildNotification;
};

/* 9533 */
typedef UInt32 IOItemCount;

/* 9534 */
struct IOServicePM::$40978F72CC1F2BB38D983A5BB8E461D9
{
  unsigned __int32 PMStop : 1;
  unsigned __int32 PMDriverCallWait : 1;
};

/* 9535 */
struct IOPMActions
{
  void *target;
  uint32_t_0 parameter;
  IOPMActionPowerChangeStart actionPowerChangeStart;
  IOPMActionPowerChangeDone actionPowerChangeDone;
  IOPMActionPowerChangeOverride actionPowerChangeOverride;
  IOPMActionActivityTickle actionActivityTickle;
  IOPMActionUpdatePowerClient actionUpdatePowerClient;
};

/* 9536 */
typedef void (*IOPMActionPowerChangeStart)(void *, IOService *, IOPMActions *, IOPMPowerStateIndex, IOPMPowerChangeFlags *, IOPMRequestTag);

/* 9537 */
typedef uint32_t_0 IOPMRequestTag;

/* 9538 */
typedef void (*IOPMActionPowerChangeDone)(void *, IOService *, IOPMActions *, IOPMPowerStateIndex, IOPMPowerChangeFlags, IOPMRequestTag);

/* 9539 */
typedef void (*IOPMActionPowerChangeOverride)(void *, IOService *, IOPMActions *, IOPMPowerStateIndex *, IOPMPowerChangeFlags *, IOPMRequestTag);

/* 9540 */
typedef void (*IOPMActionActivityTickle)(void *, IOService *, IOPMActions *);

/* 9541 */
typedef void (*IOPMActionUpdatePowerClient)(void *, IOService *, IOPMActions *, const OSSymbol *, IOPMPowerStateIndex, IOPMPowerStateIndex);

/* 9542 */
typedef IOInterruptSource IOInterruptSource_0;

/* 9543 */
struct IOInterruptSource
{
  IOInterruptController *interruptController;
  OSData *vectorData;
};

/* 9544 */
struct __cppobj IOInterruptController : IOService
{
  IOInterruptVector_0 *vectors;
  IOSimpleLock *controllerLock;
  IOInterruptController::ExpansionData *ioic_reserved;
};

/* 9545 */
typedef IOInterruptVector IOInterruptVector_0;

/* 9546 */
struct IOInterruptVector
{
  volatile char interruptActive;
  volatile char interruptDisabledSoft;
  volatile char interruptDisabledHard;
  volatile char interruptRegistered;
  IOLock *interruptLock;
  IOService *nub;
  int source;
  void *target;
  IOInterruptHandler handler;
  void *refCon;
  IOSharedInterruptController *sharedController;
};

/* 9547 */
struct __cppobj IOSharedInterruptController : IOInterruptController
{
  IOService *provider;
  int numVectors;
  int vectorsRegistered;
  int vectorsEnabled;
  volatile int controllerDisabled;
  bool sourceIsLevel;
  IOSharedInterruptController::ExpansionData *iosic_reserved;
};

/* 9548 */
struct IOSharedInterruptController::ExpansionData
{
  __int8 gap0[1];
};

/* 9549 */
struct IOInterruptController::ExpansionData
{
  __int8 gap0[1];
};

/* 9550 */
struct __cppobj IOBufferMemoryDescriptor::MetaClass : OSMetaClass
{
};

/* 9551 */
struct __cppobj IOGeneralMemoryDescriptor::MetaClass : OSMetaClass
{
};

/* 9552 */
struct __cppobj IOMemoryDescriptor::MetaClass : OSMetaClass
{
};

/* 9553 */
typedef IOOptionBits IOMemoryDescriptor::DMACommandOps;

/* 9554 */
struct __cppobj __attribute__((aligned(8))) IOMapper : IOService
{
  uint64_t_0 __reservedA[6];
  kern_allocation_name_t fAllocName;
  uint32_t_0 __reservedB;
  uint32_t_0 fPageSize;
  bool fIsSystem;
};

/* 9555 */
struct __cppobj IOMapper::MetaClass : OSMetaClass
{
};

/* 9556 */
enum IOMapper::SystemMapperState : __int32
{
  kNoMapper = 0x0,
  kUnknown = 0x1,
  kHasMapper = 0x2,
  kWaitMask = 0x3,
};

/* 9557 */
struct __cppobj IOService::MetaClass : OSMetaClass
{
};

/* 9558 */
struct __cppobj IORegistryPlane::MetaClass : OSMetaClass
{
};

/* 9559 */
struct __cppobj IOSimpleReporter::MetaClass : OSMetaClass
{
};

/* 9560 */
struct __cppobj IOReporter::MetaClass : OSMetaClass
{
};

/* 9561 */
typedef OSDictionary IOReportLegendEntry;

/* 9562 */
struct IOReportChannelList
{
  uint32_t_0 nchannels;
  IOReportChannel channels[];
};

/* 9563 */
struct IOReportChannel
{
  uint64_t_0 channel_id;
  IOReportChannelType channel_type;
};

/* 9564 */
typedef uint32_t_0 IOReportConfigureAction;

/* 9565 */
typedef uint16_t IOReportCategories;

/* 9566 */
struct __cppobj IOServicePM::MetaClass : OSMetaClass
{
};

/* 9567 */
struct __cppobj IOPMinformeeList::MetaClass : OSMetaClass
{
};

/* 9568 */
struct __cppobj IOPMinformee::MetaClass : OSMetaClass
{
};

/* 9569 */
struct __cppobj IOPowerConnection::MetaClass : OSMetaClass
{
};

/* 9570 */
struct __cppobj IOInterruptController::MetaClass : OSMetaClass
{
};

/* 9571 */
struct __cppobj IOSharedInterruptController::MetaClass : OSMetaClass
{
};

/* 9572 */
typedef void (*IOInterruptAction)(OSObject *, void *, IOService *, int);

/* 9573 */
typedef int32_t IOInterruptVectorNumber;

/* 9574 */
typedef uint32_t_0 IOReportUpdateAction;

/* 9575 */
struct __cppobj __attribute__((aligned(8))) IONotifier : OSObject
{
};

/* 9576 */
struct __cppobj IONotifier::MetaClass : OSMetaClass
{
};

/* 9577 */
typedef bool (*IOServiceNotificationHandler)(void *, void *, IOService *);

/* 9578 */
typedef bool (*IOServiceMatchingNotificationHandler)(void *, void *, IOService *, IONotifier *);

/* 9579 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *IOServiceMatchingNotificationHandlerBlock;

/* 9580 */
struct __cppobj IOWorkLoop : OSObject
{
  IORecursiveLock *gateLock;
  IOEventSource *eventChain;
  IOCommandGate *controlG;
  IOSimpleLock *workToDoLock;
  IOThread workThread;
  volatile bool workToDo;
  bool loopRestart;
  IOWorkLoop::ExpansionData *reserved;
};

/* 9581 */
struct __cppobj IOEventSource : OSObject
{
  IOEventSource *eventChainNext;
  OSObject *owner;
  IOEventSource::$165D45A025B11B916C25C3F2D0135E75 _anon_0;
  bool enabled;
  uint8_t_0 eventSourceReserved1[1];
  uint16_t flags;
  uint8_t_0 eventSourceReserved2[4];
  IOWorkLoop *workLoop;
  void *refcon;
  IOEventSource::ExpansionData *reserved;
};

/* 9582 */
union IOEventSource::$165D45A025B11B916C25C3F2D0135E75
{
  IOEventSource::Action action;
  IOEventSource::ActionBlock actionBlock;
};

/* 9583 */
typedef void (*IOEventSource::Action)(OSObject *, ...);

/* 9584 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *IOEventSource::ActionBlock;

/* 9585 */
struct IOEventSource::ExpansionData
{
  IOEventSourceCounter *counter;
};

/* 9586 */
struct IOEventSourceCounter
{
  IOEventSourceCounter::$1181B0E02325503CD1F91F82038BC52C link;
  ClassNode_0 *parentClass;
  IOStatisticsCounterType type;
  uint64_t_0 startTimeStamp;
  uint64_t_0 timeOnGate;
  uint32_t_0 closeGateCalls;
  uint32_t_0 openGateCalls;
  IOEventSourceCounter::$138A64DCE1DE2FED30AE2852C801DCF3 u;
};

/* 9587 */
struct IOEventSourceCounter::$1181B0E02325503CD1F91F82038BC52C
{
  IOEventSourceCounter *sle_next;
};

/* 9588 */
typedef ClassNode ClassNode_0;

/* 9589 */
struct ClassNode
{
  ClassNode::$BEF88854EA12405319B7E4F036B79A4A tLink;
  ClassNode::$2CBDF8EBB5C2C2E7641F5A2ACF8E323D lLink;
  KextNode *parentKext;
  uint32_t_0 classID;
  uint32_t_0 superClassID;
  const OSMetaClass *metaClass;
  ClassNode::$6CEAFA3BCA5F3370915376E7479AF37F counterList;
  ClassNode::$9090F386A3BE47A4859F32FE6FA6A1F1 userClientList;
};

/* 9590 */
struct ClassNode::$BEF88854EA12405319B7E4F036B79A4A
{
  ClassNode *rbe_left;
  ClassNode *rbe_right;
  ClassNode *rbe_parent;
};

/* 9591 */
struct ClassNode::$2CBDF8EBB5C2C2E7641F5A2ACF8E323D
{
  ClassNode *sle_next;
};

/* 9592 */
struct KextNode
{
  KextNode::$3938459FEB030CE99EFE4AF389BD299D link;
  KextNode::$3938459FEB030CE99EFE4AF389BD299D addressLink;
  OSKext *kext;
  OSKextLoadTag loadTag;
  vm_offset_t address;
  vm_offset_t address_end;
  uint32_t_0 memoryCounters[8];
  uint32_t_0 classes;
  KextNode::$5702E7D5E1F39B66E0E58D742B247CE8 classList;
  KextNode::$50040BDE65D498CFEDBF24A3A9B1F50D workLoopList;
  ProcessEntryList userClientCallList;
};

/* 9593 */
struct KextNode::$3938459FEB030CE99EFE4AF389BD299D
{
  KextNode *rbe_left;
  KextNode *rbe_right;
  KextNode *rbe_parent;
};

/* 9594 */
struct KextNode::$5702E7D5E1F39B66E0E58D742B247CE8
{
  ClassNode *slh_first;
};

/* 9595 */
struct KextNode::$50040BDE65D498CFEDBF24A3A9B1F50D
{
  IOWorkLoopCounter *slh_first;
};

/* 9596 */
struct IOWorkLoopCounter
{
  IOWorkLoopCounter::$36F26A0102A60C84DE87EBF237FD083D link;
  KextNode_0 *parentKext;
  int attachedEventSources;
  IOWorkLoop *workLoop;
  uint64_t_0 startTimeStamp;
  uint64_t_0 timeOnGate;
  uint32_t_0 closeGateCalls;
  uint32_t_0 openGateCalls;
  IOWorkLoopCounter::DependencyTreeHead dependencyHead;
};

/* 9597 */
struct IOWorkLoopCounter::$36F26A0102A60C84DE87EBF237FD083D
{
  IOWorkLoopCounter *sle_next;
};

/* 9598 */
typedef KextNode KextNode_0;

/* 9599 */
typedef IOWorkLoopCounter::DependencyTree IOWorkLoopCounter::DependencyTreeHead;

/* 9600 */
struct IOWorkLoopCounter::DependencyTree
{
  IOWorkLoopDependency *rbh_root;
};

/* 9601 */
struct __attribute__((aligned(8))) IOWorkLoopDependency
{
  IOWorkLoopDependency::$09C7F28FB343CFB896601BBA78F34D6B link;
  OSKextLoadTag loadTag;
};

/* 9602 */
struct IOWorkLoopDependency::$09C7F28FB343CFB896601BBA78F34D6B
{
  IOWorkLoopDependency *rbe_left;
  IOWorkLoopDependency *rbe_right;
  IOWorkLoopDependency *rbe_parent;
};

/* 9603 */
struct ProcessEntryList
{
  IOUserClientProcessEntry *tqh_first;
  IOUserClientProcessEntry **tqh_last;
};

/* 9604 */
struct __attribute__((aligned(8))) IOUserClientProcessEntry
{
  IOUserClientProcessEntry::$091DA6F04361CBB338BBA9AC5F22EDF1 link;
  char processName[20];
  int32_t pid;
  uint32_t_0 calls;
};

/* 9605 */
struct IOUserClientProcessEntry::$091DA6F04361CBB338BBA9AC5F22EDF1
{
  IOUserClientProcessEntry *tqe_next;
  IOUserClientProcessEntry **tqe_prev;
};

/* 9606 */
struct ClassNode::$6CEAFA3BCA5F3370915376E7479AF37F
{
  IOEventSourceCounter *slh_first;
};

/* 9607 */
struct ClassNode::$9090F386A3BE47A4859F32FE6FA6A1F1
{
  IOUserClientCounter *slh_first;
};

/* 9608 */
struct __attribute__((aligned(8))) IOUserClientCounter
{
  IOUserClientCounter::$5BE6A80DE1A53E17FC838BAC158EEA49 link;
  ClassNode_0 *parentClass;
  uint32_t_0 clientCalls;
};

/* 9609 */
struct IOUserClientCounter::$5BE6A80DE1A53E17FC838BAC158EEA49
{
  IOUserClientCounter *sle_next;
};

/* 9610 */
typedef uint32_t_0 IOStatisticsCounterType;

/* 9611 */
union IOEventSourceCounter::$138A64DCE1DE2FED30AE2852C801DCF3
{
  IOInterruptEventSourceCounter_0 interrupt;
  IOInterruptEventSourceCounter_0 filter;
  IOTimerEventSourceCounter_0 timer;
  IOCommandGateCounter_0 commandGate;
  IOCommandQueueCounter_0 commandQueue;
};

/* 9612 */
typedef IOInterruptEventSourceCounter IOInterruptEventSourceCounter_0;

/* 9613 */
struct IOInterruptEventSourceCounter
{
  uint32_t_0 produced;
  uint32_t_0 checksForWork;
};

/* 9614 */
typedef IOTimerEventSourceCounter IOTimerEventSourceCounter_0;

/* 9615 */
struct IOTimerEventSourceCounter
{
  uint32_t_0 timeouts;
  uint32_t_0 checksForWork;
};

/* 9616 */
typedef IOCommandGateCounter IOCommandGateCounter_0;

/* 9617 */
struct IOCommandGateCounter
{
  uint32_t_0 actionCalls;
};

/* 9618 */
typedef IOCommandQueueCounter IOCommandQueueCounter_0;

/* 9619 */
struct IOCommandQueueCounter
{
  uint32_t_0 actionCalls;
};

/* 9620 */
struct __cppobj IOCommandGate : IOEventSource
{
  IOCommandGate::ExpansionData *reserved;
};

/* 9621 */
struct IOCommandGate::ExpansionData
{
  __int8 gap0[1];
};

/* 9622 */
typedef thread_t IOThread;

/* 9623 */
struct IOWorkLoop::ExpansionData
{
  IOOptionBits options;
  IOEventSource *passiveEventChain;
  IOWorkLoopCounter *counter;
  uint64_t_0 lockInterval;
  uint64_t_0 lockTime;
};

/* 9624 */
struct __cppobj IOWorkLoop::MetaClass : OSMetaClass
{
};

/* 9625 */
typedef IOReturn (*IOWorkLoop::Action)(OSObject *, void *, void *, void *, void *);

/* 9626 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *IOWorkLoop::ActionBlock;

/* 9627 */
enum IOWorkLoop::maintCommandEnum : __int32
{
  mAddEvent = 0x0,
  mRemoveEvent = 0x1,
};

/* 9628 */
enum IOWorkLoop::$30C1533559E6106D13D83BA9F82A05ED : __int32
{
  kPreciousStack = 0x1,
  kTimeLockPanics = 0x2,
};

/* 9629 */
struct __cppobj IOEventSource::MetaClass : OSMetaClass
{
};

/* 9630 */
enum IOEventSource::$353A9A1F35DC103F5106C7D4E70CB792 : __int32
{
  kPassive = 0x1,
  kActive = 0x2,
  kActionBlock = 0x4,
  kSubClass0 = 0x8,
};

/* 9631 */
typedef IOWorkLoopDependency IOWorkLoopDependency_0;

/* 9632 */
struct __cppobj IOCommandGate::MetaClass : OSMetaClass
{
};

/* 9633 */
typedef IOReturn (*IOCommandGate::Action)(OSObject *, void *, void *, void *, void *);

/* 9634 */
struct __cppobj IOPlatformExpert : IOService
{
  __int64 _peBootROMType;
  __int64 _peChipSetType;
  __int64 _peMachineType;
  IOPMrootDomain *root;
  int _pePMFeatures;
  int _pePrivPMFeatures;
  int _peNumBatteriesSupported;
  OSArray *thePowerTree;
  bool searchingForAdditionalParents;
  OSNumber *multipleParentKeyValue;
  int numInstancesRegistered;
  IOPlatformExpert::ExpansionData *iope_reserved;
};

/* 9635 */
struct __cppobj __attribute__((aligned(8))) IOPMrootDomain : IOService
{
  IOService *wrangler;
  OSDictionary *wranglerIdleSettings;
  IOLock *featuresDictLock;
  IOLock *wakeEventLock;
  IOPMPowerStateQueue *pmPowerStateQueue;
  OSArray *allowedPMSettings;
  OSArray *noPublishPMSettings;
  PMTraceWorker *pmTracer;
  PMAssertionsTracker *pmAssertions;
  IOLock *settingsCtrlLock;
  OSDictionary *settingsCallbacks;
  OSDictionary *fPMSettingsDict;
  IONotifier *_batteryPublishNotifier;
  IONotifier *_displayWranglerNotifier;
  const OSSymbol *_statsNameKey;
  const OSSymbol *_statsPIDKey;
  const OSSymbol *_statsTimeMSKey;
  const OSSymbol *_statsResponseTypeKey;
  const OSSymbol *_statsMessageTypeKey;
  const OSSymbol *_statsPowerCapsKey;
  uint32_t_0 sleepCnt;
  uint32_t_0 darkWakeCnt;
  uint32_t_0 displayWakeCnt;
  OSString *queuedSleepWakeUUIDString;
  OSArray *pmStatsAppResponses;
  IOLock *pmStatsLock;
  void *sleepDelaysReport;
  uint32_t_0 sleepDelaysClientCnt;
  uint64_t_0 ts_sleepStart;
  uint64_t_0 wake2DarkwakeDelay;
  void *assertOnWakeReport;
  uint32_t_0 assertOnWakeClientCnt;
  clock_sec_t assertOnWakeSecs;
  bool uuidPublished;
  bool idleSleepEnabled;
  unsigned __int64 sleepSlider;
  unsigned __int64 idleSeconds;
  uint64_t_0 autoWakeStart;
  uint64_t_0 autoWakeEnd;
  unsigned __int64 extraSleepDelay;
  thread_call_t extraSleepTimer;
  thread_call_t diskSyncCalloutEntry;
  thread_call_t fullWakeThreadCall;
  thread_call_t updateConsoleUsersEntry;
  uint32_t_0 _desiredCapability;
  uint32_t_0 _currentCapability;
  uint32_t_0 _pendingCapability;
  uint32_t_0 _highestCapability;
  OSSet *_joinedCapabilityClients;
  uint32_t_0 _systemStateGeneration;
  uint32_t_0 _systemMessageClientMask;
  IOPMrootDomain::$80B7048C1445AE9E44ECA27A7FD95832 _systemTransitionType;
  unsigned __int32 systemBooting : 1;
  unsigned __int32 systemShutdown : 1;
  unsigned __int32 systemDarkWake : 1;
  unsigned __int32 clamshellExists : 1;
  unsigned __int32 clamshellClosed : 1;
  unsigned __int32 clamshellDisabled : 1;
  unsigned __int32 desktopMode : 1;
  unsigned __int32 acAdaptorConnected : 1;
  unsigned __int32 clamshellSleepDisabled : 1;
  unsigned __int32 idleSleepTimerPending : 1;
  unsigned __int32 userDisabledAllSleep : 1;
  unsigned __int32 ignoreTellChangeDown : 1;
  unsigned __int32 wranglerAsleep : 1;
  unsigned __int32 wranglerTickled : 1;
  unsigned __int32 _preventUserActive : 1;
  unsigned __int32 graphicsSuppressed : 1;
  unsigned __int32 capabilityLoss : 1;
  unsigned __int32 pciCantSleepFlag : 1;
  unsigned __int32 pciCantSleepValid : 1;
  unsigned __int32 logGraphicsClamp : 1;
  unsigned __int32 darkWakeToSleepASAP : 1;
  unsigned __int32 darkWakeMaintenance : 1;
  unsigned __int32 darkWakeSleepService : 1;
  unsigned __int32 darkWakePostTickle : 1;
  unsigned __int32 sleepTimerMaintenance : 1;
  unsigned __int32 sleepToStandby : 1;
  unsigned __int32 lowBatteryCondition : 1;
  unsigned __int32 hibernateDisabled : 1;
  unsigned __int32 hibernateRetry : 1;
  unsigned __int32 wranglerTickleLatched : 1;
  unsigned __int32 userIsActive : 1;
  unsigned __int32 userWasActive : 1;
  unsigned __int32 displayIdleForDemandSleep : 1;
  unsigned __int32 darkWakeHibernateError : 1;
  unsigned __int32 thermalWarningState : 1;
  unsigned __int32 toldPowerdCapWillChange : 1;
  unsigned __int32 displayPowerOnRequested : 1;
  uint8_t_0 tasksSuspended;
  uint32_t_0 hibernateMode;
  AbsoluteTime userActivityTime;
  AbsoluteTime userActivityTime_prev;
  uint32_t_0 userActivityCount;
  uint32_t_0 userActivityAtSleep;
  uint32_t_0 lastSleepReason;
  uint32_t_0 fullToDarkReason;
  uint32_t_0 hibernateAborted;
  uint8_t_0 standbyNixed;
  uint8_t_0 resetTimers;
  uint32_t_0 fullWakeReason;
  int32_t idxPMCPUClamshell;
  int32_t idxPMCPULimitedPower;
  IOOptionBits platformSleepSupport;
  uint32_t_0 _debugWakeSeconds;
  uint32_t_0 _lastDebugWakeSeconds;
  queue_head_t aggressivesQueue;
  thread_call_t aggressivesThreadCall;
  OSData *aggressivesData;
  AbsoluteTime userBecameInactiveTime;
  IOService *pciHostBridgeDevice;
  IOService *pciHostBridgeDriver;
  IONotifier *systemCapabilityNotifier;
  uint32_t_0 pmSuspendedCapacity;
  uint32_t_0 pmSuspendedSize;
  IOPMrootDomain::PMNotifySuspendedStruct *pmSuspendedPIDS;
  OSSet *preventIdleSleepList;
  OSSet *preventSystemSleepList;
  UInt32 _scheduledAlarms;
  UInt32 _userScheduledAlarm;
  clock_sec_t _standbyTimerResetSeconds;
  volatile uint32_t_0 swd_lock;
  void *swd_buffer;
  uint32_t_0 swd_flags;
  void *swd_compressed_buffer;
  void *swd_spindump_buffer;
  thread_t notifierThread;
  OSObject *notifierObject;
  IOBufferMemoryDescriptor *swd_memDesc;
  OSArray *_systemWakeEventsArray;
  bool _acceptSystemWakeEvents;
};

/* 9636 */
struct __cppobj IOPMPowerStateQueue : IOEventSource
{
  queue_head_t queueHead;
  IOLock *queueLock;
};

/* 9637 */
struct __cppobj __attribute__((aligned(8))) PMTraceWorker : OSObject
{
  IOPMTracePointHandler tracePointHandler;
  void *tracePointTarget;
  IOPMrootDomain *owner;
  IOLock *pmTraceWorkerLock;
  OSArray *pciDeviceBitMappings;
  uint8_t_0 addedToRegistry;
  uint8_t_0 tracePhase;
  uint32_t_0 traceData32;
  uint8_t_0 loginWindowData;
  uint8_t_0 coreDisplayData;
  uint8_t_0 coreGraphicsData;
};

/* 9638 */
typedef void (*IOPMTracePointHandler)(void *, uint32_t_0, uint32_t_0);

/* 9639 */
struct __cppobj PMAssertionsTracker : OSObject:96
{
  uint32_t_0 tabulateProducerCount;
  uint32_t_0 tabulateConsumerCount;
  IOPMrootDomain *owner;
  OSArray *assertionsArray;
  IOLock *assertionsArrayLock;
  IOPMDriverAssertionID issuingUniqueID;
  IOPMDriverAssertionType assertionsKernel;
  IOPMDriverAssertionType assertionsUser;
  IOPMDriverAssertionType assertionsCombined;
};

/* 9640 */
typedef uint64_t_0 IOPMDriverAssertionID;

/* 9641 */
typedef uint64_t_0 IOPMDriverAssertionType;

/* 9642 */
enum IOPMrootDomain::$80B7048C1445AE9E44ECA27A7FD95832 : __int32
{
  kSystemTransitionNone = 0x0,
  kSystemTransitionSleep = 0x1,
  kSystemTransitionWake = 0x2,
  kSystemTransitionCapability = 0x3,
  kSystemTransitionNewCapClient = 0x4,
};

/* 9643 */
struct IOPMrootDomain::PMNotifySuspendedStruct
{
  uint32_t_0 pid;
  uint32_t_0 refcount;
};

/* 9644 */
struct IOPlatformExpert::ExpansionData
{
  __int8 gap0[1];
};

/* 9645 */
struct __cppobj IOPlatformExpert::MetaClass : OSMetaClass
{
};

/* 9646 */
struct __cppobj IOPMrootDomain::MetaClass : OSMetaClass
{
};

/* 9647 */
enum IOPMrootDomain::FullWakeReason : __int32
{
  kFullWakeReasonNone = 0x0,
  kFullWakeReasonLocalUser = 0x1,
  kFullWakeReasonDisplayOn = 0x2,
  fFullWakeReasonDisplayOnAndLocalUser = 0x3,
};

/* 9648 */
enum IOPMrootDomain::$DA311E49941B6C0AB497E3E7D4C5A9DF : __int32
{
  kSystemMessageClientPowerd = 0x1,
  kSystemMessageClientLegacyApp = 0x2,
  kSystemMessageClientKernel = 0x4,
  kSystemMessageClientAll = 0x7,
};

/* 9649 */
struct __cppobj IOPMPowerStateQueue::MetaClass : OSMetaClass
{
};

/* 9650 */
struct IOPMPowerStateQueue::PowerEventEntry
{
  queue_chain_t chain;
  uint32_t_0 eventType;
  void *arg0;
  uint64_t_0 arg1;
};

/* 9651 */
struct __cppobj PMTraceWorker::MetaClass : OSMetaClass
{
};

/* 9652 */
enum PMTraceWorker::change_t : __int32
{
  kPowerChangeStart = 0x0,
  kPowerChangeCompleted = 0x1,
};

/* 9653 */
struct __cppobj PMAssertionsTracker::MetaClass : OSMetaClass
{
};

/* 9654 */
struct __attribute__((aligned(8))) PMAssertionsTracker::PMAssertStruct
{
  IOPMDriverAssertionID id;
  IOPMDriverAssertionType assertionBits;
  uint64_t_0 createdTime;
  uint64_t_0 modifiedTime;
  const OSSymbol *ownerString;
  IOService *ownerService;
  uint64_t_0 registryEntryID;
  IOPMDriverAssertionLevel level;
};

/* 9655 */
typedef uint32_t_0 IOPMDriverAssertionLevel;

/* 9656 */
typedef IOReturn (*IOPMSettingControllerCallback)(OSObject *, const OSSymbol *, OSObject *, uintptr_t);

/* 9657 */
typedef IOReturn (*IOServiceInterestHandler)(void *, void *, UInt32, IOService *, void *, vm_size_t);

/* 9658 */
typedef IOPMCalendarStruct IOPMCalendarStruct_0;

/* 9659 */
struct __attribute__((aligned(4))) IOPMCalendarStruct
{
  UInt32 year;
  UInt8 month;
  UInt8 day;
  UInt8 hour;
  UInt8 minute;
  UInt8 second;
  UInt8 selector;
};

/* 9660 */
struct AggressivesRecord
{
  uint32_t_0 flags;
  uint32_t_0 type;
  uint32_t_0 value;
};

/* 9661 */
struct __cppobj __attribute__((aligned(4))) PMSettingObject : OSObject
{
  queue_head_t calloutQueue;
  thread_t waitThread;
  IOPMrootDomain *parent;
  PMSettingHandle *pmsh;
  IOPMSettingControllerCallback func;
  OSObject *target;
  uintptr_t refcon;
  uint32_t_0 *publishedFeatureID;
  uint32_t_0 settingCount;
  bool disabled;
};

/* 9662 */
struct __cppobj PMSettingHandle : OSObject
{
  PMSettingObject *pmso;
};

/* 9663 */
struct __cppobj PMSettingObject::MetaClass : OSMetaClass
{
};

/* 9664 */
struct __cppobj PMSettingHandle::MetaClass : OSMetaClass
{
};

/* 9665 */
struct IOPMSystemSleepParameters
{
  uint16_t version;
  uint16_t reserved1;
  uint32_t_0 sleepType;
  uint32_t_0 sleepFlags;
  uint32_t_0 ecWakeEvents;
  uint32_t_0 ecWakeTimer;
  uint32_t_0 ecPoweroffTimer;
  uint32_t_0 reserved2[10];
};

/* 9666 */
struct __cppobj IONVRAMController : IOService
{
};

/* 9667 */
struct __cppobj IONVRAMController::MetaClass : OSMetaClass
{
};

/* 9668 */
struct __cppobj IORangeAllocator : OSObject:96
{
  UInt32 numElements;
  UInt32 capacity;
  UInt32 capacityIncrement;
  IORangeScalar defaultAlignmentMask;
  IOOptionBits options;
  IORangeAllocatorElement *elements;
};

/* 9669 */
typedef IOByteCount IORangeScalar;

/* 9670 */
struct IORangeAllocatorElement
{
  IORangeScalar start;
  IORangeScalar end;
};

/* 9671 */
struct __cppobj IORangeAllocator::MetaClass : OSMetaClass
{
};

/* 9672 */
enum IORangeAllocator::$BC7D801842B78F0D4552D63038DAA516 : __int32
{
  kLocking = 0x1,
};

/* 9673 */
struct __cppobj __attribute__((aligned(8))) IODeviceMemory : IOMemoryDescriptor
{
};

/* 9674 */
struct __cppobj IODeviceMemory::MetaClass : OSMetaClass
{
};

/* 9675 */
struct __attribute__((aligned(8))) IODeviceMemory::InitElement
{
  IOPhysicalAddress start;
  IOPhysicalLength length;
  IOOptionBits tag;
};

/* 9676 */
typedef IOPhysicalLength64 IOPhysicalLength;

/* 9677 */
typedef UInt64 IOPhysicalLength64;

/* 9678 */
struct __cppobj IOMemoryMap::MetaClass : OSMetaClass
{
};

/* 9679 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *IOInterruptActionBlock;

/* 9680 */
struct $A4C8A3830A8CB20F34549D717E19E625
{
  void *__isa;
  int __flags;
  int __reserved;
  void (*__FuncPtr)(IOService *, int);
  __block_descriptor *__descriptor;
};

/* 9681 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *IOServiceInterestHandlerBlock;

/* 9682 */
typedef void (*IOServiceApplierFunction)(IOService *, void *);

/* 9683 */
typedef void (*OSObjectApplierFunction)(OSObject *, void *);

/* 9684 */
typedef void *IONotificationRef;

/* 9685 */
struct __cppobj IOUserClient : IOService
{
  IOUserClient::ExpansionData *reserved;
  OSSet *mappings;
  UInt8 sharedInstance;
  UInt8 closed;
  UInt8 __ipcFinal;
  UInt8 __reservedA[1];
  volatile SInt32 __ipc;
  queue_head_t owners;
  IOLock *lock;
  void *__reserved[4];
};

/* 9686 */
struct IOUserClient::ExpansionData
{
  IOUserClientCounter_0 *counter;
};

/* 9687 */
typedef IOUserClientCounter IOUserClientCounter_0;

/* 9688 */
struct __cppobj IOUserClient::MetaClass : OSMetaClass
{
};

/* 9689 */
struct IOExternalMethodArguments
{
  uint32_t_0 version;
  uint32_t_0 selector;
  mach_port_t asyncWakePort;
  io_user_reference_t *asyncReference;
  uint32_t_0 asyncReferenceCount;
  const uint64_t_0 *scalarInput;
  uint32_t_0 scalarInputCount;
  const void *structureInput;
  uint32_t_0 structureInputSize;
  IOMemoryDescriptor *structureInputDescriptor;
  uint64_t_0 *scalarOutput;
  uint32_t_0 scalarOutputCount;
  void *structureOutput;
  uint32_t_0 structureOutputSize;
  IOMemoryDescriptor *structureOutputDescriptor;
  uint32_t_0 structureOutputDescriptorSize;
  uint32_t_0 __reservedA;
  OSObject **structureVariableOutputData;
  uint32_t_0 __reserved[30];
};

/* 9690 */
struct IOExternalMethodDispatch
{
  IOExternalMethodAction function;
  uint32_t_0 checkScalarInputCount;
  uint32_t_0 checkStructureInputSize;
  uint32_t_0 checkScalarOutputCount;
  uint32_t_0 checkStructureOutputSize;
};

/* 9691 */
typedef IOReturn (*IOExternalMethodAction)(OSObject *, void *, IOExternalMethodArguments *);

/* 9692 */
struct IOExternalMethod
{
  IOService *object;
  IOMethod func;
  _BYTE gap10[8];
  IOOptionBits flags;
  IOByteCount count0;
  IOByteCount count1;
};

/* 9693 */
typedef IOReturn (*IOMethod)(IOService *, void *, void *, void *, void *, void *, void *);

/* 9694 */
struct IOExternalAsyncMethod
{
  IOService *object;
  IOAsyncMethod func;
  _BYTE gap10[8];
  IOOptionBits flags;
  IOByteCount count0;
  IOByteCount count1;
};

/* 9695 */
typedef IOReturn (*IOAsyncMethod)(IOService *, natural_t *, void *, void *, void *, void *, void *, void *);

/* 9696 */
struct __attribute__((aligned(8))) IOExternalTrap
{
  IOService *object;
  IOTrap func;
  _BYTE gap10[8];
};

/* 9697 */
typedef IOReturn (*IOTrap)(IOService *, void *, void *, void *, void *, void *, void *);

/* 9698 */
typedef UInt32 IOMessage;

/* 9699 */
struct __cppobj __attribute__((aligned(8))) _IOServiceNotifier : IONotifier
{
  OSOrderedSet *whence;
  OSDictionary *matching;
  const OSSymbol *type;
  IOServiceMatchingNotificationHandler handler;
  IOServiceNotificationHandler compatHandler;
  void *target;
  void *ref;
  SInt32 priority;
  queue_head_t handlerInvocations;
  IOOptionBits state;
};

/* 9700 */
struct __cppobj _IOServiceNotifier::MetaClass : OSMetaClass
{
};

/* 9701 */
typedef IOPMPowerState IOPMPowerState_0;

/* 9702 */
struct IOPMPowerState
{
  unsigned __int64 version;
  IOPMPowerFlags capabilityFlags;
  IOPMPowerFlags outputPowerCharacter;
  IOPMPowerFlags inputPowerRequirement;
  unsigned __int64 staticPower;
  unsigned __int64 stateOrder;
  unsigned __int64 powerToAttain;
  unsigned __int64 timeToAttain;
  unsigned __int64 settleUpTime;
  unsigned __int64 timeToLower;
  unsigned __int64 settleDownTime;
  unsigned __int64 powerDomainBudget;
};

/* 9703 */
struct IOPMDriverCallEntry
{
  queue_chain_t link;
  thread_t thread;
  IOService *target;
  const void *callMethod;
};

/* 9704 */
typedef void (*IOPMCompletionAction)(void *, void *);

/* 9705 */
struct __cppobj IOPMRequest : IOCommand
{
  IOService *fTarget;
  IOPMRequest *fRequestNext;
  IOPMRequest *fRequestRoot;
  IOItemCount fWorkWaitCount;
  IOItemCount fFreeWaitCount;
  uint32_t_0 fRequestType;
  bool fIsQuiesceBlocker;
  IOPMCompletionAction fCompletionAction;
  void *fCompletionTarget;
  void *fCompletionParam;
  uint32_t_0 fRequestTag;
  void *fArg0;
  void *fArg1;
  void *fArg2;
};

/* 9706 */
struct __cppobj IOCommand : OSObject
{
  queue_chain_t fCommandChain;
};

/* 9707 */
struct __cppobj IOPMRequest::MetaClass : OSMetaClass
{
};

/* 9708 */
struct __cppobj IOCommand::MetaClass : OSMetaClass
{
};

/* 9709 */
struct __cppobj IOPMWorkQueue : IOEventSource
{
  uint64_t_0 fStatCheckForWork;
  uint64_t_0 fStatScanEntries;
  uint64_t_0 fStatQueueEmpty;
  uint64_t_0 fStatNoWorkDone;
  queue_head_t fWorkQueue;
  IOPMWorkQueue::Action fInvokeAction;
  IOPMWorkQueue::Action fRetireAction;
  uint32_t_0 fQueueLength;
  uint32_t_0 fConsumerCount;
  volatile uint32_t_0 fProducerCount;
  IOPMRequest *fQuiesceRequest;
  AbsoluteTime fQuiesceStartTime;
  AbsoluteTime fQuiesceFinishTime;
};

/* 9710 */
typedef bool (*IOPMWorkQueue::Action)(IOService *, IOPMRequest *, IOPMWorkQueue *);

/* 9711 */
struct __cppobj IOPMWorkQueue::MetaClass : OSMetaClass
{
};

/* 9712 */
struct __cppobj IOPMRequestQueue : IOEventSource
{
  queue_head_t fQueue;
  IOLock *fLock;
};

/* 9713 */
struct __cppobj IOPMRequestQueue::MetaClass : OSMetaClass
{
};

/* 9714 */
typedef bool (*IOPMRequestQueue::Action)(IOService *, IOPMRequest *, IOPMRequestQueue *);

/* 9715 */
enum IOPMRequestQueue::$3EB9D06769705FA8FC1DA21383DDF9CC : __int32
{
  kMaxDequeueCount = 0x100,
};

/* 9716 */
struct __cppobj IOPMCompletionQueue : IOEventSource
{
  queue_head_t fQueue;
};

/* 9717 */
struct __cppobj IOPMCompletionQueue::MetaClass : OSMetaClass
{
};

/* 9718 */
typedef bool (*IOPMCompletionQueue::Action)(IOService *, IOPMRequest *, IOPMCompletionQueue *);

/* 9719 */
struct IODMAMapSpecification
{
  uint64_t_0 alignment;
  IOService *device;
  uint32_t_0 options;
  uint8_t_0 numAddressBits;
  uint8_t_0 resvA[3];
  uint32_t_0 resvB[4];
};

/* 9720 */
struct __cppobj IODMACommand : IOCommand
{
  void *fRefCon;
  UInt64 fMaxSegmentSize;
  UInt64 fMaxTransferSize;
  UInt32 fAlignMaskLength;
  UInt32 fAlignMaskInternalSegments;
  IOMapper *fMapper;
  const IOMemoryDescriptor *fMemory;
  IODMACommand::SegmentFunction fOutSeg;
  UInt32 fAlignMask;
  UInt32 fNumAddressBits;
  UInt32 fNumSegments;
  uint32_t_0 fMappingOptions;
  UInt32 fActive;
  IODMACommandInternal *reserved;
};

/* 9721 */
typedef bool (*IODMACommand::SegmentFunction)(IODMACommand *, IODMACommand::Segment64, void *, UInt32);

/* 9722 */
struct IODMACommand::Segment64
{
  UInt64 fIOVMAddr;
  UInt64 fLength;
};

/* 9723 */
struct IODMACommandInternal
{
  IOMDDMAWalkSegmentState fState;
  IOMDDMACharacteristics fMDSummary;
  UInt64 fPreparedOffset;
  UInt64 fPreparedLength;
  UInt32 fSourceAlignMask;
  UInt8 fCursor;
  UInt8 fCheckAddressing;
  UInt8 fIterateOnly;
  UInt8 fMisaligned;
  UInt8 fMapContig;
  UInt8 fPrepared;
  UInt8 fDoubleBuffer;
  UInt8 fNewMD;
  UInt8 fLocalMapperAllocValid;
  UInt8 fIOVMAddrValid;
  UInt8 fForceDoubleBuffer;
  UInt8 fSetActiveNoMapper;
  vm_page_t fCopyPageAlloc;
  vm_page_t fCopyNext;
  vm_page_t fNextRemapPage;
  ppnum_t fCopyPageCount;
  uint64_t_0 fLocalMapperAlloc;
  uint64_t_0 fLocalMapperAllocLength;
  IOBufferMemoryDescriptor *fCopyMD;
  IOService *fDevice;
  IOReturn fStatus;
  UInt64 fActualByteCount;
  AbsoluteTime fTimeStamp;
};

/* 9724 */
typedef UInt8 IOMDDMAWalkSegmentState[128];

/* 9725 */
struct __attribute__((aligned(4))) IOMDDMACharacteristics
{
  UInt64 fLength;
  UInt32 fSGCount;
  UInt32 fPages;
  UInt32 fPageAlign;
  ppnum_t fHighestPage;
  IODirection fDirection;
  UInt8 fIsPrepared;
};

/* 9726 */
typedef IOOptionBits IODirection;

/* 9727 */
struct __cppobj IODMACommand::MetaClass : OSMetaClass
{
};

/* 9728 */
enum IODMACommand::MappingOptions : __int32
{
  kMapped = 0x0,
  kBypassed = 0x1,
  kNonCoherent = 0x2,
  kUnmapped = 0x3,
  kTypeMask = 0xF,
  kNoCacheStore = 0x10,
  kOnChip = 0x20,
  kIterateOnly = 0x40,
};

/* 9729 */
struct __attribute__((aligned(8))) IODMACommand::SegmentOptions
{
  uint8_t_0 fStructSize;
  uint8_t_0 fNumAddressBits;
  uint64_t_0 fMaxSegmentSize;
  uint64_t_0 fMaxTransferSize;
  uint32_t_0 fAlignment;
  uint32_t_0 fAlignmentLength;
  uint32_t_0 fAlignmentInternalSegments;
};

/* 9730 */
struct IODMACommand::Segment32
{
  UInt32 fIOVMAddr;
  UInt32 fLength;
};

/* 9731 */
typedef IOReturn (*IODMACommand::InternalSegmentFunction)(void *, IODMACommand *, IODMACommand::Segment64, void *, UInt32);

/* 9732 */
enum IODMACommand::SynchronizeOptions : __int32
{
  kForceDoubleBuffer = 0x1000000,
};

/* 9733 */
struct IODMAMapPageList
{
  uint32_t_0 pageOffset;
  uint32_t_0 pageListCount;
  const upl_page_info_t *pageList;
};

/* 9734 */
typedef unsigned int UInt;

/* 9735 */
struct __cppobj IOPolledFilePollers::MetaClass : OSMetaClass
{
};

/* 9736 */
struct __cppobj __attribute__((aligned(8))) IODTNVRAM : IOService
{
  IONVRAMController *_nvramController;
  const OSSymbol *_registryPropertiesKey;
  UInt8 *_nvramImage;
  bool _nvramImageDirty;
  UInt32 _ofPartitionOffset;
  UInt32 _ofPartitionSize;
  UInt8 *_ofImage;
  bool _ofImageDirty;
  OSDictionary *_ofDict;
  OSDictionary *_nvramPartitionOffsets;
  OSDictionary *_nvramPartitionLengths;
  UInt32 _resv0;
  UInt32 _resv1;
  IOLock *_ofLock;
  UInt32 _resv2;
  UInt32 _resv3;
  UInt8 *_resv4;
  UInt32 _piPartitionOffset;
  UInt32 _piPartitionSize;
  UInt8 *_piImage;
  bool _systemPaniced;
  SInt32 _lastDeviceSync;
  bool _freshInterval;
  bool _isProxied;
};

/* 9737 */
struct __cppobj IODTNVRAM::MetaClass : OSMetaClass
{
};

/* 9738 */
struct __attribute__((packed)) __attribute__((aligned(2))) IONVRAMDescriptor
{
  unsigned __int32 format : 4;
  unsigned __int32 marker : 1;
  unsigned __int32 bridgeCount : 3;
  unsigned __int32 busNum : 2;
  unsigned __int32 bridgeDevices : 30;
  unsigned __int32 functionNum : 3;
  unsigned __int32 deviceNum : 5;
};

/* 9739 */
typedef IOPolledFileIOVars IOPolledFileIOVars_0;

/* 9740 */
typedef hibernate_graphics_t hibernate_graphics_t_0;

/* 9741 */
struct __attribute__((aligned(4))) hibernate_graphics_t
{
  uint64_t_0 physicalAddress;
  int32_t gfxStatus;
  uint32_t_0 rowBytes;
  uint32_t_0 width;
  uint32_t_0 height;
  uint32_t_0 depth;
  uint8_t_0 progressSaveUnder[19][38];
};

/* 9742 */
typedef hibernate_statistics_t hibernate_statistics_t_0;

/* 9743 */
struct hibernate_statistics_t
{
  uint64_t_0 image1Size;
  uint64_t_0 imageSize;
  uint32_t_0 image1Pages;
  uint32_t_0 imagePages;
  uint32_t_0 booterStart;
  uint32_t_0 smcStart;
  uint32_t_0 booterDuration;
  uint32_t_0 booterConnectDisplayDuration;
  uint32_t_0 booterSplashDuration;
  uint32_t_0 booterDuration0;
  uint32_t_0 booterDuration1;
  uint32_t_0 booterDuration2;
  uint32_t_0 trampolineDuration;
  uint32_t_0 kernelImageReadDuration;
  uint32_t_0 graphicsReadyTime;
  uint32_t_0 wakeNotificationTime;
  uint32_t_0 lockScreenReadyTime;
  uint32_t_0 hidReadyTime;
  uint32_t_0 wakeCapability;
  uint32_t_0 resvA[15];
};

/* 9744 */
typedef IOPolledFileCryptVars IOPolledFileCryptVars_0;

/* 9745 */
struct IOPolledFileCryptVars
{
  uint8_t_0 aes_iv[16];
  aes_ctx ctx;
};

/* 9746 */
enum IOHibernateSystemSleep::$42F1DF5326CAD0323580B62A5E3825AC : __int32
{
  setFileRound = 0x100000,
};

/* 9747 */
struct IOHibernateSystemSleep::AppleRTCHibernateVars
{
  uint8_t_0 signature[4];
  uint32_t_0 revision;
  uint8_t_0 booterSignature[20];
  uint8_t_0 wiredCryptKey[16];
};

/* 9748 */
struct IOHibernateSystemSleep::$E38621F0B8564F3B27244007675736D7
{
  uint32_t_0 Attributes;
  uint16_t FilePathLength;
  uint16_t Desc;
};

/* 9749 */
typedef IOHibernateHandoff IOHibernateHandoff_0;

/* 9750 */
struct IOHibernateHandoff
{
  uint32_t_0 type;
  uint32_t_0 bytecount;
  uint8_t_0 data[];
};

/* 9751 */
typedef hibernate_cryptwakevars_t hibernate_cryptwakevars_t_0;

/* 9752 */
struct hibernate_cryptwakevars_t
{
  uint8_t_0 aes_iv[16];
};

/* 9753 */
typedef OpaqueDTEntry DeviceTreeNode;

/* 9754 */
typedef DeviceTreeNodeProperty DeviceTreeNodeProperty_0;

/* 9755 */
struct DeviceTreeNodeProperty
{
  char name[32];
  uint32_t_0 length;
};

/* 9756 */
struct iopa_t
{
  IOLock *lock;
  queue_head_t list;
  vm_size_t pagecount;
  vm_size_t bytecount;
};

/* 9757 */
struct $5D1709110088F58FF83D4688CD276793
{
  UInt32 count;
  UInt32 hint;
  IOMapData maps[8];
  lck_mtx_t *lock;
};

/* 9758 */
struct IOMapData
{
  vm_map_t map;
  vm_offset_t address;
  vm_offset_t end;
};

/* 9759 */
struct IOLibPageMallocHeader
{
  mach_vm_size_t allocationSize;
  mach_vm_address_t allocationAddress;
};

/* 9760 */
typedef _IOMallocContiguousEntry _IOMallocContiguousEntry_0;

/* 9761 */
struct _IOMallocContiguousEntry
{
  mach_vm_address_t virtualAddr;
  IOBufferMemoryDescriptor *md;
  queue_chain_t link;
};

/* 9762 */
typedef iopa_page_t iopa_page_t_0;

/* 9763 */
struct __attribute__((aligned(8))) iopa_page_t
{
  queue_chain_t link;
  uint64_t_0 avail;
  uint32_t_0 signature;
};

/* 9764 */
typedef unsigned int IOAlignment;

/* 9765 */
struct __attribute__((aligned(8))) IOMallocPageableRef
{
  vm_offset_t address;
  vm_size_t size;
  vm_tag_t tag;
};

/* 9766 */
struct IONamedValue
{
  int value;
  const char *name;
};

/* 9767 */
typedef void (*IOThreadFunc)(void *);

/* 9768 */
typedef kern_return_t (*IOIteratePageableMapsCallback)(vm_map_t, void *);

/* 9769 */
typedef uintptr_t (*iopa_proc_t)(iopa_t *);

/* 9770 */
enum IOLockState : __int32
{
  kIOLockStateUnlocked = 0x0,
  kIOLockStateLocked = 0x1,
};

/* 9771 */
struct __cppobj __attribute__((aligned(8))) IOConditionLock : OSObject
{
  IOLock *cond_interlock;
  volatile int condition;
  IOLock *sleep_interlock;
  unsigned __int8 interruptible;
  volatile bool want_lock;
  volatile bool waiting;
};

/* 9772 */
struct __cppobj IOConditionLock::MetaClass : OSMetaClass
{
};

/* 9773 */
typedef UInt32 dtptr_t;

/* 9774 */
struct IODTPersistent
{
  IODTCompareAddressCellFunc compareFunc;
};

/* 9775 */
typedef SInt32 (*IODTCompareAddressCellFunc)(UInt32, UInt32 *, UInt32 *);

/* 9776 */
typedef OpaqueDTEntryIterator OpaqueDTEntryIterator_0;

/* 9777 */
struct OpaqueDTEntryIterator
{
  RealDTEntry outerScope;
  RealDTEntry currentScope;
  RealDTEntry currentEntry;
  DTSavedScopePtr savedScope;
  unsigned __int64 currentIndex;
};

/* 9778 */
typedef DeviceTreeNode *RealDTEntry;

/* 9779 */
typedef DTSavedScope *DTSavedScopePtr;

/* 9780 */
struct DTSavedScope
{
  DTSavedScope *nextScope;
  RealDTEntry scope;
  RealDTEntry entry;
  unsigned __int64 index;
};

/* 9781 */
typedef OpaqueDTPropertyIterator OpaqueDTPropertyIterator_0;

/* 9782 */
struct OpaqueDTPropertyIterator
{
  RealDTEntry entry;
  DeviceTreeNodeProperty_0 *currentProperty;
  unsigned __int64 currentIndex;
};

/* 9783 */
typedef void (*IODTNVLocationFunc)(IORegistryEntry *, UInt8 *, UInt8 *, UInt8 *);

/* 9784 */
struct __cppobj __attribute__((aligned(8))) IORegistryIterator : OSIterator
{
  IORegistryIterator::IORegCursor start;
  IORegistryIterator::IORegCursor *where;
  IORegistryEntry *root;
  OSOrderedSet *done;
  const IORegistryPlane *plane;
  IOOptionBits options;
};

/* 9785 */
struct IORegistryIterator::IORegCursor
{
  IORegistryIterator::IORegCursor *next;
  IORegistryEntry *current;
  OSIterator *iter;
};

/* 9786 */
struct __cppobj IORegistryIterator::MetaClass : OSMetaClass
{
};

/* 9787 */
struct __cppobj __attribute__((aligned(8))) _IOServiceNullNotifier : IONotifier
{
};

/* 9788 */
struct __cppobj _IOServiceNullNotifier::MetaClass : OSMetaClass
{
};

/* 9789 */
struct __cppobj __attribute__((aligned(8))) _IOServiceInterestNotifier : IONotifier
{
  queue_chain_t chain;
  IOServiceInterestHandler handler;
  void *target;
  void *ref;
  queue_head_t handlerInvocations;
  IOOptionBits state;
};

/* 9790 */
struct __cppobj _IOServiceInterestNotifier::MetaClass : OSMetaClass
{
};

/* 9791 */
struct __cppobj __attribute__((aligned(8))) _IOConfigThread : OSObject
{
};

/* 9792 */
struct __cppobj _IOConfigThread::MetaClass : OSMetaClass
{
};

/* 9793 */
struct __cppobj __attribute__((aligned(8))) _IOServiceJob : OSObject:96
{
  int type;
  IOService *nub;
  IOOptionBits options;
};

/* 9794 */
struct __cppobj _IOServiceJob::MetaClass : OSMetaClass
{
};

/* 9795 */
struct __cppobj IOResources : IOService
{
};

/* 9796 */
struct __cppobj IOResources::MetaClass : OSMetaClass
{
};

/* 9797 */
struct __cppobj _IOOpenServiceIterator : OSIterator
{
  OSIterator *iter;
  const IOService *client;
  const IOService *provider;
  IOService *last;
};

/* 9798 */
struct __cppobj _IOOpenServiceIterator::MetaClass : OSMetaClass
{
};

/* 9799 */
typedef semaphore_t semaphore_port_t;

/* 9800 */
enum IOService::registerService::$280357E5C02D7F7587CA378DAFF0A416 : __int32
{
  kMaxPathLen = 0x100,
};

/* 9801 */
enum IOService::registerService::$235FF7B4F32F5CD67D76F5C044A992DF : __int32
{
  kMaxChars = 0x3F,
};

/* 9802 */
enum IOService::lockForArbitration::$DE749BD1DAD72B0BAB6F269B270BAA14 : __int32
{
  kPutOnFreeQueue = 0x0,
  kPutOnActiveQueue = 0x1,
  kPutOnWaitingQueue = 0x2,
};

/* 9803 */
enum IOService::terminatePhase1::$62E6E4F89540CB2998C7E132B96E6451 : __int32
{
  kRP1 = 0x500000,
};

/* 9804 */
enum IOService::waitQuiet::$33B15E213C8A4039D3BDA7EA771D680B : __int32
{
  kTimeoutExtensions = 0x4,
};

/* 9805 */
struct __attribute__((aligned(4))) ArbitrationLockQueueElement
{
  queue_chain_t link;
  IOThread thread;
  IOService *service;
  unsigned int count;
  bool required;
  bool aborted;
};

/* 9806 */
struct _IOServiceNotifierInvocation
{
  IOThread thread;
  queue_chain_t link;
};

/* 9807 */
struct IOServiceMatchContext
{
  OSDictionary *table;
  OSObject *result;
  uint32_t_0 options;
  uint32_t_0 state;
  uint32_t_0 count;
  uint32_t_0 done;
};

/* 9808 */
struct _IOServiceMatchingNotificationHandlerRef
{
  IOServiceNotificationHandler handler;
  void *ref;
};

/* 9809 */
struct __attribute__((aligned(8))) MessageClientsContext
{
  IOService *service;
  UInt32 type;
  void *argument;
  vm_size_t argSize;
  IOReturn ret;
};

/* 9810 */
struct __attribute__((aligned(8))) ServiceOpenMessageContext
{
  IOService *service;
  UInt32 type;
  IOService *excludeClient;
  IOOptionBits options;
};

/* 9811 */
struct CpuDelayEntry
{
  IOService *fService;
  UInt32 fMaxDelay;
  UInt32 fDelayType;
};

/* 9812 */
struct __attribute__((aligned(8))) DriverCallParam
{
  OSObject *Target;
  IOReturn Result;
};

/* 9813 */
struct IOStateReportInfo
{
  uint16_t curr_state;
  uint64_t_0 update_ts;
  IOReportElement elem[];
};

/* 9814 */
struct IOStateReportValues
{
  uint64_t_0 state_id;
  uint64_t_0 intransitions;
  uint64_t_0 upticks;
  uint64_t_0 last_intransition;
};

/* 9815 */
typedef bool (*IOPMMessageFilter)(void *, void *, void *, void *, void *);

/* 9816 */
struct IOPMInterestContext
{
  OSArray *responseArray;
  OSArray *notifyClients;
  uint16_t serialNumber;
  uint8_t_0 isPreChange;
  uint8_t_0 enableTracing;
  uint32_t_0 maxTimeRequested;
  uint32_t_0 messageType;
  uint32_t_0 notifyType;
  IOService *us;
  IOPMPowerStateIndex stateNumber;
  IOPMPowerFlags stateFlags;
  IOPMPowerChangeFlags changeFlags;
  const char *errorLog;
  IOPMMessageFilter messageFilter;
};

/* 9817 */
struct IOSimpleReportValues
{
  int64_t simple_value;
  uint64_t_0 reserved1;
  uint64_t_0 reserved2;
  uint64_t_0 reserved3;
};

/* 9818 */
struct IOPMRequestDomainPowerContext
{
  IOService *child;
  IOPMPowerFlags requestPowerFlags;
};

/* 9819 */
union __attribute__((aligned(16))) $<19992937,1>::$E54186FCB4D2DBB83CB1AAEDD637A91A
{
  void (*fIn)(OSMetaClassBase *);
  uintptr_t fVTOffset;
  OSMetaClassBase::_ptf_t fPFN;
};

/* 9820 */
union $<19992937,1>::$11285AEBE7F1E101531BCDFC86D32AE3
{
  const OSMetaClassBase *fObj;
  OSMetaClassBase::_ptf_t **vtablep;
};

/* 9821 */
typedef void (*IOPMPowerStateQueueAction)(OSObject *, uint32_t_0, void *, uint64_t_0);

/* 9822 */
struct __cppobj IOCatalogue : OSObject
{
  IORWLock *lock;
  SInt32 generation;
  OSDictionary *personalities;
};

/* 9823 */
typedef lck_rw_t IORWLock;

/* 9824 */
struct __cppobj IOCatalogue::MetaClass : OSMetaClass
{
};

/* 9825 */
typedef int SInt;

/* 9826 */
struct __cppobj IOPMPowerSource : IOService
{
  bool settingsChangedSinceUpdate;
  OSDictionary *properties;
  const OSSymbol *externalConnectedKey;
  const OSSymbol *externalChargeCapableKey;
  const OSSymbol *batteryInstalledKey;
  const OSSymbol *chargingKey;
  const OSSymbol *warnLevelKey;
  const OSSymbol *criticalLevelKey;
  const OSSymbol *currentCapacityKey;
  const OSSymbol *maxCapacityKey;
  const OSSymbol *timeRemainingKey;
  const OSSymbol *amperageKey;
  const OSSymbol *voltageKey;
  const OSSymbol *cycleCountKey;
  const OSSymbol *adapterInfoKey;
  const OSSymbol *locationKey;
  const OSSymbol *errorConditionKey;
  const OSSymbol *manufacturerKey;
  const OSSymbol *modelKey;
  const OSSymbol *serialKey;
  const OSSymbol *batteryInfoKey;
  IOPMPowerSource *nextInList;
};

/* 9827 */
struct __cppobj IOPMPowerSource::MetaClass : OSMetaClass
{
};

/* 9828 */
struct __cppobj IOPMPowerSourceList : OSObject
{
  IOPMPowerSource *firstItem;
  unsigned __int64 length;
};

/* 9829 */
struct __cppobj IOPMPowerSourceList::MetaClass : OSMetaClass
{
};

/* 9830 */
struct __cppobj IOPolledInterface : OSObject
{
  IOPolledInterface::ExpansionData *reserved;
};

/* 9831 */
struct IOPolledInterface::ExpansionData
{
  __int8 gap0[1];
};

/* 9832 */
struct __cppobj IOPolledInterface::MetaClass : OSMetaClass
{
};

/* 9833 */
struct IOPolledCompletion
{
  void *target;
  IOPolledCompletionAction action;
  void *parameter;
};

/* 9834 */
typedef void (*IOPolledCompletionAction)(void *, void *, IOReturn, uint64_t_0);

/* 9835 */
struct _OpenFileContext
{
  OSData *extents;
  uint64_t_0 size;
};

/* 9836 */
struct aks_volume_key_t
{
  uint32_t_0 algorithm;
  aks_raw_key_t key;
};

/* 9837 */
struct aks_raw_key_t
{
  uint32_t_0 keybytecount;
  uint8_t_0 keybytes[128];
};

/* 9838 */
struct __cppobj IOCommandPool : OSObject
{
  queue_head_t fQueueHead;
  UInt32 fSleepers;
  IOCommandGate *fSerializer;
  IOCommandPool::ExpansionData *reserved;
};

/* 9839 */
struct IOCommandPool::ExpansionData
{
  __int8 gap0[1];
};

/* 9840 */
struct __cppobj IOCommandPool::MetaClass : OSMetaClass
{
};

/* 9841 */
struct __cppobj IOInterruptEventSource : IOEventSource
{
  IOService *provider;
  int intIndex;
  volatile unsigned int producerCount;
  unsigned int consumerCount;
  bool autoDisable;
  bool explicitDisable;
  IOInterruptEventSource::ExpansionData *reserved;
};

/* 9842 */
struct IOInterruptEventSource::ExpansionData
{
  IOInterruptAccountingData *statistics;
};

/* 9843 */
struct __cppobj IOInterruptEventSource::MetaClass : OSMetaClass
{
};

/* 9844 */
typedef void (*IOInterruptEventSource::Action)(OSObject *, IOInterruptEventSource *, int);

/* 9845 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *IOInterruptEventSource::ActionBlock;

/* 9846 */
struct __cppobj __attribute__((aligned(8))) IODMAEventSource : IOEventSource
{
  IOService *dmaProvider;
  IODMAController *dmaController;
  UInt32 dmaIndex;
  queue_head_t dmaCommandsCompleted;
  IOSimpleLock *dmaCommandsCompletedLock;
  IODMAEventSource::Action dmaCompletionAction;
  IODMAEventSource::Action dmaNotificationAction;
  bool dmaSynchBusy;
};

/* 9847 */
struct __cppobj IODMAController : IOService
{
  IOService *_provider;
  const OSSymbol *_dmaControllerName;
};

/* 9848 */
typedef void (*IODMAEventSource::Action)(OSObject *, IODMAEventSource *, IODMACommand *, IOReturn, IOByteCount, AbsoluteTime);

/* 9849 */
struct __cppobj IODMAEventSource::MetaClass : OSMetaClass
{
};

/* 9850 */
struct __cppobj IODMAController::MetaClass : OSMetaClass
{
};

/* 9851 */
struct __cppobj IOFilterInterruptEventSource : IOInterruptEventSource
{
  IOFilterInterruptEventSource::$C2E4FA19A47F84A76EBA323988BF1E7B _anon_0;
  IOFilterInterruptEventSource::ExpansionData *reserved;
};

/* 9852 */
union IOFilterInterruptEventSource::$C2E4FA19A47F84A76EBA323988BF1E7B
{
  IOFilterInterruptEventSource::Filter filterAction;
  IOFilterInterruptEventSource::FilterBlock filterActionBlock;
};

/* 9853 */
typedef bool (*IOFilterInterruptEventSource::Filter)(OSObject *, IOFilterInterruptEventSource *);

/* 9854 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *IOFilterInterruptEventSource::FilterBlock;

/* 9855 */
struct IOFilterInterruptEventSource::ExpansionData
{
  __int8 gap0[1];
};

/* 9856 */
struct __cppobj IOFilterInterruptEventSource::MetaClass : OSMetaClass
{
};

/* 9857 */
enum IOFilterInterruptEventSource::$CE76D89B8D30EBB96A836DB8F39EECB1 : __int32
{
  kFilterBlock = 0x8,
};

/* 9858 */
struct __cppobj IOTimerEventSource : IOEventSource
{
  void *calloutEntry;
  AbsoluteTime abstime;
  IOTimerEventSource::ExpansionData *reserved;
};

/* 9859 */
struct IOTimerEventSource::ExpansionData
{
  SInt32 calloutGeneration;
  SInt32 calloutGenerationSignaled;
  IOWorkLoop *workLoop;
};

/* 9860 */
struct __cppobj IOTimerEventSource::MetaClass : OSMetaClass
{
};

/* 9861 */
typedef void (*IOTimerEventSource::Action)(OSObject *, IOTimerEventSource *);

/* 9862 */
typedef $A4C8A3830A8CB20F34549D717E19E625 *IOTimerEventSource::ActionBlock;

/* 9863 */
struct __attribute__((aligned(8))) IODMACommandTransferContext
{
  void *buffer;
  UInt64 bufferOffset;
  UInt64 remaining;
  UInt32 op;
};

/* 9864 */
struct IOMDDMAWalkSegmentArgs
{
  UInt64 fOffset;
  UInt64 fIOVMAddr;
  UInt64 fLength;
  UInt8 fMapped;
  UInt64 fMappedBase;
};

/* 9865 */
struct __cppobj __attribute__((aligned(8))) IOInterleavedMemoryDescriptor : IOMemoryDescriptor
{
  IOByteCount _descriptorCapacity;
  UInt32 _descriptorCount;
  IOMemoryDescriptor **_descriptors;
  IOByteCount *_descriptorOffsets;
  IOByteCount *_descriptorLengths;
  bool _descriptorPrepared;
};

/* 9866 */
struct __cppobj IOInterleavedMemoryDescriptor::MetaClass : OSMetaClass
{
};

/* 9867 */
struct IOMapperLock
{
  IOLock *fWaitLock;
};

/* 9868 */
struct __cppobj IOMemoryCursor : OSObject
{
  IOMemoryCursor::SegmentFunction outSeg;
  IOPhysicalLength maxSegmentSize;
  IOPhysicalLength maxTransferSize;
  IOPhysicalLength alignMask;
};

/* 9869 */
typedef void (*IOMemoryCursor::SegmentFunction)(IOMemoryCursor::PhysicalSegment, void *, UInt32);

/* 9870 */
struct IOMemoryCursor::PhysicalSegment
{
  IOPhysicalAddress location;
  IOPhysicalLength length;
};

/* 9871 */
struct __cppobj IOMemoryCursor::MetaClass : OSMetaClass
{
};

/* 9872 */
struct __cppobj IONaturalMemoryCursor : IOMemoryCursor
{
};

/* 9873 */
struct __cppobj IONaturalMemoryCursor::MetaClass : OSMetaClass
{
};

/* 9874 */
struct __cppobj IOBigMemoryCursor : IOMemoryCursor
{
};

/* 9875 */
struct __cppobj IOBigMemoryCursor::MetaClass : OSMetaClass
{
};

/* 9876 */
struct __cppobj IOLittleMemoryCursor : IOMemoryCursor
{
};

/* 9877 */
struct __cppobj IOLittleMemoryCursor::MetaClass : OSMetaClass
{
};

/* 9878 */
enum IOGeneralMemoryDescriptor::memoryReferenceCreate::$D19038AA881FBFFAC2031ABC2407C1FD : __int32
{
  kCapacity = 0x4,
  kCapacityInc = 0x4,
};

/* 9879 */
struct __attribute__((aligned(8))) IOMemoryDescriptorMapAllocRef
{
  vm_map_t map;
  mach_vm_address_t mapped;
  mach_vm_size_t size;
  vm_prot_t prot;
  vm_tag_t tag;
  IOOptionBits options;
};

/* 9880 */
struct ioGMDData
{
  IOMapper *fMapper;
  uint64_t_0 fDMAMapAlignment;
  uint64_t_0 fMappedBase;
  uint64_t_0 fMappedLength;
  uint64_t_0 fPreparationID;
  unsigned int fPageCnt;
  uint8_t_0 fDMAMapNumAddressBits;
  unsigned __int8 fDiscontig : 1;
  unsigned __int8 fCompletionError : 1;
  unsigned __int8 fMappedBaseValid : 1;
  unsigned __int8 _resv : 3;
  unsigned __int8 fDMAAccess : 2;
  upl_page_info_t fPageList[1];
  ioPLBlock fBlocks[1];
};

/* 9881 */
struct ioPLBlock
{
  upl_t fIOPL;
  vm_address_t fPageInfo;
  uint32_t_0 fIOMDOffset;
  ppnum_t fMappedPage;
  unsigned int fPageOffset;
  unsigned int fFlags;
};

/* 9882 */
struct IOMDPersistentInitData
{
  const IOGeneralMemoryDescriptor *fMD;
  IOMemoryReference *fMemRef;
};

/* 9883 */
struct __attribute__((aligned(8))) IOMDDMAMapArgs
{
  IOMapper *fMapper;
  IODMACommand *fCommand;
  IODMAMapSpecification fMapSpec;
  uint64_t_0 fOffset;
  uint64_t_0 fLength;
  uint64_t_0 fAlloc;
  uint64_t_0 fAllocLength;
  uint8_t_0 fMapContig;
};

/* 9884 */
struct __attribute__((aligned(8))) IOGeneralMemoryDescriptor::dmaCommandOperation::InternalState
{
  IOMDDMAWalkSegmentArgs fIO;
  UInt fOffset2Index;
  UInt fIndex;
  UInt fNextOffset;
};

/* 9885 */
struct __cppobj IOSubMemoryDescriptor : IOMemoryDescriptor
{
  IOMemoryDescriptor *_parent;
  IOByteCount _start;
};

/* 9886 */
struct __cppobj IOSubMemoryDescriptor::MetaClass : OSMetaClass
{
};

/* 9887 */
struct __cppobj __attribute__((aligned(4))) IOMultiMemoryDescriptor : IOMemoryDescriptor
{
  IOMemoryDescriptor **_descriptors;
  UInt32 _descriptorsCount;
  bool _descriptorsIsAllocated;
};

/* 9888 */
struct __cppobj IOMultiMemoryDescriptor::MetaClass : OSMetaClass
{
};

/* 9889 */
struct IOGeneralMemoryDescriptor::serialize::SerData
{
  user_addr_t address;
  user_size_t length;
};

/* 9890 */
struct __block_literal_1_2
{
  void *__isa;
  int __flags;
  int __reserved;
  bool (*__FuncPtr)(OSObject *);
  __block_descriptor_withcopydispose *__descriptor;
  $19EA86E5D6B9DC1B30EA70A0845B3A79 *result;
  IOMemoryDescriptor *this;
  IOMemoryMap *mapping;
  mach_vm_size_t offset;
};

/* 9891 */
struct __block_descriptor_withcopydispose
{
  unsigned __int64 reserved;
  unsigned __int64 Size;
  void **CopyFuncPtr;
  void **DestroyFuncPtr;
};

/* 9892 */
struct $19EA86E5D6B9DC1B30EA70A0845B3A79
{
  void *__isa;
  void *__forwarding;
  int __flags;
  int __size;
  IOMemoryMap *result;
};

/* 9893 */
enum IOMultiMemoryDescriptor::initWithDescriptors::$A0AFB5CB50BAA07E64939E34E3159CF8 : __int32
{
  kCopyFlags = 0x400,
};

/* 9894 */
struct __cppobj IODTPlatformExpert : IOPlatformExpert
{
  IODTNVRAM *dtNVRAM;
  IODTPlatformExpert::ExpansionData *iodtpe_reserved;
};

/* 9895 */
struct IODTPlatformExpert::ExpansionData
{
  __int8 gap0[1];
};

/* 9896 */
struct __cppobj IODTPlatformExpert::MetaClass : OSMetaClass
{
};

/* 9897 */
struct __cppobj IOPlatformExpertDevice : IOService
{
  IOWorkLoop *workLoop;
  IOPlatformExpertDevice::ExpansionData *ioped_reserved;
};

/* 9898 */
struct IOPlatformExpertDevice::ExpansionData
{
  __int8 gap0[1];
};

/* 9899 */
struct __cppobj IOPlatformExpertDevice::MetaClass : OSMetaClass
{
};

/* 9900 */
struct __cppobj IOPlatformDevice : IOService
{
  IOPlatformDevice::ExpansionData *iopd_reserved;
};

/* 9901 */
struct IOPlatformDevice::ExpansionData
{
  __int8 gap0[1];
};

/* 9902 */
struct __cppobj IOPlatformDevice::MetaClass : OSMetaClass
{
};

/* 9903 */
struct __cppobj IOPanicPlatform : IOPlatformExpert
{
};

/* 9904 */
struct __cppobj IOPanicPlatform::MetaClass : OSMetaClass
{
};

/* 9905 */
enum coprocessor_type_t : __int32
{
  kCoprocessorVersionNone = 0x0,
  kCoprocessorVersion1 = 0x10000,
  kCoprocessorVersion2 = 0x20000,
};

/* 9906 */
struct __cppobj IOCPUInterruptController : IOInterruptController
{
  int enabledCPUs;
  int numCPUs;
  int numSources;
  IOCPUInterruptController::ExpansionData *iocpuic_reserved;
};

/* 9907 */
struct IOCPUInterruptController::ExpansionData
{
  __int8 gap0[1];
};

/* 9908 */
struct __cppobj IOCPUInterruptController::MetaClass : OSMetaClass
{
};

/* 9909 */
struct __cppobj IOCPU : IOService
{
  OSArray *_cpuGroup;
  UInt32 _cpuNumber;
  UInt32 _cpuState;
  IOService *cpuNub;
  processor_t machProcessor;
  ipi_handler_t ipi_handler;
  IOCPU::ExpansionData *iocpu_reserved;
};

/* 9910 */
typedef void (*ipi_handler_t)(void);

/* 9911 */
struct IOCPU::ExpansionData
{
  __int8 gap0[1];
};

/* 9912 */
struct __cppobj IOCPU::MetaClass : OSMetaClass
{
};

/* 9913 */
typedef iocpu_platform_action_entry iocpu_platform_action_entry_t;

/* 9914 */
struct iocpu_platform_action_entry
{
  queue_chain_t link;
  iocpu_platform_action_t action;
  int32_t priority;
  const char *name;
  void *refcon0;
  void *refcon1;
  boolean_t callout_in_progress;
  iocpu_platform_action_entry *alloc_list;
};

/* 9915 */
typedef kern_return_t (*iocpu_platform_action_t)(void *, void *, uint32_t_0, void *, void *, void *, const char *);

/* 9916 */
typedef PE_panic_save_context PE_panic_save_context_t;

/* 9917 */
struct PE_panic_save_context
{
  void *psc_buffer;
  uint32_t_0 psc_offset;
  uint32_t_0 psc_length;
};

/* 9918 */
typedef OFVariable OFVariable_0;

/* 9919 */
struct __attribute__((aligned(8))) OFVariable
{
  const char *variableName;
  UInt32 variableType;
  UInt32 variablePerm;
  SInt32 variableOffset;
};

/* 9920 */
struct __cppobj __attribute__((aligned(4))) IOMachPort : OSObject
{
  OSObject *object;
  ipc_port_t port;
  UInt32 mscount;
  UInt8 holdDestroy;
};

/* 9921 */
struct __cppobj IOMachPort::MetaClass : OSMetaClass
{
};

/* 9922 */
struct __cppobj IOUserIterator : OSIterator
{
  OSObject *userIteratorObject;
  IOLock *lock;
};

/* 9923 */
struct __cppobj IOUserIterator::MetaClass : OSMetaClass
{
};

/* 9924 */
struct __cppobj IOUserNotification : IOUserIterator
{
};

/* 9925 */
struct __cppobj IOUserNotification::MetaClass : OSMetaClass
{
};

/* 9926 */
struct __cppobj __attribute__((aligned(8))) IOServiceUserNotification : IOUserNotification
{
  IOServiceUserNotification::PingMsg *pingMsg;
  vm_size_t msgSize;
  OSArray *newSet;
  bool armed;
  bool ipcLogged;
};

/* 9927 */
struct IOServiceUserNotification::PingMsg
{
  mach_msg_header_t msgHdr;
  OSNotificationHeader64 notifyHeader;
};

/* 9928 */
struct OSNotificationHeader64
{
  mach_msg_size_t size;
  natural_t type;
  OSAsyncReference64 reference;
  unsigned __int8 content[];
};

/* 9929 */
typedef io_user_reference_t OSAsyncReference64[8];

/* 9930 */
struct __cppobj IOServiceUserNotification::MetaClass : OSMetaClass
{
};

/* 9931 */
enum IOServiceUserNotification::$99D7BD564D1C4C34C402A74954D3DCCF : __int32
{
  kMaxOutstanding = 0x400,
};

/* 9932 */
struct __cppobj __attribute__((aligned(8))) IOServiceMessageUserNotification : IOUserNotification
{
  IOServiceMessageUserNotification::PingMsg *pingMsg;
  vm_size_t msgSize;
  uint8_t_0 clientIs64;
  int owningPID;
  bool ipcLogged;
};

/* 9933 */
struct __attribute__((packed)) __attribute__((aligned(4))) IOServiceMessageUserNotification::PingMsg
{
  mach_msg_header_t msgHdr;
  mach_msg_body_t msgBody;
  mach_msg_port_descriptor_t ports[1];
  OSNotificationHeader64 notifyHeader;
};

/* 9934 */
struct __cppobj IOServiceMessageUserNotification::MetaClass : OSMetaClass
{
};

/* 9935 */
enum is_io_registry_entry_get_path_ool::$4A3EA2AAA227D8BFD2CE676307DAF370 : __int32
{
  kMaxPath = 0x4000,
};

/* 9936 */
struct __attribute__((packed)) __attribute__((aligned(4))) IOServiceInterestContent64
{
  natural_t messageType;
  io_user_reference_t messageArgument[1];
};

/* 9937 */
typedef proc_4 *proc_t_4;

/* 9938 */
struct IOUserClientOwner
{
  task_t task;
  queue_chain_t taskLink;
  IOUserClient *uc;
  queue_chain_t ucLink;
};

/* 9939 */
struct GetPropertiesEditorRef
{
  kauth_cred_t_0 cred;
  IORegistryEntry *entry;
  OSCollection *root;
};

/* 9940 */
typedef char *io_buf_ptr_t;

/* 9941 */
struct IOUserClient::_sendAsyncResult64::ReplyMsg
{
  mach_msg_header_t msgHdr;
  IOUserClient::_sendAsyncResult64::ReplyMsg::$833BD3EEBD8862F3920911221EA7206A m;
};

/* 9942 */
union IOUserClient::_sendAsyncResult64::ReplyMsg::$833BD3EEBD8862F3920911221EA7206A
{
  IOUserClient::_sendAsyncResult64::ReplyMsg::$833BD3EEBD8862F3920911221EA7206A::$EF016E32C52D6873D04FEB314591BF9F msg32;
  IOUserClient::_sendAsyncResult64::ReplyMsg::$833BD3EEBD8862F3920911221EA7206A::$2ECF7210BD3A22A4B4D5512648915EEF msg64;
};

/* 9943 */
struct IOUserClient::_sendAsyncResult64::ReplyMsg::$833BD3EEBD8862F3920911221EA7206A::$EF016E32C52D6873D04FEB314591BF9F
{
  OSNotificationHeader notifyHdr;
  IOAsyncCompletionContent asyncContent;
  uint32_t_0 args[16];
};

/* 9944 */
struct OSNotificationHeader
{
  mach_msg_size_t size;
  natural_t type;
  OSAsyncReference reference;
  unsigned __int8 content[];
};

/* 9945 */
typedef natural_t OSAsyncReference[8];

/* 9946 */
struct __attribute__((packed)) __attribute__((aligned(4))) IOAsyncCompletionContent
{
  IOReturn result;
  void *args[];
};

/* 9947 */
struct __attribute__((aligned(8))) IOUserClient::_sendAsyncResult64::ReplyMsg::$833BD3EEBD8862F3920911221EA7206A::$2ECF7210BD3A22A4B4D5512648915EEF
{
  OSNotificationHeader64 notifyHdr;
  IOAsyncCompletionContent asyncContent;
  __attribute__((packed)) __attribute__((aligned(1))) io_user_reference_t args[16];
};

/* 9948 */
typedef io_object_t_0 io_service_t;

/* 9949 */
typedef io_object_t_0 io_iterator_t;

/* 9950 */
typedef natural_t io_async_ref_t[8];

/* 9951 */
typedef int io_scalar_inband_t[16];

/* 9952 */
typedef io_object_t_0 io_connect_t_0;

/* 9953 */
typedef io_user_scalar_t io_scalar_inband64_t[16];

/* 9954 */
typedef io_user_reference_t io_async_ref64_t[8];

/* 9955 */
struct iokit_user_client_trap_args
{
  void *userClientRef;
  uint32_t_0 index;
  char index_r_[4];
  void *p1;
  void *p2;
  void *p3;
  void *p4;
  void *p5;
  void *p6;
  char p6_r_[];
};

/* 9956 */
struct __cppobj __attribute__((aligned(8))) IOKitDiagnostics : OSObject
{
};

/* 9957 */
struct __cppobj IOKitDiagnostics::MetaClass : OSMetaClass
{
};

/* 9958 */
struct __cppobj IOKitDiagnosticsClient : IOUserClient
{
};

/* 9959 */
struct __cppobj IOKitDiagnosticsClient::MetaClass : OSMetaClass
{
};

/* 9960 */
typedef IOKitDiagnosticsParameters IOKitDiagnosticsParameters_0;

/* 9961 */
struct __attribute__((aligned(8))) IOKitDiagnosticsParameters
{
  size_t_0 size;
  uint64_t_0 value;
  uint32_t_0 options;
  uint32_t_0 tag;
  uint32_t_0 zsize;
  uint32_t_0 reserved[8];
};

/* 9962 */
struct __cppobj IODataQueue : OSObject
{
  IODataQueueMemory *dataQueue;
  void *notifyMsg;
};

/* 9963 */
typedef _IODataQueueMemory IODataQueueMemory;

/* 9964 */
struct _IODataQueueMemory
{
  UInt32 queueSize;
  volatile UInt32 head;
  volatile UInt32 tail;
  IODataQueueEntry queue[1];
};

/* 9965 */
typedef _IODataQueueEntry IODataQueueEntry;

/* 9966 */
struct _IODataQueueEntry
{
  UInt32 size;
  UInt8 data[4];
};

/* 9967 */
struct __cppobj IODataQueue::MetaClass : OSMetaClass
{
};

/* 9968 */
struct __cppobj IOSharedDataQueue : IODataQueue
{
  IOSharedDataQueue::ExpansionData *_reserved;
};

/* 9969 */
struct IOSharedDataQueue::ExpansionData
{
  UInt32 queueSize;
};

/* 9970 */
struct __cppobj IOSharedDataQueue::MetaClass : OSMetaClass
{
};

/* 9971 */
typedef _IODataQueueAppendix IODataQueueAppendix;

/* 9972 */
struct __attribute__((packed)) __attribute__((aligned(4))) _IODataQueueAppendix
{
  UInt32 version;
  mach_msg_header_t msgh;
};

/* 9973 */
struct IOStatistics
{
  __int8 gap0[1];
};

/* 9974 */
typedef IOStatistics::KextTree IOStatistics::KextTreeHead;

/* 9975 */
struct IOStatistics::KextTree
{
  KextNode *rbh_root;
};

/* 9976 */
typedef IOStatistics::KextAddressTree IOStatistics::KextAddressTreeHead;

/* 9977 */
struct IOStatistics::KextAddressTree
{
  KextNode *rbh_root;
};

/* 9978 */
typedef IOStatistics::ClassTree IOStatistics::ClassTreeHead;

/* 9979 */
struct IOStatistics::ClassTree
{
  ClassNode *rbh_root;
};

/* 9980 */
typedef IOStatisticsGlobal IOStatisticsGlobal_0;

/* 9981 */
struct IOStatisticsGlobal
{
  uint32_t_0 kextCount;
  uint32_t_0 classCount;
  uint32_t_0 workloops;
};

/* 9982 */
typedef IOStatisticsKext IOStatisticsKext_0;

/* 9983 */
struct IOStatisticsKext
{
  uint32_t_0 loadTag;
  uint32_t_0 loadSize;
  uint32_t_0 wiredSize;
  uint32_t_0 classes;
  uint32_t_0 classIndexes[];
};

/* 9984 */
typedef IOStatisticsMemory IOStatisticsMemory_0;

/* 9985 */
struct IOStatisticsMemory
{
  uint32_t_0 allocatedSize;
  uint32_t_0 freedSize;
  uint32_t_0 allocatedAlignedSize;
  uint32_t_0 freedAlignedSize;
  uint32_t_0 allocatedContiguousSize;
  uint32_t_0 freedContiguousSize;
  uint32_t_0 allocatedPageableSize;
  uint32_t_0 freedPageableSize;
};

/* 9986 */
typedef IOStatisticsClass IOStatisticsClass_0;

/* 9987 */
struct IOStatisticsClass
{
  uint32_t_0 classID;
  uint32_t_0 superClassID;
  uint32_t_0 classSize;
};

/* 9988 */
typedef IOStatisticsCounter IOStatisticsCounter_0;

/* 9989 */
struct IOStatisticsCounter
{
  uint32_t_0 classID;
  uint32_t_0 classInstanceCount;
  IOStatisticsUserClients userClientStatistics;
  IOStatisticsInterruptEventSources interruptEventSourceStatistics;
  IOStatisticsInterruptEventSources filterInterruptEventSourceStatistics;
  IOStatisticsTimerEventSources timerEventSourceStatistics;
  IOStatisticsCommandGates commandGateStatistics;
  IOStatisticsCommandQueues commandQueueStatistics;
  IOStatisticsDerivedEventSources derivedEventSourceStatistics;
};

/* 9990 */
struct IOStatisticsUserClients
{
  uint32_t_0 created;
  uint32_t_0 clientCalls;
};

/* 9991 */
struct IOStatisticsInterruptEventSources
{
  uint32_t_0 created;
  uint32_t_0 produced;
  uint32_t_0 checksForWork;
};

/* 9992 */
struct __attribute__((packed)) __attribute__((aligned(4))) IOStatisticsTimerEventSources
{
  uint32_t_0 created;
  uint32_t_0 openGateCalls;
  uint32_t_0 closeGateCalls;
  uint64_t_0 timeOnGate;
  uint32_t_0 timeouts;
  uint32_t_0 checksForWork;
};

/* 9993 */
struct IOStatisticsCommandGates
{
  uint32_t_0 created;
  uint32_t_0 openGateCalls;
  uint32_t_0 closeGateCalls;
  __attribute__((packed)) __attribute__((aligned(1))) uint64_t_0 timeOnGate;
  uint32_t_0 actionCalls;
};

/* 9994 */
struct IOStatisticsCommandQueues
{
  uint32_t_0 created;
  uint32_t_0 actionCalls;
};

/* 9995 */
struct __attribute__((packed)) __attribute__((aligned(4))) IOStatisticsDerivedEventSources
{
  uint32_t_0 created;
  uint32_t_0 openGateCalls;
  uint32_t_0 closeGateCalls;
  uint64_t_0 timeOnGate;
};

/* 9996 */
typedef IOStatisticsKextIdentifier IOStatisticsKextIdentifier_0;

/* 9997 */
struct IOStatisticsKextIdentifier
{
  char identifier[64];
};

/* 9998 */
typedef IOStatisticsClassName IOStatisticsClassName_0;

/* 9999 */
struct IOStatisticsClassName
{
  char name[64];
};

/* 10000 */
typedef IOStatisticsWorkLoop IOStatisticsWorkLoop_0;

/* 10001 */
struct __attribute__((packed)) __attribute__((aligned(4))) IOStatisticsWorkLoop
{
  uint32_t_0 attachedEventSources;
  uint64_t_0 timeOnGate;
  uint32_t_0 kextLoadTag;
  uint32_t_0 dependentKexts;
  uint32_t_0 dependentKextLoadTags[];
};

/* 10002 */
typedef IOStatisticsUserClientHeader IOStatisticsUserClientHeader_0;

/* 10003 */
struct IOStatisticsUserClientHeader
{
  uint32_t_0 sig;
  uint32_t_0 ver;
  uint32_t_0 seq;
  uint32_t_0 processes;
  IOStatisticsUserClientCall userClientCalls[];
};

/* 10004 */
struct IOStatisticsUserClientCall
{
  char processName[20];
  int32_t pid;
  uint32_t_0 calls;
};

/* 10005 */
typedef IOEventSourceCounter IOEventSourceCounter_0;

/* 10006 */
typedef IOWorkLoopCounter IOWorkLoopCounter_0;

/* 10007 */
typedef IOStatisticsHeader IOStatisticsHeader_0;

/* 10008 */
struct IOStatisticsHeader
{
  uint32_t_0 sig;
  uint32_t_0 ver;
  uint32_t_0 seq;
  uint32_t_0 globalStatsOffset;
  uint32_t_0 kextStatsOffset;
  uint32_t_0 memoryStatsOffset;
  uint32_t_0 classStatsOffset;
  uint32_t_0 counterStatsOffset;
  uint32_t_0 kextIdentifiersOffset;
  uint32_t_0 classNamesOffset;
};

/* 10009 */
typedef IOStatisticsWorkLoopHeader IOStatisticsWorkLoopHeader_0;

/* 10010 */
struct IOStatisticsWorkLoopHeader
{
  uint32_t_0 sig;
  uint32_t_0 ver;
  uint32_t_0 seq;
  uint32_t_0 workloopCount;
  IOStatisticsWorkLoop workLoopStats;
};

/* 10011 */
typedef IOUserClientProcessEntry IOUserClientProcessEntry_0;

/* 10012 */
typedef IOStatisticsUserClients IOStatisticsUserClients_0;

/* 10013 */
typedef IOStatisticsInterruptEventSources IOStatisticsInterruptEventSources_0;

/* 10014 */
typedef IOStatisticsTimerEventSources IOStatisticsTimerEventSources_0;

/* 10015 */
typedef IOStatisticsCommandGates IOStatisticsCommandGates_0;

/* 10016 */
typedef IOStatisticsCommandQueues IOStatisticsCommandQueues_0;

/* 10017 */
typedef IOStatisticsDerivedEventSources IOStatisticsDerivedEventSources_0;

/* 10018 */
struct __cppobj IOStateReporter : IOReporter
{
  int *_currentStates;
  uint64_t_0 *_lastUpdateTimes;
  int *_swapCurrentStates;
  uint64_t_0 *_swapLastUpdateTimes;
};

/* 10019 */
struct __cppobj IOStateReporter::MetaClass : OSMetaClass
{
};

/* 10020 */
enum IOStateReporter::valueSelector : __int32
{
  kInTransitions = 0x0,
  kResidencyTime = 0x1,
  kLastTransitionTime = 0x2,
};

/* 10021 */
struct __cppobj IOHistogramReporter : IOReporter
{
  int _segmentCount;
  int64_t *_bucketBounds;
  int _bucketCount;
  IOHistogramSegmentConfig *_histogramSegmentsConfig;
};

/* 10022 */
struct IOHistogramSegmentConfig
{
  uint32_t_0 base_bucket_width;
  uint32_t_0 scale_flag;
  uint32_t_0 segment_idx;
  uint32_t_0 segment_bucket_count;
};

/* 10023 */
struct __cppobj IOHistogramReporter::MetaClass : OSMetaClass
{
};

/* 10024 */
struct __cppobj IOReportLegend : OSObject
{
  OSArray *_reportLegend;
};

/* 10025 */
struct __cppobj IOReportLegend::MetaClass : OSMetaClass
{
};

/* 10026 */
struct __cppobj IORTC : IOService
{
  IORTC::ExpansionData *iortc_reserved;
};

/* 10027 */
struct IORTC::ExpansionData
{
  __int8 gap0[1];
};

/* 10028 */
struct __cppobj IORTC::MetaClass : OSMetaClass
{
};

/* 10029 */
typedef int BOOL;

/* 10030 */
struct __cppobj RootDomainUserClient : IOUserClient
{
  IOPMrootDomain *fOwner;
  task_t fOwningTask;
};

/* 10031 */
struct __cppobj RootDomainUserClient::MetaClass : OSMetaClass
{
};

/* 10032 */
struct __cppobj IOWatchDogTimer : IOService
{
  IONotifier *notifier;
  IOWatchDogTimer::ExpansionData *reserved;
};

/* 10033 */
struct IOWatchDogTimer::ExpansionData
{
  __int8 gap0[1];
};

/* 10034 */
struct __cppobj IOWatchDogTimer::MetaClass : OSMetaClass
{
};

/* 10035 */
typedef IOPowerStateChangeNotification_0 sleepWakeNote;

/* 10036 */
typedef IOPowerStateChangeNotification IOPowerStateChangeNotification_0;

/* 10037 */
struct IOPowerStateChangeNotification
{
  void *powerRef;
  unsigned __int64 returnValue;
  unsigned __int64 stateNumber;
  IOPMPowerFlags stateFlags;
};

/* 10038 */
struct __cppobj IOPerfControlClient : OSObject
{
  IOPerfControlClient::PerfControllerInterface interface;
  IOLock *interfaceLock;
  OSSet *deviceRegistrationList;
  IOPerfControlClient::WorkTableEntry workTable[1024];
  size_t_0 workTableNextIndex;
  IOSimpleLock *workTableLock;
};

/* 10039 */
struct IOPerfControlClient::PerfControllerInterface
{
  uint64_t_0 version;
  IOPerfControlClient::PerfControllerInterface::RegisterDeviceFunction registerDevice;
  IOPerfControlClient::PerfControllerInterface::RegisterDeviceFunction unregisterDevice;
  IOPerfControlClient::PerfControllerInterface::WorkCanSubmitFunction workCanSubmit;
  IOPerfControlClient::PerfControllerInterface::WorkSubmitFunction workSubmit;
  IOPerfControlClient::PerfControllerInterface::WorkBeginFunction workBegin;
  IOPerfControlClient::PerfControllerInterface::WorkEndFunction workEnd;
};

/* 10040 */
typedef IOReturn (*IOPerfControlClient::PerfControllerInterface::RegisterDeviceFunction)(IOService *);

/* 10041 */
typedef bool (*IOPerfControlClient::PerfControllerInterface::WorkCanSubmitFunction)(IOService *, IOPerfControlClient::PerfControllerInterface::WorkState *, IOPerfControlClient::WorkSubmitArgs *);

/* 10042 */
struct __attribute__((aligned(8))) IOPerfControlClient::PerfControllerInterface::WorkState
{
  uint64_t_0 thread_group_id;
  void *thread_group_data;
  void *work_data;
  uint32_t_0 work_data_size;
};

/* 10043 */
struct IOPerfControlClient::WorkSubmitArgs
{
  uint32_t_0 version;
  uint32_t_0 size;
  uint64_t_0 submit_time;
  uint64_t_0 reserved[4];
  void *driver_data;
};

/* 10044 */
typedef void (*IOPerfControlClient::PerfControllerInterface::WorkSubmitFunction)(IOService *, uint64_t_0, IOPerfControlClient::PerfControllerInterface::WorkState *, IOPerfControlClient::WorkSubmitArgs *);

/* 10045 */
typedef void (*IOPerfControlClient::PerfControllerInterface::WorkBeginFunction)(IOService *, uint64_t_0, IOPerfControlClient::PerfControllerInterface::WorkState *, IOPerfControlClient::WorkBeginArgs *);

/* 10046 */
struct IOPerfControlClient::WorkBeginArgs
{
  uint32_t_0 version;
  uint32_t_0 size;
  uint64_t_0 begin_time;
  uint64_t_0 reserved[4];
  void *driver_data;
};

/* 10047 */
typedef void (*IOPerfControlClient::PerfControllerInterface::WorkEndFunction)(IOService *, uint64_t_0, IOPerfControlClient::PerfControllerInterface::WorkState *, IOPerfControlClient::WorkEndArgs *, bool);

/* 10048 */
struct IOPerfControlClient::WorkEndArgs
{
  uint32_t_0 version;
  uint32_t_0 size;
  uint64_t_0 end_time;
  uint64_t_0 reserved[4];
  void *driver_data;
};

/* 10049 */
struct __attribute__((aligned(8))) IOPerfControlClient::WorkTableEntry
{
  thread_group *thread_group;
  bool started;
  uint8_t_0 perfcontrol_data[32];
};

/* 10050 */
struct __cppobj IOPerfControlClient::MetaClass : OSMetaClass
{
};

/* 10051 */
struct IOPerfControlClient::init::$7EF7C94BEAB75C6CEF4ADFB99B570420
{
  __int8 gap0[1];
};

/* 10052 */
struct __cppobj IOSKRegionMapper : OSObject
{
  IOSKMapper *fMapper;
  IOSKRegion *fRegion;
  IOMemoryMap **fMemoryMaps;
  IOSKCount fMemoryMapCount;
  IOSKOffset fRegionOffset;
};

/* 10053 */
typedef uint32_t_0 IOSKSize;

/* 10054 */
struct IOSKRegion::Segment
{
  IOSKBuffer *fBuffer;
};

/* 10055 */
typedef IOSKMemoryBuffer IOSKBuffer;

/* 10056 */
struct __cppobj __attribute__((aligned(8))) IOSKMemoryBuffer : IOBufferMemoryDescriptor:1824
{
  IOSKMemoryBufferSpec fSpec;
};

/* 10057 */
struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) IOBufferMemoryDescriptor:1824 : IOGeneralMemoryDescriptor
{
  IOBufferMemoryDescriptor::ExpansionData *reserved;
  void *_buffer;
  vm_size_t _capacity;
  vm_offset_t _alignment;
  IOOptionBits _options;
  _BYTE gapD4[4];
  uintptr_t _internalReserved;
  unsigned int _internalFlags;
};

/* 10058 */
typedef uint32_t_0 IOSKCount;

/* 10059 */
typedef uint32_t_0 IOSKOffset;

/* 10060 */
struct __cppobj IOSKRegionMapper::MetaClass : OSMetaClass
{
};

/* 10061 */
struct __cppobj IOSKMapper::MetaClass : OSMetaClass
{
};

/* 10062 */
struct __cppobj IOSKArena::MetaClass : OSMetaClass
{
};

/* 10063 */
struct __cppobj IOSKRegion::MetaClass : OSMetaClass
{
};

/* 10064 */
struct IOSKRegion::ArenaEntry
{
  IOSKArena *fArena;
  IOSKOffset fRegionOffset;
  IOSKIndex fRegionIndex;
};

/* 10065 */
typedef uint32_t_0 IOSKIndex;

/* 10066 */
struct __cppobj IOSKMemoryBuffer::MetaClass : OSMetaClass
{
};

/* 10067 */
struct __cppobj __attribute__((aligned(4))) IOSKMemoryArray : IOMultiMemoryDescriptor
{
};

/* 10068 */
struct __cppobj IOSKMemoryArray::MetaClass : OSMetaClass
{
};

/* 10069 */
typedef IOSKMemoryRef IOSKMemoryArrayRef;

/* 10070 */
typedef IOMemoryMap *IOSKMemoryMapRef;

/* 10071 */
struct __cppobj IOSyncer : OSObject
{
  IOSimpleLock *guardLock;
  volatile bool threadMustStop;
  IOReturn fResult;
};

/* 10072 */
struct __cppobj IOSyncer::MetaClass : OSMetaClass
{
};

/* 10073 */
struct __cppobj __attribute__((aligned(8))) PMHaltWorker : OSObject
{
  IOService *service;
  AbsoluteTime startTime;
  int depth;
  int visits;
  IOLock *lock;
  bool timeout;
};

/* 10074 */
struct __cppobj PMHaltWorker::MetaClass : OSMetaClass
{
};

/* 10075 */
struct HaltRestartApplierContext
{
  IOPMrootDomain *RootDomain;
  unsigned __int64 PowerState;
  IOPMPowerFlags PowerFlags;
  UInt32 MessageType;
  UInt32 Counter;
  const char *LogString;
  shutdownPhase_t phase;
  IOServiceInterestHandler handler;
};

/* 10076 */
enum shutdownPhase_t : __int32
{
  kNotifyDone = 0x0,
  kNotifyPriorityClients = 0x10,
  kNotifyPowerPlaneDrivers = 0x20,
  kNotifyHaltRestartAction = 0x30,
  kQuiescePM = 0x40,
};

/* 10077 */
struct __cppobj IOPMServiceInterestNotifier : _IOServiceInterestNotifier:608
{
  uint32_t_0 ackTimeoutCnt;
  uint32_t_0 msgType;
  uint64_t_0 uuid0;
  uint64_t_0 uuid1;
  const OSSymbol *identifier;
};

/* 10078 */
struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) _IOServiceInterestNotifier:608 : IONotifier
{
  _BYTE gapC[4];
  queue_chain_t chain;
  IOServiceInterestHandler handler;
  void *target;
  void *ref;
  queue_head_t handlerInvocations;
  IOOptionBits state;
};

/* 10079 */
struct __cppobj IOPMServiceInterestNotifier::MetaClass : OSMetaClass
{
};

/* 10080 */
struct __cppobj IORootParent : IOService
{
};

/* 10081 */
struct __cppobj IORootParent::MetaClass : OSMetaClass
{
};

/* 10082 */
struct swd_stackshot_compressed_data
{
  z_output_func zoutput;
  size_t_0 zipped;
  uint64_t_0 totalbytes;
  uint64_t_0 lastpercent;
  IOReturn error;
  unsigned int outremain;
  unsigned int outlen;
  unsigned int writes;
  Bytef *outbuf;
};

/* 10083 */
struct PMStatsStruct
{
  PMStatsBounds hibWrite;
  PMStatsBounds hibRead;
};

/* 10084 */
struct PMStatsBounds
{
  uint64_t_0 start;
  uint64_t_0 stop;
};

/* 10085 */
typedef IOReturn (*IOPMSystemSleepPolicyHandler)(void *, const IOPMSystemSleepPolicyVariables *, IOPMSystemSleepParameters *);

/* 10086 */
struct __attribute__((aligned(8))) IOPMSystemSleepPolicyVariables
{
  uint32_t_0 signature;
  uint32_t_0 version;
  uint64_t_0 currentCapability;
  uint64_t_0 highestCapability;
  uint64_t_0 sleepFactors;
  uint32_t_0 sleepReason;
  uint32_t_0 sleepPhase;
  uint32_t_0 hibernateMode;
  uint32_t_0 standbyDelay;
  uint32_t_0 standbyTimer;
  uint32_t_0 poweroffDelay;
  uint32_t_0 scheduledAlarms;
  uint32_t_0 poweroffTimer;
  uint32_t_0 reserved[49];
};

/* 10087 */
enum pmioctlVarType_t : __int32
{
  vUnknown = 0x0,
  vBool = 0x1,
  vInt = 0x2,
  vUInt = 0x3,
  vChars = 0x4,
  vInvalid = 0xFFFFFFFF,
};

/* 10088 */
struct AggressivesRequest
{
  queue_chain_t chain;
  uint32_t_0 options;
  uint32_t_0 dataType;
  AggressivesRequest::$A3BDD1648184B840D85CC6BF54790985 data;
};

/* 10089 */
union __attribute__((aligned(8))) AggressivesRequest::$A3BDD1648184B840D85CC6BF54790985
{
  IOService *service;
  AggressivesRecord record;
};

/* 10090 */
struct __attribute__((packed)) __attribute__((aligned(4))) IOHistReportInfo
{
  int bucketWidth;
  IOReportElement elem[];
};

/* 10091 */
struct IOHistogramReportValues
{
  uint64_t_0 bucket_hits;
  int64_t bucket_min;
  int64_t bucket_max;
  int64_t bucket_sum;
};

/* 10092 */
struct IOPMSystemCapabilityChangeParameters
{
  uint32_t_0 notifyRef;
  uint32_t_0 maxWaitForReply;
  uint32_t_0 changeFlags;
  uint32_t_0 __reserved1;
  uint32_t_0 fromCapabilities;
  uint32_t_0 toCapabilities;
  uint32_t_0 __reserved2[4];
};

/* 10093 */
struct PMSettingCallEntry
{
  queue_chain_t link;
  thread_t thread;
};

/* 10094 */
struct IOPMSystemSleepPolicyTable
{
  uint32_t_0 signature;
  uint16_t version;
  uint16_t entryCount;
  IOPMSystemSleepPolicyEntry entries[];
};

/* 10095 */
struct IOPMSystemSleepPolicyEntry
{
  uint32_t_0 factorMask;
  uint32_t_0 factorBits;
  uint32_t_0 sleepFlags;
  uint32_t_0 wakeEvents;
};

/* 10096 */
struct __attribute__((aligned(4))) swd_hdr
{
  uint32_t_0 signature;
  uint32_t_0 alloc_size;
  uint32_t_0 crc;
  uint32_t_0 spindump_offset;
  uint32_t_0 spindump_size;
  uint8_t_0 is_osx_watchdog;
  char UUID[44];
  char spindump_status[24];
  char PMStatusCode[32];
  char reason[32];
};

/* 10097 */
union $<20731163,1>::$0322512DD7B21439E8C2B77BBA795C77
{
  $<20731163,1>::$0322512DD7B21439E8C2B77BBA795C77::$50525BCF2FA5ADD6408098308BD8AB22 bit;
  uint32_t_0 u32;
};

/* 10098 */
struct $<20731163,1>::$0322512DD7B21439E8C2B77BBA795C77::$50525BCF2FA5ADD6408098308BD8AB22
{
  __int32 idleSleepEnabled : 1;
  __int32 idleSleepDisabled : 1;
  __int32 displaySleep : 1;
  __int32 sleepDelayChanged : 1;
  __int32 evaluateDarkWake : 1;
  __int32 adjustPowerState : 1;
  __int32 userBecameInactive : 1;
};

/* 10099 */
typedef pmioctlVaribleInfo pmioctlVariableInfo_t;

/* 10100 */
struct __attribute__((packed)) __attribute__((aligned(4))) pmioctlVaribleInfo
{
  uint32_t_0 varID;
  uint8_t_0 varName[17];
  __attribute__((aligned(4))) pmioctlVarType_t varType;
  uint64_t_0 varInitValue;
  uint64_t_0 varCurValue;
};

/* 10101 */
struct vnode_attr_0
{
  uint64_t_0 va_supported;
  uint64_t_0 va_active;
  int va_vaflags;
  dev_t va_rdev;
  uint64_t_0 va_nlink;
  uint64_t_0 va_total_size;
  uint64_t_0 va_total_alloc;
  uint64_t_0 va_data_size;
  uint64_t_0 va_data_alloc;
  uint32_t_0 va_iosize;
  uid_t va_uid;
  gid_t va_gid;
  mode_t va_mode;
  uint32_t_0 va_flags;
  kauth_acl *va_acl;
  timespec va_create_time;
  timespec va_access_time;
  timespec va_modify_time;
  timespec va_change_time;
  timespec va_backup_time;
  uint64_t_0 va_fileid;
  uint64_t_0 va_linkid;
  uint64_t_0 va_parentid;
  uint32_t_0 va_fsid;
  uint64_t_0 va_filerev;
  uint32_t_0 va_gen;
  uint32_t_0 va_encoding;
  vtype va_type;
  char *va_name;
  guid_t va_uuuid;
  guid_t va_guuid;
  uint64_t_0 va_nchildren;
  uint64_t_0 va_dirlinkcount;
  void *va_reserved1;
  timespec va_addedtime;
  uint32_t_0 va_dataprotect_class;
  uint32_t_0 va_dataprotect_flags;
  uint32_t_0 va_document_id;
  uint32_t_0 va_devid;
  uint32_t_0 va_objtype;
  uint32_t_0 va_objtag;
  uint32_t_0 va_user_access;
  uint8_t_0 va_finderinfo[32];
  uint64_t_0 va_rsrc_length;
  uint64_t_0 va_rsrc_alloc;
  fsid_t va_fsid64;
  uint32_t_0 va_write_gencount;
  uint64_t_0 va_private_size;
};

/* 10102 */
typedef OpaqueDTEntryIterator *DTEntryIterator;

/* 10103 */
typedef OpaqueDTPropertyIterator *DTPropertyIterator;

/* 10104 */
typedef char DTEntryNameBuf[64];

/* 10105 */
typedef boolean_t (*argsep_func_t)(char);

/* 10106 */
typedef PE_state PE_state_t;

/* 10107 */
struct PE_state
{
  boolean_t initialized;
  PE_Video_0 video;
  void *deviceTreeHead;
  void *bootArgs;
};

/* 10108 */
typedef clock_frequency_info_t clock_frequency_info_t_0;

/* 10109 */
struct clock_frequency_info_t
{
  unsigned __int64 bus_clock_rate_hz;
  unsigned __int64 cpu_clock_rate_hz;
  unsigned __int64 dec_clock_rate_hz;
  unsigned __int64 bus_clock_rate_num;
  unsigned __int64 bus_clock_rate_den;
  unsigned __int64 bus_to_cpu_rate_num;
  unsigned __int64 bus_to_cpu_rate_den;
  unsigned __int64 bus_to_dec_rate_num;
  unsigned __int64 bus_to_dec_rate_den;
  unsigned __int64 timebase_frequency_hz;
  unsigned __int64 timebase_frequency_num;
  unsigned __int64 timebase_frequency_den;
  unsigned __int64 bus_frequency_hz;
  unsigned __int64 bus_frequency_min_hz;
  unsigned __int64 bus_frequency_max_hz;
  unsigned __int64 cpu_frequency_hz;
  unsigned __int64 cpu_frequency_min_hz;
  unsigned __int64 cpu_frequency_max_hz;
  unsigned __int64 prf_frequency_hz;
  unsigned __int64 prf_frequency_min_hz;
  unsigned __int64 prf_frequency_max_hz;
  unsigned __int64 mem_frequency_hz;
  unsigned __int64 mem_frequency_min_hz;
  unsigned __int64 mem_frequency_max_hz;
  unsigned __int64 fix_frequency_hz;
};

/* 10110 */
typedef boot_icon_element boot_icon_element_0;

/* 10111 */
struct boot_icon_element
{
  unsigned int width;
  unsigned int height;
  int y_offset_from_center;
  unsigned int data_size;
  unsigned int __reserved1[4];
  unsigned __int8 data[];
};

/* 10112 */
typedef void (*timebase_callback_func)(timebase_freq_t *);

/* 10113 */
struct timebase_freq_t
{
  unsigned __int64 timebase_num;
  unsigned __int64 timebase_den;
};

/* 10114 */
typedef boot_progress_element boot_progress_element_0;

/* 10115 */
struct boot_progress_element
{
  unsigned int width;
  unsigned int height;
  int yOffset;
  unsigned int res[5];
  unsigned __int8 data[];
};

/* 10116 */
typedef i386_interrupt_handler i386_interrupt_handler_t;

/* 10117 */
struct i386_interrupt_handler
{
  IOInterruptHandler handler;
  void *nub;
  void *target;
  void *refCon;
};

/* 10118 */
struct pe_serial_functions
{
  void (*uart_init)(void);
  void (*uart_set_baud_rate)(int, uint32_t_0);
  int (*tr0)(void);
  void (*td0)(int);
  int (*rr0)(void);
  int (*rd0)(void);
};

/* 10119 */
enum $D9662C4785AEB80A3C9FF04FC7AF7B46 : __int32
{
  WQ_EXITING_0 = 0x1,
  WQ_PROC_SUSPENDED_0 = 0x2,
  WQ_DEATH_CALL_SCHEDULED_0 = 0x4,
  WQ_DELAYED_CALL_SCHEDULED_0 = 0x10,
  WQ_DELAYED_CALL_PENDED_0 = 0x20,
  WQ_IMMEDIATE_CALL_SCHEDULED_0 = 0x40,
  WQ_IMMEDIATE_CALL_PENDED_0 = 0x80,
};

/* 10120 */
struct __attribute__((aligned(16))) workqueue_0
{
  thread_call_t wq_delayed_call;
  thread_call_t wq_immediate_call;
  thread_call_t wq_death_call;
  turnstile *wq_turnstile;
  lck_spin_t wq_lock;
  uint64_t_0 wq_thread_call_last_run;
  os_refcnt wq_refcnt;
  workq_state_flags_t_0 wq_flags;
  uint32_t_0 wq_fulfilled;
  uint32_t_0 wq_creations;
  uint32_t_0 wq_timer_interval;
  uint32_t_0 wq_event_manager_priority;
  uint32_t_0 wq_reqcount;
  uint16_t wq_thdying_count;
  uint16_t wq_threads_scheduled;
  uint16_t wq_constrained_threads_scheduled;
  uint16_t wq_nthreads;
  uint16_t wq_thidlecount;
  uint16_t wq_thscheduled_count[7];
  wq_thactive_t wq_thactive;
  uint64_t_0 wq_lastblocked_ts[6];
  proc *wq_proc;
  uthread *wq_creator;
  thread_t wq_turnstile_updater;
  workq_uthread_head wq_thrunlist;
  workq_uthread_head wq_thnewlist;
  workq_uthread_head wq_thidlelist;
  priority_queue wq_overcommit_queue;
  priority_queue wq_constrained_queue;
  priority_queue wq_special_queue;
  workq_threadreq_t wq_event_manager_threadreq;
};

/* 10121 */
typedef $D9662C4785AEB80A3C9FF04FC7AF7B46 workq_state_flags_t_0;

/* 10122 */
typedef __socket *socket_t_0;

/* 10123 */
struct __socket;

/* 10124 */
typedef mac_policy_list mac_policy_list_t;

/* 10125 */
struct mac_policy_list
{
  u_int numloaded;
  u_int max;
  u_int maxindex;
  u_int staticmax;
  u_int chunks;
  u_int freehint;
  mac_policy_list_element *entries;
};

/* 10126 */
struct mac_policy_list_element
{
  mac_policy_conf *mpc;
};

/* 10127 */
struct mac_label_element_list_t
{
  mac_label_element *lh_first;
};

/* 10128 */
struct mac_label_element
{
  char mle_name[32];
  mac_label_listeners_t mle_listeners;
  mac_label_element::$ECE851D633C64F4735E6730EE5B22193 mle_list;
};

/* 10129 */
struct mac_label_listeners_t
{
  mac_label_listener *lh_first;
};

/* 10130 */
struct mac_label_listener
{
  mac_policy_handle_t mll_handle;
  mac_label_listener::$10908C9A44E354331DD15933C684DD21 mll_list;
};

/* 10131 */
struct mac_label_listener::$10908C9A44E354331DD15933C684DD21
{
  mac_label_listener *le_next;
  mac_label_listener **le_prev;
};

/* 10132 */
struct mac_label_element::$ECE851D633C64F4735E6730EE5B22193
{
  mac_label_element *le_next;
  mac_label_element **le_prev;
};

/* 10133 */
struct mac_module_data_list
{
  unsigned int count;
  unsigned int type;
  mac_module_data_element list[1];
};

/* 10134 */
struct __mac_get_pid_args
{
  pid_t pid;
  char pid_r_[4];
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10135 */
struct __mac_get_proc_args
{
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10136 */
struct __mac_set_proc_args
{
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10137 */
struct __mac_get_fd_args
{
  int fd;
  char fd_r_[4];
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10138 */
struct __mac_get_file_args
{
  user_addr_t path_p;
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10139 */
struct __mac_get_link_args
{
  user_addr_t path_p;
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10140 */
struct __mac_set_fd_args
{
  int fd;
  char fd_r_[4];
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10141 */
struct __mac_set_file_args
{
  user_addr_t path_p;
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10142 */
struct __mac_set_link_args
{
  user_addr_t path_p;
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10143 */
struct __mac_syscall_args
{
  user_addr_t policy;
  int call;
  char call_r_[4];
  user_addr_t arg;
  char arg_r_[];
};

/* 10144 */
struct __mac_get_mount_args
{
  user_addr_t path;
  user_addr_t mac_p;
  char mac_p_r_[];
};

/* 10145 */
struct pshminfo_0
{
  unsigned int pshm_flags;
  unsigned int pshm_usecount;
  off_t pshm_length;
  mode_t pshm_mode;
  uid_t pshm_uid;
  gid_t pshm_gid;
  char pshm_name[32];
  void *pshm_memobject;
  label *pshm_label;
};

/* 10146 */
typedef xcpm_callbacks xcpm_callbacks_t;

/* 10147 */
struct xcpm_callbacks
{
  int version;
  void (*getPerfCtlMSR)(uint64_t_0 *);
  void (*setPerfCtlMSR)(uint64_t_0);
  void (*getEnergyPerfBiasMSR)(uint64_t_0 *);
  void (*setEnergyPerfBiasMSR)(uint64_t_0);
  void (*getTSCDeadline)(uint64_t_0 *);
  void (*setTSCDeadline)(uint64_t_0);
  void (*mwaitInstr)(uint32_t_0, uint32_t_0, uint32_t_0, uint32_t_0, uint32_t_0 *);
  void (*monitorInstr)(uintptr_t);
};

/* 10148 */
typedef unsigned __int8 des_cblock[8];

/* 10149 */
struct des3_ecb_key_schedule
{
  ccecb_ctx enc[48];
  ccecb_ctx dec[48];
};

/* 10150 */
struct des_ecb_key_schedule
{
  ccecb_ctx enc[16];
  ccecb_ctx dec[16];
};

/* 10151 */
struct __attribute__((aligned(8))) ccchacha20poly1305_ctx_0
{
  ccchacha20_ctx_0 chacha20_ctx;
  ccpoly1305_ctx_0 poly1305_ctx;
  uint64_t_0 aad_nbytes;
  uint64_t_0 text_nbytes;
  uint8_t_0 state;
};

/* 10152 */
struct ccchacha20_ctx_0
{
  uint32_t_0 state[16];
  uint8_t_0 buffer[64];
  size_t leftover;
};

/* 10153 */
struct ccpoly1305_ctx_0
{
  uint32_t_0 r0;
  uint32_t_0 r1;
  uint32_t_0 r2;
  uint32_t_0 r3;
  uint32_t_0 r4;
  uint32_t_0 s1;
  uint32_t_0 s2;
  uint32_t_0 s3;
  uint32_t_0 s4;
  uint32_t_0 h0;
  uint32_t_0 h1;
  uint32_t_0 h2;
  uint32_t_0 h3;
  uint32_t_0 h4;
  uint8_t_0 buf[16];
  size_t buf_used;
  uint8_t_0 key[16];
};

/* 10154 */
typedef ccchacha20poly1305_ctx_0 chacha20poly1305_ctx_0;

/* 10155 */
union __attribute__((aligned(8))) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 10156 */
union __attribute__((aligned(16))) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 10157 */
struct __m128d
{
  double m128d_f64[2];
};

/* 10158 */
union __attribute__((aligned(16))) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 10159 */
union __attribute__((aligned(32))) __m256
{
  float m256_f32[8];
};

/* 10160 */
union __attribute__((aligned(32))) __m256d
{
  double m256d_f64[4];
};

/* 10161 */
union __attribute__((aligned(32))) __m256i
{
  __int8 m256i_i8[32];
  __int16 m256i_i16[16];
  __int32 m256i_i32[8];
  __int64 m256i_i64[4];
  unsigned __int8 m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned __int32 m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

